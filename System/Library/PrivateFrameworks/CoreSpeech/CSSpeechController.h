//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CoreSpeech/CSAudioAlertProvidingDelegate-Protocol.h>
#import <CoreSpeech/CSAudioConverterDelegate-Protocol.h>
#import <CoreSpeech/CSAudioDecoderDelegate-Protocol.h>
#import <CoreSpeech/CSAudioSessionControllerDelegate-Protocol.h>
#import <CoreSpeech/CSAudioSessionProvidingDelegate-Protocol.h>
#import <CoreSpeech/CSAudioStreamProvidingDelegate-Protocol.h>
#import <CoreSpeech/CSContinuousVoiceTriggerDelegate-Protocol.h>
#import <CoreSpeech/CSEndpointAnalyzerImplDelegate-Protocol.h>
#import <CoreSpeech/CSLanguageCodeUpdateMonitorDelegate-Protocol.h>
#import <CoreSpeech/CSSmartSiriVolumeControllerDelegate-Protocol.h>
#import <CoreSpeech/CSSpeechManagerDelegate-Protocol.h>
#import <CoreSpeech/CSXPCClientDelegate-Protocol.h>
#import <CoreSpeech/SOClockAlarmListening-Protocol.h>
#import <CoreSpeech/SOClockTimerListening-Protocol.h>
#import <CoreSpeech/SOMediaNowPlayingListening-Protocol.h>

@class CSAudioConverter, CSAudioDeviceInfo, CSAudioPowerMeter, CSAudioRecordContext, CSAudioSampleRateConverter, CSAudioSessionController, CSAudioStream, CSAudioZeroCounter, CSEndpointerProxy, CSLanguageDetector, CSPlainAudioFileWriter, CSSACInfoMonitor, CSSelectiveChannelAudioFileWriter, CSSmartSiriVolumeController, CSSpeechEndHostTimeEstimator, CSStopRecordingOptions, CSVolumeMonitor, CSXPCClient, CSXPCClientFactory, NSDictionary, NSMutableDictionary, NSString, NSUUID, SOClockAlarmObserver, SOClockTimerObserver, SOMediaNowPlayingObserver;
@protocol CSAudioAlertProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioSessionProviding, CSAudioStreamProviding, CSEndpointAnalyzer, CSLanguageDetectorDelegate, CSSpeakerIdentificationDelegate, CSSpeechControllerDelegate, OS_dispatch_group, OS_dispatch_queue;

@interface CSSpeechController : NSObject <CSAudioConverterDelegate, CSSmartSiriVolumeControllerDelegate, CSAudioStreamProvidingDelegate, CSAudioAlertProvidingDelegate, CSAudioSessionControllerDelegate, CSAudioDecoderDelegate, CSEndpointAnalyzerImplDelegate, CSLanguageCodeUpdateMonitorDelegate, SOMediaNowPlayingListening, SOClockAlarmListening, SOClockTimerListening, CSXPCClientDelegate, CSAudioSessionProvidingDelegate, CSSpeechManagerDelegate, CSContinuousVoiceTriggerDelegate>
{
    NSObject<OS_dispatch_queue> *_targetQueue;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_queue;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_contextResetQueue;	// 24 = 0x18
    CSAudioConverter *_opusAudioConverter;	// 32 = 0x20
    CSAudioConverter *_narrowBandOpusConverter;	// 40 = 0x28
    CSAudioConverter *_audioConverter;	// 48 = 0x30
    CSAudioSampleRateConverter *_downsampler;	// 56 = 0x38
    NSDictionary *_requestedRecordSettings;	// 64 = 0x40
    NSDictionary *_lastVoiceTriggerInfo;	// 72 = 0x48
    NSDictionary *_lastRTSTriggerInfo;	// 80 = 0x50
    CSAudioZeroCounter *_continuousZeroCounter;	// 88 = 0x58
    NSObject<OS_dispatch_queue> *_audibleFeedbackQueue;	// 96 = 0x60
    NSObject<OS_dispatch_group> *_twoShotAudibleFeedbackDecisionGroup;	// 104 = 0x68
    _Bool _supportPhatic;	// 112 = 0x70
    _Bool _supportHearstVoiceTrigger;	// 113 = 0x71
    _Bool _supportTriagleModeSessionActivationRetry;	// 114 = 0x72
    _Bool _supportSessionActivateDelay;	// 115 = 0x73
    _Bool _supportLazySessionActivtion;	// 116 = 0x74
    _Bool _shouldDisableEncoding;	// 117 = 0x75
    _Bool _isOpus;	// 118 = 0x76
    _Bool _isSiriClientListening;	// 119 = 0x77
    _Bool _isNarrowBand;	// 120 = 0x78
    _Bool _isAudioSessionActivated;	// 121 = 0x79
    _Bool _deviceRoleIsStereo;	// 122 = 0x7a
    _Bool _twoShotNotificationEnabled;	// 123 = 0x7b
    _Bool _isMediaPlaying;	// 124 = 0x7c
    _Bool _isAlarmPlaying;	// 125 = 0x7d
    _Bool _isTimerPlaying;	// 126 = 0x7e
    _Bool _isSoundPlaying;	// 127 = 0x7f
    _Bool _isRemoteVADAvailableStream;	// 128 = 0x80
    _Bool _myriadPreventingTwoShotFeedback;	// 129 = 0x81
    _Bool _needsPostGain;	// 130 = 0x82
    _Bool _shouldUseLanguageDetectorForCurrentRequest;	// 131 = 0x83
    _Bool _didDeliverLastBuffer;	// 132 = 0x84
    _Bool _didDeliverFirstSpeechPacket;	// 133 = 0x85
    _Bool _canPerformDelayedStop;	// 134 = 0x86
    _Bool _setupStarted;	// 135 = 0x87
    float _cachedAvgPower;	// 136 = 0x88
    float _cachedPeakPower;	// 140 = 0x8c
    id <CSSpeechControllerDelegate> _delegate;	// 144 = 0x90
    id <CSLanguageDetectorDelegate> _languageDetectorDelegate;	// 152 = 0x98
    id <CSSpeakerIdentificationDelegate> _speakerIdDelegate;	// 160 = 0xa0
    CSEndpointerProxy *_endpointerProxy;	// 168 = 0xa8
    CSAudioRecordContext *_audioRecordContext;	// 176 = 0xb0
    CSAudioStream *_audioStream;	// 184 = 0xb8
    id <CSAudioStreamProviding> _streamProvider;	// 192 = 0xc0
    id <CSAudioSessionProviding> _sessionProvider;	// 200 = 0xc8
    id <CSAudioAlertProviding> _alertProvider;	// 208 = 0xd0
    id <CSAudioMeterProviding> _audioMeterProvider;	// 216 = 0xd8
    id <CSAudioMetricProviding> _audioMetricProvider;	// 224 = 0xe0
    CSPlainAudioFileWriter *_audioFileWriter;	// 232 = 0xe8
    CSSelectiveChannelAudioFileWriter *_serverLoggingWriter;	// 240 = 0xf0
    CSSmartSiriVolumeController *_volumeController;	// 248 = 0xf8
    NSString *_recordEventUUID;	// 256 = 0x100
    NSDictionary *_speakerRecognitionScores;	// 264 = 0x108
    unsigned long long _activeChannel;	// 272 = 0x110
    CSSpeechEndHostTimeEstimator *_speechEndHostTimeEstimator;	// 280 = 0x118
    NSString *_bundleIdFromDictation;	// 288 = 0x120
    CSLanguageDetector *_languageDetector;	// 296 = 0x128
    NSUUID *_pendingAudioSessionActivationToken;	// 304 = 0x130
    CDUnknownBlockType _pendingAudioSessionActivationCompletion;	// 312 = 0x138
    unsigned long long _pendingAudioSessionActivationReason;	// 320 = 0x140
    double _audioSessionActivationDelay;	// 328 = 0x148
    CSXPCClientFactory *_xpcClientFactory;	// 336 = 0x150
    CSXPCClient *_xpcClient;	// 344 = 0x158
    CSXPCClient *_duckAudioXPCClient;	// 352 = 0x160
    CSAudioPowerMeter *_powerMeter;	// 360 = 0x168
    NSString *_requestMHUUID;	// 368 = 0x170
    CSStopRecordingOptions *_requestedStopRecordingOptions;	// 376 = 0x178
    unsigned long long _numTrailingSamplesAfterSchedulingStop;	// 384 = 0x180
    unsigned long long _maxAllowedTrailingSamplesAfterSchedulingStop;	// 392 = 0x188
    NSMutableDictionary *_decodersForTV;	// 400 = 0x190
    unsigned long long _decoderProcessedSampleCountForTV;	// 408 = 0x198
    NSString *_logEventUUID;	// 416 = 0x1a0
    NSString *_ssvLogFilePath;	// 424 = 0x1a8
    NSObject<OS_dispatch_queue> *_mediaPlayingObserverQueue;	// 432 = 0x1b0
    SOMediaNowPlayingObserver *_mediaPlayingMonitor;	// 440 = 0x1b8
    SOClockAlarmObserver *_alarmMonitor;	// 448 = 0x1c0
    SOClockTimerObserver *_timerMonitor;	// 456 = 0x1c8
    CSVolumeMonitor *_volumeMonitor;	// 464 = 0x1d0
    CSAudioDeviceInfo *_audioDeviceInfo;	// 472 = 0x1d8
    NSUUID *_endpointId;	// 480 = 0x1e0
    CSAudioSessionController *_audioSessionController;	// 488 = 0x1e8
    CSSACInfoMonitor *_sacInfoMonitor;	// 496 = 0x1f0
}

+ (_Bool)isSmartSiriVolumeAvailable;	// IMP=0x000000000004df53
+ (id)sharedController;	// IMP=0x000000000003fc31
- (void).cxx_destruct;	// IMP=0x000000000004f929
@property(retain, nonatomic) CSSACInfoMonitor *sacInfoMonitor; // @synthesize sacInfoMonitor=_sacInfoMonitor;
@property(retain, nonatomic) CSAudioSessionController *audioSessionController; // @synthesize audioSessionController=_audioSessionController;
@property(nonatomic) _Bool setupStarted; // @synthesize setupStarted=_setupStarted;
@property(readonly, copy, nonatomic) NSUUID *endpointId; // @synthesize endpointId=_endpointId;
@property(retain, nonatomic) CSAudioDeviceInfo *audioDeviceInfo; // @synthesize audioDeviceInfo=_audioDeviceInfo;
@property(retain, nonatomic) CSVolumeMonitor *volumeMonitor; // @synthesize volumeMonitor=_volumeMonitor;
@property(retain, nonatomic) SOClockTimerObserver *timerMonitor; // @synthesize timerMonitor=_timerMonitor;
@property(retain, nonatomic) SOClockAlarmObserver *alarmMonitor; // @synthesize alarmMonitor=_alarmMonitor;
@property(retain, nonatomic) SOMediaNowPlayingObserver *mediaPlayingMonitor; // @synthesize mediaPlayingMonitor=_mediaPlayingMonitor;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *mediaPlayingObserverQueue; // @synthesize mediaPlayingObserverQueue=_mediaPlayingObserverQueue;
@property(retain, nonatomic) NSString *ssvLogFilePath; // @synthesize ssvLogFilePath=_ssvLogFilePath;
@property(retain, nonatomic) NSString *logEventUUID; // @synthesize logEventUUID=_logEventUUID;
@property(nonatomic) unsigned long long decoderProcessedSampleCountForTV; // @synthesize decoderProcessedSampleCountForTV=_decoderProcessedSampleCountForTV;
@property(retain, nonatomic) NSMutableDictionary *decodersForTV; // @synthesize decodersForTV=_decodersForTV;
@property(nonatomic) unsigned long long maxAllowedTrailingSamplesAfterSchedulingStop; // @synthesize maxAllowedTrailingSamplesAfterSchedulingStop=_maxAllowedTrailingSamplesAfterSchedulingStop;
@property(nonatomic) unsigned long long numTrailingSamplesAfterSchedulingStop; // @synthesize numTrailingSamplesAfterSchedulingStop=_numTrailingSamplesAfterSchedulingStop;
@property(retain, nonatomic) CSStopRecordingOptions *requestedStopRecordingOptions; // @synthesize requestedStopRecordingOptions=_requestedStopRecordingOptions;
@property(nonatomic) _Bool canPerformDelayedStop; // @synthesize canPerformDelayedStop=_canPerformDelayedStop;
@property(retain, nonatomic) NSString *requestMHUUID; // @synthesize requestMHUUID=_requestMHUUID;
@property(nonatomic) _Bool didDeliverFirstSpeechPacket; // @synthesize didDeliverFirstSpeechPacket=_didDeliverFirstSpeechPacket;
@property(nonatomic) _Bool didDeliverLastBuffer; // @synthesize didDeliverLastBuffer=_didDeliverLastBuffer;
@property(retain, nonatomic) CSAudioPowerMeter *powerMeter; // @synthesize powerMeter=_powerMeter;
@property(nonatomic) float cachedPeakPower; // @synthesize cachedPeakPower=_cachedPeakPower;
@property(nonatomic) float cachedAvgPower; // @synthesize cachedAvgPower=_cachedAvgPower;
@property(retain, nonatomic) CSXPCClient *duckAudioXPCClient; // @synthesize duckAudioXPCClient=_duckAudioXPCClient;
@property(retain, nonatomic) CSXPCClient *xpcClient; // @synthesize xpcClient=_xpcClient;
@property(retain, nonatomic) CSXPCClientFactory *xpcClientFactory; // @synthesize xpcClientFactory=_xpcClientFactory;
@property(nonatomic) double audioSessionActivationDelay; // @synthesize audioSessionActivationDelay=_audioSessionActivationDelay;
@property(nonatomic) unsigned long long pendingAudioSessionActivationReason; // @synthesize pendingAudioSessionActivationReason=_pendingAudioSessionActivationReason;
@property(copy, nonatomic) CDUnknownBlockType pendingAudioSessionActivationCompletion; // @synthesize pendingAudioSessionActivationCompletion=_pendingAudioSessionActivationCompletion;
@property(retain, nonatomic) NSUUID *pendingAudioSessionActivationToken; // @synthesize pendingAudioSessionActivationToken=_pendingAudioSessionActivationToken;
@property(nonatomic) _Bool shouldUseLanguageDetectorForCurrentRequest; // @synthesize shouldUseLanguageDetectorForCurrentRequest=_shouldUseLanguageDetectorForCurrentRequest;
@property(retain, nonatomic) CSLanguageDetector *languageDetector; // @synthesize languageDetector=_languageDetector;
@property(retain, nonatomic) NSString *bundleIdFromDictation; // @synthesize bundleIdFromDictation=_bundleIdFromDictation;
@property(retain, nonatomic) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator; // @synthesize speechEndHostTimeEstimator=_speechEndHostTimeEstimator;
@property(nonatomic) _Bool needsPostGain; // @synthesize needsPostGain=_needsPostGain;
@property(nonatomic) _Bool myriadPreventingTwoShotFeedback; // @synthesize myriadPreventingTwoShotFeedback=_myriadPreventingTwoShotFeedback;
@property(nonatomic) _Bool isRemoteVADAvailableStream; // @synthesize isRemoteVADAvailableStream=_isRemoteVADAvailableStream;
@property(nonatomic) _Bool isSoundPlaying; // @synthesize isSoundPlaying=_isSoundPlaying;
@property(nonatomic) _Bool isTimerPlaying; // @synthesize isTimerPlaying=_isTimerPlaying;
@property(nonatomic) _Bool isAlarmPlaying; // @synthesize isAlarmPlaying=_isAlarmPlaying;
@property(nonatomic) _Bool isMediaPlaying; // @synthesize isMediaPlaying=_isMediaPlaying;
@property(nonatomic) _Bool twoShotNotificationEnabled; // @synthesize twoShotNotificationEnabled=_twoShotNotificationEnabled;
@property(nonatomic) unsigned long long activeChannel; // @synthesize activeChannel=_activeChannel;
@property(retain, nonatomic) NSDictionary *speakerRecognitionScores; // @synthesize speakerRecognitionScores=_speakerRecognitionScores;
@property(nonatomic) _Bool deviceRoleIsStereo; // @synthesize deviceRoleIsStereo=_deviceRoleIsStereo;
@property(nonatomic) _Bool isAudioSessionActivated; // @synthesize isAudioSessionActivated=_isAudioSessionActivated;
@property(retain, nonatomic) NSString *recordEventUUID; // @synthesize recordEventUUID=_recordEventUUID;
@property(retain, nonatomic) CSSmartSiriVolumeController *volumeController; // @synthesize volumeController=_volumeController;
@property(retain, nonatomic) CSSelectiveChannelAudioFileWriter *serverLoggingWriter; // @synthesize serverLoggingWriter=_serverLoggingWriter;
@property(retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter; // @synthesize audioFileWriter=_audioFileWriter;
@property(nonatomic) _Bool isNarrowBand; // @synthesize isNarrowBand=_isNarrowBand;
@property(nonatomic) _Bool isSiriClientListening; // @synthesize isSiriClientListening=_isSiriClientListening;
@property(nonatomic) _Bool isOpus; // @synthesize isOpus=_isOpus;
@property(nonatomic) _Bool shouldDisableEncoding; // @synthesize shouldDisableEncoding=_shouldDisableEncoding;
@property(retain, nonatomic) id <CSAudioMetricProviding> audioMetricProvider; // @synthesize audioMetricProvider=_audioMetricProvider;
@property(retain, nonatomic) id <CSAudioMeterProviding> audioMeterProvider; // @synthesize audioMeterProvider=_audioMeterProvider;
@property(retain, nonatomic) id <CSAudioAlertProviding> alertProvider; // @synthesize alertProvider=_alertProvider;
@property(retain, nonatomic) id <CSAudioSessionProviding> sessionProvider; // @synthesize sessionProvider=_sessionProvider;
@property(retain, nonatomic) id <CSAudioStreamProviding> streamProvider; // @synthesize streamProvider=_streamProvider;
@property(retain, nonatomic) CSAudioStream *audioStream; // @synthesize audioStream=_audioStream;
@property(retain, nonatomic) CSAudioRecordContext *audioRecordContext; // @synthesize audioRecordContext=_audioRecordContext;
@property(retain, nonatomic) CSEndpointerProxy *endpointerProxy; // @synthesize endpointerProxy=_endpointerProxy;
@property(nonatomic) _Bool supportLazySessionActivtion; // @synthesize supportLazySessionActivtion=_supportLazySessionActivtion;
@property(nonatomic) _Bool supportSessionActivateDelay; // @synthesize supportSessionActivateDelay=_supportSessionActivateDelay;
@property(nonatomic) _Bool supportTriagleModeSessionActivationRetry; // @synthesize supportTriagleModeSessionActivationRetry=_supportTriagleModeSessionActivationRetry;
@property(nonatomic) _Bool supportHearstVoiceTrigger; // @synthesize supportHearstVoiceTrigger=_supportHearstVoiceTrigger;
@property(nonatomic) _Bool supportPhatic; // @synthesize supportPhatic=_supportPhatic;
@property(nonatomic) __weak id <CSSpeakerIdentificationDelegate> speakerIdDelegate; // @synthesize speakerIdDelegate=_speakerIdDelegate;
@property(nonatomic) __weak id <CSLanguageDetectorDelegate> languageDetectorDelegate; // @synthesize languageDetectorDelegate=_languageDetectorDelegate;
@property(nonatomic) __weak id <CSSpeechControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)clockTimerObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;	// IMP=0x000000000004f168
- (void)clockTimerObserver:(id)arg1 timerDidDismiss:(id)arg2;	// IMP=0x000000000004f084
- (void)clockTimerObserver:(id)arg1 timerDidFire:(id)arg2;	// IMP=0x000000000004ef9d
- (void)clockAlarmObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;	// IMP=0x000000000004ef97
- (void)clockAlarmObserver:(id)arg1 alarmDidDismiss:(id)arg2;	// IMP=0x000000000004eeb3
- (void)clockAlarmObserver:(id)arg1 alarmDidFire:(id)arg2;	// IMP=0x000000000004edcc
- (void)nowPlayingObserver:(id)arg1 playbackStateDidChangeFrom:(long long)arg2 to:(long long)arg3 lastPlayingDate:(id)arg4;	// IMP=0x000000000004ec9d
- (void)_setTimerIsPlaying:(_Bool)arg1;	// IMP=0x000000000004eb83
- (void)_setAlarmIsPlaying:(_Bool)arg1;	// IMP=0x000000000004ea69
- (void)_setMediaPlaybackState:(_Bool)arg1 isInterrupted:(_Bool)arg2;	// IMP=0x000000000004e90e
- (void)_teardownAudioProviderIfNeeded;	// IMP=0x000000000004e771
- (void)CSXPCClient:(id)arg1 didDisconnect:(_Bool)arg2;	// IMP=0x000000000004e5ad
- (void)_setSoundPlayingState;	// IMP=0x000000000004e4c5
- (void)endWaitingForMyriadWithDecision:(unsigned long long)arg1;	// IMP=0x000000000004e400
- (void)beginWaitingForMyriad;	// IMP=0x000000000004e359
- (void)setLanguageDetectorInteractionID:(id)arg1;	// IMP=0x000000000004e2ad
- (void)cancelCurrentLanguageDetectorRequest;	// IMP=0x000000000004e1b9
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)arg1;	// IMP=0x000000000004e1a0
- (void)setPermanentVolumeOffsetWithDirection:(_Bool)arg1;	// IMP=0x000000000004e12c
- (void)setSmartSiriVolumeDirection:(_Bool)arg1;	// IMP=0x000000000004e0b8
- (void)setSmartSiriVolumePercentage:(float)arg1;	// IMP=0x000000000004e047
- (float)getSmartSiriVolume;	// IMP=0x000000000004e030
- (float)getVolumeForTTSType:(unsigned long long)arg1;	// IMP=0x000000000004df81
- (_Bool)isSmartSiriVolumeAvailable;	// IMP=0x000000000004df6a
- (void)shouldAcceptEagerResultForDuration:(double)arg1 resultsCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000004df3a
- (void)updateEndpointerDelayedTrigger:(_Bool)arg1;	// IMP=0x000000000004df21
- (void)updateEndpointerThreshold:(float)arg1;	// IMP=0x000000000004df08
- (id)endpointerModelVersion;	// IMP=0x000000000004dde5
- (double)lastEndOfVoiceActivityTime;	// IMP=0x000000000004ddcc
- (unsigned long long)_phaticPlaybackReason;	// IMP=0x000000000004ddc1
- (float)_scheduledPhaticDelay;	// IMP=0x000000000004ddb3
- (_Bool)_shouldSchedulePhaticAtStartRecording;	// IMP=0x000000000004dd43
- (_Bool)_canPlayPhaticDuringMediaPlayback;	// IMP=0x000000000004dd2a
- (id)_contextToString:(id)arg1;	// IMP=0x000000000004dc76
- (void)_deviceAudioLoggingWithFileWriter:(id)arg1;	// IMP=0x000000000004dbf4
- (id)_getSpeechIdentifier;	// IMP=0x000000000004dadb
- (id)_fetchFallbackAudioSessionReleaseProviding;	// IMP=0x000000000004da98
- (void)_setupAudioProviderFromXPC:(id)arg1;	// IMP=0x000000000004d9b1
- (_Bool)_createAudioProviderFromXPCWithContext:(id)arg1;	// IMP=0x000000000004d7a1
- (_Bool)_fetchAudioProviderWithContext:(id)arg1;	// IMP=0x000000000004d6fa
- (id)_fetchAudioDecoderForTV:(unsigned int)arg1;	// IMP=0x000000000004d42c
- (void)_logRecordingStopErrorIfNeeded:(long long)arg1;	// IMP=0x000000000004d39f
- (_Bool)_shouldTrackLaunchLatency;	// IMP=0x000000000004d320
- (void)setEndpointerOperationMode:(long long)arg1;	// IMP=0x000000000004d307
- (void)processServerEndpointFeatures:(id)arg1;	// IMP=0x000000000004d2ee
- (void)resetEndpointer;	// IMP=0x000000000004d2d5
- (long long)_currentAudioRecorderSampleRate;	// IMP=0x000000000004d211
- (void)setEndpointAnalyzerDelegate:(id)arg1;	// IMP=0x000000000004d1f8
@property(readonly, nonatomic) id <CSEndpointAnalyzer> endpointAnalyzer;
- (void)fetchAudioMetricsWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000004d0b2
- (void)keywordDetectorDidDetectKeyword;	// IMP=0x000000000004cf74
- (void)endpointer:(id)arg1 detectedTwoShotAtTime:(double)arg2;	// IMP=0x000000000004cd3f
- (id)voiceTriggerInfo;	// IMP=0x000000000004cc6f
- (unsigned long long)outputReferenceChannel;	// IMP=0x000000000004cbb6
- (void)_createAudioPowerMeterIfNeeded;	// IMP=0x000000000004c9f2
- (float)averagePowerForOutputReference;	// IMP=0x000000000004c91f
- (float)peakPowerForOutputReference;	// IMP=0x000000000004c84c
- (float)averagePowerForChannel:(unsigned long long)arg1;	// IMP=0x000000000004c75d
- (float)peakPowerForChannel:(unsigned long long)arg1;	// IMP=0x000000000004c66e
- (void)updateMeters;	// IMP=0x000000000004c668
- (void)setMeteringEnabled:(_Bool)arg1;	// IMP=0x000000000004c59e
- (void)stopEndpointer;	// IMP=0x000000000004c504
- (_Bool)playRecordStartingAlertAndResetEndpointer;	// IMP=0x000000000004c43f
- (unsigned long long)alertStartTime;	// IMP=0x000000000004c3fb
- (_Bool)playAlertSoundForType:(long long)arg1;	// IMP=0x000000000004c32c
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;	// IMP=0x000000000004c22a
- (void)audioConverterDidConvertPackets:(id)arg1 packets:(id)arg2 durationInSec:(float)arg3 timestamp:(unsigned long long)arg4 arrivalTimestampToAudioRecorder:(unsigned long long)arg5;	// IMP=0x000000000004c04c
- (_Bool)_setupAudioConverter:(_Bool)arg1 isNarrowBand:(_Bool)arg2;	// IMP=0x000000000004bf7c
- (void)_setupDownsamplerIfNeeded;	// IMP=0x000000000004bf35
- (void)didTTSVolumeChange:(id)arg1 forReason:(unsigned long long)arg2;	// IMP=0x000000000004bd6a
- (void)audioSessionProvider:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x000000000004bb38
- (void)audioSessionProvider:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x000000000004b913
- (void)audioSessionProviderEndInterruption:(id)arg1;	// IMP=0x000000000004b763
- (void)audioSessionProviderBeginInterruption:(id)arg1 withContext:(id)arg2;	// IMP=0x000000000004b572
- (void)audioSessionProviderBeginInterruption:(id)arg1;	// IMP=0x000000000004b3c2
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;	// IMP=0x000000000004b1bd
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)arg2;	// IMP=0x000000000004b13e
- (void)audioSessionProvider:(id)arg1 didChangeContext:(_Bool)arg2;	// IMP=0x000000000004b0bf
- (void)audioSessionProvider:(id)arg1 providerInvalidated:(_Bool)arg2;	// IMP=0x000000000004af91
- (void)audioStreamProvider:(id)arg1 didHardwareConfigurationChange:(long long)arg2;	// IMP=0x000000000004add1
- (void)audioDecoderDidDecodePackets:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 timestamp:(unsigned long long)arg5 arrivalTimestampToAudioRecorder:(unsigned long long)arg6 wasBuffered:(_Bool)arg7 receivedNumChannels:(unsigned int)arg8;	// IMP=0x000000000004ac48
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;	// IMP=0x000000000004a895
- (void)_audioStreamProvdider:(id)arg1 audioBufferAvailable:(id)arg2;	// IMP=0x0000000000049a5d
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;	// IMP=0x000000000004976f
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectly:(long long)arg2;	// IMP=0x00000000000496b3
- (_Bool)_isDuckingAvailableRoute:(id)arg1;	// IMP=0x000000000004960d
- (void)_didStopForReason:(long long)arg1;	// IMP=0x0000000000048cb7
- (_Bool)_shouldFetchRaiseToSpeakInfo;	// IMP=0x0000000000048c9e
- (_Bool)_shouldFetchVoiceTriggerInfo;	// IMP=0x0000000000048c85
- (id)playbackRoute;	// IMP=0x0000000000048bb3
- (id)recordDeviceInfo;	// IMP=0x00000000000489ca
- (id)recordRoute;	// IMP=0x00000000000488f8
- (_Bool)_isRecordRouteBuiltinMic;	// IMP=0x0000000000048880
- (_Bool)isRecording;	// IMP=0x000000000004883c
- (_Bool)_shouldReportEstimatedSpeechEndHostTime;	// IMP=0x00000000000487f8
- (void)stopRecordingWithOptions:(id)arg1;	// IMP=0x0000000000048420
- (void)stopRecording;	// IMP=0x00000000000481aa
- (_Bool)startRecording:(id *)arg1;	// IMP=0x000000000004818e
- (_Bool)_shouldSetStartSampleCountForRTS;	// IMP=0x000000000004812c
- (_Bool)_shouldSetStartSampleCount;	// IMP=0x000000000004802e
- (_Bool)_shouldUseLanguageDetector:(id)arg1;	// IMP=0x0000000000047f27
- (void)_createLanguageDetectorIfNeeded;	// IMP=0x0000000000047ee7
- (void)_startPhaticDecision;	// IMP=0x00000000000472cf
- (_Bool)startRecordingWithSettings:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000454d8
- (id)_languageDetectorOptionFromSettings:(id)arg1;	// IMP=0x0000000000044b8e
- (void)_setupSpeakerRecognitionController;	// IMP=0x0000000000044b88
- (void)_refreshSpeakerRecognitionAssets;	// IMP=0x0000000000044b82
@property(nonatomic) _Bool duckOthersOption;
- (double)getRecordBufferDuration;	// IMP=0x0000000000044ae4
- (_Bool)setRecordBufferDuration:(double)arg1;	// IMP=0x0000000000044adc
- (void)setSynchronousCallbackEnabled:(_Bool)arg1;	// IMP=0x0000000000044ad6
- (struct AudioStreamBasicDescription)getLPCMAudioStreamBasicDescription;	// IMP=0x0000000000044a7c
- (id)recordSettings;	// IMP=0x00000000000447b1
- (void)releaseAudioSession:(unsigned long long)arg1;	// IMP=0x00000000000446a7
- (void)releaseAudioSession;	// IMP=0x00000000000445a3
- (void)reset;	// IMP=0x0000000000044524
- (void)resetAudioSession;	// IMP=0x000000000004444e
- (_Bool)prewarmAudioSession;	// IMP=0x0000000000044387
- (void)preheat;	// IMP=0x0000000000044308
- (_Bool)setCurrentRecordContext:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000043e31
- (void)_updateRecordContextIfNeeded:(id)arg1;	// IMP=0x0000000000043d69
- (_Bool)_doActivateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000000043b55
- (_Bool)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000000043997
- (_Bool)_lazyActivateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000000043375
- (void)_performPendingAudioSessionActivateForReason:(id)arg1;	// IMP=0x0000000000043140
- (void)_cancelPendingAudioSessionActivateForReason:(id)arg1;	// IMP=0x000000000004302e
- (void)_scheduleActivateAudioSessionWithDelay:(double)arg1 sessionActivateReason:(unsigned long long)arg2 scheduleReason:(id)arg3 validator:(CDUnknownBlockType)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x0000000000042a41
- (_Bool)_activateAudioSessionWithReason:(unsigned long long)arg1 delay:(double)arg2 delayRequested:(_Bool)arg3 error:(id *)arg4;	// IMP=0x0000000000042182
- (_Bool)_isDelayedDuckingSupportedContext;	// IMP=0x000000000004210e
- (_Bool)_fetchLastTriggerInfo;	// IMP=0x0000000000041e9a
- (_Bool)prepareRecordWithSettings:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000040e49
- (_Bool)_shouldResetContextAtPrepare;	// IMP=0x0000000000040e24
- (void)startController;	// IMP=0x0000000000040cb2
- (_Bool)initializeRecordSessionWithRecordContext:(id)arg1;	// IMP=0x0000000000040bc9
- (void)_initializeTimerState;	// IMP=0x0000000000040a13
- (void)_initializeAlarmState;	// IMP=0x000000000004085d
- (void)_initializeMediaPlayingState;	// IMP=0x00000000000406b6
- (id)_createTimerMonitor;	// IMP=0x0000000000040638
- (id)_createAlarmMonitor;	// IMP=0x00000000000405ba
- (id)_createMediaPlayingMonitor;	// IMP=0x00000000000404d2
- (id)initWithEndpointId:(id)arg1 xpcClientFactory:(id)arg2 endpointer:(id)arg3 continuousVoiceTrigger:(id)arg4 siriVolumeController:(id)arg5 mediaPlayingMonitor:(id)arg6 alarmMonitor:(id)arg7 timerMonitor:(id)arg8 sacInfoMonitor:(id)arg9 audioSessionController:(id)arg10 supportPhatic:(_Bool)arg11 supportHearstVoiceTrigger:(_Bool)arg12 supportTriagleModeSessionActivationRetry:(_Bool)arg13 supportSessionActivateDelay:(_Bool)arg14 supportLazySessionActivtion:(_Bool)arg15;	// IMP=0x000000000003fdae
- (id)initWithEndpointId:(id)arg1;	// IMP=0x000000000003fcae
- (id)init;	// IMP=0x000000000003fc9a

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

