//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <PrintKit/NSSecureCoding-Protocol.h>

@class NSArray, NSDictionary, NSMutableDictionary, NSNumber, NSString, NSURL, NSUUID, PKPaperList;

@interface PKPrinter : NSObject <NSSecureCoding>
{
    long long type;	// 8 = 0x8
    long long accessState;	// 16 = 0x10
    NSDictionary *printInfoSupported;	// 24 = 0x18
    struct _http_s *job_http;	// 32 = 0x20
    NSMutableDictionary *privateData;	// 40 = 0x28
    NSMutableDictionary *specialFeedOrientation;	// 48 = 0x30
    NSArray *printScalingSupported;	// 56 = 0x38
    NSArray *mandatoryJobAttributes;	// 64 = 0x40
    NSString *quotaManagementURL;	// 72 = 0x48
    int maxPDFKBytes;	// 80 = 0x50
    int maxJPEGKBytes;	// 84 = 0x54
    int maxJPEGXDimension;	// 88 = 0x58
    int maxJPEGYDimension;	// 92 = 0x5c
    int maxCopies;	// 96 = 0x60
    int maxDocumentPasswordLength;	// 100 = 0x64
    int preferred_landscape;	// 104 = 0x68
    int printerStateReasons;	// 108 = 0x6c
    int recentRssiValues[5];	// 112 = 0x70
    _Bool isLocal;	// 132 = 0x84
    _Bool hasIdentifyPrinterOp;	// 133 = 0x85
    _Bool connectionShouldNotBeTrusted;	// 134 = 0x86
    _Bool isFromMCProfile;	// 135 = 0x87
    long long identifyActionsSupported;	// 136 = 0x88
    NSString *name;	// 144 = 0x90
    long long kind;	// 152 = 0x98
    NSUUID *btleUUID;	// 160 = 0xa0
    long long btleMeasuredPower;	// 168 = 0xa8
    long long proximity;	// 176 = 0xb0
    long long _jobAccountIDSupport;	// 184 = 0xb8
    PKPaperList *_paperList;	// 192 = 0xc0
    NSArray *_trays;	// 200 = 0xc8
    NSArray *_jpegFeaturesSupported;	// 208 = 0xd0
    NSDictionary *_translations;	// 216 = 0xd8
}

+ (id)nameForHardcodedURI:(id)arg1;	// IMP=0x0000000000014f03
+ (id)hardcodedURIs;	// IMP=0x0000000000014d48
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000000f21a
+ (_Bool)printerLookupWithName:(id)arg1 andTimeout:(double)arg2;	// IMP=0x000000000000ee9e
+ (id)printerWithName:(id)arg1 discoveryTimeout:(double)arg2;	// IMP=0x000000000000ea94
+ (id)printerWithName:(id)arg1;	// IMP=0x000000000000e973
+ (id)defaultPrinter;	// IMP=0x000000000000e7db
+ (void)listenForPrinterNotifications;	// IMP=0x000000000000e746
+ (id)_ipp_to_data:(struct _ipp_s *)arg1;	// IMP=0x000000000001b2b2
+ (struct _ipp_s *)_data_to_ipp:(id)arg1;	// IMP=0x000000000001b1cb
+ (_Bool)uriMatchesMCProfileAdded:(id)arg1;	// IMP=0x000000000001b00f
+ (_Bool)mcProfilePrintersOnlyAllowed;	// IMP=0x000000000001afa8
+ (_Bool)ippsIsRequired;	// IMP=0x000000000001af43
+ (id)requiredPDL;	// IMP=0x000000000001ad38
+ (_Bool)urfIsOptional;	// IMP=0x000000000001ace9
+ (struct http_addrlist_s *)_createAddrList:(const char *)arg1 hostName:(const char *)arg2 port:(int)arg3;	// IMP=0x000000000001aa9f
+ (struct _ipp_s *)getAttributes:(const char **)arg1 count:(int)arg2 fromURI:(id)arg3;	// IMP=0x00000000000174b7
@property(retain) NSDictionary *translations; // @synthesize translations=_translations;
@property(retain) NSArray *jpegFeaturesSupported; // @synthesize jpegFeaturesSupported=_jpegFeaturesSupported;
@property(retain) NSArray *trays; // @synthesize trays=_trays;
@property(retain) PKPaperList *paperList; // @synthesize paperList=_paperList;
@property long long jobAccountIDSupport; // @synthesize jobAccountIDSupport=_jobAccountIDSupport;
@property long long proximity; // @synthesize proximity;
@property long long btleMeasuredPower; // @synthesize btleMeasuredPower;
@property(retain) NSUUID *btleUUID; // @synthesize btleUUID;
@property(readonly) long long type; // @synthesize type;
@property(readonly) _Bool hasIdentifyPrinterOp; // @synthesize hasIdentifyPrinterOp;
@property _Bool isLocal; // @synthesize isLocal;
@property(readonly) long long accessState; // @synthesize accessState;
@property(readonly) long long kind; // @synthesize kind;
@property(retain) NSString *name; // @synthesize name;
- (_Bool)supportsJobAccountID;	// IMP=0x0000000000016e44
- (void)setupWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000162bc
- (void)validatePassCode:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000015ca6
- (void)showPassCodeForSetupWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000015533
@property(readonly) _Bool setupSupportsPasswordScope;
@property(readonly) _Bool needsSetup;
- (void)reconfirmWithForce:(_Bool)arg1;	// IMP=0x0000000000014d23
- (void)removeCredentialsFromKeychain;	// IMP=0x0000000000014b26
- (void)cancelUnlock;	// IMP=0x0000000000014ae8
- (void)unlockWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000146fb
- (long long)startJob:(id)arg1 ofType:(id)arg2;	// IMP=0x0000000000014415
- (long long)sendData:(const char *)arg1 ofLength:(long long)arg2;	// IMP=0x00000000000143c5
- (long long)printURL:(id)arg1 ofType:(id)arg2 printSettings:(id)arg3;	// IMP=0x00000000000142bd
- (void)printURL:(id)arg1 ofType:(id)arg2 printSettings:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000136fe
- (void)finishJobCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000013697
- (long long)finishJob;	// IMP=0x0000000000013680
- (void)abortJobCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000013619
- (long long)abortJob;	// IMP=0x0000000000013602
- (void)doMedia2:(struct _ipp_s *)arg1;	// IMP=0x0000000000013545
- (id)matchedPaper:(id)arg1 preferBorderless:(_Bool)arg2 withDuplexMode:(id)arg3 didMatch:(_Bool *)arg4;	// IMP=0x00000000000134f1
- (id)papersForDocumentWithSize:(struct CGSize)arg1 scaleUpOnRoll:(_Bool)arg2 andDuplex:(_Bool)arg3;	// IMP=0x000000000001349c
- (id)papersForDocumentWithSize:(struct CGSize)arg1 andDuplex:(_Bool)arg2;	// IMP=0x0000000000013486
- (id)papersForPhotoWithSize:(struct CGSize)arg1;	// IMP=0x0000000000013444
- (id)paperListForDuplexMode:(id)arg1;	// IMP=0x0000000000013413
- (id)rollReadyPaperListWithContentSize:(struct CGSize)arg1 forPhoto:(_Bool)arg2;	// IMP=0x00000000000133c8
- (id)rollReadyPaperListWithContentSize:(struct CGSize)arg1;	// IMP=0x0000000000013386
- (_Bool)knowsReadyPaperList;	// IMP=0x000000000001335b
- (_Bool)isPaperReady:(id)arg1;	// IMP=0x000000000001332a
@property(readonly) NSArray *localizedNamesOfEmptyTrays; // @dynamic localizedNamesOfEmptyTrays;
@property(readonly) NSString *uuid; // @dynamic uuid;
@property _Bool isFromMCProfile; // @synthesize isFromMCProfile;
@property(readonly) _Bool isIPPS; // @dynamic isIPPS;
@property(readonly) _Bool isAdobeRGBSupported; // @dynamic isAdobeRGBSupported;
- (void)getSupplyLevels:(CDUnknownBlockType)arg1;	// IMP=0x0000000000012dd6
- (id)loadTranslations;	// IMP=0x0000000000012741
@property(readonly) NSDictionary *printInfoSupported;
- (void)checkOperations:(struct _ipp_s *)arg1;	// IMP=0x000000000001062f
- (void)identifySelf;	// IMP=0x0000000000010192
@property(readonly) _Bool hasPrintInfoSupported; // @dynamic hasPrintInfoSupported;
- (long long)feedOrientation:(id)arg1;	// IMP=0x00000000000100bf
- (id)availableRollPapersPreferBorderless:(_Bool)arg1;	// IMP=0x0000000000010090
@property(readonly) long long jobTypesSupported;
@property(readonly) long long identifyActionsSupported;
- (id)localizedPrinterWarnings;	// IMP=0x000000000000fd71
- (void)_checkAvailable:(double)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000000fbaf
@property(readonly) _Bool _isAlwaysAvailable;
- (void)pollForPrinterStatusQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000000f50c
- (void)handlePrinterStateReasonsFromResponse:(struct _ipp_s *)arg1;	// IMP=0x000000000000f4f1
- (id)makeAndModel;	// IMP=0x000000000000f45e
- (id)location;	// IMP=0x000000000000f445
- (id)displayName;	// IMP=0x000000000000f2f3
- (id)description;	// IMP=0x000000000000f2e1
- (void)dealloc;	// IMP=0x000000000000f222
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000000f106
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000000ef5c
- (_Bool)isBonjour;	// IMP=0x000000000000ee20
@property(readonly) NSURL *printerURL;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000000ebab
- (void)addRSSIValue:(id)arg1;	// IMP=0x000000000001ad61
- (void)setPrivateObject:(id)arg1 forKey:(id)arg2;	// IMP=0x000000000001ac7e
- (id)privateObjectForKey:(id)arg1;	// IMP=0x000000000001ac25
- (struct _pk_proxy_s *)_httpConnectViaSelfHost:(int)arg1 msTimeout:(int)arg2;	// IMP=0x000000000001ab95
- (id)localName;	// IMP=0x0000000000019b4f
- (long long)finalizeJob:(int)arg1;	// IMP=0x0000000000019765
- (void)finalizeJob:(int)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000192f2
- (struct _ipp_s *)createRequest:(id)arg1 ofType:(id)arg2 url:(id)arg3;	// IMP=0x0000000000018252
- (_Bool)resolveWithTimeout:(int)arg1;	// IMP=0x0000000000017f6c
- (_Bool)resolve;	// IMP=0x0000000000017f55
- (_Bool)resolveIfNeeded;	// IMP=0x0000000000017f1b
@property(readonly, retain) NSString *scheme;
@property(retain) NSNumber *port; // @dynamic port;
@property(retain) NSString *hostname; // @dynamic hostname;
@property(retain) NSDictionary *TXTRecord; // @dynamic TXTRecord;
- (id)TXTRecordWithTimeout:(int)arg1;	// IMP=0x0000000000017b49
- (id)txtRecordObjectForKey:(id)arg1;	// IMP=0x0000000000017ac2
- (void)setAccessStateFromTXT;	// IMP=0x0000000000017a68
- (void)updateType;	// IMP=0x000000000001785b
- (id)initWithName:(id)arg1 TXTRecord:(id)arg2;	// IMP=0x000000000001776e
- (id)initWithName:(id)arg1 TXT:(id)arg2;	// IMP=0x000000000001765d
- (struct _ipp_s *)getAttributes:(const char **)arg1 count:(int)arg2;	// IMP=0x000000000001705f
- (struct _ipp_s *)getSupplyLevelAttributes;	// IMP=0x0000000000017008
- (struct _ipp_s *)getPrinterAttributes;	// IMP=0x0000000000016fea

@end

