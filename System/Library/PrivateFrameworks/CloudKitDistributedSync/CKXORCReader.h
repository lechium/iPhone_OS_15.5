//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CloudKitDistributedSync/CKXReaderProtocol-Protocol.h>

@class CKXORCReaderOptions;
@protocol CKXORCHelpers;

@interface CKXORCReader <CKXReaderProtocol>
{
    struct unique_ptr<orc::Reader, std::default_delete<orc::Reader>> _reader;	// 8 = 0x8
    struct unordered_map<unsigned long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::pair<std::unique_ptr<orc::RowReader>, std::unique_ptr<orc::ColumnVectorBatch>>>>> _structToReaderBatchPair;	// 16 = 0x10
    struct unordered_map<unsigned long, NSIndexSet *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, NSIndexSet *>>> _rowsForTopLevelContainerStructs;	// 56 = 0x38
    id <CKXORCHelpers> _helpers;	// 96 = 0x60
    CKXORCReaderOptions *_options;	// 104 = 0x68
}

- (id).cxx_construct;	// IMP=0x00000000000f0e15
- (void).cxx_destruct;	// IMP=0x00000000000f0d74
@property(readonly, nonatomic) CKXORCReaderOptions *options; // @synthesize options=_options;
@property(readonly, nonatomic) id <CKXORCHelpers> helpers; // @synthesize helpers=_helpers;
- (void *)valueColumnForField:(unsigned long long)arg1;	// IMP=0x00000000000f0c7c
- (void *)listColumnForReference:(unsigned long long)arg1;	// IMP=0x00000000000f0b80
- (void *)structReferenceColumnForReference:(unsigned long long)arg1;	// IMP=0x00000000000f0a84
- (void *)structColumnForStruct:(unsigned long long)arg1;	// IMP=0x00000000000f0a4d
- (void)copyData:(void *)arg1 forList:(CDStruct_2d6ed345)arg2;	// IMP=0x00000000000f053f
- (void)copyData:(void *)arg1 forField:(unsigned long long)arg2 inStruct:(CDStruct_08de4b04)arg3;	// IMP=0x00000000000f039b
- (CDStruct_08de4b04)referencedStructAtIndex:(long long)arg1 inList:(CDStruct_2d6ed345)arg2;	// IMP=0x00000000000f00bc
- (long long)lengthForList:(CDStruct_2d6ed345)arg1;	// IMP=0x00000000000efe6f
- (CDStruct_2d6ed345)referencedListForReference:(unsigned long long)arg1 inStruct:(CDStruct_08de4b04)arg2;	// IMP=0x00000000000efd5f
- (_Bool)referenceIsNull:(unsigned long long)arg1 inStruct:(CDStruct_08de4b04)arg2;	// IMP=0x00000000000efbca
- (CDStruct_08de4b04)referencedStructForReference:(unsigned long long)arg1 inStruct:(CDStruct_08de4b04)arg2;	// IMP=0x00000000000efac7
- (CDStruct_08de4b04)rootStructWithType:(unsigned long long)arg1;	// IMP=0x00000000000efa06
- (_Bool)setData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000ef871
- (void *)rootColumnForStruct:(unsigned long long)arg1;	// IMP=0x00000000000ef788
- (id)rowsForStructColumn:(unsigned long long)arg1;	// IMP=0x00000000000eeea5
- (unsigned long long)offsetInCurrentBatchForRow:(unsigned long long)arg1 forStruct:(unsigned long long)arg2;	// IMP=0x00000000000eed81
- (_Bool)loadBatchWithRow:(unsigned long long)arg1 forStruct:(unsigned long long)arg2;	// IMP=0x00000000000eeb3f
- (void)createRowReaderForStruct:(unsigned long long)arg1;	// IMP=0x00000000000ee1b4
- (_Bool)createReaderIfNecessaryWithError:(id *)arg1;	// IMP=0x00000000000eddc9
- (id)initWithSchema:(id)arg1 helpers:(id)arg2 options:(id)arg3;	// IMP=0x00000000000edc2a
- (id)initWithSchema:(id)arg1;	// IMP=0x00000000000edb9b

@end

