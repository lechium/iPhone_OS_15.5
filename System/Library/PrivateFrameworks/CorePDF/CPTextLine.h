//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CorePDF/CPDisposable-Protocol.h>

@class CPCharSequence, NSArray;

__attribute__((visibility("hidden")))
@interface CPTextLine <CPDisposable>
{
    CPCharSequence *charSequence;	// 128 = 0x80
    CDStruct_2e2afed4 *wordArray;	// 136 = 0x88
    unsigned int wordCount;	// 144 = 0x90
    struct CPInlineContainer *inlineList;	// 152 = 0x98
    int lineNumber;	// 160 = 0xa0
    int columnNumber;	// 164 = 0xa4
    double baseline;	// 168 = 0xa8
    _Bool baseLineIsNull;	// 176 = 0xb0
    _Bool hasBeenSplit;	// 177 = 0xb1
    _Bool hasBeenProcessed;	// 178 = 0xb2
    _Bool maySplit;	// 179 = 0xb3
    _Bool hasTabs;	// 180 = 0xb4
    NSArray *columnBreaks;	// 184 = 0xb8
    NSArray *xsegments;	// 192 = 0xc0
    int levels;	// 200 = 0xc8
    float maximumLetterGap;	// 204 = 0xcc
    float maximumWordGap;	// 208 = 0xd0
    int tabsBefore;	// 212 = 0xd4
    _Bool irregular;	// 216 = 0xd8
    unsigned int leftSpacerIndex;	// 220 = 0xdc
    unsigned int rightSpacerIndex;	// 224 = 0xe0
    _Bool isListItem;	// 228 = 0xe4
    unsigned int listSpacerIndex;	// 232 = 0xe8
    _Bool lineBreakAfter;	// 236 = 0xec
    struct CPPDFStyle *uniformStyle;	// 240 = 0xf0
    unsigned short uniformStyleFlags;	// 248 = 0xf8
    double monospaceWidth;	// 256 = 0x100
    unsigned int *spacesBefore;	// 264 = 0x108
    _Bool disposed;	// 272 = 0x110
}

@property(nonatomic) _Bool lineBreakAfter; // @synthesize lineBreakAfter;
@property(nonatomic) unsigned int listSpacerIndex; // @synthesize listSpacerIndex;
@property(nonatomic) _Bool isListItem; // @synthesize isListItem;
@property(nonatomic) unsigned int rightSpacerIndex; // @synthesize rightSpacerIndex;
@property(nonatomic) unsigned int leftSpacerIndex; // @synthesize leftSpacerIndex;
- (double)medianFontSize;	// IMP=0x0000000000031bd2
- (_Bool)hasDropCap;	// IMP=0x0000000000031b1f
- (long long)topIsAbove:(id)arg1;	// IMP=0x0000000000031a62
- (id)attributes;	// IMP=0x0000000000031a55
- (void)setIrregular:(_Bool)arg1;	// IMP=0x0000000000031a45
- (_Bool)irregular;	// IMP=0x0000000000031a35
- (void)setMaximumWordGap:(float)arg1;	// IMP=0x0000000000031a23
- (float)maximumWordGap;	// IMP=0x0000000000031a11
- (void)setMaximumLetterGap:(float)arg1;	// IMP=0x00000000000319ff
- (float)maximumLetterGap;	// IMP=0x00000000000319ed
- (void)recomputeLevels;	// IMP=0x0000000000031970
- (void)setLevels:(int)arg1;	// IMP=0x0000000000031960
- (int)levels;	// IMP=0x0000000000031950
- (void)setSpaces:(unsigned int)arg1 beforeWordAtIndex:(unsigned int)arg2;	// IMP=0x00000000000318b2
- (unsigned int)spacesBeforeWordAtIndex:(unsigned int)arg1;	// IMP=0x0000000000031880
- (double)monospaceWidth;	// IMP=0x00000000000316bf
- (_Bool)isMonospaced;	// IMP=0x000000000003169b
- (_Bool)styleIsUniform:(struct CPPDFStyle **)arg1 styleFlags:(unsigned short)arg2;	// IMP=0x0000000000031577
- (void)recomputeBaseline;	// IMP=0x0000000000031427
- (void)translateObjectYBy:(double)arg1;	// IMP=0x00000000000313db
- (_Bool)isIndivisible;	// IMP=0x00000000000313d3
- (void)setBaselineToNull;	// IMP=0x00000000000313c2
- (void)setBaseline:(double)arg1;	// IMP=0x00000000000313b0
- (double)baseline;	// IMP=0x00000000000312d7
- (_Bool)hyphenated;	// IMP=0x00000000000312cf
- (struct CGPoint)anchor;	// IMP=0x0000000000031277
- (_Bool)overlapsHorizontally:(struct CGRect)arg1;	// IMP=0x00000000000311c4
- (_Bool)overlapsWith:(id)arg1;	// IMP=0x0000000000031168
- (long long)baseLineDescending:(id)arg1;	// IMP=0x000000000003110d
- (long long)baseLineAscending:(id)arg1;	// IMP=0x00000000000310b2
- (struct CGRect)bounds;	// IMP=0x0000000000030fd9
- (void)fitBoundsToChildren;	// IMP=0x0000000000030fd3
- (int)tabsBefore;	// IMP=0x0000000000030fc3
- (void)setTabsBefore:(int)arg1;	// IMP=0x0000000000030fb3
- (_Bool)hasTabs;	// IMP=0x0000000000030fa3
- (void)setHasTabs:(_Bool)arg1;	// IMP=0x0000000000030f93
- (void)accept:(id)arg1;	// IMP=0x0000000000030f78
- (void)setColumnBreaks:(id)arg1;	// IMP=0x0000000000030f3a
- (id)columnBreaks;	// IMP=0x0000000000030f29
- (_Bool)hasBeenProcessed;	// IMP=0x0000000000030f19
- (void)setHasBeenProcessed:(_Bool)arg1;	// IMP=0x0000000000030f09
- (_Bool)hasBeenSplit;	// IMP=0x0000000000030ef9
- (void)setHasBeenSplit:(_Bool)arg1;	// IMP=0x0000000000030ee9
- (id)properties;	// IMP=0x0000000000030edc
- (_Bool)mapToWordPairsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;	// IMP=0x0000000000030e4b
- (_Bool)mapToWordPairs:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;	// IMP=0x0000000000030dcc
- (_Bool)mapToWordsWithIndex:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;	// IMP=0x0000000000030d59
- (_Bool)mapToWords:(CDUnknownFunctionPointerType)arg1 passing:(void *)arg2;	// IMP=0x0000000000030ce7
- (_Bool)removeTextLines:(id)arg1 whereTrue:(CDUnknownFunctionPointerType)arg2 passing:(void *)arg3;	// IMP=0x0000000000030ae6
- (id)newTextLineFromWordAt:(unsigned int)arg1 lengthInWords:(unsigned int)arg2;	// IMP=0x0000000000030933
- (_Bool)changesFontAt:(id)arg1;	// IMP=0x0000000000030890
- (_Bool)hasJustifiedAlignment;	// IMP=0x0000000000030871
- (int)align;	// IMP=0x0000000000030813
- (long long)zOrder;	// IMP=0x00000000000307ba
- (void)anchorChunk:(id)arg1 atWordIndex:(unsigned int)arg2;	// IMP=0x000000000003066f
- (struct CPInlineContainer *)inlineList;	// IMP=0x000000000003065e
- (unsigned int)inlineCount;	// IMP=0x000000000003063e
- (CDStruct_2e2afed4 *)lastWord;	// IMP=0x0000000000030611
- (CDStruct_2e2afed4 *)firstWord;	// IMP=0x00000000000305ef
- (CDStruct_2e2afed4 *)wordAtIndex:(unsigned int)arg1;	// IMP=0x00000000000305c3
- (struct CGRect)boundsOfWordAtIndex:(unsigned int)arg1;	// IMP=0x0000000000030583
- (unsigned int)wordCount;	// IMP=0x0000000000030573
- (CDStruct_2e2afed4 *)wordArrayOfSize:(unsigned int)arg1;	// IMP=0x00000000000304fe
- (CDStruct_2e2afed4 *)wordArray;	// IMP=0x00000000000304ed
- (id)charSequence;	// IMP=0x00000000000304dc
- (void)setCharSequence:(id)arg1;	// IMP=0x000000000003049e
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000000303b4
- (void)dealloc;	// IMP=0x000000000003034f
- (void)finalize;	// IMP=0x0000000000030311
- (void)dispose;	// IMP=0x000000000003028a
- (id)init;	// IMP=0x00000000000301e0

@end

