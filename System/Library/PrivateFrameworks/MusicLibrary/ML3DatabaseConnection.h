//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ML3DatabaseConnectionPool, ML3DatabasePrivacyContext, ML3DatabaseStatementCache, NSMutableArray, NSString, NSUUID;
@protocol ML3DatabaseConnectionDelegate;

@interface ML3DatabaseConnection : NSObject
{
    struct sqlite3 *_sqlitedb;	// 8 = 0x8
    _Bool _isOpen;	// 16 = 0x10
    ML3DatabaseStatementCache *_statementCache;	// 24 = 0x18
    unsigned long long _statementsSinceLastCheckpoint;	// 32 = 0x20
    unsigned long long _transactionLevel;	// 40 = 0x28
    _Bool _nestedTransactionWantsToRollback;	// 48 = 0x30
    NSMutableArray *_enqueuedTransactionCommitBlocks;	// 56 = 0x38
    ML3DatabaseConnectionPool *_owningPool;	// 64 = 0x40
    NSMutableArray *_registeredFunctions;	// 72 = 0x48
    NSMutableArray *_registeredModules;	// 80 = 0x50
    const void *_iTunesExtensions;	// 88 = 0x58
    long long _profilingLevel;	// 96 = 0x60
    NSString *_lastTracedStatement;	// 104 = 0x68
    int _willDeleteDatabaseNotifyToken;	// 112 = 0x70
    _Bool _isHandlingIOError;	// 116 = 0x74
    _Bool _alreadyAttemptedCorruptionRecovery;	// 117 = 0x75
    struct os_unfair_lock_s _lock;	// 120 = 0x78
    _Bool _isReadOnly;	// 124 = 0x7c
    _Bool _automaticCheckpointingEnabled;	// 125 = 0x7d
    _Bool _logQueryPlans;	// 126 = 0x7e
    id <ML3DatabaseConnectionDelegate> _connectionDelegate;	// 128 = 0x80
    NSString *_databasePath;	// 136 = 0x88
    ML3DatabasePrivacyContext *_privacyContext;	// 144 = 0x90
    unsigned long long _journalingMode;	// 152 = 0x98
    unsigned long long _protectionLevel;	// 160 = 0xa0
    NSUUID *_currentTransactionID;	// 168 = 0xa8
    NSUUID *_uniqueIdentifier;	// 176 = 0xb0
    unsigned long long _checkpointStatementThreshold;	// 184 = 0xb8
}

- (void).cxx_destruct;	// IMP=0x0000000000199c09
@property(nonatomic) _Bool logQueryPlans; // @synthesize logQueryPlans=_logQueryPlans;
@property(nonatomic) unsigned long long checkpointStatementThreshold; // @synthesize checkpointStatementThreshold=_checkpointStatementThreshold;
@property(nonatomic) _Bool automaticCheckpointingEnabled; // @synthesize automaticCheckpointingEnabled=_automaticCheckpointingEnabled;
@property(readonly, nonatomic) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly, nonatomic) NSUUID *currentTransactionID; // @synthesize currentTransactionID=_currentTransactionID;
@property(nonatomic) unsigned long long protectionLevel; // @synthesize protectionLevel=_protectionLevel;
@property(nonatomic) unsigned long long journalingMode; // @synthesize journalingMode=_journalingMode;
@property(nonatomic, setter=setReadOnly:) _Bool isReadOnly; // @synthesize isReadOnly=_isReadOnly;
@property(retain, nonatomic) ML3DatabasePrivacyContext *privacyContext; // @synthesize privacyContext=_privacyContext;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) __weak id <ML3DatabaseConnectionDelegate> connectionDelegate; // @synthesize connectionDelegate=_connectionDelegate;
- (void)_handleDatabaseProfileStatement:(const char *)arg1 executionTimeNS:(unsigned long long)arg2;	// IMP=0x000000000019994e
- (void)_handleDatabaseTraceStatement:(const char *)arg1;	// IMP=0x00000000001998b1
- (_Bool)_handleZombieSQLiteConnection:(struct sqlite3 *)arg1;	// IMP=0x00000000001995c6
- (_Bool)_handleConnectionErrorWhileOpening:(int)arg1;	// IMP=0x00000000001995a4
- (void)_executeTransactionCommitBlocks:(_Bool)arg1;	// IMP=0x00000000001994e2
- (void)_resetUnfinalizedStatements;	// IMP=0x00000000001993b1
- (void)_finalizeAllStatements;	// IMP=0x000000000019939b
- (_Bool)_isDeviceMediaLibraryDatabase;	// IMP=0x00000000001992df
- (void)_updateProfilingLevel;	// IMP=0x000000000019925c
- (void)_logDatabaseFileDebugInformation;	// IMP=0x0000000000198f0a
- (void)_logCurrentError;	// IMP=0x0000000000198e25
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;	// IMP=0x0000000000198cf0
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;	// IMP=0x0000000000198bbb
- (void)_createDatabaseFileIfNonexistent;	// IMP=0x0000000000198afd
- (void)_createDatabaseDirectoryIfNonexistent;	// IMP=0x0000000000198a06
- (_Bool)_databaseFilesAreWritable;	// IMP=0x000000000019887d
- (_Bool)_databaseFileExists;	// IMP=0x00000000001987d6
- (id)_registeredModuleNamed:(id)arg1;	// IMP=0x0000000000198611
- (_Bool)_validatePreparedStatement:(id)arg1 error:(id *)arg2;	// IMP=0x00000000001983c5
- (id)_shortDescription;	// IMP=0x0000000000198387
- (_Bool)_internalEndTransactionAndCommit:(_Bool)arg1;	// IMP=0x00000000001981e7
- (_Bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1;	// IMP=0x000000000019803f
- (_Bool)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000197dd8
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;	// IMP=0x0000000000197be7
- (void)_internalLogQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;	// IMP=0x0000000000197a34
- (_Bool)_executeStatement:(id)arg1 withError:(id *)arg2;	// IMP=0x00000000001975b0
- (id)_prepareStatement:(id)arg1 error:(id *)arg2;	// IMP=0x000000000019701c
- (void)_setAlreadyAttemptedCorruptionRecovery:(_Bool)arg1;	// IMP=0x0000000000197013
- (_Bool)_alreadyAttemptedCorruptionRecovery;	// IMP=0x000000000019700a
- (void)setTransactionLevel:(unsigned long long)arg1;	// IMP=0x0000000000196fd8
- (unsigned long long)transactionLevel;	// IMP=0x0000000000196fae
- (int)_distrustQueriesDuringBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000196d3b
- (id)_databaseFilePaths;	// IMP=0x0000000000196b46
- (_Bool)_handleDiskIOError;	// IMP=0x0000000000196334
- (_Bool)_handleBusyLockWithNumberOfRetries:(int)arg1;	// IMP=0x00000000001962fe
- (void)_handleDatabaseCorruption;	// IMP=0x00000000001960ab
- (void)_ensureConnectionIsOpen;	// IMP=0x0000000000196015
- (struct sqlite3 *)_sqliteHandle;	// IMP=0x000000000019600b
- (void)_setOwningPool:(id)arg1;	// IMP=0x0000000000195ffa
- (id)_owningPool;	// IMP=0x0000000000195fe4
- (int)checkpointDatabase;	// IMP=0x0000000000195eed
- (_Bool)deleteDatabase;	// IMP=0x0000000000195e86
- (id)sqliteError;	// IMP=0x0000000000195bd9
- (long long)lastInsertionRowID;	// IMP=0x0000000000195bcb
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(_Bool)arg4;	// IMP=0x0000000000195996
- (_Bool)removeModuleNamed:(id)arg1;	// IMP=0x0000000000195794
- (_Bool)registerModuleName:(id)arg1 moduleMethods:(struct sqlite3_module *)arg2;	// IMP=0x000000000019560c
- (_Bool)registerModule:(id)arg1;	// IMP=0x00000000001953d2
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4;	// IMP=0x00000000001952fc
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3;	// IMP=0x00000000001952e7
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x000000000019521d
- (void)enqueueBlockForTransactionCommit:(CDUnknownBlockType)arg1;	// IMP=0x00000000001951e7
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1 usingBehaviorType:(unsigned long long)arg2;	// IMP=0x000000000019517e
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000019516a
- (_Bool)popToRootTransactionAndCommit:(_Bool)arg1;	// IMP=0x00000000001950e1
- (_Bool)popTransactionAndCommit:(_Bool)arg1;	// IMP=0x0000000000194f38
- (_Bool)pushTransactionUsingBehaviorType:(unsigned long long)arg1;	// IMP=0x0000000000194e32
- (_Bool)pushTransaction;	// IMP=0x0000000000194e1e
@property(readonly, nonatomic) _Bool transactionMarkedForRollBack;
@property(readonly, nonatomic) _Bool isInTransaction;
- (_Bool)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000194cdb
- (_Bool)executeUpdate:(id)arg1;	// IMP=0x0000000000194cc4
- (_Bool)tableExists:(id)arg1;	// IMP=0x0000000000194c3d
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;	// IMP=0x0000000000194c2b
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;	// IMP=0x0000000000194c13
- (id)executeQuery:(id)arg1;	// IMP=0x0000000000194bf9
- (_Bool)databasePathExists;	// IMP=0x0000000000194b89
- (void)flush;	// IMP=0x0000000000194b59
- (_Bool)_closeAndFlushTransactionState:(_Bool)arg1;	// IMP=0x00000000001949b6
- (_Bool)close;	// IMP=0x000000000019499f
- (_Bool)_openWithFlags:(int)arg1;	// IMP=0x0000000000193fc4
- (_Bool)open;	// IMP=0x0000000000193fa6
- (void)setCurrentTransactionID:(id)arg1;	// IMP=0x0000000000193f92
@property(nonatomic) long long profilingLevel;
@property(readonly, nonatomic) _Bool isOpen;
- (_Bool)isEqual:(id)arg1;	// IMP=0x0000000000193e4a
- (id)description;	// IMP=0x0000000000193d57
- (void)dealloc;	// IMP=0x0000000000193d05
- (id)initWithDatabasePath:(id)arg1;	// IMP=0x0000000000193b95
- (id)init;	// IMP=0x0000000000193b23
- (_Bool)_alterTableNamed:(id)arg1 withNewColumnDefinitions:(id)arg2 newColumnNames:(id)arg3 oldColumnNames:(id)arg4;	// IMP=0x000000000009f24e
- (void)_enumerateTableColumnNamesAndDefinitionsFromTable:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000009ed30
- (_Bool)schemaDeleteColumns:(id)arg1 inTable:(id)arg2;	// IMP=0x000000000009ea96
- (_Bool)schemaDeleteColumn:(id)arg1 inTable:(id)arg2;	// IMP=0x000000000009e95c
- (_Bool)schemaRenameColumn:(id)arg1 inTable:(id)arg2 toNewColumnName:(id)arg3;	// IMP=0x000000000009e648
- (_Bool)schemaInsertColumnDefinitions:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000009e3d3
- (_Bool)schemaInsertColumnDefinition:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000009e2ff
- (_Bool)schemaAddColumnDefinition:(id)arg1 toTable:(id)arg2;	// IMP=0x000000000009e0ae

@end

