//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MusicLibrary/ML3DatabaseConnectionDelegate-Protocol.h>
#import <MusicLibrary/ML3DatabaseConnectionPoolDelegate-Protocol.h>
#import <MusicLibrary/NSSecureCoding-Protocol.h>
#import <MusicLibrary/_MSVAccountInformationProviding-Protocol.h>

@class ML3AccountCacheDatabase, ML3Container, ML3DatabaseConnectionPool, ML3DatabaseMetadata, ML3DatabasePrivacyContext, ML3LibraryNotificationManager, ML3MusicLibraryResourcesManager, NSArray, NSDate, NSLock, NSMutableDictionary, NSNumber, NSString;
@protocol ML3MusicLibraryDelegate, OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate, NSSecureCoding, _MSVAccountInformationProviding>
{
    NSString *_libraryUID;	// 8 = 0x8
    NSLock *_libraryUIDLock;	// 16 = 0x10
    NSString *_syncLibraryUID;	// 24 = 0x18
    ML3AccountCacheDatabase *_accountCacheDatabase;	// 32 = 0x20
    ML3DatabasePrivacyContext *_privacyContext;	// 40 = 0x28
    NSMutableDictionary *_optimizedLibraryEntityFilterPredicatesByEntityClass;	// 48 = 0x30
    NSMutableDictionary *_optimizedLibraryContainerFilterPredicatesByContainerClass;	// 56 = 0x38
    NSMutableDictionary *_optimizedLibraryPublicEntityFilterPredicatesByEntityClass;	// 64 = 0x40
    NSMutableDictionary *_optimizedLibraryPublicContainerFilterPredicatesByContainerClass;	// 72 = 0x48
    _Bool _isHomeSharingLibraryLoaded;	// 80 = 0x50
    _Bool _isHomeSharingLibrary;	// 81 = 0x51
    _Bool _usingSharedLibraryPath;	// 82 = 0x52
    _Bool _readOnly;	// 83 = 0x53
    ML3DatabaseConnectionPool *_connectionPool;	// 88 = 0x58
    NSString *_databasePath;	// 96 = 0x60
    struct iPhoneSortKeyBuilder *_sortKeyBuilder;	// 104 = 0x68
    ML3MusicLibraryResourcesManager *_resourcesManager;	// 112 = 0x70
    ML3LibraryNotificationManager *_notificationManager;	// 120 = 0x78
    NSObject<OS_dispatch_queue> *_serialQueue;	// 128 = 0x80
    NSString *_accountDSID;	// 136 = 0x88
    id <ML3MusicLibraryDelegate> _delegate;	// 144 = 0x90
    NSArray *_libraryEntityFilterPredicates;	// 152 = 0x98
    NSArray *_libraryContainerFilterPredicates;	// 160 = 0xa0
    NSArray *_libraryPublicEntityFilterPredicates;	// 168 = 0xa8
    NSArray *_libraryPublicContainerFilterPredicates;	// 176 = 0xb0
}

+ (id)distributedToLocalNotificationMapping;	// IMP=0x000000000005bbe7
+ (id)assistantSyncDataChangedNotificationName;	// IMP=0x000000000005bbb7
+ (id)widthLimitedSetValuesQueue;	// IMP=0x000000000005bb87
+ (_Bool)updateTrackIntegrityOnConnection:(id)arg1;	// IMP=0x000000000005bb6b
+ (void)removeOrphanedTracks;	// IMP=0x000000000005b9f6
+ (void)enumerateSortMapTablesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000005b910
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;	// IMP=0x000000000005b35b
+ (id)sectionIndexTitles;	// IMP=0x000000000005b288
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;	// IMP=0x000000000005b1da
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;	// IMP=0x000000000005b12c
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000005b124
+ (void)setGlobalPrivacyContextWithAuditToken:(CDStruct_6ad76789)arg1;	// IMP=0x000000000005b0bd
+ (_Bool)deviceSupportsMultipleLibraries;	// IMP=0x000000000005b0b3
+ (void)enableAutomaticDatabaseValidation;	// IMP=0x000000000005b0a6
+ (void)disableAutomaticDatabaseValidation;	// IMP=0x000000000005b099
+ (void)disableSharedLibrary;	// IMP=0x000000000005b08c
+ (void)setSharedLibraryDatabasePath:(id)arg1;	// IMP=0x000000000005b073
+ (id)sharedLibraryDatabasePath;	// IMP=0x000000000005b05a
+ (id)sharedLibrary;	// IMP=0x000000000005b041
+ (id)musicLibraryPerUserDSID;	// IMP=0x000000000005b011
+ (void)setAutoupdatingSharedLibraryPath:(id)arg1;	// IMP=0x000000000005af67
+ (id)autoupdatingSharedLibraryPath;	// IMP=0x000000000005ae70
+ (id)autoupdatingSharedLibrary;	// IMP=0x000000000005ad8f
+ (id)allLibraries;	// IMP=0x000000000005acb4
+ (id)registeredLibraries;	// IMP=0x000000000005ab28
+ (id)musicLibraryForUserAccount:(id)arg1;	// IMP=0x000000000005a976
+ (id)_onGlobalQueue_shareableMusicLibraryWithResourcesManager:(id)arg1;	// IMP=0x000000000005a817
+ (id)globalSerialQueue;	// IMP=0x000000000005a7e7
+ (long long)artworkSourceTypeForTrackSource:(int)arg1;	// IMP=0x00000000000f6e5e
+ (id)artworkTokenForChapterWithItemPID:(long long)arg1 retrievalTime:(double)arg2;	// IMP=0x00000000000f6e31
+ (id)artworkTokenForArtistHeroURL:(id)arg1;	// IMP=0x00000000000f6e1c
+ (id)artworkRelativePathFromToken:(id)arg1;	// IMP=0x00000000000f5b47
+ (long long)devicePreferredImageFormat;	// IMP=0x00000000000f5b2e
+ (_Bool)deviceSupportsASTC;	// IMP=0x00000000000f5ae4
+ (_Bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;	// IMP=0x00000000000f9c7b
+ (_Bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;	// IMP=0x00000000000f9b57
+ (_Bool)userVersionMatchesSystemUsingConnection:(id)arg1;	// IMP=0x00000000000f9a27
+ (int)userVersionUsingConnection:(id)arg1;	// IMP=0x00000000000f99a8
+ (id)itemIndexSchemaSQL;	// IMP=0x00000000000f9978
+ (id)indexSchemaSQL;	// IMP=0x00000000000f9915
+ (id)allTables;	// IMP=0x00000000000f98e5
+ (id)allTriggersSQL;	// IMP=0x00000000000f9852
+ (id)allPragmaSQL;	// IMP=0x00000000000f9845
+ (id)allSchemaSQL;	// IMP=0x00000000000f9815
+ (id)itemNewSchemaSQL;	// IMP=0x00000000000f9793
+ (id)itemSchemaSQL;	// IMP=0x00000000000f974b
+ (id)sortMapNewSchemaSQL;	// IMP=0x00000000000f973e
+ (id)sortMapSchemaSQL;	// IMP=0x00000000000f9731
+ (id)storeLinkSchemaSQL;	// IMP=0x00000000000f9724
+ (id)pathForBaseLocationPath:(long long)arg1;	// IMP=0x000000000010b120
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;	// IMP=0x000000000010b088
+ (id)pathForResourceFileOrFolder:(int)arg1;	// IMP=0x000000000010b022
+ (id)libraryContainerRelativePath:(id)arg1;	// IMP=0x000000000010af9b
+ (id)libraryContainerPathByAppendingPathComponent:(id)arg1;	// IMP=0x000000000010af14
+ (id)libraryContainerPath;	// IMP=0x000000000010aebd
+ (id)libraryPathForContainerPath:(id)arg1;	// IMP=0x000000000010aea1
+ (id)allLibraryContainerPaths;	// IMP=0x000000000010ab70
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;	// IMP=0x000000000010aae9
+ (id)mediaFolderPath;	// IMP=0x000000000010aa9b
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;	// IMP=0x000000000013cfbe
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;	// IMP=0x000000000013cdd4
+ (id)jaliscoGetSortedMediaKinds:(id)arg1;	// IMP=0x000000000013e6ec
- (void).cxx_destruct;	// IMP=0x000000000005290f
@property(nonatomic, getter=isReadOnly) _Bool readOnly; // @synthesize readOnly=_readOnly;
@property(nonatomic, getter=isUsingSharedLibraryPath) _Bool usingSharedLibraryPath; // @synthesize usingSharedLibraryPath=_usingSharedLibraryPath;
@property(retain, nonatomic) NSArray *libraryPublicContainerFilterPredicates; // @synthesize libraryPublicContainerFilterPredicates=_libraryPublicContainerFilterPredicates;
@property(retain, nonatomic) NSArray *libraryPublicEntityFilterPredicates; // @synthesize libraryPublicEntityFilterPredicates=_libraryPublicEntityFilterPredicates;
@property(retain, nonatomic) NSArray *libraryContainerFilterPredicates; // @synthesize libraryContainerFilterPredicates=_libraryContainerFilterPredicates;
@property(retain, nonatomic) NSArray *libraryEntityFilterPredicates; // @synthesize libraryEntityFilterPredicates=_libraryEntityFilterPredicates;
@property(nonatomic) __weak id <ML3MusicLibraryDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, copy, nonatomic) NSString *accountDSID; // @synthesize accountDSID=_accountDSID;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) ML3LibraryNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
- (void)_onQueue_updateDatabaseConnectionsProfilingLevel;	// IMP=0x000000000005280d
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;	// IMP=0x0000000000052744
- (void)_tearDownNotificationManager;	// IMP=0x00000000000525f5
- (void)_setupNotificationManager;	// IMP=0x000000000005253d
- (void)_closeAndLockCurrentDatabaseConnections;	// IMP=0x000000000005233e
- (_Bool)_shouldProcessAccountChanges;	// IMP=0x00000000000522ad
- (void)_completeAccountChangeWithPath:(id)arg1;	// IMP=0x000000000005214a
- (_Bool)_prepareForAccountChange:(id *)arg1;	// IMP=0x0000000000051edf
- (void)terminateForFailureToPerformDatabasePathChange;	// IMP=0x0000000000051e33
- (void)emergencyDisconnectWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000051c77
- (void)performDatabasePathChange:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000051a79
- (void)_libraryPathDidChangeNotification:(id)arg1;	// IMP=0x0000000000051920
- (void)_loggingSettingsDidChangeNotification:(id)arg1;	// IMP=0x00000000000518d2
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;	// IMP=0x000000000005185e
- (_Bool)_clearAllRowsFromTables:(id)arg1;	// IMP=0x000000000005163a
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;	// IMP=0x00000000000515c4
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;	// IMP=0x00000000000513d0
- (_Bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;	// IMP=0x000000000005133d
- (id)_newGeniusDBConnectionAtPath:(id)arg1;	// IMP=0x00000000000512ab
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000050df1
- (void)_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:(id)arg1 toDestinationURL:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000050d0b
- (_Bool)_removeInvalidAvailableArtworkTokensUsingConnection:(id)arg1;	// IMP=0x000000000005083b
- (_Bool)_removeOrphanedArtworkAssetsUsingConnection:(id)arg1;	// IMP=0x000000000004f859
- (_Bool)_removeOrphanedArtworkMetadataUsingConnection:(id)arg1;	// IMP=0x000000000004f3a3
- (_Bool)_removeOrphanedArtworkTokensUsingConnection:(id)arg1;	// IMP=0x000000000004f1b1
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;	// IMP=0x000000000004ed04
- (id)_allArtworkVariantDirectories;	// IMP=0x000000000004e9b0
- (_Bool)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(_Bool)arg5 usingConnection:(id)arg6;	// IMP=0x000000000004defc
- (_Bool)_updateBestArtworkTokensForArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 preserveExistingAvailableToken:(_Bool)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004dad5
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004d8b2
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;	// IMP=0x000000000004d77d
- (void)_logDatabaseAccess;	// IMP=0x000000000004d731
- (void)updateTrackIntegrity;	// IMP=0x000000000004d713
- (void)deletePresignedValidity;	// IMP=0x000000000004d670
- (_Bool)verifyPresignedValidity;	// IMP=0x000000000004d668
- (_Bool)hasPresignedValidity;	// IMP=0x000000000004d5f8
- (void)migratePresignedValidity;	// IMP=0x000000000004d59d
- (_Bool)deleteDatabaseProperty:(id)arg1;	// IMP=0x000000000004d4af
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;	// IMP=0x000000000004d360
- (id)valueForDatabaseProperty:(id)arg1;	// IMP=0x000000000004d244
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;	// IMP=0x000000000004ce46
- (void)removeOrphanedTracksOnlyInCaches:(_Bool)arg1;	// IMP=0x000000000004c50b
- (void)removeTombstonesForDeletedItems;	// IMP=0x000000000004c4ed
- (_Bool)cleanupArtworkWithOptions:(unsigned long long)arg1 usingConnection:(id)arg2;	// IMP=0x000000000004c411
- (_Bool)cleanupArtworkWithOptions:(unsigned long long)arg1;	// IMP=0x000000000004c1b0
@property(readonly, nonatomic) _Bool hasUserPlaylistsContainingAppleMusicContent;
@property(readonly, nonatomic) _Bool hasAddedToLibraryAppleMusicContent;
@property(readonly, nonatomic) _Bool hasUserPlaylists;
- (_Bool)recordPlayEventForContainerPersistentID:(long long)arg1;	// IMP=0x000000000004bf3e
- (_Bool)recordPlayEventForAlbumPersistentID:(long long)arg1;	// IMP=0x000000000004beaf
- (void)enumerateArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x000000000004be05
- (void)retrieveBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000004bbe5
- (_Bool)isArtworkTokenAvailable:(id)arg1;	// IMP=0x000000000004bada
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(_Bool)arg5 usingConnection:(id)arg6;	// IMP=0x000000000004bac5
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004baa0
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004ba7e
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4;	// IMP=0x000000000004ba1a
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 usingConnection:(id)arg6;	// IMP=0x000000000004b9f9
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5;	// IMP=0x000000000004b940
- (void)migrateExistingArtworkToken:(id)arg1 newArtworkToken:(id)arg2 newSourceType:(long long)arg3;	// IMP=0x000000000004b128
- (_Bool)deleteArtworkToken:(id)arg1;	// IMP=0x000000000004b016
- (_Bool)removeArtworkAssetWithToken:(id)arg1;	// IMP=0x000000000004ad7c
- (_Bool)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;	// IMP=0x000000000004a881
- (_Bool)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;	// IMP=0x000000000004a474
- (_Bool)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;	// IMP=0x000000000004a207
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000049f97
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;	// IMP=0x0000000000049f85
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;	// IMP=0x0000000000049f6e
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(_Bool)arg3;	// IMP=0x0000000000049f5c
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x0000000000049f4a
@property(readonly, nonatomic) long long autoFilledTracksTotalSize;
- (void)removePlaylistsWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000049cb8
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000049a3d
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000049a25
- (void)removeSource:(int)arg1 usingConnection:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000049a09
- (void)removeSource:(int)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000499ed
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;	// IMP=0x0000000000049714
- (_Bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;	// IMP=0x0000000000049664
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x00000000000494c8
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x0000000000049231
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 inUsersLibrary:(_Bool)arg5 usingBlock:(CDUnknownBlockType)arg6;	// IMP=0x0000000000048c62
- (_Bool)updateSortMap;	// IMP=0x0000000000048bba
- (_Bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;	// IMP=0x0000000000048861
- (_Bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;	// IMP=0x0000000000048574
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;	// IMP=0x000000000004834f
- (void)savePlaylists;	// IMP=0x0000000000048339
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;	// IMP=0x0000000000047e33
- (void)saveTrackMetadata;	// IMP=0x0000000000047e1d
- (void)notifyKeepLocalStateDidChange;	// IMP=0x0000000000047dfd
- (void)notifyLibraryImportDidFinish;	// IMP=0x0000000000047ddd
- (void)notifyCloudLibraryAvailabilityDidChange;	// IMP=0x0000000000047dbd
- (void)notifySectionsDidChange;	// IMP=0x0000000000047d9d
- (void)notifyDisplayValuesPropertyDidChange;	// IMP=0x0000000000047d7d
- (void)notifyInvisiblePropertyDidChange;	// IMP=0x0000000000047d5d
- (void)notifyNonContentsPropertyDidChange;	// IMP=0x0000000000047d3d
- (void)notifyEntitiesAddedOrRemoved;	// IMP=0x0000000000047d1d
- (void)notifyAssistantContentsDidChange;	// IMP=0x0000000000047c7a
- (void)notifyContentsDidChange;	// IMP=0x0000000000047c5a
- (unsigned long long)unknownSectionIndex;	// IMP=0x0000000000047bbb
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;	// IMP=0x00000000000479f0
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;	// IMP=0x0000000000047851
- (id)groupingKeysForStrings:(id)arg1;	// IMP=0x0000000000047707
- (id)groupingKeyForString:(id)arg1;	// IMP=0x00000000000475bc
- (void)accessSortKeyBuilder:(CDUnknownBlockType)arg1;	// IMP=0x0000000000047568
- (id)accountCacheDatabase;	// IMP=0x000000000004750f
- (_Bool)clearAllCloudKVSData;	// IMP=0x00000000000474f6
- (_Bool)clearAllGeniusData;	// IMP=0x00000000000473ac
- (_Bool)emptyAllTables;	// IMP=0x00000000000472b8
- (_Bool)createIndexes;	// IMP=0x0000000000047210
- (int)currentDatabaseVersion;	// IMP=0x0000000000047156
- (_Bool)validateDatabase;	// IMP=0x00000000000470fc
- (_Bool)automaticDatabaseValidationDisabled;	// IMP=0x00000000000470f0
- (_Bool)isCurrentThreadInTransaction;	// IMP=0x00000000000470ac
- (void)performAsyncDatabaseWriteTransactionWithBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000000046fbd
- (void)performReadOnlyDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000046ee8
- (void)performDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000046e18
- (void)databaseConnectionAllowingWrites:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000000046d5c
- (void)reconnectToDatabase;	// IMP=0x0000000000046cc4
- (void)checkInDatabaseConnection:(id)arg1;	// IMP=0x0000000000046c4e
- (id)checkoutWriterConnection;	// IMP=0x0000000000046bec
- (id)checkoutReaderConnection;	// IMP=0x0000000000046b8a
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;	// IMP=0x0000000000046b72
- (void)connectionDidAccessDatabase:(id)arg1;	// IMP=0x0000000000046ad8
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(_Bool)arg2;	// IMP=0x0000000000046a4f
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;	// IMP=0x00000000000469e1
- (void)connectionWillCloseDatabase:(id)arg1;	// IMP=0x0000000000046994
- (void)connectionDidOpenDatabase:(id)arg1;	// IMP=0x0000000000046947
- (void)connectionWillOpenDatabase:(id)arg1;	// IMP=0x000000000004680b
- (void)setClientIdentity:(id)arg1;	// IMP=0x000000000004678f
@property(readonly, nonatomic) ML3DatabasePrivacyContext *privacyContext;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;	// IMP=0x0000000000046687
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;	// IMP=0x00000000000465c7
@property(readonly, nonatomic) _Bool mediaRestrictionEnabled;
@property(readonly, nonatomic) NSArray *preferredSubtitleTracks;
@property(readonly, nonatomic) NSArray *preferredAudioTracks;
@property(readonly, nonatomic) NSArray *localizedSectionIndexTitles;
@property(readonly, nonatomic) ML3DatabaseMetadata *databaseInfo;
@property(readonly, nonatomic) ML3Container *currentDevicePhotosMemoriesPlaylist;
@property(readonly, nonatomic) ML3Container *currentDevicePlaybackHistoryPlaylist;
@property(readonly, nonatomic) ML3Container *currentDevicePurchasesPlaylist;
@property(readonly, nonatomic, getter=isLibraryEmpty) _Bool libraryEmpty;
- (void)setLibraryUID:(id)arg1;	// IMP=0x0000000000045a17
@property(readonly, nonatomic) NSString *libraryUID;
@property(nonatomic) NSString *syncLibraryID;
@property(nonatomic) long long syncGenerationID;
@property(readonly, nonatomic) long long currentContentRevision;
@property(readonly, nonatomic) long long currentRevision;
@property(readonly, nonatomic) _Bool downloadOnAddToLibrary;
@property(nonatomic) _Bool isHomeSharingLibrary;
@property(readonly, nonatomic) struct iPhoneSortKeyBuilder *sortKeyBuilder; // @synthesize sortKeyBuilder=_sortKeyBuilder;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) ML3DatabaseConnectionPool *connectionPool; // @synthesize connectionPool=_connectionPool;
@property(readonly, nonatomic) ML3MusicLibraryResourcesManager *resourcesManager; // @synthesize resourcesManager=_resourcesManager;
- (void)dealloc;	// IMP=0x0000000000044c9b
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000044bf1
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000000044a5f
- (id)initWithClientIdentity:(id)arg1 path:(id)arg2 readOnly:(_Bool)arg3 populateUnitTestTablesBlock:(CDUnknownBlockType)arg4;	// IMP=0x0000000000044747
- (id)initWithClientIdentity:(id)arg1 path:(id)arg2;	// IMP=0x000000000004472f
- (id)initWithPath:(id)arg1 readOnly:(_Bool)arg2 populateUnitTestTablesBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000000000446a7
- (id)initWithPath:(id)arg1;	// IMP=0x0000000000044690
- (id)initWithResourcesManager:(id)arg1;	// IMP=0x0000000000044587
- (id)initWithClientIdentity:(id)arg1 forUserAccount:(id)arg2;	// IMP=0x0000000000044391
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;	// IMP=0x00000000000769d9
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;	// IMP=0x000000000007694a
- (_Bool)repairAlbumArtistRelationshipsWithConnection:(id)arg1;	// IMP=0x000000000007fb2a
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(_Bool)arg5;	// IMP=0x000000000007f851
- (_Bool)_validateDatabaseUsingConnection:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000080076
- (_Bool)coerceValidDatabaseWithError:(id *)arg1;	// IMP=0x000000000007ffab
- (_Bool)_coalesceMismatchedCollectionClass:(Class)arg1 usingConnection:(id)arg2;	// IMP=0x0000000000090cc2
- (_Bool)coalesceMismatchedCollectionsUsingConnection:(id)arg1;	// IMP=0x0000000000090a5f
- (id)_systemUnicodeVersionData;	// IMP=0x000000000009098c
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;	// IMP=0x0000000000090349
- (id)insertStringsIntoSortMap:(id)arg1;	// IMP=0x0000000000090335
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(_Bool *)arg2;	// IMP=0x000000000009020f
- (CDStruct_912cb5d2)nameOrderForString:(id)arg1;	// IMP=0x00000000000900d8
- (_Bool)validateSortMapUnicodeVersionOnConnection:(id)arg1;	// IMP=0x000000000008ffc2
- (_Bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;	// IMP=0x000000000008fec3
- (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceRebuild:(_Bool)arg2 forceUpdateOriginals:(_Bool)arg3;	// IMP=0x000000000008e8ee
- (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;	// IMP=0x000000000008e8d7
- (_Bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;	// IMP=0x000000000008e7de
- (_Bool)updateSortMapOnConnection:(id)arg1;	// IMP=0x000000000008e7ca
- (id)genreForGenre:(id)arg1;	// IMP=0x00000000000a0672
- (id)composerForComposerName:(id)arg1;	// IMP=0x00000000000bc943
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;	// IMP=0x00000000000bd7a9
- (void)_updateSystemPlaylist:(id)arg1 withName:(id)arg2 usingConnection:(id)arg3;	// IMP=0x00000000000cc08b
- (void)updateOrderingLanguagesForCurrentLanguage;	// IMP=0x00000000000cc026
- (_Bool)updateSystemPlaylistNamesForCurrentLanguageUsingConnection:(id)arg1;	// IMP=0x00000000000cbd41
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeCloudAssets:(_Bool)arg3 includeAutoFilledTracks:(_Bool)arg4;	// IMP=0x00000000000f364c
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(_Bool)arg3;	// IMP=0x00000000000f3631
- (long long)_clearOrphanedAssetsOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;	// IMP=0x00000000000f340e
- (long long)_clearAllCloudAssets;	// IMP=0x00000000000f3160
- (long long)_clearDatabaseFileFreeSpace;	// IMP=0x00000000000f3084
- (id)_notInKeepLocalCollectionPredicate;	// IMP=0x00000000000f3054
- (id)_allKeepLocalPlaylistTracks;	// IMP=0x00000000000f2f4a
- (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2 includeCloudAssets:(_Bool)arg3;	// IMP=0x00000000000f2893
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2 includeCloudAssets:(_Bool)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x00000000000f25df
- (long long)_purgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2;	// IMP=0x00000000000f242e
- (void)_enumeratePurgeablePodcastEpisodesForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f2428
- (void)_enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f222c
- (void)_enumeratePurgeableStreamedTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f2023
- (unsigned long long)_totalSizeForAllNonCacheTracks;	// IMP=0x00000000000f1f58
- (id)_purgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f1ec2
- (id)_nonPurgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f1ea6
- (id)_purgeableItemsPredicateSQLWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f1e99
- (unsigned long long)_managedClearPurgeableTracksOfAmount:(unsigned long long)arg1 urgency:(unsigned long long)arg2;	// IMP=0x00000000000f19c7
- (unsigned long long)_managedPurgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f16fd
- (unsigned long long)_clearPurgeableArtworkOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;	// IMP=0x00000000000f15e2
- (unsigned long long)_purgeableArtworkTotalSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f1528
- (unsigned long long)_purgeAllArtwork;	// IMP=0x00000000000f13df
- (_Bool)_shouldPurgeAllArtworkAtUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f12ec
- (unsigned long long)_artworkTotalSize;	// IMP=0x00000000000f11f8
- (long long)_cloudAssetsTotalSize;	// IMP=0x00000000000f1059
- (long long)_databaseFileFreeSpace;	// IMP=0x00000000000f0fcc
- (_Bool)_shouldPurgeKeepLocalTracksForUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f0f8a
- (long long)minimumPurgeableStorage;	// IMP=0x00000000000f0f1d
- (void)setMinimumPurgeableStorage:(long long)arg1;	// IMP=0x00000000000f0ed9
- (_Bool)shouldOptimizeStorage;	// IMP=0x00000000000f0ea2
- (void)setShouldOptimizeStorage:(_Bool)arg1;	// IMP=0x00000000000f0e73
- (_Bool)autoFilledTracksArePurgeable;	// IMP=0x00000000000f0e3c
- (void)setAutoFilledTracksArePurgeable:(_Bool)arg1;	// IMP=0x00000000000f0e0d
- (long long)clearAllRemovedTracks;	// IMP=0x00000000000f0d82
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(_Bool)arg3;	// IMP=0x00000000000f0995
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;	// IMP=0x00000000000f094f
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2;	// IMP=0x00000000000f0604
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f05c4
- (_Bool)isArtworkFetchableForPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4;	// IMP=0x00000000000f58fc
- (_Bool)hasOriginalArtworkForRelativePath:(id)arg1;	// IMP=0x00000000000f583f
- (id)artworkCacheDirectoryForEffect:(id)arg1;	// IMP=0x00000000000f575d
- (id)artworkCacheDirectoryForSize:(struct CGSize)arg1;	// IMP=0x00000000000f5665
@property(readonly, copy, nonatomic) NSString *rootArtworkCacheDirectory;
@property(readonly, copy, nonatomic) NSString *originalArtworkDirectory;
@property(readonly, copy, nonatomic) NSString *artworkDirectory;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;	// IMP=0x00000000000fab44
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;	// IMP=0x00000000000faa29
- (id)uppService;	// IMP=0x00000000000fa91e
@property(readonly, nonatomic) _Bool supportsUbiquitousPlaybackPositions;
- (id)pathForBaseLocationPath:(long long)arg1;	// IMP=0x000000000010aa3c
- (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;	// IMP=0x000000000010a9a8
- (id)pathForResourceFileOrFolder:(int)arg1;	// IMP=0x000000000010a949
- (id)libraryContainerRelativePath:(id)arg1;	// IMP=0x000000000010a8c6
- (id)libraryContainerPathByAppendingPathComponent:(id)arg1;	// IMP=0x000000000010a843
- (id)libraryContainerPath;	// IMP=0x000000000010a7f3
- (void)clearSagaCloudAddToPlaylistBehavior;	// IMP=0x0000000000126966
- (void)clearSagaPrefersToMergeWithCloudLibrary;	// IMP=0x000000000012694d
- (void)clearSagaCloudLibraryTroveID;	// IMP=0x0000000000126934
- (void)clearSagaCloudLibraryCUID;	// IMP=0x000000000012691b
- (void)clearSagaLastPlaylistPlayDataUploadDate;	// IMP=0x0000000000126902
- (void)clearSagaLastItemPlayDataUploadDate;	// IMP=0x00000000001268e9
- (void)clearSagaLastGeniusUpdateDate;	// IMP=0x00000000001268d0
- (void)clearSagaCloudAccountID;	// IMP=0x00000000001268b7
@property(nonatomic) long long preferredVideoQuality;
@property(copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property(copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property(nonatomic) long long sagaOnDiskDatabaseRevision;
@property(copy, nonatomic) NSString *storefrontIdentifier;
@property(nonatomic) _Bool sagaPrefersToMergeWithCloudLibrary;
@property(nonatomic) _Bool sagaNeedsFullUpdateAfterNextUpdate;
@property(nonatomic) long long sagaCloudAddToPlaylistBehavior;
@property(nonatomic) long long sagaDatabaseUserVersion;
@property(copy, nonatomic) NSString *sagaCloudLibraryTroveID;
@property(copy, nonatomic) NSString *sagaCloudLibraryCUID;
@property(copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property(copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property(copy, nonatomic) NSDate *sagaLastGeniusUpdateDate;
@property(copy, nonatomic) NSNumber *sagaLastKnownActiveLockerAccountDSID;
@property(copy, nonatomic) NSNumber *sagaAccountID;
- (long long)syncIdFromMultiverseId:(id)arg1;	// IMP=0x000000000012f51c
- (_Bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id *)arg2;	// IMP=0x000000000013c52d
- (void)updateJaliscoExcludedMediaKindsWith:(id)arg1 excludingMediaKindsInSet:(_Bool)arg2;	// IMP=0x000000000013e4d7
- (void)sortJaliscoLastSupportedMediaKinds;	// IMP=0x000000000013e3c9
- (void)clearJaliscoLastExcludedMediaKinds;	// IMP=0x000000000013e3b0
- (void)clearJaliscoLastGeniusUpdateDate;	// IMP=0x000000000013e397
- (void)clearJaliscoAccountID;	// IMP=0x000000000013e37e
@property(copy, nonatomic) NSDate *jaliscoLastLibraryUpdateTime;
@property(nonatomic) long long jaliscoOnDiskDatabaseRevision;
@property(nonatomic) _Bool jaliscoNeedsUpdateForTokens;
@property(nonatomic) _Bool jaliscoIsMusicGeniusUserEnabled;
@property(nonatomic) _Bool jaliscoHasCloudGeniusData;
@property(readonly, nonatomic) NSArray *jaliscoLastExcludedMediaKinds;
@property(copy, nonatomic) NSString *jaliscoLastSupportedMediaKinds;
@property(copy, nonatomic) NSDate *jaliscoLastGeniusUpdateDate;
@property(copy, nonatomic) NSNumber *jaliscoAccountID;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

