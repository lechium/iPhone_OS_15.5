//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CMDPNormalizer;

struct _FstArc {
    int _field1;
    int _field2;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct set<std::string, std::less<std::string>, std::allocator<std::string>> {
    struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::string, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::string>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct unique_ptr<CMDPNormalizer, std::default_delete<CMDPNormalizer>> {
    struct __compressed_pair<CMDPNormalizer *, std::default_delete<CMDPNormalizer>> {
        struct CMDPNormalizer *__value_;
    } __ptr_;
};

struct unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>, std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> {
    struct __compressed_pair<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>*, std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>> {
        void *__value_;
    } __ptr_;
};

struct vector<std::pair<std::string, std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>, std::allocator<std::pair<std::string, std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<std::string, std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>*, std::allocator<std::pair<std::string, std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::unique_ptr<CMDPToken>, std::allocator<std::unique_ptr<CMDPToken>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::unique_ptr<CMDPToken>*, std::allocator<std::unique_ptr<CMDPToken>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>, std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*, std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>> {
        void *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct vector<std::vector<std::vector<std::unique_ptr<CMDPToken>>>, std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<std::vector<std::unique_ptr<CMDPToken>>>*, std::allocator<std::vector<std::vector<std::unique_ptr<CMDPToken>>>>> {
        void *_field1;
    } _field3;
} vector_f49e5da1;

