//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <MetalTools/MTLGPUDebugCommandEncoder-Protocol.h>

@class MTLGPUDebugCommandBuffer, MTLGPUDebugRenderPipelineState, MTLToolsDepthStencilState, NSString;
@protocol MTLBuffer;

@interface MTLGPUDebugRenderCommandEncoder <MTLGPUDebugCommandEncoder>
{
    unsigned int useResourceIteration;	// 36 = 0x24
    _Bool _tileStageActive;	// 40 = 0x28
    _Bool _tileStageUsed;	// 41 = 0x29
    _Bool _fragmentStageActive;	// 42 = 0x2a
    _Bool _vertexStageActive;	// 43 = 0x2b
    _Bool _enableUseResourceValidation;	// 44 = 0x2c
    MTLGPUDebugCommandBuffer *_commandBuffer;	// 48 = 0x30
    struct MTLGPUDebugStageBufferHandles _vertexHandles;	// 56 = 0x38
    struct MTLGPUDebugStageBufferHandles _fragmentHandles;	// 1432 = 0x598
    struct MTLGPUDebugStageBufferHandles _tileHandles;	// 2808 = 0xaf8
    struct MTLGPUDebugTileThreadgroup _threadgroup;	// 4184 = 0x1058
    struct Options *_options;	// 4448 = 0x1160
    struct GPUDebugEventUUIDPacket _drawID;	// 4456 = 0x1168
    unsigned long long _encoderType;	// 4480 = 0x1180
    MTLGPUDebugRenderPipelineState *_currentPipeline;	// 4488 = 0x1188
    MTLToolsDepthStencilState *_currentDepthStencil;	// 4496 = 0x1190
    struct MTLGPUDebugBufferSubAlloc _vertexReportBuffer;	// 4504 = 0x1198
    struct MTLGPUDebugBufferSubAlloc _fragmentReportBuffer;	// 4520 = 0x11a8
    struct MTLGPUDebugBufferSubAlloc _tileReportBuffer;	// 4536 = 0x11b8
    struct {
        unsigned char count;
        _Bool mappingsValid;
        CDStruct_1987c1e3 mappings[2];
    } _vertexAmpState;	// 4552 = 0x11c8
    id <MTLBuffer> _vertexBufferUsageTable;	// 4576 = 0x11e0
    id <MTLBuffer> _vertexTextureUsageTable;	// 4584 = 0x11e8
    id <MTLBuffer> _fragmentBufferUsageTable;	// 4592 = 0x11f0
    id <MTLBuffer> _fragmentTextureUsageTable;	// 4600 = 0x11f8
}

- (id).cxx_construct;	// IMP=0x00000000000054e2
- (void)endEncoding;	// IMP=0x00000000000053ed
- (void)setTileAccelerationStructures:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x0000000000005394
- (void)setTileAccelerationStructure:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x000000000000533a
- (void)setFragmentAccelerationStructures:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x00000000000052e1
- (void)setFragmentAccelerationStructure:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x0000000000005287
- (void)setVertexAccelerationStructures:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x000000000000522e
- (void)setVertexAccelerationStructure:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x00000000000051d4
- (void)setTileIntersectionFunctionTables:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x000000000000517b
- (void)setTileIntersectionFunctionTable:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x0000000000005121
- (void)setFragmentIntersectionFunctionTables:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x00000000000050c8
- (void)setFragmentIntersectionFunctionTable:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x000000000000506e
- (void)setVertexIntersectionFunctionTables:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x0000000000005015
- (void)setVertexIntersectionFunctionTable:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x0000000000004fbb
- (void)setTileVisibleFunctionTables:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x0000000000004f62
- (void)setTileVisibleFunctionTable:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x0000000000004f08
- (void)setFragmentVisibleFunctionTables:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x0000000000004eaf
- (void)setFragmentVisibleFunctionTable:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x0000000000004e55
- (void)setVertexVisibleFunctionTables:(const id *)arg1 withBufferRange:(struct _NSRange)arg2;	// IMP=0x0000000000004dfc
- (void)setVertexVisibleFunctionTable:(id)arg1 atBufferIndex:(unsigned long long)arg2;	// IMP=0x0000000000004da2
- (void)setRenderPipelineState:(id)arg1;	// IMP=0x0000000000004c06
- (void)setDepthStencilState:(id)arg1;	// IMP=0x0000000000004bcc
- (void)useHeaps:(const id *)arg1 count:(unsigned long long)arg2 stages:(unsigned long long)arg3;	// IMP=0x0000000000004b74
- (void)useHeaps:(const id *)arg1 count:(unsigned long long)arg2;	// IMP=0x0000000000004b28
- (void)useHeap:(id)arg1 stages:(unsigned long long)arg2;	// IMP=0x0000000000004a9a
- (void)useHeap:(id)arg1;	// IMP=0x0000000000004a0f
- (void)useResources:(const id *)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3 stages:(unsigned long long)arg4;	// IMP=0x00000000000049a9
- (void)useResources:(const id *)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3;	// IMP=0x0000000000004951
- (void)useResource:(id)arg1 usage:(unsigned long long)arg2 stages:(unsigned long long)arg3;	// IMP=0x0000000000004939
- (void)useResource:(id)arg1 usage:(unsigned long long)arg2;	// IMP=0x0000000000004921
- (void)_useResourceCommon:(id)arg1 usage:(unsigned long long)arg2 stages:(optional_b0be1e53)arg3;	// IMP=0x000000000000472f
- (void)useResourceInternal:(id)arg1 usage:(unsigned long long)arg2 stages:(optional_b0be1e53)arg3;	// IMP=0x00000000000046fc
- (void)setVertexAmplificationCount:(unsigned long long)arg1 viewMappings:(const CDStruct_1987c1e3 *)arg2;	// IMP=0x0000000000004686
- (void)executeCommandsInBuffer:(id)arg1 indirectBuffer:(id)arg2 indirectBufferOffset:(unsigned long long)arg3;	// IMP=0x0000000000004680
- (void)executeCommandsInBuffer:(id)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000000467a
- (void)dispatchThreadsPerTile:(CDStruct_14f26992)arg1 inRegion:(CDStruct_1e3be3a8)arg2;	// IMP=0x0000000000004610
- (void)dispatchThreadsPerTile:(CDStruct_14f26992)arg1;	// IMP=0x00000000000045c1
- (void)drawIndexedPatches:(unsigned long long)arg1 patchStart:(unsigned long long)arg2 patchCount:(unsigned long long)arg3 patchIndexBuffer:(id)arg4 patchIndexBufferOffset:(unsigned long long)arg5 controlPointIndexBuffer:(id)arg6 controlPointIndexBufferOffset:(unsigned long long)arg7 instanceCount:(unsigned long long)arg8 baseInstance:(unsigned long long)arg9;	// IMP=0x00000000000044ed
- (void)drawIndexedPatches:(unsigned long long)arg1 patchIndexBuffer:(id)arg2 patchIndexBufferOffset:(unsigned long long)arg3 controlPointIndexBuffer:(id)arg4 controlPointIndexBufferOffset:(unsigned long long)arg5 indirectBuffer:(id)arg6 indirectBufferOffset:(unsigned long long)arg7;	// IMP=0x0000000000004425
- (void)drawPatches:(unsigned long long)arg1 patchStart:(unsigned long long)arg2 patchCount:(unsigned long long)arg3 patchIndexBuffer:(id)arg4 patchIndexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 baseInstance:(unsigned long long)arg7;	// IMP=0x00000000000043ae
- (void)drawPatches:(unsigned long long)arg1 patchIndexBuffer:(id)arg2 patchIndexBufferOffset:(unsigned long long)arg3 indirectBuffer:(id)arg4 indirectBufferOffset:(unsigned long long)arg5;	// IMP=0x0000000000004344
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 baseVertex:(long long)arg7 baseInstance:(unsigned long long)arg8;	// IMP=0x00000000000042cd
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexType:(unsigned long long)arg2 indexBuffer:(id)arg3 indexBufferOffset:(unsigned long long)arg4 indirectBuffer:(id)arg5 indirectBufferOffset:(unsigned long long)arg6;	// IMP=0x000000000000425f
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6;	// IMP=0x00000000000041f1
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5;	// IMP=0x0000000000004183
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4 baseInstance:(unsigned long long)arg5;	// IMP=0x0000000000004115
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4;	// IMP=0x00000000000040af
- (void)drawPrimitives:(unsigned long long)arg1 indirectBuffer:(id)arg2 indirectBufferOffset:(unsigned long long)arg3;	// IMP=0x0000000000004053
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3;	// IMP=0x0000000000003ff7
- (void)setTileTextures:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x0000000000003ef7
- (void)setTileTexture:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000003e5b
- (void)setFragmentTextures:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x0000000000003d5b
- (void)setFragmentTexture:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000003cbf
- (void)setVertexTextures:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x0000000000003bbf
- (void)setVertexTexture:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000003b23
- (void)setThreadgroupMemoryLength:(unsigned long long)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000003ab4
- (void)setTileBytes:(const void *)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000003a51
- (void)setTileBuffers:(const id *)arg1 offsets:(const unsigned long long *)arg2 withRange:(struct _NSRange)arg3;	// IMP=0x00000000000039e9
- (void)setTileBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x00000000000039d2
- (void)setTileBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000003963
- (void)setFragmentBytes:(const void *)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000003900
- (void)setFragmentBuffers:(const id *)arg1 offsets:(const unsigned long long *)arg2 withRange:(struct _NSRange)arg3;	// IMP=0x0000000000003898
- (void)setFragmentBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000003881
- (void)setFragmentBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000003812
- (void)setVertexBytes:(const void *)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x00000000000037d0
- (void)setVertexBuffers:(const id *)arg1 offsets:(const unsigned long long *)arg2 withRange:(struct _NSRange)arg3;	// IMP=0x0000000000003768
- (void)setVertexBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000003751
- (void)setVertexBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x00000000000036d4
- (void)setRenderPipelineStateBuffers:(id)arg1;	// IMP=0x0000000000003230
- (void)setTileReportBuffer:(id)arg1 offset:(unsigned long long)arg2;	// IMP=0x0000000000003192
- (void)setFragmentReportBuffer:(id)arg1 offset:(unsigned long long)arg2;	// IMP=0x00000000000030f4
- (void)setVertexReportBuffer:(id)arg1 offset:(unsigned long long)arg2;	// IMP=0x0000000000003056
- (void)setBufferUsageTable:(id)arg1 textureUsageTable:(id)arg2 forStage:(unsigned long long)arg3;	// IMP=0x0000000000002ed8
- (void)setTessellationControlPointIndexBuffer:(id)arg1 offset:(unsigned long long)arg2;	// IMP=0x0000000000002db9
- (void)flushBindings;	// IMP=0x000000000000246f
- (id)temporaryBufferWithLength:(unsigned long long)arg1;	// IMP=0x000000000000243e
- (id)temporaryBufferWithBytes:(const void *)arg1 length:(unsigned long long)arg2;	// IMP=0x00000000000023fe
@property(readonly) unsigned int encoderID;
- (id)initWithRenderCommandEncoder:(id)arg1 parallelEncoder:(id)arg2 descriptor:(id)arg3 encoderID:(unsigned int)arg4;	// IMP=0x000000000000230c
- (id)initWithRenderCommandEncoder:(id)arg1 commandBuffer:(id)arg2 descriptor:(id)arg3 encoderID:(unsigned int)arg4;	// IMP=0x000000000000222e
- (void)_initBufferArgumentData:(id)arg1;	// IMP=0x0000000000002228

// Remaining properties
@property(readonly) MTLGPUDebugCommandBuffer *commandBuffer; // @dynamic commandBuffer;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

