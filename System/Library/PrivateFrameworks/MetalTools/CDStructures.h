//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MTLFunctionConstantValues, MTLGPUDebugDevice, NSData;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AppendBuffer {
    CDUnknownFunctionPointerType *_vptr$AppendBuffer;
    struct StreamBuffer stream;
};

struct AttachmentDescriptorSimple {
    void *texture;
    unsigned long long level;
    struct _NSRange sliceRange;
    struct _NSRange depthPlaneRange;
    unsigned long long storeAction;
};

struct BinaryBuffer {
    CDUnknownFunctionPointerType *_vptr$AppendBuffer;
    struct StreamBuffer stream;
    struct mach_timebase_info _timebase;
};

struct BufferUsageTable {
    id _backingMemory;
};

struct CheckerboardRenderTargetPipelineCache {
    struct os_unfair_lock_s _cacheLock;
    id _library;
    id _vertexFunction;
    id _depthStencilState[2];
    MTLFunctionConstantValues *_fConstants;
    struct unordered_map<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>, MTLDebugCheckerboardFillHashKey::Hash, std::equal_to<MTLDebugCheckerboardFillHashKey>, std::allocator<std::pair<const MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>>> _cache;
};

struct GPUDebugBufferDescriptorHeap {
    struct mutex s;
    struct vector<unsigned int, std::allocator<unsigned int>> _freeIndexList;
    struct vector<MTLGPUDebugBuffer *, std::allocator<MTLGPUDebugBuffer *>> _bufferList;
    unsigned long long _freeIndex;
    id _argumentEncoder;
    id _descriptorHeap;
};

struct GPUDebugConstantBufferCache {
    unsigned long long _totalUsedMemory;
    struct mutex _accessMutex;
    struct unordered_map<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value, GPUDebugConstantBufferCache::Key::Hash, std::equal_to<GPUDebugConstantBufferCache::Key>, std::allocator<std::pair<const GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>>> _cache;
    MTLGPUDebugDevice *_device;
};

struct GPUDebugDeviceOptions {
    unsigned int retainReflection:1;
    unsigned int retainPSOFunctions:1;
    unsigned int abortOnFault:1;
};

struct GPUDebugEventUUIDPacket {
    unsigned long long pipelineStateID;
    unsigned long long entryPointImageID;
    unsigned int encoderID;
    unsigned int eventID;
};

struct GPUDebugThreadgroupTableEntry {
    unsigned int offset;
    unsigned int length;
};

struct GlobalResidentBufferList {
    unsigned int _iteration;
    struct mutex _accessMutex;
    struct list<id<MTLBuffer>, std::allocator<id<MTLBuffer>>> _bufferList;
};

struct HeapUsageTable {
    struct vector<std::pair<MTLGPUDebugHeap *, unsigned long>, std::allocator<std::pair<MTLGPUDebugHeap *, unsigned long>>> _heapStages;
};

struct IndirectArgumentBufferCapabilities {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :29;
};

struct Key {
    CDStruct_41a22ec7 hash;
    NSData *data;
};

struct KeyBufferPair {
    struct Key key;
    id buffer;
};

struct MTLCompressedPixelFormatInfo {
    unsigned long long blockBytes;
    unsigned long long blockWidth;
    unsigned long long blockHeight;
    unsigned long long blockDepth;
};

struct MTLGPUDebugBufferSubAlloc {
    id buffer;
    unsigned long long offset;
};

struct MTLGPUDebugStageBufferHandles {
    unsigned long long handles[31];
    id resources[31];
    unsigned long long offsets[31];
    unsigned int lengths[31];
    unsigned long long gpu_address[31][2];
    _Bool needsFlush;
};

struct MTLGPUDebugThreadgroupLengths {
    unsigned int threadgroupSizes[31];
    struct GPUDebugThreadgroupTableEntry entries[32];
    _Bool needsFlush;
};

struct MTLGPUDebugTileThreadgroup {
    struct GPUDebugThreadgroupTableEntry entries[32];
    _Bool needsFlush;
};

struct MTLNormalPixelFormatInfo {
    unsigned long long pixelBytes;
    unsigned char componentCount;
    unsigned char alignment;
    unsigned long long pixelBytesRender;
    unsigned long long pixelBytesRenderMSAA;
};

struct MTLPixelFormatInfo {
    char *name;
    unsigned int flags;
    unsigned long long castClass;
    union {
        struct MTLNormalPixelFormatInfo normal;
        struct MTLCompressedPixelFormatInfo compressed;
    } type;
};

struct MTLRenderPassAttachmentDescriptorPrivate {
    id _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    CDStruct_d2b197d1 _field8;
    double _field9;
    unsigned int _field10;
    unsigned long long _field11;
    id _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    unsigned long long _field15;
    unsigned long long _field16;
    unsigned long long _field17;
    unsigned long long _field18;
    _Bool _field19;
};

struct MTLSamplerDescriptorHashMap {
    struct unordered_map<std::array<unsigned long long, 3>, unsigned int, MTLSamplerDescriptorHashMap::hash_t, MTLSamplerDescriptorHashMap::equal_t, std::allocator<std::pair<const std::array<unsigned long long, 3>, unsigned int>>> _map;
    unsigned int _limit;
};

struct MTLTargetDeviceArch {
    unsigned long long _field1;
    unsigned int _field2;
    char *_field3;
};

struct MetalBuffer {
    struct MetalBufferHeap *heap;
    unsigned int index;
};

struct MetalBufferHeap {
    struct mutex _mutex;
    struct vector<id<MTLBuffer>, std::allocator<id<MTLBuffer>>> _buffers;
    struct vector<unsigned int, std::allocator<unsigned int>> _freeList;
    int _currentFreeIndex;
    unsigned long long _totalMemoryAllocated;
    unsigned long long _totalMemoryInUse;
    unsigned long long _bufferLength;
    MTLGPUDebugDevice *_device;
};

struct Options {
    unsigned int version;
    int mode;
    int programTypes;
    int accessTypes;
    int failMode;
    struct {
        unsigned int enableReporting:1;
        unsigned int packPointerAddresses:1;
        unsigned int unpackPointerAddress:1;
        unsigned int forceInline:1;
        unsigned int enableBacktracking:1;
        unsigned int optimizeConstantDeref:1;
        unsigned int skipVertexFetchLoads:1;
        unsigned int enableGEPOptimization:1;
        unsigned int emitBoundsChecking:1;
        unsigned int runStandardOptimizations:1;
        unsigned int backtrackFailuresAssumeSafe:1;
        unsigned int pageDataIs32bitLength:1;
        unsigned int forceUnrollLoops:1;
        unsigned int mergeAccessChecks:1;
        unsigned int convertToAB:1;
        unsigned int arraysOfBuffersAB:1;
        unsigned int noInlineTrivialFunctions:1;
        unsigned int unrollMemCpyWA:1;
        unsigned int checkGlobalConstants:1;
        unsigned int enableTextureChecks:1;
        unsigned int demoteGlobalConstantsToArg:1;
        unsigned int argumentPointerIndirection:1;
        unsigned int enableThreadgroupMemoryChecks:1;
        unsigned int mergeThreadgroupGlobals:1;
        unsigned int mergeThreadgroupArguments:1;
        unsigned int tagThreadgroupPointers:1;
        unsigned int noInlineCheckFunctions:1;
        unsigned int enableJumpThreading:1;
        unsigned int enableICBSupport:1;
        unsigned int enableGlobalRelocations:1;
        unsigned int enableTrapReporting:1;
        unsigned int enableRaytracing:1;
        unsigned int enableResourceUsageValidation:1;
    } ;
};

struct ReportBufferEntry {
    unsigned long long _field1;
    id _field2;
    unsigned long long _field3;
};

struct StreamBuffer {
    char *bytes;
    char *pWrite;
    char *pEnd;
};

struct TextureUsageTable {
    id _backingMemory;
};

struct _MTLMessageContext {
    long long _field1;
    char *_field2;
    unsigned int _field3;
    id _field4;
    long long _field5;
    id _field6;
    char *_field7;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct array<AttachmentDescriptorSimple, 8UL> {
    struct AttachmentDescriptorSimple __elems_[8];
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<unsigned long long> {
    struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct deque<id, std::allocator<id>> {
    struct __split_buffer<id *, std::allocator<id *>> {
        id **__first_;
        id **__begin_;
        id **__end_;
        struct __compressed_pair<id **, std::allocator<id *>> {
            id **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<id>> {
        unsigned long long __value_;
    } __size_;
};

struct list<id<MTLBuffer>, std::allocator<id<MTLBuffer>>> {
    struct __list_node_base<id<MTLBuffer>, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<id<MTLBuffer>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct mach_timebase_info {
    unsigned int numer;
    unsigned int denom;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct once_flag {
    unsigned long long __state_;
};

struct optional<unsigned long> {
    union {
        char _field1;
        unsigned long long _field2;
    } _field1;
    _Bool _field2;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pair<id<MTLBuffer>, unsigned long> {
    id _field1;
    unsigned long long _field2;
};

struct recursive_mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value, GPUDebugConstantBufferCache::Key::Hash, std::equal_to<GPUDebugConstantBufferCache::Key>, std::allocator<std::pair<const GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>>> {
    struct __hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key, std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, GPUDebugConstantBufferCache::Key::Hash, std::equal_to<GPUDebugConstantBufferCache::Key>, true>, std::__unordered_map_equal<GPUDebugConstantBufferCache::Key, std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, std::equal_to<GPUDebugConstantBufferCache::Key>, GPUDebugConstantBufferCache::Key::Hash, true>, std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key, std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, GPUDebugConstantBufferCache::Key::Hash, std::equal_to<GPUDebugConstantBufferCache::Key>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<GPUDebugConstantBufferCache::Key, std::__hash_value_type<GPUDebugConstantBufferCache::Key, GPUDebugConstantBufferCache::Value>, std::equal_to<GPUDebugConstantBufferCache::Key>, GPUDebugConstantBufferCache::Key::Hash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>, MTLDebugCheckerboardFillHashKey::Hash, std::equal_to<MTLDebugCheckerboardFillHashKey>, std::allocator<std::pair<const MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>>> {
    struct __hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey, std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, MTLDebugCheckerboardFillHashKey::Hash, std::equal_to<MTLDebugCheckerboardFillHashKey>, true>, std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey, std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, std::equal_to<MTLDebugCheckerboardFillHashKey>, MTLDebugCheckerboardFillHashKey::Hash, true>, std::allocator<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey, std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, MTLDebugCheckerboardFillHashKey::Hash, std::equal_to<MTLDebugCheckerboardFillHashKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey, std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, std::equal_to<MTLDebugCheckerboardFillHashKey>, MTLDebugCheckerboardFillHashKey::Hash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<SubView, unsigned long, SubView::hash_t, SubView::equal_t, std::allocator<std::pair<const SubView, unsigned long>>> {
    struct __hash_table<std::__hash_value_type<SubView, unsigned long>, std::__unordered_map_hasher<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::hash_t, SubView::equal_t, true>, std::__unordered_map_equal<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::equal_t, SubView::hash_t, true>, std::allocator<std::__hash_value_type<SubView, unsigned long>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::hash_t, SubView::equal_t, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::equal_t, SubView::hash_t, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::array<unsigned long long, 3>, unsigned int, MTLSamplerDescriptorHashMap::hash_t, MTLSamplerDescriptorHashMap::equal_t, std::allocator<std::pair<const std::array<unsigned long long, 3>, unsigned int>>> {
    struct __hash_table<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, std::__unordered_map_hasher<std::array<unsigned long long, 3>, std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::hash_t, MTLSamplerDescriptorHashMap::equal_t, true>, std::__unordered_map_equal<std::array<unsigned long long, 3>, std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::equal_t, MTLSamplerDescriptorHashMap::hash_t, true>, std::allocator<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::array<unsigned long long, 3>, std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::hash_t, MTLSamplerDescriptorHashMap::equal_t, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::array<unsigned long long, 3>, std::__hash_value_type<std::array<unsigned long long, 3>, unsigned int>, MTLSamplerDescriptorHashMap::equal_t, MTLSamplerDescriptorHashMap::hash_t, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>>> {
    struct __hash_table<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, std::unique_ptr<GPUDebugArgumentEncoderLayout>>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_multiset<AttachmentDescriptorSimple, AttachmentDescriptorSimple::hash_t, AttachmentDescriptorSimple::equal_t, std::allocator<AttachmentDescriptorSimple>> {
    struct __hash_table<AttachmentDescriptorSimple, AttachmentDescriptorSimple::hash_t, AttachmentDescriptorSimple::equal_t, std::allocator<AttachmentDescriptorSimple>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*>, std::allocator<std::__hash_node<AttachmentDescriptorSimple, void *>>> {
            struct __hash_node_base<std::__hash_node<AttachmentDescriptorSimple, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, AttachmentDescriptorSimple::hash_t> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, AttachmentDescriptorSimple::equal_t> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<MTLDebugCommandBuffer *, std::hash<MTLDebugCommandBuffer *>, std::equal_to<MTLDebugCommandBuffer *>, std::allocator<MTLDebugCommandBuffer *>> {
    struct __hash_table<MTLDebugCommandBuffer *, std::hash<MTLDebugCommandBuffer *>, std::equal_to<MTLDebugCommandBuffer *>, std::allocator<MTLDebugCommandBuffer *>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*>, std::allocator<std::__hash_node<MTLDebugCommandBuffer *, void *>>> {
            struct __hash_node_base<std::__hash_node<MTLDebugCommandBuffer *, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<MTLDebugCommandBuffer *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<MTLDebugCommandBuffer *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<MTLToolsObject *, std::hash<MTLToolsObject *>, std::equal_to<MTLToolsObject *>, std::allocator<MTLToolsObject *>> {
    struct __hash_table<MTLToolsObject *, std::hash<MTLToolsObject *>, std::equal_to<MTLToolsObject *>, std::allocator<MTLToolsObject *>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<MTLToolsObject *, void *>*>, std::allocator<std::__hash_node<MTLToolsObject *, void *>>> {
            struct __hash_node_base<std::__hash_node<MTLToolsObject *, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<MTLToolsObject *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<MTLToolsObject *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<id<MTLDebugResourcePurgeable>, std::hash<id<MTLDebugResourcePurgeable>>, std::equal_to<id<MTLDebugResourcePurgeable>>, std::allocator<id<MTLDebugResourcePurgeable>>> {
    struct __hash_table<id<MTLDebugResourcePurgeable>, std::hash<id<MTLDebugResourcePurgeable>>, std::equal_to<id<MTLDebugResourcePurgeable>>, std::allocator<id<MTLDebugResourcePurgeable>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*>, std::allocator<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>>> {
            struct __hash_node_base<std::__hash_node<id<MTLDebugResourcePurgeable>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<id<MTLDebugResourcePurgeable>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<id<MTLDebugResourcePurgeable>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<MTLGPUDebugBuffer *, std::allocator<MTLGPUDebugBuffer *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MTLGPUDebugBuffer **, std::allocator<MTLGPUDebugBuffer *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<MTLScissorRect, std::allocator<MTLScissorRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<MTLScissorRect *, std::allocator<MTLScissorRect>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<MTLViewport, std::allocator<MTLViewport>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<MTLViewport *, std::allocator<MTLViewport>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<MetalBuffer, std::allocator<MetalBuffer>> {
    struct MetalBuffer *__begin_;
    struct MetalBuffer *__end_;
    struct __compressed_pair<MetalBuffer *, std::allocator<MetalBuffer>> {
        struct MetalBuffer *__value_;
    } __end_cap_;
};

struct vector<NSString *, std::allocator<NSString *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<NSString **, std::allocator<NSString *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<ReportBufferEntry, std::allocator<ReportBufferEntry>> {
    struct ReportBufferEntry *__begin_;
    struct ReportBufferEntry *__end_;
    struct __compressed_pair<ReportBufferEntry *, std::allocator<ReportBufferEntry>> {
        struct ReportBufferEntry *__value_;
    } __end_cap_;
};

struct vector<id, std::allocator<id>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<id *, std::allocator<id>> {
        id *__value_;
    } __end_cap_;
};

struct vector<id<MTLBuffer>, std::allocator<id<MTLBuffer>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<id<MTLBuffer>*, std::allocator<id<MTLBuffer>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<std::pair<MTLGPUDebugHeap *, unsigned long>, std::allocator<std::pair<MTLGPUDebugHeap *, unsigned long>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<MTLGPUDebugHeap *, unsigned long>*, std::allocator<std::pair<MTLGPUDebugHeap *, unsigned long>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<NSData *, unsigned long>, std::allocator<std::pair<NSData *, unsigned long>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<NSData *, unsigned long>*, std::allocator<std::pair<NSData *, unsigned long>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned int, std::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

struct vector<void (^)(id<MTLCommandBuffer>), std::allocator<void (^)(id<MTLCommandBuffer>)>> {
    CDUnknownBlockType *__begin_;
    CDUnknownBlockType *__end_;
    struct __compressed_pair<void (^*)(id<MTLCommandBuffer>), std::allocator<void (^)(id<MTLCommandBuffer>)>> {
        CDUnknownBlockType *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    _Bool isValid;
    _Bool hasBeenUsed;
    unsigned long long type;
    id object;
    unsigned long long baseLevel;
    unsigned long long bufferLength;
    unsigned long long bufferOffset;
    unsigned long long threadgroupMemoryLength;
    unsigned long long threadgroupMemoryOffset;
    _Bool hasLodClamp;
    float lodMinClamp;
    float lodMaxClamp;
} CDStruct_0f4bf8df;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
} CDStruct_a06f635e;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
    unsigned int _field17;
    unsigned int _field18;
    unsigned int _field19;
    unsigned int _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    unsigned int _field24;
    unsigned int _field25;
    unsigned int _field26;
    float _field27;
    float _field28;
    unsigned int _field29;
    unsigned int _field30;
    unsigned int _field31;
    unsigned int _field32;
    unsigned int _field33;
    unsigned int _field34;
    unsigned int _field35;
    unsigned int _field36;
    unsigned int _field37;
    unsigned int _field38;
    unsigned int _field39;
    unsigned int _field40;
    unsigned int _field41;
    unsigned int _field42;
    unsigned int _field43;
    unsigned int _field44;
    unsigned int _field45;
    unsigned int _field46;
    unsigned int _field47;
    unsigned int _field48;
    unsigned int _field49;
    unsigned int _field50;
    unsigned int _field51;
    unsigned int _field52;
    unsigned int _field53;
    unsigned int _field54;
    unsigned int _field55;
    unsigned int _field56;
    unsigned int _field57;
    unsigned int _field58;
    unsigned int _field59;
    unsigned int _field60;
    unsigned int _field61;
    unsigned int _field62;
    unsigned long long _field63;
} CDStruct_1825b841;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
} CDStruct_32a7f38a;

typedef struct {
    unsigned int viewportArrayIndexOffset;
    unsigned int renderTargetArrayIndexOffset;
} CDStruct_1987c1e3;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
} CDStruct_33dcf794;

typedef struct {
    unsigned long long _field1[2];
} CDStruct_492b6082;

typedef struct {
    unsigned char key[32];
} CDStruct_41a22ec7;

typedef struct {
    unsigned int :8;
    unsigned int :24;
    unsigned int _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_4af8c268;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
} CDStruct_8727d297;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct CDStruct_183601bc;

typedef struct {
    _Bool _field1;
    unsigned long long _field2;
    CDStruct_183601bc *_field3;
} CDStruct_dbc1e4aa;

typedef struct {
    struct {
        unsigned long long x;
        unsigned long long y;
        unsigned long long z;
    } origin;
    CDStruct_da2e99ad size;
} CDStruct_1e3be3a8;

// Ambiguous groups
typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_14f26992;

typedef struct {
    unsigned long long width;
    unsigned long long height;
    unsigned long long depth;
} CDStruct_da2e99ad;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct optional<unsigned long> {
    union {
        char _field1;
        unsigned long long _field2;
    } _field1;
    _Bool _field2;
} optional_b0be1e53;

typedef struct pair<id<MTLBuffer>, unsigned long> {
    id _field1;
    unsigned long long _field2;
} pair_eb21f6dd;

typedef struct unordered_map<SubView, unsigned long, SubView::hash_t, SubView::equal_t, std::allocator<std::pair<const SubView, unsigned long>>> {
    struct __hash_table<std::__hash_value_type<SubView, unsigned long>, std::__unordered_map_hasher<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::hash_t, SubView::equal_t, true>, std::__unordered_map_equal<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::equal_t, SubView::hash_t, true>, std::allocator<std::__hash_value_type<SubView, unsigned long>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<SubView, unsigned long>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::hash_t, SubView::equal_t, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<SubView, std::__hash_value_type<SubView, unsigned long>, SubView::equal_t, SubView::hash_t, true>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_map_ab6e98fe;

#pragma mark Typedef'd Unions

typedef union {
    CDStruct_4af8c268 _field1;
    CDStruct_4af8c268 _field2;
} CDUnion_c6e49ed4;

