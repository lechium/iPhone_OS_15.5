//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <MetalTools/MTLDebugResourcePurgeable-Protocol.h>

@class MTLDebugDevice, MTLDebugResource;

@interface MTLDebugTexture <MTLDebugResourcePurgeable>
{
    struct MTLPixelFormatInfo _pixelFormatInfo;	// 48 = 0x30
    MTLDebugDevice *_debugDevice;	// 104 = 0x68
    unsigned long long _usageRequired;	// 112 = 0x70
    struct atomic<int> _purgeableStateToken;	// 120 = 0x78
    _Bool _purgeableStateHasBeenSet;	// 124 = 0x7c
    struct mutex _subViewUseLock;	// 128 = 0x80
    _Bool _isLinearTexture;	// 192 = 0xc0
    MTLDebugResource *_common;	// 200 = 0xc8
    unsigned long long _offset;	// 208 = 0xd0
    unsigned long long _bytesPerRow;	// 216 = 0xd8
    unsigned long long _bytesPerImage;	// 224 = 0xe0
    unsigned long long _plane;	// 232 = 0xe8
    unordered_map_ab6e98fe _activeSubViews;	// 240 = 0xf0
}

- (id).cxx_construct;	// IMP=0x00000000000a5fa8
- (void).cxx_destruct;	// IMP=0x00000000000a5f7b
@property(readonly, nonatomic) _Bool isLinearTexture; // @synthesize isLinearTexture=_isLinearTexture;
@property(nonatomic) unordered_map_ab6e98fe activeSubViews; // @synthesize activeSubViews=_activeSubViews;
@property(readonly, nonatomic) unsigned long long plane; // @synthesize plane=_plane;
@property(readonly, nonatomic) unsigned long long bytesPerImage; // @synthesize bytesPerImage=_bytesPerImage;
@property(readonly, nonatomic) unsigned long long bytesPerRow; // @synthesize bytesPerRow=_bytesPerRow;
@property(readonly, nonatomic) unsigned long long offset; // @synthesize offset=_offset;
@property(readonly, nonatomic) MTLDebugResource *common; // @synthesize common=_common;
- (_Bool)_resourceHasMemory;	// IMP=0x00000000000a5e9f
- (void)removeUsedRenderTarget:(unsigned long long)arg1 slices:(struct _NSRange)arg2;	// IMP=0x00000000000a5e25
- (void)addUsedRenderTarget:(unsigned long long)arg1 slices:(struct _NSRange)arg2;	// IMP=0x00000000000a5d7e
- (_Bool)purgeableStateValidForRendering;	// IMP=0x00000000000a5d4e
- (void)unlockPurgeableState;	// IMP=0x00000000000a5d3d
- (void)lockPurgeableState;	// IMP=0x00000000000a5d2c
- (unsigned long long)setPurgeableState:(unsigned long long)arg1;	// IMP=0x00000000000a5c1a
- (id)newCompressedTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 level:(unsigned long long)arg3 slice:(unsigned long long)arg4;	// IMP=0x00000000000a5b0b
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange)arg3 slices:(struct _NSRange)arg4 swizzle:(CDStruct_a06f635e)arg5;	// IMP=0x00000000000a5ad8
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange)arg3 slices:(struct _NSRange)arg4 swizzle:(CDStruct_a06f635e)arg5 resourceIndex:(unsigned long long)arg6;	// IMP=0x00000000000a59b7
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange)arg3 slices:(struct _NSRange)arg4;	// IMP=0x00000000000a598b
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1;	// IMP=0x00000000000a5977
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 textureType:(unsigned long long)arg2 levels:(struct _NSRange)arg3 slices:(struct _NSRange)arg4 resourceIndex:(unsigned long long)arg5;	// IMP=0x00000000000a585c
- (id)newTextureViewWithPixelFormat:(unsigned long long)arg1 resourceIndex:(unsigned long long)arg2;	// IMP=0x00000000000a540e
- (id)description;	// IMP=0x00000000000a53fa
- (void)getBytes:(void *)arg1 bytesPerRow:(unsigned long long)arg2 fromRegion:(CDStruct_1e3be3a8)arg3 mipmapLevel:(unsigned long long)arg4;	// IMP=0x00000000000a5366
- (void)getBytes:(void *)arg1 bytesPerRow:(unsigned long long)arg2 bytesPerImage:(unsigned long long)arg3 fromRegion:(CDStruct_1e3be3a8)arg4 mipmapLevel:(unsigned long long)arg5 slice:(unsigned long long)arg6;	// IMP=0x00000000000a46cb
- (void)replaceRegion:(CDStruct_1e3be3a8)arg1 mipmapLevel:(unsigned long long)arg2 withBytes:(const void *)arg3 bytesPerRow:(unsigned long long)arg4;	// IMP=0x00000000000a45e7
- (void)replaceRegion:(CDStruct_1e3be3a8)arg1 mipmapLevel:(unsigned long long)arg2 slice:(unsigned long long)arg3 withBytes:(const void *)arg4 bytesPerRow:(unsigned long long)arg5 bytesPerImage:(unsigned long long)arg6;	// IMP=0x00000000000a3788
- (_Bool)requireUsage:(unsigned long long)arg1;	// IMP=0x00000000000a3757
- (_Bool)doesAliasAnyResources:(const id *)arg1 count:(unsigned long long)arg2;	// IMP=0x00000000000a373a
- (_Bool)doesAliasAllResources:(const id *)arg1 count:(unsigned long long)arg2;	// IMP=0x00000000000a371d
- (void)makeAliasable;	// IMP=0x00000000000a35b0
- (_Bool)doesAliasResource:(id)arg1;	// IMP=0x00000000000a3593
- (void)dealloc;	// IMP=0x00000000000a34c7
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2 texture:(id)arg3 pixelFormat:(unsigned long long)arg4 textureType:(unsigned long long)arg5 levels:(struct _NSRange)arg6 slices:(struct _NSRange)arg7;	// IMP=0x00000000000a342b
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2 texture:(id)arg3 pixelFormat:(unsigned long long)arg4;	// IMP=0x00000000000a338f
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2 texture:(id)arg3;	// IMP=0x00000000000a3242
- (id)initWithBaseTexture:(id)arg1 heap:(id)arg2 device:(id)arg3;	// IMP=0x00000000000a30eb
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2 plane:(unsigned long long)arg3;	// IMP=0x00000000000a2f88
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2;	// IMP=0x00000000000a2f73
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2 buffer:(id)arg3 offset:(unsigned long long)arg4 bytesPerRow:(unsigned long long)arg5 bytesPerImage:(unsigned long long)arg6;	// IMP=0x00000000000a2de7
- (id)initWithBaseTexture:(id)arg1 device:(id)arg2 buffer:(id)arg3 offset:(unsigned long long)arg4 bytesPerRow:(unsigned long long)arg5;	// IMP=0x00000000000a2c60

@end

