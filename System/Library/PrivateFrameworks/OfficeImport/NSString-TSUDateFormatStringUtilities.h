//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <Foundation/NSString.h>

@interface NSString (TSUDateFormatStringUtilities)
+ (id)tsu_numberSymbols;	// IMP=0x00000000002636c1
+ (id)tsu_stringByHexEncodingData:(id)arg1;	// IMP=0x000000000026e855
+ (id)tsu_stringWithXMLString:(const char *)arg1;	// IMP=0x000000000026e45d
+ (id)tsu_stringByBase64EncodingBytes:(const char *)arg1 length:(unsigned long long)arg2 breakLines:(_Bool)arg3;	// IMP=0x000000000026e068
+ (id)tsu_stringByBase64EncodingBytes:(const char *)arg1 length:(unsigned long long)arg2;	// IMP=0x000000000026e04c
+ (id)tsu_stringWithHexFromBytes:(const char *)arg1 length:(unsigned long long)arg2;	// IMP=0x000000000026dfbc
+ (id)tsu_stringByIndentingString:(id)arg1;	// IMP=0x000000000026b612
+ (id)tsu_stringByIndentingString:(id)arg1 times:(unsigned long long)arg2;	// IMP=0x000000000026b4d0
+ (id)tsu_stringWithFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;	// IMP=0x000000000026b474
+ (id)tsu_stringWithUUID;	// IMP=0x000000000026b43a
+ (id)tsu_localizedDisplayNameWithPersonNameComponents:(id)arg1;	// IMP=0x000000000026f832
+ (id)tsu_fogFilenameFromShareToken:(id)arg1;	// IMP=0x00000000002701d5
+ (id)tsu_fogShareTokenFromFileURL:(id)arg1;	// IMP=0x0000000000270096
+ (id)tsu_customNumberFormatDecimalFormatStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2 includeDecimalSeparator:(_Bool)arg3;	// IMP=0x000000000028c9e8
+ (id)tsu_customNumberFormatDecimalTokenRepresentedStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2;	// IMP=0x000000000028c96b
+ (id)tsu_customNumberFormatDecimalTokenDisplayStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2;	// IMP=0x000000000028c8d9
+ (id)tsu_customNumberFormatIntegerFormatStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2;	// IMP=0x000000000028c7b4
+ (id)tsu_customNumberFormatIntegerTokenRepresentedStringWithDigits:(unsigned long long)arg1 separator:(_Bool)arg2 digitString:(id)arg3;	// IMP=0x000000000028c71f
+ (id)tsu_customNumberFormatIntegerTokenDisplayStringWithDigits:(unsigned long long)arg1 separator:(_Bool)arg2 digitString:(id)arg3 locale:(id)arg4;	// IMP=0x000000000028c594
+ (id)tsu_customNumberFormatTokenStringOfType:(int)arg1 content:(id)arg2;	// IMP=0x000000000028c0ff
+ (id)tc_stringByFixingUnpairedSurrogateCharactersInString:(id)arg1;	// IMP=0x00000000002e2550
+ (_Bool)tc_fixUnpairedSurrogateCharactersInBuffer:(void *)arg1;	// IMP=0x00000000002e24e2
+ (id)tc_stringWithXmlString:(const char *)arg1;	// IMP=0x00000000002e2bed
+ (id)stringWithOcText:(const struct OcText *)arg1;	// IMP=0x00000000000b0a9e
+ (id)stringWithCsString:(const struct CsString *)arg1;	// IMP=0x0000000000018cf9
+ (_Bool)tc_skipString:(id)arg1;	// IMP=0x000000000037ae91
+ (id)tc_mapString:(id)arg1;	// IMP=0x000000000037ad1a
- (id)tsu_stringByReplacing2DigitYearStringWith4DigitYearString;	// IMP=0x000000000024ffda
- (id)tsu_stringByReplacing4DigitYearStringWith2DigitYearString;	// IMP=0x000000000024ff6c
- (id)tsu_prefixOfNumberFormatSubpattern;	// IMP=0x0000000000264080
- (unsigned long long)tsu_indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;	// IMP=0x0000000000263ed4
- (id)tsu_suffixOfNumberFormatSubpattern;	// IMP=0x0000000000263ea2
- (unsigned long long)tsu_indexOfLastNonSuffixCharacterInNumberFormatSubpattern;	// IMP=0x0000000000263d36
- (id)tsu_numberPortionOfNumberFormatSubpattern;	// IMP=0x0000000000263ce5
- (id)tsu_negativeSubpatternOfNumberFormatPattern;	// IMP=0x0000000000263c8b
- (id)tsu_positiveSubpatternOfNumberFormatPattern;	// IMP=0x0000000000263c32
- (unsigned long long)tsu_indexOfNumberFormatSubpatternSeparator;	// IMP=0x0000000000263a5a
- (id)tsu_stringByRemovingEscapedCharactersFromNumberFormatPattern;	// IMP=0x0000000000263912
- (id)tsu_newRangesOfEscapedCharactersInNumberFormatPattern;	// IMP=0x00000000002637be
- (_Bool)tsu_isNumberFormatPattern;	// IMP=0x000000000026372d
- (id)tsu_stringWithNormalizedQuotationMarks;	// IMP=0x000000000026f139
- (id)tsu_stringWithNormalizedHyphens;	// IMP=0x000000000026f0b1
- (id)tsu_stringWithNormalizedHyphensAndQuotationMarks;	// IMP=0x000000000026f061
- (_Bool)tsu_isEqualToString:(id)arg1;	// IMP=0x000000000026f046
- (id)tsu_middleTruncateToLength:(unsigned long long)arg1;	// IMP=0x000000000026ef9c
- (id)tsu_stringWithoutAttachmentCharacters;	// IMP=0x000000000026ef02
- (id)tsu_setOfContainedWordsIncludingPunctuationAndSymbols:(_Bool)arg1;	// IMP=0x000000000026eb8f
- (_Bool)tsu_containsSubstring:(id)arg1;	// IMP=0x000000000026eb6c
- (void)tsu_enumerateRangesOfCharactersInSet:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000026ea2c
- (struct _NSRange)tsu_range;	// IMP=0x000000000026ea14
- (struct _NSRange)tsu_rangeOfString:(id)arg1 options:(unsigned long long)arg2 updatingSearchRange:(struct _NSRange *)arg3;	// IMP=0x000000000026e92f
- (id)tsu_tolerantStringByAppendingPathExtension:(id)arg1;	// IMP=0x000000000026e6a8
- (_Bool)tsu_containsOnlyCharactersFromSet:(id)arg1;	// IMP=0x000000000026e645
- (id)tsu_unescapeXML;	// IMP=0x000000000026e560
- (id)tsu_escapeXML;	// IMP=0x000000000026e47b
- (id)tsu_stringByMakingFirstCharacterUppercase;	// IMP=0x000000000026e3ba
- (id)tsu_stringByMakingFirstCharacterLowercase;	// IMP=0x000000000026e2be
- (id)tsu_encodeStringBase64;	// IMP=0x000000000026e26a
- (id)tsu_stringByTrimmingCharactersInSetFromFront:(id)arg1;	// IMP=0x000000000026df29
- (id)tsu_stringWithPathRelativeTo:(id)arg1 allowBacktracking:(_Bool)arg2;	// IMP=0x000000000026dc8d
- (id)tsu_stringWithPathRelativeTo:(id)arg1;	// IMP=0x000000000026da54
- (id)tsu_substringWithComposedCharacterSequencesToFileSystemLength:(unsigned long long)arg1;	// IMP=0x000000000026d93f
- (id)tsu_substringWithComposedCharacterSequencesTruncatedToLength:(unsigned long long)arg1;	// IMP=0x000000000026d8d1
- (id)tsu_stringWithRealpath;	// IMP=0x000000000026d865
- (_Bool)tsu_isChildOfPath:(id)arg1;	// IMP=0x000000000026d599
- (_Bool)tsu_isDescendantOfPath:(id)arg1;	// IMP=0x000000000026d3d7
- (id)tsu_escapeForIcuRegex;	// IMP=0x000000000026d08a
- (unsigned long long)tsu_countInstancesOfString:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x000000000026cfb0
- (id)tsu_stringByReplacingInstancesOfCharactersInSet:(id)arg1 withString:(id)arg2;	// IMP=0x000000000026cd6a
- (id)tsu_stringByRemovingCharactersInSet:(id)arg1;	// IMP=0x000000000026cd56
- (id)tsu_stringByRemovingCharactersInSet:(id)arg1 options:(unsigned int)arg2;	// IMP=0x000000000026cb0d
- (id)tsu_md5Hash;	// IMP=0x000000000026c942
- (id)tsu_stringByFixingBrokenSurrogatePairs;	// IMP=0x000000000026c61c
- (id)tsu_stringByUniquingPathInsideDirectory:(id)arg1 withFormat:(id)arg2;	// IMP=0x000000000026c329
- (id)tsu_stringByUniquingPathInsideDirectory:(id)arg1;	// IMP=0x000000000026c310
- (id)tsu_stringByAddingCSVEscapesForLocale:(id)arg1;	// IMP=0x000000000026c0b2
- (id)tsu_stringByAppendingSeparator:(id)arg1 format:(id)arg2;	// IMP=0x000000000026bf74
- (id)tsu_stringQuotedIfContainsCharacterSet:(id)arg1;	// IMP=0x000000000026be98
- (id)tsu_stringByExpandingTableFormatting;	// IMP=0x000000000026b629
- (_Bool)tsu_isLegalEmailAddress;	// IMP=0x000000000026f47f
- (id)tsu_uncommentedAddressRespectingGroups;	// IMP=0x000000000026f3fc
- (id)tsu_uncommentedAddress;	// IMP=0x000000000026f1c1
- (_Bool)tsu_isCJKString;	// IMP=0x000000000026f5c4
- (id)tsu_sha256HexHashString;	// IMP=0x000000000026f9ef
- (long long)tsu_compareToVersionString:(id)arg1;	// IMP=0x000000000026fae3
- (unsigned long long)tsu_numberOfKeysInKeyPath;	// IMP=0x000000000027001d
- (id)tsu_lastKey;	// IMP=0x000000000026ffa9
- (id)tsu_firstKey;	// IMP=0x000000000026ff38
- (id)tsu_keyPathByAppendingKey:(id)arg1;	// IMP=0x000000000026fe80
- (id)tsu_keyPathByPrependingKey:(id)arg1;	// IMP=0x000000000026fdc8
- (id)tsu_keyPathByRemovingFirstKey;	// IMP=0x000000000026fd62
- (id)tsu_keyPathByRemovingLastKey;	// IMP=0x000000000026fcff
- (id)tsu_initUnRedactedWithFormat:(id)arg1;	// IMP=0x0000000000270722
- (id)tsu_initRedactedWithFormat:(id)arg1;	// IMP=0x0000000000270663
- (id)tsu_initUnRedactedWithFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;	// IMP=0x0000000000270588
- (id)tsu_initRedactedWithFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;	// IMP=0x00000000002702ff
- (unsigned short)tsu_spaceCharacterInCustomNumberFormatSpaceToken;	// IMP=0x000000000028cb87
- (unsigned short)tsu_scaleCharacterInCustomNumberFormatScaleToken;	// IMP=0x000000000028cb70
- (id)tsu_formatStringFromCustomNumberFormatScaleToken;	// IMP=0x000000000028cb59
- (int)tsu_fractionAccuracyFromCustomNumberFormatFractionToken;	// IMP=0x000000000028cb29
- (id)tsu_currencyCodeFromCustomNumberFormatCurrencyToken;	// IMP=0x000000000028cad8
- (id)tsu_digitPlaceholderStringInDigitToken;	// IMP=0x000000000028ca68
- (unsigned long long)tsu_numberOfDigitsInCustomNumberFormatDecimalToken;	// IMP=0x000000000028c815
- (id)tsu_stringByInsertingFormatGroupingSeparators:(id)arg1;	// IMP=0x000000000028c407
- (_Bool)tsu_customFormatIntegerTokenUsesSeparator;	// IMP=0x000000000028c32b
- (unsigned long long)tsu_numberOfDigitsInCustomNumberFormatIntegerToken;	// IMP=0x000000000028c21a
- (_Bool)tsu_isSpecialCustomNumberFormatTokenOfType:(int)arg1;	// IMP=0x000000000028c1a5
- (_Bool)tsu_isSpecialCustomNumberFormatToken;	// IMP=0x000000000028c161
- (void)sfu_appendJsonStringToString:(id)arg1;	// IMP=0x00000000002a21e5
- (_Bool)tsu_pathExtensionConformsToUTI:(id)arg1;	// IMP=0x00000000002a38aa
- (_Bool)tsu_pathConformsToUTI:(id)arg1;	// IMP=0x00000000002a3879
@property(readonly, nonatomic) NSString *tsu_pathUTI;
@property(readonly, nonatomic) NSString *tsu_UTIFilenameExtension;
- (_Bool)tsu_conformsToAnyUTI:(id)arg1;	// IMP=0x00000000002a3654
- (_Bool)tsu_conformsToUTI:(id)arg1;	// IMP=0x00000000002a3639
- (const char *)nulTerminatedUTF8;	// IMP=0x00000000002e24c8
- (_Bool)tc_doesURLHostContainWhitespace;	// IMP=0x00000000002e2389
- (_Bool)tc_startsWithString:(id)arg1;	// IMP=0x00000000002e2368
- (id)tc_stringByRemovingInvalidXmlChars;	// IMP=0x00000000002e31fc
- (_Bool)tc_isEqualToXmlString:(const char *)arg1;	// IMP=0x00000000002e318e
- (id)tc_componentsSeparatedByWhitespace;	// IMP=0x00000000002e2f4b
- (id)tc_initFromXmlNode:(struct _xmlNode *)arg1 nsWithFallbackNs:(id)arg2 attributeName:(const char *)arg3;	// IMP=0x00000000002e2e1f
- (id)tc_initFromXmlNode:(struct _xmlNode *)arg1 ns:(const char *)arg2 attributeName:(const char *)arg3;	// IMP=0x00000000002e2d95
- (id)tc_initWithContentOfXmlNode:(struct _xmlNode *)arg1;	// IMP=0x00000000002e2cfe
- (id)tc_initWithValueOfXmlAttribute:(struct _xmlAttr *)arg1;	// IMP=0x00000000002e2c36
- (const char *)tc_xmlString;	// IMP=0x00000000002e2c1c
- (id)tc_initWithXmlString:(const char *)arg1;	// IMP=0x00000000002e2bda
- (void)copyToOcText:(struct OcText *)arg1 encoding:(int)arg2;	// IMP=0x0000000000183cb5
- (void)copyToOcText:(struct OcText *)arg1;	// IMP=0x0000000000183c9e
- (void)copyToCsString:(struct CsString *)arg1;	// IMP=0x0000000000356653
- (id)dataUsingWordEncoding:(int)arg1;	// IMP=0x0000000000183db1
- (id)initWithOcText:(const struct OcText *)arg1;	// IMP=0x00000000000b0ad5
- (id)initWithCsString:(const struct CsString *)arg1;	// IMP=0x0000000000016194
- (unsigned short *)cWideString;	// IMP=0x000000000037abe3
- (id)tc_escapedFragment;	// IMP=0x000000000037b3a5
- (id)tc_escapedPath;	// IMP=0x000000000037b37e
- (int)tc_languageTypeAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2;	// IMP=0x000000000037b1aa
- (id)tc_initialsFromAuthorName;	// IMP=0x000000000037af65
- (id)getDataUsingOfficeCryptographicEncoding;	// IMP=0x000000000037f3d5
- (int)tc_fontTypeAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2 forXML:(_Bool)arg3;	// IMP=0x000000000041cdf5
- (int)fontTypeForCharacter:(unsigned short)arg1 isControl:(_Bool *)arg2;	// IMP=0x000000000041cd46
- (id)CM_stringByAddingCSSEscapes;	// IMP=0x000000000046ab99
- (id)copyCsvRows:(unsigned long long *)arg1;	// IMP=0x00000000004795e5
- (id)_copyCsvRows:(unsigned long long *)arg1 usingDelimiter:(id)arg2 columnCountIsConstant:(_Bool *)arg3;	// IMP=0x0000000000478f8a
- (struct _NSRange)oi_rangeOfCharactersFromSet:(id)arg1 index:(int)arg2;	// IMP=0x00000000000f3e7d
- (double)oi_sizeWithFontName:(id)arg1 size:(int)arg2 bold:(_Bool)arg3 italic:(_Bool)arg4;	// IMP=0x00000000000ace21
- (double)oi_sizeWithFontName:(id)arg1 size:(int)arg2;	// IMP=0x00000000000ace09
@end

