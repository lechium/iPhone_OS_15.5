//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <OfficeImport/NSCopying-Protocol.h>

@class UIColor;

__attribute__((visibility("hidden")))
@interface OITSUColor : NSObject <NSCopying>
{
    struct CGColor *mCGColor;	// 8 = 0x8
    unsigned long long mColorRGBSpace;	// 16 = 0x10
}

+ (id)brownColor;	// IMP=0x00000000002cf754
+ (id)purpleColor;	// IMP=0x00000000002cf71c
+ (id)orangeColor;	// IMP=0x00000000002cf6e4
+ (id)magentaColor;	// IMP=0x00000000002cf6b1
+ (id)yellowColor;	// IMP=0x00000000002cf67e
+ (id)cyanColor;	// IMP=0x00000000002cf64b
+ (id)blueColor;	// IMP=0x00000000002cf618
+ (id)greenColor;	// IMP=0x00000000002cf5e5
+ (id)redColor;	// IMP=0x00000000002cf5b2
+ (id)lightGrayColor;	// IMP=0x00000000002cf580
+ (id)grayColor;	// IMP=0x00000000002cf54e
+ (id)whiteColor;	// IMP=0x00000000002cf521
+ (id)blackColor;	// IMP=0x00000000002cf4f4
+ (id)clearColor;	// IMP=0x00000000002cf4cc
+ (id)randomColor;	// IMP=0x00000000002cf487
+ (id)colorWithUIColor:(id)arg1;	// IMP=0x00000000002cf43e
+ (id)colorWithHexString:(id)arg1;	// IMP=0x00000000002cf3f5
+ (id)colorWithPatternImage:(id)arg1;	// IMP=0x00000000002cf3ac
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00000000002cf352
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002cf300
+ (id)colorWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002cf2c2
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002cf270
+ (id)colorWithCGColor:(struct CGColor *)arg1;	// IMP=0x00000000002cf241
+ (id)stringForColor:(id)arg1;	// IMP=0x00000000002d92e0
+ (id)stringForSystemColorID:(int)arg1;	// IMP=0x00000000002d90f4
+ (id)colorWithSystemColorID:(int)arg1;	// IMP=0x00000000002d9091
+ (id)colorWithBGR:(unsigned int)arg1;	// IMP=0x00000000002d901d
+ (id)colorWithCatalogName:(id)arg1 colorName:(id)arg2;	// IMP=0x00000000002d8cb8
+ (id)colorWithDeviceCyan:(double)arg1 magenta:(double)arg2 yellow:(double)arg3 black:(double)arg4 alpha:(double)arg5;	// IMP=0x00000000002d8c2d
+ (id)colorWithDeviceRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002d8c14
+ (id)colorWithDeviceHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002d8bdb
+ (id)colorWithDeviceWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002d8bc2
+ (id)colorWithCalibratedRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002d8ba9
+ (id)colorWithCalibratedHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002d8b70
+ (id)colorWithCalibratedWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002d8b57
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3 alpha:(int)arg4;	// IMP=0x00000000002d8b14
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3;	// IMP=0x00000000002d8afc
+ (id)colorWithEshColor:(const struct EshColor *)arg1;	// IMP=0x000000000034d3a7
+ (id)colorWithCsColour:(const struct CsColour *)arg1;	// IMP=0x000000000034d2f9
+ (id)colorWithRGBBytes:(unsigned char)arg1 green:(unsigned char)arg2 blue:(unsigned char)arg3;	// IMP=0x0000000000364de4
+ (id)colorWithRGBValue:(long long)arg1;	// IMP=0x00000000003a76fe
+ (id)colorWithBGRValue:(long long)arg1;	// IMP=0x00000000003a7687
@property(readonly, nonatomic) unsigned long long colorRGBSpace; // @synthesize colorRGBSpace=mColorRGBSpace;
- (id)hexString;	// IMP=0x00000000002d1816
- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002d17ca
- (void)paintRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002d177c
- (id)newBlendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002d1630
- (id)blendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002d1616
- (_Bool)wantsHighContrastBackgroundForDarkMode:(id)arg1;	// IMP=0x00000000002d158b
- (_Bool)isNearlyWhite;	// IMP=0x00000000002d14de
- (_Bool)isOpaque;	// IMP=0x00000000002d14b2
- (double)luminance;	// IMP=0x00000000002d1362
- (id)colorWithAlphaComponent:(double)arg1;	// IMP=0x00000000002d1319
- (id)invertedColor;	// IMP=0x00000000002d11ca
- (id)grayscaleColor;	// IMP=0x00000000002d1113
@property(readonly, nonatomic) UIColor *UIColor;
- (double)brightnessComponent;	// IMP=0x00000000002d104d
- (double)saturationComponent;	// IMP=0x00000000002d0fbd
- (double)hueComponent;	// IMP=0x00000000002d0f2d
- (void)getRGBAComponents:(double *)arg1;	// IMP=0x00000000002d0e0a
@property(readonly, nonatomic) double alphaComponent;
@property(readonly, nonatomic) double blueComponent;
@property(readonly, nonatomic) double greenComponent;
@property(readonly, nonatomic) double redComponent;
- (double)p_rgbComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002d0d02
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000002d0cf7
- (_Bool)isEqualWithTolerance:(id)arg1;	// IMP=0x00000000002d0c7d
- (_Bool)isAlmostEqualToColor:(id)arg1;	// IMP=0x00000000002d0b43
- (_Bool)p_isEqualToColor:(id)arg1 withTolerance:(double)arg2;	// IMP=0x00000000002d07d1
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000002d07bf
- (unsigned long long)hash;	// IMP=0x00000000002d07b4
- (void)dealloc;	// IMP=0x00000000002d077a
- (id)initWithUIColor:(id)arg1;	// IMP=0x00000000002d0529
- (id)initWithHexString:(id)arg1;	// IMP=0x00000000002d01b1
- (id)initWithPatternImage:(id)arg1;	// IMP=0x00000000002d0016
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00000000002cff7c
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002cff62
- (id)initWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002cff47
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 colorSpace:(unsigned long long)arg5;	// IMP=0x00000000002cfe63
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002cfe49
- (id)initWithCGColor:(struct CGColor *)arg1;	// IMP=0x00000000002cfe32
- (id)initWithCGColor:(struct CGColor *)arg1 colorSpace:(unsigned long long)arg2;	// IMP=0x00000000002cf796
@property(readonly) struct CGColor *CGColor;
- (void)set;	// IMP=0x00000000002d947c
- (id)colorWithShadeValue:(double)arg1;	// IMP=0x00000000002d93f9
- (id)colorWithTintValue:(double)arg1;	// IMP=0x00000000002d9375
- (unsigned int)toBGR;	// IMP=0x00000000002d9005
- (id)copy;	// IMP=0x00000000002d8fb9
@property(readonly) int CGColorSpaceModel;
@property(readonly) struct CGColorSpace *CGColorSpace;
- (void)getCyan:(double *)arg1 magenta:(double *)arg2 yellow:(double *)arg3 black:(double *)arg4 alpha:(double *)arg5;	// IMP=0x00000000002d8ed4
@property(readonly) double blackComponent;
@property(readonly) double yellowComponent;
@property(readonly) double magentaComponent;
@property(readonly) double cyanComponent;
- (double)p_cmykComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002d8e07
- (void)getWhite:(double *)arg1 alpha:(double *)arg2;	// IMP=0x00000000002d8db6
@property(readonly) double whiteComponent;
- (void)getRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;	// IMP=0x00000000002d8cc0
- (id)solidColoredPngImage;	// IMP=0x00000000002d8af4
- (id)newSolidColoredBitmap:(struct CGSize)arg1;	// IMP=0x00000000002d8aec
- (CDStruct_a06f635e)ttColor;	// IMP=0x00000000002d8a40
- (struct EshColor)eshColor;	// IMP=0x000000000034d447
- (struct CsColour)csColour;	// IMP=0x000000000034d35c
- (void)getRGBBytes:(char *)arg1 green:(char *)arg2 blue:(char *)arg3;	// IMP=0x0000000000364e1f
- (_Bool)isBlack;	// IMP=0x000000000047b95a

@end

