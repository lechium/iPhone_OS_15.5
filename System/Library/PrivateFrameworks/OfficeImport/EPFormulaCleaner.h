//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class EDFormula, EDName, EDRowBlocks, EDSheet, NSMutableDictionary;

__attribute__((visibility("hidden")))
@interface EPFormulaCleaner
{
    EDSheet *mCurrentSheet;	// 32 = 0x20
    EDFormula *mFormula;	// 40 = 0x28
    EDFormula *mTokensToClean;	// 48 = 0x30
    EDName *mParentName;	// 56 = 0x38
    int mRowOffset;	// 64 = 0x40
    int mColumnOffset;	// 68 = 0x44
    EDRowBlocks *mBaseFormulaRowBlocks;	// 72 = 0x48
    NSMutableDictionary *mNameArrayedTestCache;	// 80 = 0x50
    NSMutableDictionary *mNameCircularReferenceTestCache;	// 88 = 0x58
}

- (void).cxx_destruct;	// IMP=0x00000000003b497f
- (void)cleanFormula:(id)arg1 name:(id)arg2;	// IMP=0x00000000003b48fd
- (void)cleanFormula:(id)arg1 sheet:(id)arg2;	// IMP=0x000000000014c5da
- (void)applyProcessorToObject:(id)arg1 sheet:(id)arg2;	// IMP=0x0000000000150bb3
- (_Bool)isObjectSupported:(id)arg1;	// IMP=0x000000000014fb70
- (void)prepareToProcessFormula:(id)arg1 sheet:(id)arg2 name:(id)arg3;	// IMP=0x000000000014c82d
- (void)reset;	// IMP=0x000000000014c9ae
- (void)reportWarning:(int)arg1 parameter:(id)arg2;	// IMP=0x00000000001512f0
- (void)reportWarning:(int)arg1;	// IMP=0x00000000001512dc
- (id)newFormulaToCleanFromSharedFormula:(id)arg1;	// IMP=0x000000000014d08f
- (_Bool)doesNameIndexContainCircularReferences:(unsigned int)arg1 sheetIndex:(unsigned long long)arg2 previousNameIndexes:(void *)arg3;	// IMP=0x00000000003b7f90
- (_Bool)isArrayedFormulaSupported:(id)arg1 allowSimpleRanges:(_Bool)arg2 formulasBeingEvaluated:(id)arg3;	// IMP=0x00000000003b79cc
- (id)useEvaluationStackToGetParameter:(unsigned int)arg1 tokenIndex:(unsigned int)arg2 allReferencesAllowed:(_Bool)arg3 success:(_Bool *)arg4;	// IMP=0x00000000003b709d
- (unsigned int)useEvaluationStackToGetParameter:(unsigned int)arg1 tokenIndex:(unsigned int)arg2;	// IMP=0x000000000023da9a
- (int)useEvaluationStackToGetParameterTokenType:(unsigned int)arg1 tokenIndex:(unsigned int)arg2 success:(_Bool *)arg3;	// IMP=0x00000000003b704e
- (_Bool)useEvaluationStackToCheckFunctionId:(int)arg1 functionName:(id)arg2 tokenIndex:(unsigned int)arg3;	// IMP=0x00000000003b68b7
- (void)applyMaxCellsInName:(id)arg1;	// IMP=0x000000000018fdd2
- (void)updateWorksheet:(id)arg1 row:(int)arg2 column:(int)arg3 inDictionary:(id)arg4;	// IMP=0x00000000003b67c3
- (_Bool)checkCustomFunction:(unsigned int)arg1;	// IMP=0x00000000003b6488
- (_Bool)checkSupportedAddInName:(id)arg1 externalLink:(_Bool)arg2;	// IMP=0x000000000021e154
- (_Bool)checkFunctionId:(int)arg1 tokenIndex:(unsigned int)arg2;	// IMP=0x000000000014d018
- (_Bool)cleanName:(unsigned int)arg1 nameIndex:(unsigned int)arg2 sheetIndex:(unsigned long long)arg3 tokenOffset:(int *)arg4;	// IMP=0x00000000003b5e83
- (id)worksheetsFromLinkReferenceIndex:(unsigned int)arg1;	// IMP=0x00000000003b5cc3
- (id)worksheetFromLinkReferenceIndex:(unsigned int)arg1;	// IMP=0x00000000003b5b8b
- (_Bool)isLinkReferenceIndexSupported:(unsigned int)arg1 allowExternal:(_Bool)arg2;	// IMP=0x0000000000150edc
- (_Bool)combineCellReferences:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003b5494
- (_Bool)cleanRange:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003b5334
- (_Bool)cleanUnion:(unsigned int)arg1;	// IMP=0x000000000023d863
- (_Bool)cleanFuncVar:(unsigned int)arg1;	// IMP=0x000000000014cfc2
- (_Bool)cleanFunc:(unsigned int)arg1;	// IMP=0x000000000014d69e
- (_Bool)cleanNameX:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003b5056
- (_Bool)cleanName:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003b4f99
- (_Bool)cleanArea3D:(unsigned int)arg1;	// IMP=0x0000000000150bc7
- (_Bool)cleanRef3D:(unsigned int)arg1;	// IMP=0x000000000015139c
- (_Bool)cleanArea:(unsigned int)arg1 updateSheet:(_Bool)arg2;	// IMP=0x000000000014d496
- (_Bool)cleanRef:(unsigned int)arg1 updateSheet:(_Bool)arg2;	// IMP=0x000000000014caa1
- (_Bool)cleanArray:(unsigned int)arg1;	// IMP=0x0000000000246f23
- (void)updateSheet:(id)arg1 rowMin:(int)arg2 rowMinRelative:(_Bool)arg3 rowMax:(int)arg4 rowMaxRelative:(_Bool)arg5 columnMin:(int)arg6 columnMinRelative:(_Bool)arg7 columnMax:(int)arg8 columnMaxRelative:(_Bool)arg9;	// IMP=0x00000000003b4ebc
- (void)updateSheet:(id)arg1 row:(int)arg2 rowRelative:(_Bool)arg3 column:(int)arg4 columnRelative:(_Bool)arg5;	// IMP=0x000000000014cce8
- (_Bool)isThereContentOutsideOfLassoBoundsForSheet:(id)arg1 rowMin:(int)arg2 rowMax:(int)arg3 columnMin:(int)arg4 columnMax:(int)arg5;	// IMP=0x000000000014d694
- (_Bool)isReferenceValidInLassoForSheet:(id)arg1 rowMin:(int)arg2 rowMinRelative:(_Bool)arg3 rowMax:(int)arg4 rowMaxRelative:(_Bool)arg5 columnMin:(int)arg6 columnMinRelative:(_Bool)arg7 columnMax:(int)arg8 columnMaxRelative:(_Bool)arg9;	// IMP=0x00000000003b4d6f
- (_Bool)isReferenceValidInLassoForRow:(int)arg1 rowRelative:(_Bool)arg2 column:(int)arg3 columnRelative:(_Bool)arg4;	// IMP=0x000000000014cc5c
- (void)addOffsetsToRow:(int *)arg1 rowRelative:(_Bool)arg2 column:(int *)arg3 columnRelative:(_Bool)arg4;	// IMP=0x000000000014ccc0
- (_Bool)cleanTokenAtIndex:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003b4a05
- (void)cleanFormula:(id)arg1 sheet:(id)arg2 name:(id)arg3;	// IMP=0x000000000014c65f

@end

