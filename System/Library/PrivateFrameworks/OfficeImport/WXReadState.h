//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CXNamespace, NSMutableArray, NSMutableDictionary, OAXDrawingState, OCPPackagePart, OITSUNoCopyDictionary, WDCharacterRun, WDDocument, WXOAVReadState;
@protocol TCCancelDelegate;

__attribute__((visibility("hidden")))
@interface WXReadState
{
    WDDocument *mDocument;	// 32 = 0x20
    OITSUNoCopyDictionary *mTextNodesToBeAdded;	// 40 = 0x28
    OITSUNoCopyDictionary *mMapBookmarkIdToName;	// 48 = 0x30
    OITSUNoCopyDictionary *mMapAnnotationIdToAnnotation;	// 56 = 0x38
    OITSUNoCopyDictionary *mMapAnnotationParaIdToAnnotation;	// 64 = 0x40
    NSMutableDictionary *mMapFlowIdToTextBox;	// 72 = 0x48
    OCPPackagePart *mPackagePart;	// 80 = 0x50
    OCPPackagePart *mAnnotationPart;	// 88 = 0x58
    OCPPackagePart *mAnnotationExtendedPart;	// 96 = 0x60
    struct _xmlDoc *mFootnoteDocument;	// 104 = 0x68
    struct _xmlNode *mFootnotes;	// 112 = 0x70
    struct _xmlDoc *mEndnoteDocument;	// 120 = 0x78
    struct _xmlNode *mEndnotes;	// 128 = 0x80
    struct _xmlDoc *mAnnotationDocument;	// 136 = 0x88
    struct _xmlNode *mAnnotations;	// 144 = 0x90
    struct _xmlDoc *mAnnotationExtendedDocument;	// 152 = 0x98
    struct _xmlNode *mAnnotationsExtended;	// 160 = 0xa0
    NSMutableArray *mDeleteAuthorStack;	// 168 = 0xa8
    NSMutableArray *mDeleteDateStack;	// 176 = 0xb0
    NSMutableArray *mEditAuthorStack;	// 184 = 0xb8
    NSMutableArray *mEditDateStack;	// 192 = 0xc0
    NSMutableArray *mFormatAuthorStack;	// 200 = 0xc8
    NSMutableArray *mFormatDateStack;	// 208 = 0xd0
    NSMutableArray *mPendingCommentNodes;	// 216 = 0xd8
    NSMutableArray *mPendingBookmarkNodes;	// 224 = 0xe0
    WXOAVReadState *mWXOavState;	// 232 = 0xe8
    OAXDrawingState *mDrawingState;	// 240 = 0xf0
    int mCurrentOfficeArtTextType;	// 248 = 0xf8
    WDCharacterRun *mReadSymbolTo;	// 256 = 0x100
    _Bool mNewSectionRequested;	// 264 = 0x108
    _Bool mReadingMath;	// 265 = 0x109
    unsigned long long mCurrentRowCNFStyle;	// 272 = 0x110
    unsigned long long mCurrentCellCNFStyle;	// 280 = 0x118
    _Bool mCurrentTableWraps;	// 288 = 0x120
    id <TCCancelDelegate> mCancelDelegate;	// 296 = 0x128
    CXNamespace *mWXMainNamespace;	// 304 = 0x130
    CXNamespace *mWXDrawingNamespace;	// 312 = 0x138
    CXNamespace *mWXShapeNamespace;	// 320 = 0x140
    CXNamespace *mWXGroupNamespace;	// 328 = 0x148
    CXNamespace *mWXOOBibliographyNamespace;	// 336 = 0x150
    CXNamespace *mWXRelationshipNamespace;	// 344 = 0x158
    _Bool mIsThumbnail;	// 352 = 0x160
}

- (void).cxx_destruct;	// IMP=0x0000000000421d65
@property(retain, nonatomic) id <TCCancelDelegate> cancelDelegate; // @synthesize cancelDelegate=mCancelDelegate;
@property(nonatomic) int currentOfficeArtTextType; // @synthesize currentOfficeArtTextType=mCurrentOfficeArtTextType;
@property(nonatomic) _Bool readingMath; // @synthesize readingMath=mReadingMath;
@property(retain, nonatomic) CXNamespace *WXRelationshipNamespace; // @synthesize WXRelationshipNamespace=mWXRelationshipNamespace;
@property(retain, nonatomic) CXNamespace *WXOOBibliographyNamespace; // @synthesize WXOOBibliographyNamespace=mWXOOBibliographyNamespace;
@property(retain, nonatomic) CXNamespace *WXGroupNamespace; // @synthesize WXGroupNamespace=mWXGroupNamespace;
@property(retain, nonatomic) CXNamespace *WXShapeNamespace; // @synthesize WXShapeNamespace=mWXShapeNamespace;
@property(retain, nonatomic) CXNamespace *WXDrawingNamespace; // @synthesize WXDrawingNamespace=mWXDrawingNamespace;
@property(retain, nonatomic) CXNamespace *WXMainNamespace; // @synthesize WXMainNamespace=mWXMainNamespace;
- (_Bool)isThumbnail;	// IMP=0x0000000000421c12
- (void)setIsThumbnail:(_Bool)arg1;	// IMP=0x0000000000421c02
- (void)setupNSForXMLFormat:(int)arg1;	// IMP=0x0000000000421611
- (_Bool)currentTableWraps;	// IMP=0x0000000000421601
- (void)setCurrentTableWraps:(_Bool)arg1;	// IMP=0x00000000004215f1
- (void)setCurrentCellCNFStyle:(unsigned long long)arg1;	// IMP=0x00000000004215e0
- (unsigned long long)currentCellCNFStyle;	// IMP=0x00000000004215cf
- (void)setCurrentRowCNFStyle:(unsigned long long)arg1;	// IMP=0x00000000004215be
- (unsigned long long)currentRowCNFStyle;	// IMP=0x00000000004215ad
- (void)setNewSectionRequested:(_Bool)arg1;	// IMP=0x000000000042159d
- (_Bool)isNewSectionRequested;	// IMP=0x000000000042158d
- (void)setReadSymbolTo:(id)arg1;	// IMP=0x0000000000421579
- (id)readSymbolTo;	// IMP=0x0000000000421564
- (id)drawingState;	// IMP=0x000000000042154f
- (void)clearPendingBookmarks;	// IMP=0x00000000004213d3
- (id)pendingBookmarks;	// IMP=0x00000000004213be
- (void)addPendingBookmark:(struct _xmlNode *)arg1;	// IMP=0x000000000042133c
- (void)clearPendingComments;	// IMP=0x000000000042131f
- (id)pendingComments;	// IMP=0x000000000042130a
- (void)addPendingComment:(struct _xmlNode *)arg1;	// IMP=0x000000000042129b
- (id)currentFormatDate;	// IMP=0x000000000042127e
- (id)currentFormatAuthor;	// IMP=0x0000000000421261
- (void)popFormatAuthorDate;	// IMP=0x0000000000421218
- (void)pushFormatAuthor:(id)arg1 date:(id)arg2;	// IMP=0x0000000000421173
- (id)currentEditDate;	// IMP=0x0000000000421156
- (id)currentEditAuthor;	// IMP=0x0000000000421139
- (void)popEditAuthorDate;	// IMP=0x00000000004210b6
- (void)pushEditAuthor:(id)arg1 date:(id)arg2;	// IMP=0x0000000000421006
- (id)currentDeleteDate;	// IMP=0x0000000000420fe9
- (id)currentDeleteAuthor;	// IMP=0x0000000000420fcc
- (void)popDeleteAuthorDate;	// IMP=0x0000000000420f6f
- (void)pushDeleteAuthor:(id)arg1 date:(id)arg2;	// IMP=0x0000000000420ebf
- (id)wxoavState;	// IMP=0x0000000000420eaa
- (void)setDocumentPart:(id)arg1;	// IMP=0x0000000000420c50
- (void)setAnnotationExtendedPart:(id)arg1;	// IMP=0x0000000000420c3c
- (id)annotationExtendedPart;	// IMP=0x0000000000420c27
- (void)setAnnotationPart:(id)arg1;	// IMP=0x0000000000420c13
- (id)annotationPart;	// IMP=0x0000000000420bfe
- (void)setPackagePart:(id)arg1;	// IMP=0x0000000000420bea
- (id)packagePart;	// IMP=0x0000000000420bd5
- (struct _xmlNode *)xmlAnnotationExtendedWithParaId:(unsigned int)arg1;	// IMP=0x0000000000420a44
- (struct _xmlNode *)xmlAnnotationWithID:(long long)arg1;	// IMP=0x00000000004209b7
- (struct _xmlNode *)xmlEndnoteWithID:(long long)arg1;	// IMP=0x000000000042092a
- (struct _xmlNode *)xmlFootnoteWithID:(long long)arg1;	// IMP=0x000000000042089d
- (void)setTextBox:(id)arg1 forFlowId:(id)arg2;	// IMP=0x000000000042087f
- (id)textBoxForFlowId:(id)arg1;	// IMP=0x0000000000420852
- (_Bool)hasAnnotationsExtended;	// IMP=0x000000000042083d
- (id)annotationWithParaId:(unsigned int)arg1;	// IMP=0x00000000004207bb
- (void)addAnnotationParaId:(unsigned int)arg1 annotation:(id)arg2;	// IMP=0x000000000042071c
- (_Bool)hasAnnotations;	// IMP=0x0000000000420707
- (id)annotationWithId:(long long)arg1;	// IMP=0x0000000000420685
- (void)addAnnotationId:(long long)arg1 annotation:(id)arg2;	// IMP=0x00000000004205e6
- (id)bookmarkName:(long long)arg1;	// IMP=0x0000000000420564
- (void)addBookmarkId:(long long)arg1 name:(id)arg2;	// IMP=0x00000000004204c5
- (void)clearOutNodesToBeAdded:(id)arg1;	// IMP=0x0000000000420419
- (id)nodesToBeAdded:(id)arg1;	// IMP=0x00000000004203aa
- (void)addText:(id)arg1 node:(struct _xmlNode *)arg2;	// IMP=0x000000000042028b
- (void)setDocument:(id)arg1;	// IMP=0x00000000004201e0
- (id)document;	// IMP=0x00000000004201cb
- (void)dealloc;	// IMP=0x000000000041ffec
- (id)initNoStacksWith:(id)arg1;	// IMP=0x000000000041fdd1
- (id)init;	// IMP=0x000000000041fa30

@end

