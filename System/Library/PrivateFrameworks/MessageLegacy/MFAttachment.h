//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MessageLegacy/EFCancelable-Protocol.h>

@class MFAttachmentManager, MFAttachmentPlaceholder, MFMimePart, NSProgress, NSString, NSURL;
@protocol MFDataConsumer;

@interface MFAttachment : NSObject <EFCancelable>
{
    MFAttachmentManager *_attachmentManager;	// 8 = 0x8
    _Bool _isDataAvailableLocally;	// 16 = 0x10
    MFAttachmentPlaceholder *_placeholder;	// 24 = 0x18
    NSProgress *_downloadProgress;	// 32 = 0x20
    _Bool _isAutoArchive;	// 40 = 0x28
    _Bool _wantsCompletionBlockOffMainThread;	// 41 = 0x29
    NSURL *_url;	// 48 = 0x30
    MFMimePart *_part;	// 56 = 0x38
    NSString *_disposition;	// 64 = 0x40
    CDUnknownBlockType _fetchCompletionBlock;	// 72 = 0x48
    id <MFDataConsumer> _customConsumer;	// 80 = 0x50
    unsigned long long _lastProgressBytes;	// 88 = 0x58
    double _lastProgressTime;	// 96 = 0x60
}

@property(nonatomic) double lastProgressTime; // @synthesize lastProgressTime=_lastProgressTime;
@property(nonatomic) unsigned long long lastProgressBytes; // @synthesize lastProgressBytes=_lastProgressBytes;
@property(retain, nonatomic) NSProgress *downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property(nonatomic) MFAttachmentManager *attachmentManager; // @synthesize attachmentManager=_attachmentManager;
@property(nonatomic) _Bool wantsCompletionBlockOffMainThread; // @synthesize wantsCompletionBlockOffMainThread=_wantsCompletionBlockOffMainThread;
@property(retain, nonatomic) id <MFDataConsumer> customConsumer; // @synthesize customConsumer=_customConsumer;
@property(copy, nonatomic) CDUnknownBlockType fetchCompletionBlock; // @synthesize fetchCompletionBlock=_fetchCompletionBlock;
@property(retain, nonatomic) MFAttachmentPlaceholder *placeholder; // @synthesize placeholder=_placeholder;
@property(readonly) _Bool isAutoArchive; // @synthesize isAutoArchive=_isAutoArchive;
@property(copy, nonatomic) NSString *disposition; // @synthesize disposition=_disposition;
@property(retain, nonatomic) MFMimePart *part; // @synthesize part=_part;
@property(copy, nonatomic) NSURL *url; // @synthesize url=_url;
- (_Bool)contentTypeConformsToIWork;	// IMP=0x0000000000048333
- (_Bool)contentTypeConformsToPassbook;	// IMP=0x00000000000482e4
- (_Bool)contentTypeConformsToMarkup;	// IMP=0x0000000000048295
- (_Bool)contentTypeConformsToProvisionment;	// IMP=0x0000000000048220
- (_Bool)contentTypeConformsToEventICS;	// IMP=0x0000000000048207
- (_Bool)contentTypeConformsToEventVCS;	// IMP=0x00000000000481ee
- (_Bool)contentTypeConformsToEvent;	// IMP=0x00000000000481b3
- (_Bool)contentTypeConformsToVCard;	// IMP=0x0000000000048180
- (_Bool)conformsToType:(id)arg1;	// IMP=0x000000000004814a
- (id)textEncodingGuessWithData:(id)arg1;	// IMP=0x00000000000480b0
- (id)textEncodingNameForData:(id)arg1 mimeType:(id)arg2;	// IMP=0x0000000000047fac
- (id)readFromDisk;	// IMP=0x0000000000047dd0
- (void)writeToDiskWithData:(id)arg1;	// IMP=0x0000000000047b52
- (unsigned long long)sizeOnDisk;	// IMP=0x0000000000047abf
- (id)fileAttributes;	// IMP=0x0000000000047a09
- (_Bool)isCached;	// IMP=0x00000000000479ab
@property(nonatomic) unsigned long long encodedFileSize;
@property(nonatomic) unsigned long long decodedFileSize;
@property(copy, nonatomic) NSString *mimeType; // @dynamic mimeType;
@property(copy) NSString *contentID;
- (id)attachmentContentTypeForFileName:(id)arg1;	// IMP=0x000000000004770f
@property(readonly) NSString *fileUTType;
- (id)_fileUTTypeForFileName:(id)arg1;	// IMP=0x000000000004727f
@property(readonly) NSString *path; // @dynamic path;
@property(copy, nonatomic) NSString *remoteImageFileName;
@property(copy, nonatomic) NSString *fileName; // @dynamic fileName;
- (id)fileNameByStrippingZipIfNeeded:(_Bool)arg1;	// IMP=0x00000000000470f4
- (_Bool)isImageFile;	// IMP=0x0000000000047006
@property(readonly) _Bool isContainedInCompose;
@property(readonly) _Bool isContainedInRFC822;
@property(readonly) NSString *inferredMimeType;
@property(readonly) _Bool isDataAvailableLocally;
- (id)_dataProvider;	// IMP=0x0000000000046d2f
- (_Bool)isAvailable;	// IMP=0x0000000000046d27
- (id)filterICSData:(id)arg1;	// IMP=0x0000000000046d1e
- (id)filterVCSData:(id)arg1;	// IMP=0x0000000000046c39
- (id)filterData:(id)arg1;	// IMP=0x0000000000046ba7
- (id)fileURL;	// IMP=0x0000000000046b46
- (void)resetProgress;	// IMP=0x0000000000046b32
- (void)updateProgressWithCurrentBytes:(unsigned long long)arg1;	// IMP=0x0000000000046b1c
@property _Bool isPlaceholder; // @dynamic isPlaceholder;
- (id)fetchPlaceholderData;	// IMP=0x00000000000467b1
- (_Bool)isMailDropPhotoArchive;	// IMP=0x00000000000467a9
- (_Bool)isMailDrop;	// IMP=0x00000000000467a1
- (id)fetchDataToURL:(id *)arg1;	// IMP=0x00000000000466cb
- (void)cancel;	// IMP=0x00000000000466b2
- (id)fetchDataSynchronously:(id *)arg1 stripPrivateMetadata:(_Bool)arg2;	// IMP=0x00000000000463bc
- (id)fetchDataSynchronously:(id *)arg1;	// IMP=0x00000000000463a8
- (id)fetchLocalData:(id *)arg1 stripPrivateMetadata:(_Bool)arg2;	// IMP=0x0000000000045f60
- (id)fetchLocalData;	// IMP=0x0000000000045f4a
- (void)fetchData;	// IMP=0x0000000000045f08
- (id)decodeFilterWithDataConsumer:(id)arg1;	// IMP=0x0000000000045ad0
- (void)setMetadataValue:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000045ab1
- (id)metadataValueForKey:(id)arg1;	// IMP=0x0000000000045a95
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000000459ed
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x00000000000458ae
- (id)initWithURL:(id)arg1 attachmentManager:(id)arg2;	// IMP=0x0000000000045845

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

