//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <HearingUtilities/AXHADeviceProtocol-Protocol.h>

@class AXHearingAidMode, NSArray, NSDate, NSMutableArray, NSString;
@protocol AXHARemoteUpdateProtocol;

@interface AXRemoteHearingAidDevice : NSObject <AXHADeviceProtocol>
{
    _Bool _delayWritePending;	// 8 = 0x8
    _Bool _keepInSync;	// 9 = 0x9
    BOOL _leftTreble;	// 10 = 0xa
    BOOL _rightTreble;	// 11 = 0xb
    BOOL _leftBass;	// 12 = 0xc
    BOOL _rightBass;	// 13 = 0xd
    _Bool _isBluetoothPaired;	// 14 = 0xe
    _Bool _isPaired;	// 15 = 0xf
    _Bool _isConnecting;	// 16 = 0x10
    _Bool _leftConnected;	// 17 = 0x11
    _Bool _rightConnected;	// 18 = 0x12
    _Bool _supportsBinauralStreaming;	// 19 = 0x13
    _Bool _supportsCombinedPresets;	// 20 = 0x14
    _Bool _supportsCombinedVolumes;	// 21 = 0x15
    _Bool _requiresBinauralStreaming;	// 22 = 0x16
    _Bool _requiresCombinedPresets;	// 23 = 0x17
    _Bool _requiresCombinedVolumes;	// 24 = 0x18
    short _leftMicrophoneVolumeSteps;	// 26 = 0x1a
    short _rightMicrophoneVolumeSteps;	// 28 = 0x1c
    short _leftStreamVolumeSteps;	// 30 = 0x1e
    short _rightStreamVolumeSteps;	// 32 = 0x20
    short _leftSensitivitySteps;	// 34 = 0x22
    short _rightSensitivitySteps;	// 36 = 0x24
    short _leftMixedVolumeSteps;	// 38 = 0x26
    short _rightMixedVolumeSteps;	// 40 = 0x28
    int availableEars;	// 44 = 0x2c
    unsigned long long _deviceType;	// 48 = 0x30
    double _rightMicrophoneVolume;	// 56 = 0x38
    double _leftMicrophoneVolume;	// 64 = 0x40
    double _rightStreamVolume;	// 72 = 0x48
    double _leftStreamVolume;	// 80 = 0x50
    double _leftSensitivity;	// 88 = 0x58
    double _rightSensitivity;	// 96 = 0x60
    double _leftMixedVolume;	// 104 = 0x68
    double _rightMixedVolume;	// 112 = 0x70
    id <AXHARemoteUpdateProtocol> _updateDelegate;	// 120 = 0x78
    NSString *_name;	// 128 = 0x80
    NSMutableArray *_manufacturer;	// 136 = 0x88
    NSMutableArray *_model;	// 144 = 0x90
    NSString *_leftFirmwareVersion;	// 152 = 0x98
    NSString *_rightFirmwareVersion;	// 160 = 0xa0
    NSString *_leftHardwareVersion;	// 168 = 0xa8
    NSString *_rightHardwareVersion;	// 176 = 0xb0
    NSString *_rightUUID;	// 184 = 0xb8
    NSString *_leftUUID;	// 192 = 0xc0
    NSString *_leftPeripheralUUID;	// 200 = 0xc8
    NSString *_rightPeripheralUUID;	// 208 = 0xd0
    double _rightBatteryLevel;	// 216 = 0xd8
    double _leftBatteryLevel;	// 224 = 0xe0
    NSDate *_leftBatteryLowDate;	// 232 = 0xe8
    NSDate *_rightBatteryLowDate;	// 240 = 0xf0
    NSArray *_rightPrograms;	// 248 = 0xf8
    NSArray *_leftPrograms;	// 256 = 0x100
    AXHearingAidMode *_leftSelectedProgram;	// 264 = 0x108
    AXHearingAidMode *_rightSelectedProgram;	// 272 = 0x110
    AXHearingAidMode *_leftSelectedStreamingProgram;	// 280 = 0x118
    AXHearingAidMode *_rightSelectedStreamingProgram;	// 288 = 0x120
    NSString *_deviceUUID;	// 296 = 0x128
    unsigned long long _requiredProperties;	// 304 = 0x130
    unsigned long long _loadedProperties;	// 312 = 0x138
    unsigned long long _pendingPropertyWrites;	// 320 = 0x140
    unsigned long long _leftAvailableProperties;	// 328 = 0x148
    unsigned long long _rightAvailableProperties;	// 336 = 0x150
}

- (void).cxx_destruct;	// IMP=0x0000000000058433
@property(nonatomic) unsigned long long rightAvailableProperties; // @synthesize rightAvailableProperties=_rightAvailableProperties;
@property(nonatomic) unsigned long long leftAvailableProperties; // @synthesize leftAvailableProperties=_leftAvailableProperties;
@property(nonatomic) unsigned long long pendingPropertyWrites; // @synthesize pendingPropertyWrites=_pendingPropertyWrites;
@property(nonatomic) unsigned long long loadedProperties; // @synthesize loadedProperties=_loadedProperties;
@property(nonatomic) unsigned long long requiredProperties; // @synthesize requiredProperties=_requiredProperties;
@property(retain, nonatomic) NSString *deviceUUID; // @synthesize deviceUUID=_deviceUUID;
@property(retain, nonatomic) AXHearingAidMode *rightSelectedStreamingProgram; // @synthesize rightSelectedStreamingProgram=_rightSelectedStreamingProgram;
@property(retain, nonatomic) AXHearingAidMode *leftSelectedStreamingProgram; // @synthesize leftSelectedStreamingProgram=_leftSelectedStreamingProgram;
@property(retain, nonatomic) AXHearingAidMode *rightSelectedProgram; // @synthesize rightSelectedProgram=_rightSelectedProgram;
@property(retain, nonatomic) AXHearingAidMode *leftSelectedProgram; // @synthesize leftSelectedProgram=_leftSelectedProgram;
@property(copy, nonatomic) NSArray *leftPrograms; // @synthesize leftPrograms=_leftPrograms;
@property(copy, nonatomic) NSArray *rightPrograms; // @synthesize rightPrograms=_rightPrograms;
@property(nonatomic) _Bool requiresCombinedVolumes; // @synthesize requiresCombinedVolumes=_requiresCombinedVolumes;
@property(nonatomic) _Bool requiresCombinedPresets; // @synthesize requiresCombinedPresets=_requiresCombinedPresets;
@property(nonatomic) _Bool requiresBinauralStreaming; // @synthesize requiresBinauralStreaming=_requiresBinauralStreaming;
@property(nonatomic) _Bool supportsCombinedVolumes; // @synthesize supportsCombinedVolumes=_supportsCombinedVolumes;
@property(nonatomic) _Bool supportsCombinedPresets; // @synthesize supportsCombinedPresets=_supportsCombinedPresets;
@property(nonatomic) _Bool supportsBinauralStreaming; // @synthesize supportsBinauralStreaming=_supportsBinauralStreaming;
@property(nonatomic) short rightMixedVolumeSteps; // @synthesize rightMixedVolumeSteps=_rightMixedVolumeSteps;
@property(nonatomic) short leftMixedVolumeSteps; // @synthesize leftMixedVolumeSteps=_leftMixedVolumeSteps;
@property(nonatomic) short rightSensitivitySteps; // @synthesize rightSensitivitySteps=_rightSensitivitySteps;
@property(nonatomic) short leftSensitivitySteps; // @synthesize leftSensitivitySteps=_leftSensitivitySteps;
@property(nonatomic) short rightStreamVolumeSteps; // @synthesize rightStreamVolumeSteps=_rightStreamVolumeSteps;
@property(nonatomic) short leftStreamVolumeSteps; // @synthesize leftStreamVolumeSteps=_leftStreamVolumeSteps;
@property(nonatomic) short rightMicrophoneVolumeSteps; // @synthesize rightMicrophoneVolumeSteps=_rightMicrophoneVolumeSteps;
@property(nonatomic) short leftMicrophoneVolumeSteps; // @synthesize leftMicrophoneVolumeSteps=_leftMicrophoneVolumeSteps;
@property(retain, nonatomic) NSDate *rightBatteryLowDate; // @synthesize rightBatteryLowDate=_rightBatteryLowDate;
@property(retain, nonatomic) NSDate *leftBatteryLowDate; // @synthesize leftBatteryLowDate=_leftBatteryLowDate;
@property(nonatomic) double leftBatteryLevel; // @synthesize leftBatteryLevel=_leftBatteryLevel;
@property(nonatomic) double rightBatteryLevel; // @synthesize rightBatteryLevel=_rightBatteryLevel;
@property(retain, nonatomic) NSString *rightPeripheralUUID; // @synthesize rightPeripheralUUID=_rightPeripheralUUID;
@property(retain, nonatomic) NSString *leftPeripheralUUID; // @synthesize leftPeripheralUUID=_leftPeripheralUUID;
@property(retain, nonatomic) NSString *leftUUID; // @synthesize leftUUID=_leftUUID;
@property(retain, nonatomic) NSString *rightUUID; // @synthesize rightUUID=_rightUUID;
@property(retain, nonatomic) NSString *rightHardwareVersion; // @synthesize rightHardwareVersion=_rightHardwareVersion;
@property(retain, nonatomic) NSString *leftHardwareVersion; // @synthesize leftHardwareVersion=_leftHardwareVersion;
@property(retain, nonatomic) NSString *rightFirmwareVersion; // @synthesize rightFirmwareVersion=_rightFirmwareVersion;
@property(retain, nonatomic) NSString *leftFirmwareVersion; // @synthesize leftFirmwareVersion=_leftFirmwareVersion;
@property(retain, nonatomic) NSMutableArray *model; // @synthesize model=_model;
@property(retain, nonatomic) NSMutableArray *manufacturer; // @synthesize manufacturer=_manufacturer;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) _Bool rightConnected; // @synthesize rightConnected=_rightConnected;
@property(nonatomic) _Bool leftConnected; // @synthesize leftConnected=_leftConnected;
@property(nonatomic) _Bool isConnecting; // @synthesize isConnecting=_isConnecting;
@property(nonatomic) _Bool isPaired; // @synthesize isPaired=_isPaired;
@property(nonatomic) _Bool isBluetoothPaired; // @synthesize isBluetoothPaired=_isBluetoothPaired;
@property(nonatomic) __weak id <AXHARemoteUpdateProtocol> updateDelegate; // @synthesize updateDelegate=_updateDelegate;
@property(nonatomic) double rightMixedVolume; // @synthesize rightMixedVolume=_rightMixedVolume;
@property(nonatomic) double leftMixedVolume; // @synthesize leftMixedVolume=_leftMixedVolume;
@property(nonatomic) BOOL rightBass; // @synthesize rightBass=_rightBass;
@property(nonatomic) BOOL leftBass; // @synthesize leftBass=_leftBass;
@property(nonatomic) BOOL rightTreble; // @synthesize rightTreble=_rightTreble;
@property(nonatomic) BOOL leftTreble; // @synthesize leftTreble=_leftTreble;
@property(nonatomic) int availableEars; // @synthesize availableEars;
@property(nonatomic) double rightSensitivity; // @synthesize rightSensitivity=_rightSensitivity;
@property(nonatomic) double leftSensitivity; // @synthesize leftSensitivity=_leftSensitivity;
@property(nonatomic) double leftStreamVolume; // @synthesize leftStreamVolume=_leftStreamVolume;
@property(nonatomic) double rightStreamVolume; // @synthesize rightStreamVolume=_rightStreamVolume;
@property(nonatomic) double leftMicrophoneVolume; // @synthesize leftMicrophoneVolume=_leftMicrophoneVolume;
@property(nonatomic) double rightMicrophoneVolume; // @synthesize rightMicrophoneVolume=_rightMicrophoneVolume;
@property(nonatomic) _Bool keepInSync; // @synthesize keepInSync=_keepInSync;
@property(nonatomic) unsigned long long deviceType; // @synthesize deviceType=_deviceType;
@property(readonly, copy) NSString *description;
- (double)combinedVolumeForProperty:(unsigned long long)arg1;	// IMP=0x0000000000057ac0
- (id)valueForProperty:(unsigned long long)arg1;	// IMP=0x0000000000057919
- (id)_valueForProperty:(unsigned long long)arg1;	// IMP=0x000000000005655d
- (void)setValue:(id)arg1 forProperty:(unsigned long long)arg2;	// IMP=0x0000000000053bb7
- (id)selectedProgramIndexes;	// IMP=0x0000000000053952
- (id)selectedPrograms;	// IMP=0x00000000000537fc
- (void)selectProgram:(id)arg1 forEar:(int)arg2;	// IMP=0x00000000000535e0
- (void)_writeAllProgramSelectionsToPeripheral;	// IMP=0x0000000000053167
- (void)_updateSelectedProgramsProperties;	// IMP=0x0000000000052ccd
- (id)combinedPrograms;	// IMP=0x0000000000052a0a
- (id)programs;	// IMP=0x00000000000528b3
- (_Bool)showCombinedPrograms;	// IMP=0x000000000005281d
- (_Bool)programsListsAreEqual;	// IMP=0x000000000005252c
- (_Bool)shouldOnlyShowIndividualVolumesForProperty:(unsigned long long)arg1;	// IMP=0x0000000000052437
- (_Bool)shouldDisplayCombinedVolume;	// IMP=0x0000000000052390
- (_Bool)supportsCombinedVolumesForProperty:(unsigned long long)arg1;	// IMP=0x00000000000521fb
- (id)programAtIndex:(unsigned char)arg1 forEar:(int)arg2;	// IMP=0x0000000000052052
- (void)writeVolumesForProperty:(unsigned long long)arg1;	// IMP=0x0000000000051c32
- (void)_delayWriteProperties;	// IMP=0x0000000000051485
- (_Bool)propertyIsAvailable:(unsigned long long)arg1 forEar:(int)arg2;	// IMP=0x0000000000051421
- (void)loadRequiredProperties;	// IMP=0x0000000000051396
- (_Bool)checkDidLoadProperties:(unsigned long long)arg1;	// IMP=0x0000000000051153
- (_Bool)didLoadRequiredProperties;	// IMP=0x0000000000051122
- (_Bool)didLoadRequiredPeerProperties;	// IMP=0x00000000000510eb
- (_Bool)didLoadBasicProperties;	// IMP=0x00000000000510e3
- (_Bool)didLoadProperty:(unsigned long long)arg1;	// IMP=0x00000000000510bd
- (_Bool)containsPeripheralWithUUID:(id)arg1;	// IMP=0x0000000000051040
- (_Bool)isRightConnected;	// IMP=0x0000000000050fa7
- (_Bool)isLeftConnected;	// IMP=0x0000000000050f0e
- (_Bool)hasConnection;	// IMP=0x0000000000050ed5
- (_Bool)isConnected;	// IMP=0x0000000000050e71
- (_Bool)rightAvailable;	// IMP=0x0000000000050e58
- (_Bool)leftAvailable;	// IMP=0x0000000000050e40
- (void)disconnectAndUnpair:(_Bool)arg1;	// IMP=0x0000000000050cad
- (void)connect;	// IMP=0x0000000000050b1a
- (void)dealloc;	// IMP=0x00000000000509b5
- (id)initWithPersistentRepresentation:(id)arg1;	// IMP=0x00000000000502ab
- (id)initWithRemoteRepresentation:(id)arg1 andDeviceID:(id)arg2;	// IMP=0x0000000000050173
- (id)init;	// IMP=0x0000000000050024

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

