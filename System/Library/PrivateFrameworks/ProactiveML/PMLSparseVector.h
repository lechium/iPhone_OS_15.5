//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@interface PMLSparseVector : NSObject
{
    unsigned long long _length;	// 8 = 0x8
    unsigned long long _numberOfNonZeroValues;	// 16 = 0x10
    long long *_sparseIndices;	// 24 = 0x18
    float *_sparseValues;	// 32 = 0x20
}

+ (id)sparseVectorFromNumbers:(id)arg1 indices:(id)arg2 length:(unsigned long long)arg3;	// IMP=0x0000000000047554
+ (id)sparseVectorFromNumbers:(id)arg1;	// IMP=0x00000000000473f2
+ (void)sparseVectorWithLength:(unsigned long long)arg1 numberOfNonZeroValues:(unsigned long long)arg2 isSparseIndexInt64:(_Bool)arg3 sparseIndices:(const void *)arg4 sparseValues:(const float *)arg5 toDenseValues:(float *)arg6 withLength:(unsigned long long)arg7;	// IMP=0x00000000000472a4
+ (id)sparseVectorWithLength:(unsigned long long)arg1 numberOfNonZeroValues:(unsigned long long)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x00000000000471e7
+ (id)sparseVectorEmptyWithLength:(unsigned long long)arg1;	// IMP=0x00000000000471b0
+ (id)sparseVectorFromDense:(id)arg1;	// IMP=0x0000000000047135
+ (id)sparseVectorFromDense:(const float *)arg1 length:(unsigned long long)arg2;	// IMP=0x000000000004704e
@property(nonatomic) float *sparseValues; // @synthesize sparseValues=_sparseValues;
@property(nonatomic) long long *sparseIndices; // @synthesize sparseIndices=_sparseIndices;
@property(nonatomic) unsigned long long numberOfNonZeroValues; // @synthesize numberOfNonZeroValues=_numberOfNonZeroValues;
@property(readonly, nonatomic) unsigned long long length; // @synthesize length=_length;
- (id)vectorWithConstantColumn;	// IMP=0x0000000000046efe
- (float)valueAtIndex:(unsigned long long)arg1;	// IMP=0x0000000000046e5e
- (void)addEndId:(long long)arg1 paddingId:(long long)arg2 withMaxVectorLength:(unsigned long long)arg3;	// IMP=0x0000000000046cde
- (void)convertToBagOfIds;	// IMP=0x0000000000046ca7
- (void)sparseVectorToDense:(float *)arg1 length:(unsigned long long)arg2;	// IMP=0x0000000000046c63
- (void)processNonZeroValuesInPlaceWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000046c15
- (void)enumerateNonZeroValuesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000046bd0
- (void)setLength:(unsigned long long)arg1;	// IMP=0x0000000000046924
- (void)scaleWithVectorNormalization:(long long)arg1;	// IMP=0x0000000000046819
- (void)applyOneHotNormalization;	// IMP=0x00000000000467df
- (void)scaleInPlaceWithInversedFactor:(float)arg1;	// IMP=0x00000000000467af
- (float)maxAbsValue;	// IMP=0x000000000004675b
- (float)l2norm;	// IMP=0x0000000000046743
- (float)l1norm;	// IMP=0x000000000004672b
- (float)maxValue;	// IMP=0x00000000000466f0
- (float)minValue;	// IMP=0x00000000000466bc
- (id)quantizedValuesAsUInt8DataWithMin:(float)arg1 max:(float)arg2;	// IMP=0x00000000000465a2
- (id)indicesAsUInt16Data;	// IMP=0x000000000004645f
- (id)valuesData;	// IMP=0x00000000000463de
- (id)indicesData;	// IMP=0x000000000004631f
- (void)dealloc;	// IMP=0x00000000000462dc
- (id)initWithLength:(unsigned long long)arg1 numberOfNonZeroValues:(unsigned long long)arg2 indices:(long long *)arg3 values:(float *)arg4;	// IMP=0x0000000000046176
- (id)initWithLength:(unsigned long long)arg1 numberOfNonZeroValues:(unsigned long long)arg2 indicesData:(id)arg3 valuesData:(id)arg4;	// IMP=0x00000000000460d9
- (id)init;	// IMP=0x00000000000460d3

@end

