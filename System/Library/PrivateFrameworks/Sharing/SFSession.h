//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <Sharing/NSSecureCoding-Protocol.h>
#import <Sharing/SFXPCInterface-Protocol.h>

@class CUAppleIDClient, CUMessageSession, CUMessageSessionServer, CUPairingSession, NSDictionary, NSMutableData, NSMutableDictionary, NSString, NSUUID, NSXPCConnection, NSXPCListenerEndpoint, SDStatusMonitor, SFAppleIDContactInfo, SFDevice, SFTRSession, TRSession;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_os_transaction;

@interface SFSession : NSObject <NSSecureCoding, SFXPCInterface>
{
    NSObject<OS_dispatch_queue> *_dispatchQueue;	// 8 = 0x8
    struct CryptoAEADPrivate *_encryptionReadAEAD;	// 16 = 0x10
    unsigned char _encryptionReadNonce[12];	// 24 = 0x18
    struct CryptoAEADPrivate *_encryptionWriteAEAD;	// 40 = 0x28
    unsigned char _encryptionWriteNonce[12];	// 48 = 0x30
    NSString *_fixedPIN;	// 64 = 0x40
    NSMutableData *_fragmentData;	// 72 = 0x48
    unsigned short _fragmentLastIndex;	// 80 = 0x50
    unsigned long long _heartbeatLastTicks;	// 88 = 0x58
    NSObject<OS_dispatch_source> *_heartbeatTimer;	// 96 = 0x60
    NSUUID *_peer;	// 104 = 0x68
    NSString *_peerAppleID;	// 112 = 0x70
    NSMutableDictionary *_requestHandlers;	// 120 = 0x78
    NSMutableDictionary *_requestMap;	// 128 = 0x80
    unsigned char _serviceType;	// 136 = 0x88
    unsigned int _sessionFlags;	// 140 = 0x8c
    unsigned int _sessionID;	// 144 = 0x90
    unsigned int _sharingSourceVersion;	// 148 = 0x94
    NSObject<OS_os_transaction> *_transaction;	// 152 = 0x98
    struct LogCategory *_ucatCore;	// 160 = 0xa0
    struct LogCategory *_ucatCrypto;	// 168 = 0xa8
    _Bool _activateCalled;	// 176 = 0xb0
    _Bool _activateInProgress;	// 177 = 0xb1
    _Bool _activateCompleted;	// 178 = 0xb2
    CDUnknownBlockType _activateCompletion;	// 184 = 0xb8
    SFAppleIDContactInfo *_appleIDContactInfo;	// 192 = 0xc0
    _Bool _appleIDContactCompleted;	// 200 = 0xc8
    _Bool _invalidateCalled;	// 201 = 0xc9
    _Bool _invalidateDone;	// 202 = 0xca
    unsigned int _heartbeatID;	// 204 = 0xcc
    _Bool _heartbeatV2;	// 208 = 0xd0
    _Bool _heartbeatWaiting;	// 209 = 0xd1
    CUMessageSessionServer *_messageSessionServer;	// 216 = 0xd8
    CUMessageSession *_messageSessionTemplate;	// 224 = 0xe0
    CDUnknownBlockType _pairSetupCompletion;	// 232 = 0xe8
    _Bool _pairSetupEnded;	// 240 = 0xf0
    unsigned int _pairSetupFlags;	// 244 = 0xf4
    CUPairingSession *_pairSetupSession;	// 248 = 0xf8
    unsigned int _pairSetupXID;	// 256 = 0x100
    CDUnknownBlockType _pairVerifyCompletion;	// 264 = 0x108
    _Bool _pairVerifyEnded;	// 272 = 0x110
    unsigned int _pairVerifyFlags;	// 276 = 0x114
    struct PairingSessionPrivate *_pairVerifySession;	// 280 = 0x118
    NSMutableDictionary *_requestQueue;	// 288 = 0x120
    _Bool _timeoutFired;	// 296 = 0x128
    NSObject<OS_dispatch_source> *_timeoutTimer;	// 304 = 0x130
    NSXPCConnection *_xpcCnx;	// 312 = 0x138
    SFTRSession *_sfTRSession;	// 320 = 0x140
    TRSession *_trSession;	// 328 = 0x148
    _Bool _touchRemoteEnabled;	// 336 = 0x150
    long long _bluetoothState;	// 344 = 0x158
    CDUnknownBlockType _errorHandler;	// 352 = 0x160
    NSUUID *_identifier;	// 360 = 0x168
    NSString *_label;	// 368 = 0x170
    SFDevice *_peerDevice;	// 376 = 0x178
    NSString *_serviceIdentifier;	// 384 = 0x180
    double _timeout;	// 392 = 0x188
    NSString *_myAppleID;	// 400 = 0x190
    CUAppleIDClient *_myAppleIDInfoClient;	// 408 = 0x198
    NSString *_peerContactIdentifier;	// 416 = 0x1a0
    SDStatusMonitor *_statusMonitor;	// 424 = 0x1a8
    CDUnknownBlockType _bluetoothStateChangedHandler;	// 432 = 0x1b0
    CDUnknownBlockType _interruptionHandler;	// 440 = 0x1b8
    CDUnknownBlockType _invalidationHandler;	// 448 = 0x1c0
    NSDictionary *_pairSetupACL;	// 456 = 0x1c8
    NSDictionary *_pairVerifyACL;	// 464 = 0x1d0
    CDUnknownBlockType _pairSetupCompletionHandler;	// 472 = 0x1d8
    CDUnknownBlockType _showPINHandlerEx;	// 480 = 0x1e0
    CDUnknownBlockType _promptForPINHandler;	// 488 = 0x1e8
    CDUnknownBlockType _hidePINHandler;	// 496 = 0x1f0
    CDUnknownBlockType _receivedObjectHandler;	// 504 = 0x1f8
    CDUnknownBlockType _receivedRequestHandler;	// 512 = 0x200
    CDUnknownBlockType _sessionStartedHandler;	// 520 = 0x208
    CDUnknownBlockType _timeoutHandler;	// 528 = 0x210
    CDUnknownBlockType _eventMessageHandler;	// 536 = 0x218
    CDUnknownBlockType _requestMessageHandler;	// 544 = 0x220
    CDUnknownBlockType _receivedFrameHandler;	// 552 = 0x228
    CDUnknownBlockType _responseMessageInternalHandler;	// 560 = 0x230
    CDUnknownBlockType _sendFrameHandler;	// 568 = 0x238
    NSUUID *_serviceUUID;	// 576 = 0x240
    NSXPCListenerEndpoint *_testListenerEndpoint;	// 584 = 0x248
}

+ (_Bool)supportsSecureCoding;	// IMP=0x0000000000108e24
- (void).cxx_destruct;	// IMP=0x0000000000114218
@property(retain, nonatomic) TRSession *trSession; // @synthesize trSession=_trSession;
@property(nonatomic) _Bool touchRemoteEnabled; // @synthesize touchRemoteEnabled=_touchRemoteEnabled;
@property(retain, nonatomic) NSXPCListenerEndpoint *testListenerEndpoint; // @synthesize testListenerEndpoint=_testListenerEndpoint;
@property(nonatomic) unsigned int sharingSourceVersion; // @synthesize sharingSourceVersion=_sharingSourceVersion;
@property(nonatomic) unsigned int sessionID; // @synthesize sessionID=_sessionID;
@property(copy, nonatomic) NSUUID *serviceUUID; // @synthesize serviceUUID=_serviceUUID;
@property(nonatomic) unsigned char serviceType; // @synthesize serviceType=_serviceType;
@property(copy, nonatomic) CDUnknownBlockType sendFrameHandler; // @synthesize sendFrameHandler=_sendFrameHandler;
@property(copy, nonatomic) CDUnknownBlockType responseMessageInternalHandler; // @synthesize responseMessageInternalHandler=_responseMessageInternalHandler;
@property(readonly, copy, nonatomic) NSMutableDictionary *requestHandlers; // @synthesize requestHandlers=_requestHandlers;
@property(copy, nonatomic) CDUnknownBlockType receivedFrameHandler; // @synthesize receivedFrameHandler=_receivedFrameHandler;
@property(copy, nonatomic) NSUUID *peer; // @synthesize peer=_peer;
@property(nonatomic) unsigned long long heartbeatLastTicks; // @synthesize heartbeatLastTicks=_heartbeatLastTicks;
@property(copy, nonatomic) CDUnknownBlockType requestMessageHandler; // @synthesize requestMessageHandler=_requestMessageHandler;
@property(copy, nonatomic) CDUnknownBlockType eventMessageHandler; // @synthesize eventMessageHandler=_eventMessageHandler;
@property(copy, nonatomic) CDUnknownBlockType timeoutHandler; // @synthesize timeoutHandler=_timeoutHandler;
@property(copy, nonatomic) CDUnknownBlockType sessionStartedHandler; // @synthesize sessionStartedHandler=_sessionStartedHandler;
@property(copy, nonatomic) CDUnknownBlockType receivedRequestHandler; // @synthesize receivedRequestHandler=_receivedRequestHandler;
@property(copy, nonatomic) CDUnknownBlockType receivedObjectHandler; // @synthesize receivedObjectHandler=_receivedObjectHandler;
@property(copy, nonatomic) CDUnknownBlockType hidePINHandler; // @synthesize hidePINHandler=_hidePINHandler;
@property(copy, nonatomic) CDUnknownBlockType promptForPINHandler; // @synthesize promptForPINHandler=_promptForPINHandler;
@property(copy, nonatomic) CDUnknownBlockType showPINHandlerEx; // @synthesize showPINHandlerEx=_showPINHandlerEx;
@property(copy, nonatomic) CDUnknownBlockType pairSetupCompletionHandler; // @synthesize pairSetupCompletionHandler=_pairSetupCompletionHandler;
@property(copy, nonatomic) NSDictionary *pairVerifyACL; // @synthesize pairVerifyACL=_pairVerifyACL;
@property(copy, nonatomic) NSDictionary *pairSetupACL; // @synthesize pairSetupACL=_pairSetupACL;
@property(copy, nonatomic) CDUnknownBlockType invalidationHandler; // @synthesize invalidationHandler=_invalidationHandler;
@property(copy, nonatomic) CDUnknownBlockType interruptionHandler; // @synthesize interruptionHandler=_interruptionHandler;
@property(copy, nonatomic) CDUnknownBlockType bluetoothStateChangedHandler; // @synthesize bluetoothStateChangedHandler=_bluetoothStateChangedHandler;
@property(retain, nonatomic) SDStatusMonitor *statusMonitor; // @synthesize statusMonitor=_statusMonitor;
@property(copy, nonatomic) NSString *peerContactIdentifier; // @synthesize peerContactIdentifier=_peerContactIdentifier;
@property(copy, nonatomic) NSString *peerAppleID; // @synthesize peerAppleID=_peerAppleID;
@property(retain, nonatomic) CUAppleIDClient *myAppleIDInfoClient; // @synthesize myAppleIDInfoClient=_myAppleIDInfoClient;
@property(copy, nonatomic) NSString *myAppleID; // @synthesize myAppleID=_myAppleID;
@property(nonatomic) double timeout; // @synthesize timeout=_timeout;
@property(nonatomic) unsigned int sessionFlags; // @synthesize sessionFlags=_sessionFlags;
@property(copy, nonatomic) NSString *serviceIdentifier; // @synthesize serviceIdentifier=_serviceIdentifier;
@property(retain, nonatomic) SFDevice *peerDevice; // @synthesize peerDevice=_peerDevice;
@property(readonly, nonatomic) CUMessageSession *messageSessionTemplate; // @synthesize messageSessionTemplate=_messageSessionTemplate;
@property(retain, nonatomic) NSString *label; // @synthesize label=_label;
@property(copy, nonatomic) NSUUID *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *fixedPIN; // @synthesize fixedPIN=_fixedPIN;
@property(copy, nonatomic) CDUnknownBlockType errorHandler; // @synthesize errorHandler=_errorHandler;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(nonatomic) long long bluetoothState; // @synthesize bluetoothState=_bluetoothState;
- (void)sessionReceivedResponse:(id)arg1;	// IMP=0x0000000000113bbc
- (void)sessionReceivedRequest:(id)arg1;	// IMP=0x0000000000113b35
- (void)_sessionReceivedStartAck:(id)arg1;	// IMP=0x0000000000113985
- (void)_sessionReceivedResponseID:(id)arg1 object:(id)arg2 flags:(unsigned int)arg3;	// IMP=0x0000000000113614
- (_Bool)_sessionReceivedRequest:(id)arg1 flags:(unsigned int)arg2 responseHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000113511
- (void)_sessionReceivedRequestID:(id)arg1 object:(id)arg2 flags:(unsigned int)arg3;	// IMP=0x00000000001131cd
- (_Bool)_sessionReceivedRegisteredRequestID:(id)arg1 flags:(unsigned int)arg2 xidKey:(id)arg3 xidValue:(id)arg4;	// IMP=0x0000000000112b90
- (_Bool)_sessionReceivedEvent:(id)arg1 flags:(unsigned int)arg2;	// IMP=0x0000000000112ab3
- (void)_sessionReceivedObject:(id)arg1 flags:(unsigned int)arg2;	// IMP=0x0000000000112970
- (void)_sessionReceivedUnencryptedData:(id)arg1 type:(unsigned char)arg2;	// IMP=0x0000000000112674
- (void)_sessionReceivedEncryptedData:(id)arg1 type:(unsigned char)arg2;	// IMP=0x000000000011215c
- (void)sessionReceivedFragmentData:(id)arg1 last:(_Bool)arg2;	// IMP=0x0000000000111d64
- (void)sessionReceivedFrameType:(unsigned char)arg1 data:(id)arg2;	// IMP=0x0000000000111c04
- (void)sessionReceivedEvent:(id)arg1;	// IMP=0x0000000000111b7d
- (void)sessionError:(id)arg1;	// IMP=0x00000000001118af
- (void)sessionBluetoothStateChanged:(long long)arg1;	// IMP=0x000000000011180e
- (void)_sendRequestID:(id)arg1 options:(id)arg2 request:(id)arg3 responseHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000011118c
- (void)sendRequestID:(id)arg1 options:(id)arg2 request:(id)arg3 responseHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000110fc1
- (void)_deregisterRequestID:(id)arg1;	// IMP=0x0000000000110f36
- (void)deregisterRequestID:(id)arg1;	// IMP=0x0000000000110e8e
- (void)_registerRequestID:(id)arg1 options:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000110d1d
- (void)registerRequestID:(id)arg1 options:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000110bda
- (void)_sendEncryptedObject:(id)arg1;	// IMP=0x0000000000110796
- (void)sendWithFlags:(unsigned int)arg1 object:(id)arg2;	// IMP=0x00000000001106ab
- (void)_sendRequestWithFlags:(unsigned int)arg1 object:(id)arg2 responseHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000110496
- (void)sendRequestWithFlags:(unsigned int)arg1 object:(id)arg2 responseHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000001103b2
- (void)_sendFrameType:(unsigned char)arg1 object:(id)arg2;	// IMP=0x00000000001100e1
- (void)sendFrameType:(unsigned char)arg1 object:(id)arg2;	// IMP=0x0000000000110029
- (void)sendFrameType:(unsigned char)arg1 data:(id)arg2;	// IMP=0x000000000010fe77
- (void)sendResponse:(id)arg1;	// IMP=0x000000000010fc91
- (void)sendRequest:(id)arg1;	// IMP=0x000000000010fa71
- (void)sendEvent:(id)arg1;	// IMP=0x000000000010f886
- (id)_appleIDVerifyProof:(id)arg1 error:(id *)arg2;	// IMP=0x000000000010f3e1
- (void)appleIDVerifyProof:(id)arg1 dispatchQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010f150
- (_Bool)_appleIDAddProof:(id)arg1 error:(id *)arg2;	// IMP=0x000000000010ed2a
- (void)appleIDAddProof:(id)arg1 dispatchQueue:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010eaa1
- (void)_pairVerifyCompleted:(int)arg1;	// IMP=0x000000000010e775
- (void)_pairVerify:(id)arg1 start:(_Bool)arg2;	// IMP=0x000000000010e2e7
- (void)_pairVerifyWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010dd57
- (void)pairVerifyWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010dca0
- (void)_pairSetupCompleted:(int)arg1;	// IMP=0x000000000010d95c
- (void)_pairSetupTryPIN:(id)arg1;	// IMP=0x000000000010d850
- (void)pairSetupTryPIN:(id)arg1;	// IMP=0x000000000010d7a8
- (void)_pairSetup:(id)arg1 start:(_Bool)arg2;	// IMP=0x000000000010d502
- (void)_pairSetupWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2 isServer:(_Bool)arg3;	// IMP=0x000000000010ce34
- (void)pairSetupWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2 isServer:(_Bool)arg3;	// IMP=0x000000000010cd71
- (void)pairSetupWithFlags:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000010cd5c
- (void)_serviceInitiatedPairSetup:(id)arg1;	// IMP=0x000000000010ca95
- (id)pairingDeriveKeyForIdentifier:(id)arg1 keyLength:(unsigned long long)arg2;	// IMP=0x000000000010c8d4
- (_Bool)pairingContainsACL:(id)arg1;	// IMP=0x000000000010c808
- (void)_timeoutTimerFired;	// IMP=0x000000000010c732
- (void)_startTimeoutIfNeeded;	// IMP=0x000000000010c5e0
- (void)_tearDownTouchRemote;	// IMP=0x000000000010c587
- (void)_setupTouchRemote;	// IMP=0x000000000010c492
- (void)_tearDownMessageSession;	// IMP=0x000000000010c41d
- (void)_setupMessageSession;	// IMP=0x000000000010beb7
- (void)_invalidated;	// IMP=0x000000000010b6d6
- (void)invalidate;	// IMP=0x000000000010b528
- (void)_interrupted;	// IMP=0x000000000010b229
- (void)_hearbeatTimer;	// IMP=0x000000000010aedd
- (void)_fetchInfo;	// IMP=0x000000000010aa50
- (void)_ensureXPCStarted;	// IMP=0x000000000010a812
- (void)_activated;	// IMP=0x000000000010a2ab
- (void)_activatedIfReady:(id)arg1;	// IMP=0x000000000010a1e5
- (void)_activateWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000109bf7
- (void)activateWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000109b4e
- (int)setEncryptionReadKey:(const char *)arg1 readKeyLen:(unsigned long long)arg2 writeKey:(const char *)arg3 writeKeyLen:(unsigned long long)arg4;	// IMP=0x0000000000109870
- (id)description;	// IMP=0x00000000001094ac
- (void)_cleanup;	// IMP=0x00000000001092a7
- (void)dealloc;	// IMP=0x0000000000109202
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000109131
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000000108e9f
- (id)init;	// IMP=0x0000000000108e2c
- (void)sendExternalIO:(id)arg1;	// IMP=0x00000000000e273e
- (void)registerForExternalIO:(id)arg1;	// IMP=0x00000000000e252f

@end

