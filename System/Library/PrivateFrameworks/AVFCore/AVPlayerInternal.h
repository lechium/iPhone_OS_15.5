//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAudioSession, AVAudioSessionMediaPlayerOnly, AVOutputContext, AVPixelBufferAttributeMediator, AVPlayerItem, AVPlayerPlaybackCoordinator, AVQueuePlayer, AVWeakReference, NSArray, NSDictionary, NSError, NSHashTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString;
@protocol AVBlockScheduler, AVLoggingIdentifier, OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface AVPlayerInternal : NSObject
{
    _Bool fullyInitializedAndNotDeallocating;	// 8 = 0x8
    AVWeakReference *weakReference;	// 16 = 0x10
    AVPixelBufferAttributeMediator *pixelBufferAttributeMediator;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *stateDispatchQueue;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *figConfigurationQueue;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *layerInteractionQueue;	// 48 = 0x30
    NSObject<OS_dispatch_queue> *ivarAccessQueue;	// 56 = 0x38
    NSObject<OS_dispatch_queue> *currentItemPropertyUpdateQueue;	// 64 = 0x40
    NSObject<OS_dispatch_queue> *layersQ;	// 72 = 0x48
    struct OpaqueCMTimebase *proxyTimebase;	// 80 = 0x50
    _Bool logPerformanceData;	// 88 = 0x58
    id didFinishSuspensionNotificationToken;	// 96 = 0x60
    id didEnterBackgroundNotificationToken;	// 104 = 0x68
    id willEnterForegroundNotificationToken;	// 112 = 0x70
    AVAudioSessionMediaPlayerOnly *audioSessionMediaPlayerOnly;	// 120 = 0x78
    void *IAPDCallbackToken;	// 128 = 0x80
    struct OpaqueFigSimpleMutex *prerollIDMutex;	// 136 = 0x88
    NSObject<OS_dispatch_queue> *configurationQueue;	// 144 = 0x90
    id layerForegroundingChangeToken;	// 152 = 0x98
    id <AVBlockScheduler> KVOChangeSerializer;	// 160 = 0xa0
    long long status;	// 168 = 0xa8
    NSError *error;	// 176 = 0xb0
    AVPlayerItem *currentItem;	// 184 = 0xb8
    AVPlayerItem *lastItem;	// 192 = 0xc0
    NSMutableSet *items;	// 200 = 0xc8
    NSArray *queueModifications;	// 208 = 0xd0
    NSMutableDictionary *pendingFigPlayerProperties;	// 216 = 0xd8
    AVAudioSession *audioSession;	// 224 = 0xe0
    NSDictionary *vibrationPattern;	// 232 = 0xe8
    AVOutputContext *outputContext;	// 240 = 0xf0
    _Bool IOwnTheFigPlayer;	// 248 = 0xf8
    long long audiovisualBackgroundPlaybackPolicy;	// 256 = 0x100
    NSMutableArray *handlersToCallWhenReadyToPlay;	// 264 = 0x108
    _Bool shouldReduceResourceUsage;	// 272 = 0x110
    long long resourceConservationLevelWhilePaused;	// 280 = 0x118
    NSString *playerRole;	// 288 = 0x120
    NSString *externalPlaybackVideoGravity;	// 296 = 0x128
    long long actionAtItemEnd;	// 304 = 0x130
    float volume;	// 312 = 0x138
    float userVolume;	// 316 = 0x13c
    float minRateForAudioPlayback;	// 320 = 0x140
    float maxRateForAudioPlayback;	// 324 = 0x144
    _Bool autoSwitchStreamVariants;	// 328 = 0x148
    _Bool preparesItemsForPlaybackAsynchronously;	// 329 = 0x149
    _Bool allowsOutOfBandTextTrackRendering;	// 330 = 0x14a
    _Bool muted;	// 331 = 0x14b
    _Bool closedCaptionDisplayEnabled;	// 332 = 0x14c
    _Bool appliesMediaSelectionCriteriaAutomatically;	// 333 = 0x14d
    _Bool dynamicallyChoosesInitialVariant;	// 334 = 0x14e
    _Bool limitsBandwidthForCellularAccess;	// 335 = 0x14f
    _Bool usesAudioOnlyModeForExternalPlayback;	// 336 = 0x150
    _Bool allowsPixelBufferPoolSharing;	// 337 = 0x151
    _Bool disallowsAMRAudio;	// 338 = 0x152
    _Bool disallowsHardwareAcceleratedVideoDecoder;	// 339 = 0x153
    _Bool layerDestinationIsTVOut;	// 340 = 0x154
    _Bool preventsDisplaySleepDuringVideoPlayback;	// 341 = 0x155
    _Bool disallowsVideoLayerDisplayCompositing;	// 342 = 0x156
    _Bool allowsExternalPlayback;	// 343 = 0x157
    _Bool usesExternalPlaybackWhileExternalScreenIsActive;	// 344 = 0x158
    NSString *captionPipelineStrategy;	// 352 = 0x160
    NSString *audioOutputDeviceUniqueID;	// 360 = 0x168
    NSString *clientName;	// 368 = 0x170
    NSString *STSLabel;	// 376 = 0x178
    NSString *multichannelAudioStrategy;	// 384 = 0x180
    long long clientPriority;	// 392 = 0x188
    _Bool PIPModePossible;	// 400 = 0x190
    _Bool isDisplayingClosedCaptions;	// 401 = 0x191
    _Bool externalPlaybackActive;	// 402 = 0x192
    _Bool airPlayVideoActive;	// 403 = 0x193
    _Bool isConnectedToPhysicalSecondScreen;	// 404 = 0x194
    _Bool outputObscuredDueToInsufficientExternalProtection;	// 405 = 0x195
    long long externalProtectionStatus;	// 408 = 0x198
    NSString *ancillaryPerformanceInformationForDisplay;	// 416 = 0x1a0
    float rate;	// 424 = 0x1a8
    int rateChangeIdentifier;	// 428 = 0x1ac
    _Bool automaticallyWaitsToMinimizeStalling;	// 432 = 0x1b0
    _Bool usesLegacyAutomaticWaitingBehavior;	// 433 = 0x1b1
    long long timeControlStatus;	// 440 = 0x1b8
    NSString *reasonForWaitingToPlay;	// 448 = 0x1c0
    struct CGSize currentItemPresentationSize;	// 456 = 0x1c8
    _Bool currentItemNonForcedSubtitlesEnabled;	// 472 = 0x1d8
    unsigned long long preferredVideoDecoderGPURegistryID;	// 480 = 0x1e0
    _Bool disallowsAutoPauseOnRouteRemovalIfNoAudio;	// 488 = 0x1e8
    _Bool ensuresActiveAudioSessionWhenStartingPlayback;	// 489 = 0x1e9
    _Bool hostApplicationInForeground;	// 490 = 0x1ea
    _Bool preservesAudioSessionSampleRate;	// 491 = 0x1eb
    _Bool silencesOtherPlaybackDuringPIP;	// 492 = 0x1ec
    _Bool prefersPlayingSilentlyWhenConflictingWithOtherPlayback;	// 493 = 0x1ed
    _Bool suppressesAudioRendering;	// 494 = 0x1ee
    _Bool isInterstitialPlayer;	// 495 = 0x1ef
    _Bool isSilencedDueToConflictWithOtherPlayback;	// 496 = 0x1f0
    NSNumber *mxSessionID;	// 504 = 0x1f8
    NSArray *videoTargets;	// 512 = 0x200
    AVPlayerPlaybackCoordinator *playbackCoordinator;	// 520 = 0x208
    _Bool clientRequestedPlaybackCoordinator;	// 528 = 0x210
    NSString *backgroundPIPAuthorizationToken;	// 536 = 0x218
    _Bool rateDidChangeNotificationIncludesExtendedDiagnosticPayload;	// 544 = 0x220
    AVQueuePlayer *interstitialPlayer;	// 552 = 0x228
    struct OpaqueFigPlayerInterstitialCoordinator *interstitialEventCoordinator;	// 560 = 0x230
    NSMutableArray *videoLayers;	// 568 = 0x238
    NSMutableArray *subtitleLayers;	// 576 = 0x240
    NSMutableArray *closedCaptionLayers;	// 584 = 0x248
    NSHashTable *avPlayerLayers;	// 592 = 0x250
    int nextPrerollIDToGenerate;	// 600 = 0x258
    int pendingPrerollID;	// 604 = 0x25c
    CDUnknownBlockType prerollCompletionHandler;	// 608 = 0x260
    id currentItemSuppressesVideoLayersNotificationToken;	// 616 = 0x268
    id currentItemPreferredPixelBufferAttributesNotificationToken;	// 624 = 0x270
    struct OpaqueFigPlayer *figPlayer;	// 632 = 0x278
    struct OpaqueFigPlaybackItem *figPlaybackItemToIdentifyNextCurrentItem;	// 640 = 0x280
    _Bool needsToCreateFigPlayer;	// 648 = 0x288
    NSDictionary *cachedFigMediaSelectionCriteriaProperty;	// 656 = 0x290
    NSArray *itemsInFigPlayQueue;	// 664 = 0x298
    NSArray *expectedAssetTypes;	// 672 = 0x2a0
    _Bool reevaluateBackgroundPlayback;	// 680 = 0x2a8
    _Bool hadAssociatedOnscreenPlayerLayerWhenSuspended;	// 681 = 0x2a9
    _Bool suspensionExpected;	// 682 = 0x2aa
    _Bool rateUpdateDuringTransitionDecided;	// 683 = 0x2ab
    _Bool videoLayersAreAttached;	// 684 = 0x2ac
    struct OpaqueCMClock *figMasterClock;	// 688 = 0x2b0
    NSString *captionRenderingStrategy;	// 696 = 0x2b8
    NSArray *displaysUsedForPlayback;	// 704 = 0x2c0
    id <AVLoggingIdentifier> loggingIdentifier;	// 712 = 0x2c8
}

@end

