//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Named Structures

struct OntologyNodeName;

struct UsoGraph;

struct UsoGraphNode {
    CDUnknownFunctionPointerType *_field1;
    struct UsoGraph *_field2;
    unsigned long long _field3;
};

struct UsoIdentifier {
    basic_string_5886a005 _field1;
    basic_string_5886a005 _field2;
    struct optional<std::string> _field3;
    optional_4f9e39db _field4;
    optional_3f5a7c99 _field5;
    optional_53a37146 _field6;
    optional_53a37146 _field7;
};

struct UsoOperatorNode {
    CDUnknownFunctionPointerType *_field1;
    struct UsoGraph *_field2;
    unsigned long long _field3;
    struct OntologyNodeName *_field4;
};

struct UsoVocabManager;

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct optional<double> {
    union {
        char _field1;
        double _field2;
    } _field1;
    _Bool _field2;
};

struct optional<siri::ontology::UsoIdentifier::NluComponent> {
    union {
        char _field1;
        int _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::string> {
    union {
        char _field1;
        basic_string_5886a005 _field2;
    } _field1;
    _Bool _field2;
};

struct optional<unsigned int> {
    union {
        char _field1;
        unsigned int _field2;
    } _field1;
    _Bool _field2;
};

struct shared_ptr<siri::ontology::UsoVocabManager> {
    struct UsoVocabManager *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<siri::ontology::UsoGraph, std::default_delete<siri::ontology::UsoGraph>> {
    struct __compressed_pair<siri::ontology::UsoGraph *, std::default_delete<siri::ontology::UsoGraph>> {
        struct UsoGraph *__value_;
    } __ptr_;
};

struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> {
    struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> {
        struct UsoIdentifier *_field1;
    } _field1;
};

struct vector<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>*, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
        void *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
} basic_string_5886a005;

typedef struct optional<double> {
    union {
        char _field1;
        double _field2;
    } _field1;
    _Bool _field2;
} optional_4f9e39db;

typedef struct optional<siri::ontology::UsoIdentifier::NluComponent> {
    union {
        char _field1;
        int _field2;
    } _field1;
    _Bool _field2;
} optional_3f5a7c99;

typedef struct optional<unsigned int> {
    union {
        char _field1;
        unsigned int _field2;
    } _field1;
    _Bool _field2;
} optional_53a37146;

typedef struct shared_ptr<siri::ontology::UsoVocabManager> {
    struct UsoVocabManager *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_de47c0c1;

typedef struct unique_ptr<siri::ontology::UsoGraph, std::default_delete<siri::ontology::UsoGraph>> {
    struct __compressed_pair<siri::ontology::UsoGraph *, std::default_delete<siri::ontology::UsoGraph>> {
        struct UsoGraph *__value_;
    } __ptr_;
} unique_ptr_e8bae616;

typedef struct unique_ptr<siri::ontology::UsoIdentifier, std::default_delete<siri::ontology::UsoIdentifier>> {
    struct __compressed_pair<siri::ontology::UsoIdentifier *, std::default_delete<siri::ontology::UsoIdentifier>> {
        struct UsoIdentifier *_field1;
    } _field1;
} unique_ptr_191f5ca4;

typedef struct vector<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>*, std::allocator<std::pair<std::reference_wrapper<siri::ontology::UsoGraphNode>, std::reference_wrapper<const siri::ontology::UsoGraphEdge>>>> {
        void *_field1;
    } _field3;
} vector_43a3655f;

