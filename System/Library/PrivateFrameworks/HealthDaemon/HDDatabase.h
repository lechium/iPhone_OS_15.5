//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <HealthDaemon/HDAnalyticsSubmissionCoordinatorDelegate-Protocol.h>
#import <HealthDaemon/HDAssertionObserver-Protocol.h>
#import <HealthDaemon/HDContentProtectionObserver-Protocol.h>
#import <HealthDaemon/HDDatabaseCorruptionEventStoreDelegate-Protocol.h>
#import <HealthDaemon/HDDatabaseJournalDelegate-Protocol.h>
#import <HealthDaemon/HDDatabaseMigrationTransactionDelegate-Protocol.h>
#import <HealthDaemon/HDDiagnosticObject-Protocol.h>
#import <HealthDaemon/HDHFDataStoreDelegate-Protocol.h>
#import <HealthDaemon/HDHealthDaemonReadyObserver-Protocol.h>
#import <HealthDaemon/HDHealthDatabase-Protocol.h>
#import <HealthDaemon/HDProfileReadyObserver-Protocol.h>
#import <HealthDaemon/HDSQLiteDatabaseDelegate-Protocol.h>
#import <HealthDaemon/HDSQLiteDatabasePoolDelegate-Protocol.h>
#import <HealthDaemon/HDSQLiteDatabaseProvider-Protocol.h>

@class HDAssertionManager, HDContentProtectionManager, HDDatabaseJournal, HDHFDataStore, HDProfile, HKObserverSet, NSConditionLock, NSDate, NSDictionary, NSHashTable, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSOperationQueue, NSString, NSUUID;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface HDDatabase : NSObject <HDAssertionObserver, HDContentProtectionObserver, HDDiagnosticObject, HDSQLiteDatabaseDelegate, HDSQLiteDatabasePoolDelegate, HDSQLiteDatabaseProvider, HDDatabaseJournalDelegate, HDHFDataStoreDelegate, HDDatabaseMigrationTransactionDelegate, HDProfileReadyObserver, HDHealthDaemonReadyObserver, HDAnalyticsSubmissionCoordinatorDelegate, HDDatabaseCorruptionEventStoreDelegate, HDHealthDatabase>
{
    _Atomic _Bool _invalidated;	// 8 = 0x8
    _Atomic _Bool _started;	// 9 = 0x9
    NSUUID *_databaseUUID;	// 16 = 0x10
    struct os_unfair_lock_s _databaseUUIDLock;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_serialAsynchronousQueue;	// 32 = 0x20
    HDHFDataStore *_hfDataStore;	// 40 = 0x28
    NSLock *_writeLock;	// 48 = 0x30
    NSObject<OS_dispatch_queue> *_protectedDataQueue;	// 56 = 0x38
    HKObserverSet *_protectedDataObservers;	// 64 = 0x40
    long long _protectedDataState;	// 72 = 0x48
    long long _observedContentProtectionState;	// 80 = 0x50
    _Bool _isObservingContentProtection;	// 88 = 0x58
    NSObject<OS_dispatch_group> *_contentProtectionObservationGroup;	// 96 = 0x60
    NSObject<OS_dispatch_source> *_inactivityFlushTimer;	// 104 = 0x68
    _Bool _hasFlushedForInactivity;	// 112 = 0x70
    NSMutableArray *_firstUnlockBlocks;	// 120 = 0x78
    _Bool _shouldNotifyFirstUnlockObservers;	// 128 = 0x80
    NSDate *_protectedDataFlushDeadlineDate;	// 136 = 0x88
    NSObject<OS_dispatch_source> *_protectedDataFlushDeadlineTimer;	// 144 = 0x90
    _Bool _hasFlushedProtectedData;	// 152 = 0x98
    _Bool _disableTakingProtectedDataAssertionsWhenLocked;	// 153 = 0x99
    _Atomic _Bool _hasPendingSecondaryJournalMerge;	// 154 = 0x9a
    NSMutableDictionary *_databaseJournalMergeObserverSetByType;	// 160 = 0xa0
    NSHashTable *_protectedResourceStores;	// 168 = 0xa8
    struct os_unfair_lock_s _protectedResourceAssertionsLock;	// 176 = 0xb0
    NSMutableDictionary *_protectedResourceAssertionsByIdentifier;	// 184 = 0xb8
    struct atomic_flag _hasFaultedForCorruptionError;	// 192 = 0xc0
    _Bool _didRunPostMigrationUpdates;	// 193 = 0xc1
    HDDatabaseJournal *_journal;	// 200 = 0xc8
    HDDatabaseJournal *_cloudSyncJournal;	// 208 = 0xd0
    HDProfile *_profile;	// 216 = 0xd8
    NSString *_profileDirectoryPath;	// 224 = 0xe0
    NSString *_threadLocalTransactionKey;	// 232 = 0xe8
    NSString *_threadLocalTransactionContextKey;	// 240 = 0xf0
    NSString *_threadLocalIgnoreTransactionContextKey;	// 248 = 0xf8
    HDAssertionManager *_assertionManager;	// 256 = 0x100
    NSLock *_schemaMigrationLock;	// 264 = 0x108
    NSConditionLock *_activeDatabasesLock;	// 272 = 0x110
    NSMutableSet *_activeDatabases;	// 280 = 0x118
    NSHashTable *_migratedDatabases;	// 288 = 0x120
    NSOperationQueue *_asynchronousOperationQueue;	// 296 = 0x128
    NSObject<OS_dispatch_queue> *_journalQueue;	// 304 = 0x130
    NSObject<OS_dispatch_group> *_journalGroup;	// 312 = 0x138
    unsigned long long _pendingJournalMerges;	// 320 = 0x140
    NSObject<OS_dispatch_queue> *_secondaryJournalMergeQueue;	// 328 = 0x148
    NSMutableDictionary *_extendedTransactions;	// 336 = 0x150
    NSDictionary *_databasePoolForType;	// 344 = 0x158
    HDContentProtectionManager *_contentProtectionManager;	// 352 = 0x160
    double _offsetTimeInterval;	// 360 = 0x168
    double _protectedDataFlushInterval;	// 368 = 0x170
    double _inactivityFlushInterval;	// 376 = 0x178
    long long _corruptedMigrationAttemptsCount;	// 384 = 0x180
    CDUnknownBlockType _unitTest_didWaitForJournalMergeHandler;	// 392 = 0x188
}

+ (id)createDatabaseConnectionWithURL:(id)arg1;	// IMP=0x0000000000213dd8
+ (id)allEntityClassesWithBehavior:(id)arg1;	// IMP=0x00000000001c84d2
+ (id)allCurrentAndFutureEntityClasses;	// IMP=0x00000000001c7d06
+ (long long)unitTest_createOrMigrateDatabaseAtDirectoryURL:(id)arg1 schemaProviders:(id)arg2 behavior:(id)arg3 error:(id *)arg4;	// IMP=0x000000000026b87c
- (void).cxx_destruct;	// IMP=0x000000000021c508
@property(copy, nonatomic) CDUnknownBlockType unitTest_didWaitForJournalMergeHandler; // @synthesize unitTest_didWaitForJournalMergeHandler=_unitTest_didWaitForJournalMergeHandler;
@property(nonatomic) long long corruptedMigrationAttemptsCount; // @synthesize corruptedMigrationAttemptsCount=_corruptedMigrationAttemptsCount;
@property(nonatomic) _Bool didRunPostMigrationUpdates; // @synthesize didRunPostMigrationUpdates=_didRunPostMigrationUpdates;
@property(nonatomic) double inactivityFlushInterval; // @synthesize inactivityFlushInterval=_inactivityFlushInterval;
@property(nonatomic) double protectedDataFlushInterval; // @synthesize protectedDataFlushInterval=_protectedDataFlushInterval;
@property(nonatomic) double offsetTimeInterval; // @synthesize offsetTimeInterval=_offsetTimeInterval;
@property(readonly, nonatomic) HDContentProtectionManager *contentProtectionManager; // @synthesize contentProtectionManager=_contentProtectionManager;
@property(nonatomic) __weak HDProfile *profile; // @synthesize profile=_profile;
@property(readonly, nonatomic) HDDatabaseJournal *cloudSyncJournal; // @synthesize cloudSyncJournal=_cloudSyncJournal;
@property(readonly, nonatomic) HDDatabaseJournal *journal; // @synthesize journal=_journal;
- (id)unitTest_HFDataStore;	// IMP=0x000000000021c436
- (void)unitTest_enableDatabaseAccessibilityAssertions;	// IMP=0x000000000021c3da
- (void)unitTest_disableDatabaseAccessibilityAssertions;	// IMP=0x000000000021c229
- (id)unitTest_currentTransaction;	// IMP=0x000000000021c21f
- (void)unitTest_setContentProtectionStateAndWait:(long long)arg1;	// IMP=0x000000000021c1a7
- (id)databaseUUIDWithError:(id *)arg1;	// IMP=0x000000000021bf65
- (void)obliterateWithReason:(id)arg1 preserveCopy:(_Bool)arg2;	// IMP=0x000000000021b803
- (void)invalidateAndWait;	// IMP=0x000000000021b449
- (void)databaseJournalMergeDidComplete:(id)arg1;	// IMP=0x000000000021b1d1
- (void)removeDatabaseJournalMergeObserver:(id)arg1 journalType:(long long)arg2;	// IMP=0x000000000021b107
- (void)addDatabaseJournalMergeObserver:(id)arg1 journalType:(long long)arg2 queue:(id)arg3;	// IMP=0x000000000021b012
- (id)diagnosticDescription;	// IMP=0x000000000021a7e8
- (long long)HFDataStore:(id)arg1 integerForKey:(id)arg2;	// IMP=0x000000000021a6d6
- (void)HFDataStore:(id)arg1 setInteger:(long long)arg2 forKey:(id)arg3;	// IMP=0x000000000021a4e3
- (_Bool)migrateDataForHFDataStore:(id)arg1 toSQLiteFrom:(const void *)arg2 error:(id *)arg3;	// IMP=0x000000000021a198
- (_Bool)migrateDataForHFDataStore:(id)arg1 from:(const void *)arg2 to:(void *)arg3 recoveryAnalytics:(id)arg4 error:(id *)arg5;	// IMP=0x0000000000219e5d
- (void)requestRebuildTransactionForHFDataStore:(id)arg1;	// IMP=0x0000000000219e53
- (_Bool)allowMigrationToSQLiteForHFDataStore:(id)arg1;	// IMP=0x0000000000219d8a
- (id)activeTransactionForCurrentThreadForHFDataStore:(id)arg1 forWriting:(_Bool)arg2;	// IMP=0x0000000000219ce4
- (void)HFDataStoreDidPerformRebuild:(id)arg1 didDecompressArchivedHFD:(_Bool)arg2 didOpenArchivedHFD:(_Bool)arg3 didOpenMovedAsideHFD:(_Bool)arg4 recoveryAnalytics:(id)arg5 duration:(double)arg6;	// IMP=0x0000000000219bd5
- (void)didMigrateHFDataStore:(id)arg1 fromState:(long long)arg2 toState:(long long)arg3 success:(_Bool)arg4 error:(id)arg5;	// IMP=0x0000000000219841
- (void)HFDataStore:(id)arg1 detectedCorruptionOfType:(long long)arg2 code:(int)arg3 error:(id)arg4 shouldPromptUser:(_Bool)arg5 initialRebuildState:(long long)arg6 updatedRebuildState:(long long)arg7;	// IMP=0x00000000002194c9
- (void)HFDataStoreDetectedOutOfSpace:(id)arg1;	// IMP=0x0000000000219480
- (void)unitTest_requestHFDRebuild:(_Bool)arg1;	// IMP=0x000000000021945a
- (_Bool)accessHighFrequencyDataStoreWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000000005c52c
- (id)highFrequencyDataStoreURL;	// IMP=0x0000000000218fb8
- (_Bool)discardHighFrequencyDataStoreWithError:(id *)arg1;	// IMP=0x0000000000218fa2
- (id)_newDataStoreForPath:(id)arg1;	// IMP=0x0000000000218f48
- (unsigned long long)journalChapterCountForType:(long long)arg1;	// IMP=0x0000000000218ef0
- (id)_journalForType:(long long)arg1;	// IMP=0x0000000000218e72
- (id)progressForJournalMergeWithType:(long long)arg1;	// IMP=0x0000000000218e0e
- (_Bool)addJournalEntries:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000185f9
- (_Bool)addJournalEntry:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000021c1c
- (id)cloneAccessibilityAssertion:(id)arg1 ownerIdentifier:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002186f3
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)arg1 shouldPerformTransaction:(_Bool)arg2 timeout:(double)arg3 error:(id *)arg4;	// IMP=0x0000000000217f19
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)arg1 timeout:(double)arg2 error:(id *)arg3;	// IMP=0x0000000000217eef
- (void)removeProtectedDataObserver:(id)arg1;	// IMP=0x0000000000011979
- (void)addProtectedDataObserver:(id)arg1 queue:(id)arg2;	// IMP=0x0000000000217ed7
- (void)addProtectedDataObserver:(id)arg1;	// IMP=0x0000000000003b51
- (void)contentProtectionStateChanged:(long long)arg1 previousState:(long long)arg2;	// IMP=0x0000000000002610
@property(readonly, nonatomic, getter=isProtectedDataAvailable) _Bool protectedDataAvailable;
@property(readonly, nonatomic, getter=isDataProtectedByFirstUnlockAvailable) _Bool dataProtectedByFirstUnlockAvailable;
- (void)profileDidBecomeReady:(id)arg1;	// IMP=0x00000000002174d3
- (void)databasePool:(id)arg1 didFlushDatabases:(id)arg2;	// IMP=0x000000000006a436
- (id)newDatabaseForDatabasePool:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000025625
- (void)checkInDatabase:(id)arg1 type:(long long)arg2 protectedResources:(id)arg3;	// IMP=0x000000000021700d
- (id)checkOutProtectedResources:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002166be
- (id)checkOutUnprotectedDatabase:(id)arg1 error:(id *)arg2;	// IMP=0x000000000021669f
- (id)checkOutProtectedDatabase:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000215927
- (void)daemonReady:(id)arg1;	// IMP=0x000000000021586c
- (void)assertionManager:(id)arg1 assertionInvalidated:(id)arg2;	// IMP=0x00000000002156b3
- (void)migrationTransaction:(id)arg1 didEncounterDatabaseMismatchWithUnprotectedIdentifier:(id)arg2 protectedIdentifier:(id)arg3;	// IMP=0x0000000000215582
- (void)migrationTransaction:(id)arg1 didCreateDatabasesWithIdentifier:(id)arg2;	// IMP=0x00000000002152d7
- (id)store:(id)arg1 objectForKey:(id)arg2;	// IMP=0x0000000000213d3f
- (void)store:(id)arg1 setObject:(id)arg2 forKey:(id)arg3;	// IMP=0x0000000000213c96
- (id)_newCorruptionEventStore;	// IMP=0x0000000000213c68
@property(readonly, copy, nonatomic) NSDate *mostRecentObliterationDate;
- (void)_reportSQLiteCorruption:(id)arg1 forDatabase:(long long)arg2 shouldPrompt:(_Bool)arg3;	// IMP=0x00000000002133c0
- (void)_reportDatabaseMigrationStatus:(long long)arg1 component:(long long)arg2 schemaVersion:(long long)arg3 error:(id)arg4;	// IMP=0x0000000000213017
- (void)reportDailyAnalyticsWithCoordinator:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000021255f
- (id)databaseSizeInBytesExcludingHFD;	// IMP=0x00000000002123b4
- (id)databaseSizeInBytesForTypeUnprotected:(_Bool)arg1 WAL:(_Bool)arg2;	// IMP=0x0000000000212077
- (id)HFDSizeInBytes;	// IMP=0x0000000000211fdd
- (void)finalizeExtendedTransactionForIdentifier:(id)arg1;	// IMP=0x0000000000211e98
- (id)extendedDatabaseTransactionForIdentifier:(id)arg1;	// IMP=0x0000000000211c22
- (id)beginExtendedTransactionWithContext:(id)arg1 transactionTimeout:(double)arg2 continuationTimeout:(double)arg3 error:(id *)arg4;	// IMP=0x0000000000211a7e
- (_Bool)performWithJournalType:(long long)arg1 error:(id *)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x00000000002119d6
- (void)performAsynchronouslySerial:(CDUnknownBlockType)arg1;	// IMP=0x00000000002119c5
- (void)performAsynchronously:(CDUnknownBlockType)arg1;	// IMP=0x00000000000037a0
- (void)performWhenDataProtectedByFirstUnlockIsAvailableOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000000211814
- (void)performWhenDataProtectedByFirstUnlockIsAvailable:(CDUnknownBlockType)arg1;	// IMP=0x000000000006bb9d
- (_Bool)performHighPriorityTransactionsWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000000211578
- (_Bool)performWithTransactionContext:(id)arg1 error:(id *)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x000000000021119c
- (_Bool)performTransactionWithContext:(id)arg1 error:(id *)arg2 block:(CDUnknownBlockType)arg3 inaccessibilityHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000021025e
- (id)databasePoolForDatabaseType:(long long)arg1;	// IMP=0x00000000002100de
- (void)start;	// IMP=0x000000000020fe53
- (void)dealloc;	// IMP=0x000000000020fd30
- (id)initWithProfile:(id)arg1 concurrentReaderLimit:(unsigned long long)arg2;	// IMP=0x000000000020f1cc
- (id)allEntityClassesWithProtectionClass:(long long)arg1;	// IMP=0x00000000001c8563

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

