//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class HKDeletedObject, HKSample;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct DataStore;

struct HDActivityCacheActiveSource {
    double _field1;
    long long _field2;
    struct vector<long long, std::allocator<long long>> _field3;
};

struct HDActivityCacheHeartRateStatisticsBuilderHeartRateSample;

struct HDActivityCacheStatisticsBuilderSample {
    double _field1;
    double _field2;
    double _field3;
    long long _field4;
};

struct HDActivityCacheStatisticsBuilderStandHourSample;

struct HDActivityCacheStatisticsBuilderWorkoutSample;

struct HDSyncAnchorRange {
    long long start;
    long long end;
};

struct HistogramBucket;

struct HistogramState {
    struct vector<HistogramBucket, std::allocator<HistogramBucket>> _dateBuckets;
    double _histogramBucketAnchor;
    double _histogramBucketSize;
    long long _currentStartDateBucket;
};

struct ObjectIdentifier {
    long long objectType;
    unsigned long long identifier;
};

struct VirtualFilesystem;

struct _HDObjectDeletionInfo {
    _Bool _field1;
    long long _field2;
    long long _field3;
    long long _field4;
};

struct _HDStatisticsCollectionCalculatorImplementation;

struct _HDWrappedSource;

struct __shared_weak_count;

struct atomic_flag {
    _Atomic _Bool _Value;
};

struct deque<std::tuple<double, double, float>, std::allocator<std::tuple<double, double, float>>> {
    struct __split_buffer<std::tuple<double, double, float>*, std::allocator<std::tuple<double, double, float>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::tuple<double, double, float>**, std::allocator<std::tuple<double, double, float>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::tuple<double, double, float>>> {
        unsigned long long __value_;
    } __size_;
};

struct linear_congruential_engine<unsigned int, 48271U, 0U, 2147483647U> {
    unsigned int __x_;
};

struct map<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>, std::less<_HKDataTypeCode>, std::allocator<std::pair<const _HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>>> {
    struct __tree<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::__map_value_compare<_HKDataTypeCode, std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::less<_HKDataTypeCode>, true>, std::allocator<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<_HKDataTypeCode, std::__value_type<_HKDataTypeCode, std::map<long long, _HDActivityCacheSourceTotal>>, std::less<_HKDataTypeCode>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct normal_distribution<double> {
    struct param_type __p_;
    double _V_;
    _Bool _V_hot_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct param_type {
    double __mean_;
    double __stddev_;
};

struct shared_ptr<health::DataStore> {
    struct DataStore *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<health::VirtualFilesystem> {
    struct VirtualFilesystem *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct tuple<long long, HKDeletedObject *> {
    struct __tuple_impl<std::__tuple_indices<0, 1>, long long, HKDeletedObject *> {
        long long __value_;
        HKDeletedObject *__value_;
    } __base_;
};

struct tuple<long long, HKSample *> {
    struct __tuple_impl<std::__tuple_indices<0, 1>, long long, HKSample *> {
        long long __value_;
        HKSample *__value_;
    } __base_;
};

struct unique_ptr<_HDStatisticsCollectionCalculatorImplementation, std::default_delete<_HDStatisticsCollectionCalculatorImplementation>> {
    struct __compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::default_delete<_HDStatisticsCollectionCalculatorImplementation>> {
        struct _HDStatisticsCollectionCalculatorImplementation *__value_;
    } __ptr_;
};

struct unique_ptr<health::DataStore, std::default_delete<health::DataStore>> {
    struct __compressed_pair<health::DataStore *, std::default_delete<health::DataStore>> {
        struct DataStore *_field1;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<long, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<long long, HKSource *, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, HKSource *>>> {
    struct __hash_table<std::__hash_value_type<long long, HKSource *>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, HKSource *>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, HKSource *>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, HKSource *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, HKSource *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, HKSource *>, std::hash<long long>, std::equal_to<long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, HKSource *>, std::equal_to<long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<long long, bool, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, bool>>> {
    struct __hash_table<std::__hash_value_type<long long, bool>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, bool>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, bool>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, bool>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long long, bool>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, bool>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, bool>, std::hash<long long>, std::equal_to<long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, bool>, std::equal_to<long long>, std::hash<long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_set<long, std::hash<long>, std::equal_to<long>, std::allocator<long>> {
    struct __hash_table<long, std::hash<long>, std::equal_to<long>, std::allocator<long>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<long, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<long, void *>*>, std::allocator<std::__hash_node<long, void *>>> {
            struct __hash_node_base<std::__hash_node<long, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::hash<long>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::equal_to<long>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>> {
    struct HDActivityCacheActiveSource *__begin_;
    struct HDActivityCacheActiveSource *__end_;
    struct __compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>> {
        struct HDActivityCacheActiveSource *__value_;
    } __end_cap_;
};

struct vector<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample, std::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample>> {
    struct HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *__begin_;
    struct HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *__end_;
    struct __compressed_pair<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *, std::allocator<HDActivityCacheHeartRateStatisticsBuilderHeartRateSample>> {
        struct HDActivityCacheHeartRateStatisticsBuilderHeartRateSample *__value_;
    } __end_cap_;
};

struct vector<HDActivityCacheStatisticsBuilderSample, std::allocator<HDActivityCacheStatisticsBuilderSample>> {
    struct HDActivityCacheStatisticsBuilderSample *__begin_;
    struct HDActivityCacheStatisticsBuilderSample *__end_;
    struct __compressed_pair<HDActivityCacheStatisticsBuilderSample *, std::allocator<HDActivityCacheStatisticsBuilderSample>> {
        struct HDActivityCacheStatisticsBuilderSample *__value_;
    } __end_cap_;
};

struct vector<HDActivityCacheStatisticsBuilderStandHourSample, std::allocator<HDActivityCacheStatisticsBuilderStandHourSample>> {
    struct HDActivityCacheStatisticsBuilderStandHourSample *__begin_;
    struct HDActivityCacheStatisticsBuilderStandHourSample *__end_;
    struct __compressed_pair<HDActivityCacheStatisticsBuilderStandHourSample *, std::allocator<HDActivityCacheStatisticsBuilderStandHourSample>> {
        struct HDActivityCacheStatisticsBuilderStandHourSample *__value_;
    } __end_cap_;
};

struct vector<HDActivityCacheStatisticsBuilderWorkoutSample, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>> {
    struct HDActivityCacheStatisticsBuilderWorkoutSample *__begin_;
    struct HDActivityCacheStatisticsBuilderWorkoutSample *__end_;
    struct __compressed_pair<HDActivityCacheStatisticsBuilderWorkoutSample *, std::allocator<HDActivityCacheStatisticsBuilderWorkoutSample>> {
        struct HDActivityCacheStatisticsBuilderWorkoutSample *__value_;
    } __end_cap_;
};

struct vector<HistogramBucket, std::allocator<HistogramBucket>> {
    struct HistogramBucket *__begin_;
    struct HistogramBucket *__end_;
    struct __compressed_pair<HistogramBucket *, std::allocator<HistogramBucket>> {
        struct HistogramBucket *__value_;
    } __end_cap_;
};

struct vector<_HDWrappedSource, std::allocator<_HDWrappedSource>> {
    struct _HDWrappedSource *__begin_;
    struct _HDWrappedSource *__end_;
    struct __compressed_pair<_HDWrappedSource *, std::allocator<_HDWrappedSource>> {
        struct _HDWrappedSource *__value_;
    } __end_cap_;
};

struct vector<long long, std::allocator<long long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long long *, std::allocator<long long>> {
        long long *_field1;
    } _field3;
};

struct vector<std::tuple<long long, HKDeletedObject *>, std::allocator<std::tuple<long long, HKDeletedObject *>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::tuple<long long, HKDeletedObject *>*, std::allocator<std::tuple<long long, HKDeletedObject *>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::tuple<long long, HKSample *>, std::allocator<std::tuple<long long, HKSample *>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::tuple<long long, HKSample *>*, std::allocator<std::tuple<long long, HKSample *>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    id _field2;
    unsigned char _field3;
} CDStruct_4c492439;

typedef struct {
    long long *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_5df41632;

typedef struct {
    int minimum;
    int current;
} CDStruct_c12fb951;

typedef struct {
    long long start;
    long long duration;
} CDStruct_ef5fcbe6;

// Ambiguous groups
typedef struct {
    unsigned int endDate:1;
    unsigned int startDate:1;
    unsigned int value:1;
} CDStruct_2d5b04fb;

typedef struct {
    unsigned int code:1;
} CDStruct_9ab06576;

typedef struct {
    unsigned int creationDate:1;
} CDStruct_dc48a425;

typedef struct {
    unsigned int requestType:1;
} CDStruct_7c66fec0;

typedef struct {
    unsigned int success:1;
} CDStruct_f2ecb737;

typedef struct {
    unsigned int type:1;
} CDStruct_f953fb60;

typedef struct {
    unsigned int value:1;
} CDStruct_01ef6375;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

typedef struct {
    long long majorVersion;
    long long minorVersion;
    long long patchVersion;
} CDStruct_f6aba300;

typedef struct shared_ptr<health::VirtualFilesystem> {
    struct VirtualFilesystem *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c7cae3aa;

typedef struct unique_ptr<health::DataStore, std::default_delete<health::DataStore>> {
    struct __compressed_pair<health::DataStore *, std::default_delete<health::DataStore>> {
        struct DataStore *_field1;
    } _field1;
} unique_ptr_9a02d391;

typedef struct vector<HDActivityCacheActiveSource, std::allocator<HDActivityCacheActiveSource>> {
    struct HDActivityCacheActiveSource *__begin_;
    struct HDActivityCacheActiveSource *__end_;
    struct __compressed_pair<HDActivityCacheActiveSource *, std::allocator<HDActivityCacheActiveSource>> {
        struct HDActivityCacheActiveSource *__value_;
    } __end_cap_;
} vector_0fd01da3;

