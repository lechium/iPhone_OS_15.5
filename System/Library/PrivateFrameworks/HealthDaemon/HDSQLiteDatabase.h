//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class HDSQLiteStatementCache, NSError, NSMutableArray, NSMutableDictionary, NSNumber, NSString, NSURL;
@protocol HDSQLiteDatabaseDelegate;

@interface HDSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;	// 8 = 0x8
    _Bool _isInTransaction;	// 16 = 0x10
    _Bool _requiresRollback;	// 17 = 0x11
    long long _transactionType;	// 24 = 0x18
    NSMutableDictionary *_attachedDatabaseURLsByName;	// 32 = 0x20
    _Atomic _Bool _transactionInterruptRequested;	// 40 = 0x28
    _Bool _isHandlingTransactionEnd;	// 41 = 0x29
    NSMutableArray *_beforeCommitBlocks;	// 48 = 0x30
    NSMutableArray *_onCommitBlocks;	// 56 = 0x38
    NSMutableArray *_onRollbackBlocks;	// 64 = 0x40
    struct os_unfair_lock_s _interruptionLock;	// 72 = 0x48
    _Bool _writer;	// 76 = 0x4c
    _Bool _checkpointRequired;	// 77 = 0x4d
    _Bool _encounteredOutOfSpace;	// 78 = 0x4e
    NSURL *_fileURL;	// 80 = 0x50
    NSString *_fileProtectionType;	// 88 = 0x58
    id <HDSQLiteDatabaseDelegate> _delegate;	// 96 = 0x60
    long long _cacheScope;	// 104 = 0x68
    HDSQLiteStatementCache *_statementCache;	// 112 = 0x70
    NSError *_corruptionError;	// 120 = 0x78
}

+ (id)memoryDatabaseFromURL:(id)arg1;	// IMP=0x00000000000911e4
+ (id)highFrequencyDatabaseURLWithProfileDirectoryPath:(id)arg1;	// IMP=0x000000000062c946
+ (id)protectedDatabaseURLWithProfileDirectoryPath:(id)arg1;	// IMP=0x00000000000251c3
+ (id)mainDatabaseURLWithProfileDirectoryPath:(id)arg1;	// IMP=0x0000000000025bea
+ (_Bool)databaseSchemas:(id)arg1 containTable:(id)arg2;	// IMP=0x00000000006ad8f3
- (void).cxx_destruct;	// IMP=0x000000000006a7c2
@property(readonly, copy, nonatomic) NSError *corruptionError; // @synthesize corruptionError=_corruptionError;
@property(nonatomic) _Bool encounteredOutOfSpace; // @synthesize encounteredOutOfSpace=_encounteredOutOfSpace;
@property(readonly, nonatomic) HDSQLiteStatementCache *statementCache; // @synthesize statementCache=_statementCache;
@property(nonatomic) long long cacheScope; // @synthesize cacheScope=_cacheScope;
@property(nonatomic) __weak id <HDSQLiteDatabaseDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool checkpointRequired; // @synthesize checkpointRequired=_checkpointRequired;
@property(copy, nonatomic) NSString *fileProtectionType; // @synthesize fileProtectionType=_fileProtectionType;
@property(nonatomic, getter=isWriter) _Bool writer; // @synthesize writer=_writer;
@property(readonly, copy, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void)unitTest_setCorruptionError:(id)arg1;	// IMP=0x00000000000969f8
- (id)dumpSchemaWithError:(id *)arg1;	// IMP=0x0000000000096298
- (_Bool)isDatabaseWithNameAttached:(id)arg1;	// IMP=0x0000000000008fe8
- (_Bool)detachDatabaseWithName:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000095a93
- (_Bool)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000025351
- (_Bool)performIntegrityCheckOnDatabase:(id)arg1 error:(id *)arg2 integrityErrorHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000095806
- (_Bool)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id *)arg2;	// IMP=0x000000000000bb4f
- (_Bool)enableIncrementalAutovacuumForDatabaseWithName:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000954b0
- (_Bool)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000095192
- (id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000094e68
- (_Bool)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id *)arg5;	// IMP=0x0000000000094c98
- (_Bool)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000093f70
- (long long)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000093a84
- (void)requireRollback;	// IMP=0x0000000000093a74
- (void)beforeCommit:(CDUnknownBlockType)arg1;	// IMP=0x00000000000938ac
- (void)onCommit:(CDUnknownBlockType)arg1 orRollback:(CDUnknownBlockType)arg2;	// IMP=0x0000000000031212
@property(readonly, copy, nonatomic) NSNumber *lastInsertRowID;
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000025e6e
- (_Bool)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000093754
- (_Bool)executeCachedStatementForKey:(const char *)arg1 error:(id *)arg2 SQLGenerator:(CDUnknownBlockType)arg3 bindingHandler:(CDUnknownBlockType)arg4 enumerationHandler:(CDUnknownBlockType)arg5;	// IMP=0x0000000000093634
- (_Bool)executeSQLStatements:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000093495
- (_Bool)executeUncachedSQL:(id)arg1 error:(id *)arg2;	// IMP=0x000000000009347d
- (_Bool)executeUncachedSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000006e80e
- (_Bool)executeSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000007dc2
- (_Bool)performTransactionWithType:(long long)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000000005963
- (int)getChangesCount;	// IMP=0x0000000000092496
- (id)getLastErrorWithStatement:(struct sqlite3_stmt *)arg1 context:(id)arg2;	// IMP=0x0000000000092335
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000091e07
@property _Bool transactionInterruptRequested;
@property(readonly, nonatomic, getter=isOpen) _Bool open;
- (void)close;	// IMP=0x000000000006a647
- (int)openForReadingWithError:(id *)arg1;	// IMP=0x0000000000091bfb
- (int)openWithError:(id *)arg1;	// IMP=0x0000000000025c6c
- (void)dealloc;	// IMP=0x000000000006a6ae
- (id)initMemoryDatabase;	// IMP=0x00000000000911d0
- (id)initWithDatabaseURL:(id)arg1;	// IMP=0x00000000000910d0
- (_Bool)accessHFDForWritingWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000000005c3b5
- (_Bool)accessHFDForReadingWithError:(id *)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000000000e1cc4
- (_Bool)isProtectedDatabaseAttached;	// IMP=0x0000000000008f7b
- (_Bool)detachProtectedDatabaseWithError:(id *)arg1;	// IMP=0x000000000062c9b5
- (_Bool)attachProtectedDatabaseWithURL:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000025232
- (_Bool)deleteDataEntitySubclassTablesIfExist:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;	// IMP=0x00000000006ad64d
- (_Bool)deleteDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;	// IMP=0x00000000006ad59e
- (_Bool)deleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id *)arg3;	// IMP=0x00000000006ad017

@end

