//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <BackBoardServices/BKSMousePointerServiceServerToClientInterface-Protocol.h>

@class BKSMousePointerDevicePreferences, BSCompoundAssertion, BSServiceConnection, NSMutableDictionary, NSSet, NSString;
@protocol OS_dispatch_queue;

@interface BKSMousePointerService : NSObject <BKSMousePointerServiceServerToClientInterface>
{
    NSObject<OS_dispatch_queue> *_connectionQueue;	// 8 = 0x8
    struct os_unfair_lock_s _lock;	// 16 = 0x10
    BSServiceConnection *_connection;	// 24 = 0x18
    NSMutableDictionary *_displayUUIDToPerDisplayInfo;	// 32 = 0x20
    BSCompoundAssertion *_deviceConnectionObservers;	// 40 = 0x28
    BSCompoundAssertion *_preferencesObservers;	// 48 = 0x30
    NSSet *_attachedDevices;	// 56 = 0x38
    _Bool _isObservingDeviceConnection;	// 64 = 0x40
    _Bool _isObservingPreferences;	// 65 = 0x41
}

+ (id)sharedInstance;	// IMP=0x000000000002062a
+ (id)new;	// IMP=0x00000000000204fc
- (void).cxx_destruct;	// IMP=0x000000000001fd68
- (oneway void)pointerGlobalDevicePreferencesDidChange:(id)arg1;	// IMP=0x000000000001fb79
- (oneway void)pointingDevicesDidChange:(id)arg1;	// IMP=0x000000000001fb1e
- (void)_activateServerConnection;	// IMP=0x000000000001f9a9
- (void)_locked_reactivateConnection;	// IMP=0x000000000001f929
- (void)_locked_updateEventRoutesFromContext:(id)arg1 forDisplayUUID:(id)arg2;	// IMP=0x000000000001f86c
- (void)_locked_sendCurrentAssertionParameters:(id)arg1 forDisplayUUID:(id)arg2;	// IMP=0x000000000001f7a8
- (id)_locked_infoForDisplayUUID:(id)arg1 createIfNeeded:(_Bool)arg2;	// IMP=0x000000000001f6f7
- (void)_locked_setMousePointerPreferencesObservationEnabled:(_Bool)arg1;	// IMP=0x000000000001f6be
- (void)_locked_updateServerWithPreferencesObservationState;	// IMP=0x000000000001f63a
- (void)_locked_setMousePointerDeviceObservationEnabled:(_Bool)arg1;	// IMP=0x000000000001f601
- (void)_locked_updateServerWithPointerDeviceObservationState;	// IMP=0x000000000001f544
- (void)_locked_pointingDevicesDidChange:(id)arg1;	// IMP=0x000000000001f3af
- (void)_locked_updateObserver:(id)arg1 withPointingDevices:(id)arg2;	// IMP=0x000000000001f113
- (id)_locked_serverTarget;	// IMP=0x000000000001f0ea
- (id)_unlocked_serverTarget;	// IMP=0x000000000001f09c
- (void)setPreferences:(id)arg1 forDevice:(id)arg2;	// IMP=0x000000000001f016
- (id)preferencesForDevice:(id)arg1;	// IMP=0x000000000001ef93
- (id)addPointerPreferencesObserver:(id)arg1;	// IMP=0x000000000001edee
@property(copy) BKSMousePointerDevicePreferences *globalDevicePreferences;
- (id)addPointerDeviceObserver:(id)arg1;	// IMP=0x000000000001eb72
- (void)getHitTestContextsAtPoint:(id)arg1 withAdditionalContexts:(id)arg2 onDisplay:(id)arg3 withCompletion:(CDUnknownBlockType)arg4;	// IMP=0x000000000001eaab
- (id)requestGlobalMouseEventsForDisplay:(id)arg1 targetContextID:(unsigned int)arg2;	// IMP=0x000000000001e723
- (id)pointerSuppressionAssertionOnDisplay:(id)arg1 forReason:(id)arg2 withOptionsMask:(unsigned long long)arg3;	// IMP=0x000000000001e37c
- (id)acquireButtonDownPointerRepositionAssertionForReason:(id)arg1 contextRelativePointerPosition:(id)arg2 onDisplay:(id)arg3 restrictingToPID:(int)arg4;	// IMP=0x000000000001dfe1
- (void)setContextRelativePointerPosition:(id)arg1 withInitialVelocity:(id)arg2 onDisplay:(id)arg3 withDecelerationRate:(double)arg4 restrictingToPID:(int)arg5;	// IMP=0x000000000001debf
- (void)setContextRelativePointerPosition:(id)arg1 onDisplay:(id)arg2 withAnimationParameters:(id)arg3 restrictingToPID:(int)arg4;	// IMP=0x000000000001ddd5
- (void)setPointerPosition:(struct CGPoint)arg1 onDisplay:(id)arg2 withAnimationParameters:(id)arg3;	// IMP=0x000000000001dd11
- (void)setGlobalPointerPosition:(struct CGPoint)arg1;	// IMP=0x000000000001dc89
- (struct CGPoint)globalPointerPosition;	// IMP=0x000000000001dc05
- (void)dealloc;	// IMP=0x000000000001da80
- (id)_init;	// IMP=0x000000000001d9da
- (id)init;	// IMP=0x000000000001d8ac

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

