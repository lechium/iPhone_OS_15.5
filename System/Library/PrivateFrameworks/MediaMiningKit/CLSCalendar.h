//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@interface CLSCalendar : NSObject
{
}

+ (id)localStartSeasonDateForLocalDate:(id)arg1;	// IMP=0x0000000000079d97
+ (_Bool)supportsSeasonsWithLocale:(id)arg1;	// IMP=0x0000000000079cec
+ (_Bool)currentLocaleSupportsSeasons;	// IMP=0x0000000000079c92
+ (id)localStartDateForNextSeasonAfterLocalDate:(id)arg1;	// IMP=0x0000000000079c2b
+ (_Bool)isLastMonthOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079bc2
+ (_Bool)isMiddleMonthOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079b5a
+ (id)localDateIntervalOfFirstTenDaysOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079a5f
+ (_Bool)isFirstTenDaysOfSeasonForLocalDate:(id)arg1;	// IMP=0x00000000000799e8
+ (_Bool)isFirstMonthOfSeasonForLocalDate:(id)arg1;	// IMP=0x000000000007997f
+ (_Bool)isSecondHalfOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079880
+ (id)seasonNameForLocalDate:(id)arg1 locale:(id)arg2;	// IMP=0x00000000000797f2
+ (id)seasonNameForDateComponents:(id)arg1 locale:(id)arg2;	// IMP=0x00000000000796bb
+ (_Bool)isCountryCodePartOfSouthernHemisphere:(id)arg1;	// IMP=0x000000000007961f
+ (_Bool)isCountryCodePartOfNorthernHemisphere:(id)arg1;	// IMP=0x0000000000079583
+ (id)s_seasonCountryCodesDictionary;	// IMP=0x0000000000079520
+ (id)southernMeteorologicalSeasonNameForDateComponents:(id)arg1;	// IMP=0x00000000000794d2
+ (id)northernMeteorologicalSeasonNameForDateComponents:(id)arg1;	// IMP=0x0000000000079484
+ (id)components:(unsigned long long)arg1 fromDateComponents:(id)arg2 toDateComponents:(id)arg3 options:(unsigned long long)arg4;	// IMP=0x00000000000793b2
+ (_Bool)isFirstTwoWeeksOfMonthForLocalDate:(id)arg1;	// IMP=0x0000000000079328
+ (_Bool)isLastTwoWeeksOfMonthForLocalDate:(id)arg1;	// IMP=0x000000000007929e
+ (_Bool)isLastWeekOfMonthForLocalDate:(id)arg1;	// IMP=0x0000000000079214
+ (struct _NSRange)rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;	// IMP=0x000000000007914e
+ (long long)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;	// IMP=0x0000000000079094
+ (long long)numberOfDaysBetweenDate:(id)arg1 andDate:(id)arg2;	// IMP=0x0000000000079036
+ (id)dateFromComponents:(unsigned long long)arg1 ofDate:(id)arg2;	// IMP=0x0000000000078f37
+ (id)dateByAddingWeeksOfYear:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078e34
+ (id)dateByAddingYears:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078d31
+ (id)dateByAddingMonths:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078c2e
+ (id)dateByAddingDays:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078b2b
+ (id)dateByAddingHours:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078a28
+ (long long)hourFromDate:(id)arg1;	// IMP=0x000000000007897f
+ (long long)dayOfWeekFromDate:(id)arg1;	// IMP=0x00000000000788c5
+ (long long)dayFromDate:(id)arg1;	// IMP=0x000000000007881c
+ (long long)weekOfMonthFromDate:(id)arg1;	// IMP=0x0000000000078773
+ (long long)weekOfYearFromDate:(id)arg1;	// IMP=0x00000000000786ca
+ (long long)monthFromDate:(id)arg1;	// IMP=0x0000000000078621
+ (long long)yearForWeekOfYearFromDate:(id)arg1;	// IMP=0x0000000000078578
+ (long long)yearFromDate:(id)arg1;	// IMP=0x00000000000784cf
+ (id)components:(unsigned long long)arg1 fromDate:(id)arg2;	// IMP=0x0000000000078420
+ (id)endOfMonthForDate:(id)arg1;	// IMP=0x000000000007832f
+ (id)startOfMonthForDate:(id)arg1;	// IMP=0x0000000000078231
+ (id)endOfWeekForDate:(id)arg1;	// IMP=0x0000000000078140
+ (id)startOfWeekForDate:(id)arg1;	// IMP=0x0000000000078042
+ (id)endOfDayForDate:(id)arg1;	// IMP=0x0000000000077f51
+ (id)startOfDayForDate:(id)arg1;	// IMP=0x0000000000077e8d
+ (id)timeZoneFromLocation:(id)arg1;	// IMP=0x0000000000077e78
+ (id)localDateFormatterWithFormat:(id)arg1;	// IMP=0x0000000000077de2
+ (id)dateBySettingYear:(long long)arg1 ofDate:(id)arg2;	// IMP=0x0000000000077cce
+ (id)localDateFromUniversalDate:(id)arg1 atLocation:(id)arg2;	// IMP=0x0000000000077bea
+ (id)universalDateFromLocalDate:(id)arg1 atLocation:(id)arg2;	// IMP=0x0000000000077b06
+ (id)localDateFromUniversalDate:(id)arg1;	// IMP=0x0000000000077a79
+ (id)localDateFromUniversalDate:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x0000000000077912
+ (id)universalDateFromLocalDate:(id)arg1;	// IMP=0x0000000000077885
+ (id)universalDateFromLocalDate:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x0000000000077746
+ (id)componentsFromDate:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x0000000000077666
+ (id)dateFromComponents:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x0000000000077570
+ (id)dateComponentsWithLocalDate:(id)arg1;	// IMP=0x00000000000774a5
+ (id)dateComponentsWithUTCDate:(id)arg1 localDate:(id)arg2;	// IMP=0x0000000000077378
+ (id)currentLocalDate;	// IMP=0x00000000000772d7
+ (id)validDateForDate:(id)arg1;	// IMP=0x00000000000770ee
+ (_Bool)isDateValid:(id)arg1;	// IMP=0x0000000000077031
+ (void)initialize;	// IMP=0x0000000000076fd0

@end

