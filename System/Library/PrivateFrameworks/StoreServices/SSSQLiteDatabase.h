//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class BKSProcessAssertion, NSString;
@protocol OS_dispatch_queue;

@interface SSSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_dispatchQueue;	// 16 = 0x10
    NSString *_databasePath;	// 24 = 0x18
    _Bool _readOnly;	// 32 = 0x20
    _Bool _shouldAttemptToReopenDB;	// 33 = 0x21
    _Bool _isInTransaction;	// 34 = 0x22
    NSString *_protectionType;	// 40 = 0x28
    CDUnknownBlockType _setupBlock;	// 48 = 0x30
    struct __CFDictionary *_statementCache;	// 56 = 0x38
    _Bool _takesTaskCompletionAssertions;	// 64 = 0x40
    BKSProcessAssertion *_taskAssertion;	// 72 = 0x48
    long long _taskAssertionCount;	// 80 = 0x50
}

+ (void)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(_Bool *)arg2 didFinish:(_Bool *)arg3 isCorrupt:(_Bool *)arg4;	// IMP=0x0000000000109b82
+ (void)_setTakesTaskCompletionAssertions:(_Bool)arg1;	// IMP=0x0000000000109860
+ (_Bool)statementHasRowAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x00000000001089fb
+ (_Bool)statementDidFinishAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x00000000001089d0
@property(copy, nonatomic) CDUnknownBlockType setupBlock; // @synthesize setupBlock=_setupBlock;
- (struct sqlite3_stmt *)_statementForSQL:(id)arg1 cache:(_Bool)arg2;	// IMP=0x000000000010b548
- (void)_resetDatabaseWithPath:(id)arg1;	// IMP=0x000000000010b26a
- (void)_resetCorruptDatabase;	// IMP=0x000000000010afec
- (int)_resetAndReopenDatabaseWithPath:(id)arg1;	// IMP=0x000000000010ae03
- (int)_openFlags;	// IMP=0x000000000010ad45
- (id)_openDatabaseIfNotOpen;	// IMP=0x000000000010a484
- (void)_expireBackgroundTask;	// IMP=0x000000000010a313
- (void)_endTaskCompletionAssertion;	// IMP=0x000000000010a119
- (int)_closeDatabaseIfOpen;	// IMP=0x000000000010a0a2
- (void)_beginTaskCompletionAssertion;	// IMP=0x0000000000109ecf
- (void)_accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000109dc1
@property _Bool takesTaskCompletionAssertions;
- (_Bool)statementHasRowAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x0000000000109a65
- (_Bool)statementDidFinishAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x00000000001099ef
- (void)expireBackgroundTask;	// IMP=0x0000000000109930
- (void)endTaskCompletionAssertion;	// IMP=0x00000000001098cf
- (void)beginTaskCompletionAssertion;	// IMP=0x000000000010986c
- (long long)userVersionForDatabase:(id)arg1;	// IMP=0x00000000001095ec
- (long long)userVersion;	// IMP=0x00000000001095d3
- (_Bool)setUserVersion:(long long)arg1 forDatabase:(id)arg2;	// IMP=0x0000000000109565
- (_Bool)setUserVersion:(long long)arg1;	// IMP=0x000000000010954c
- (void)prepareStatementForSQL:(id)arg1 cache:(_Bool)arg2 usingBlock:(CDUnknownBlockType)arg3;	// IMP=0x000000000010944b
- (void)performTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000010930c
- (id)newDispatchSourceWithType:(struct dispatch_source_type_s *)arg1;	// IMP=0x00000000001092f7
- (_Bool)executeSQL:(id)arg1;	// IMP=0x0000000000108e07
- (void)dispatchBlockSync:(CDUnknownBlockType)arg1;	// IMP=0x0000000000108dce
- (void)dispatchBlockAsync:(CDUnknownBlockType)arg1;	// IMP=0x0000000000108d95
- (void)dispatchAfter:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000000108d81
- (long long)countChanges;	// IMP=0x0000000000108cae
- (_Bool)columnName:(id)arg1 existsInTable:(id)arg2;	// IMP=0x0000000000108af7
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000108a27
- (void)dealloc;	// IMP=0x00000000001087a5
- (id)initWithDatabaseURL:(id)arg1 readOnly:(_Bool)arg2 protectionType:(id)arg3;	// IMP=0x0000000000108484
- (id)initWithDatabaseURL:(id)arg1 readOnly:(_Bool)arg2;	// IMP=0x0000000000108468
- (id)initWithDatabaseURL:(id)arg1;	// IMP=0x0000000000108454

@end

