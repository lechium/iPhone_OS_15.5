//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BayesianModel {
    struct _opaque_pthread_rwlock_t m_rwlock;
    struct unordered_map<unsigned long long, Gaussian, BayesianModel::SuperHasher, BayesianModel::SuperHasher, std::allocator<std::pair<const unsigned long long, Gaussian>>> m_features;
    int m_nFeaturesCount;
    unsigned long long m_nTotalTrue;
    unsigned long long m_nTotalExamples;
    double m_dSumPredictions;
    double m_dLogScore;
    double m_dNormalizedLogScore;
    double m_dEpsilon;
    int m_nModelVersion;
    unsigned long long m_nCalibrationCurveTrue[10];
    unsigned long long m_nCalibrationCurveCount[10];
    unsigned long long m_maxFeatureCoordinates;
    unsigned long long m_nNumberOfTraining;
    struct Gaussian m_empty;
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct Gaussian {
    double m_dPrecision;
    double m_dPredicionMean;
};

struct REContentFeatureExtractor {
    struct _opaque_pthread_rwlock_t m_rwlock;
    struct REFancyShrinkingDictionary m_trueTopTokens;
    struct REFancyShrinkingDictionary m_falseTopTokens;
};

struct REFancyShrinkingDictionary {
    struct unordered_map<std::string, unsigned short, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, unsigned short>>> m_mapDocumentFrequency;
    unsigned long long m_maxSize;
    unsigned long long m_shrinkSize;
    int m_nVersion;
    _Bool m_trimTop;
    _Bool m_shinksOnTotalCount;
};

struct _opaque_pthread_rwlock_t {
    long long __sig;
    char __opaque[192];
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<std::string, unsigned short, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, unsigned short>>> {
    struct __hash_table<std::__hash_value_type<std::string, unsigned short>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned short>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned short>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, unsigned short>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned short>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned short>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned short>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, Gaussian, BayesianModel::SuperHasher, BayesianModel::SuperHasher, std::allocator<std::pair<const unsigned long long, Gaussian>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, Gaussian>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher, true>, std::allocator<std::__hash_value_type<unsigned long long, Gaussian>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, Gaussian>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, BayesianModel::SuperHasher, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

