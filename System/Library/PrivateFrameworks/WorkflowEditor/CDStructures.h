//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CKComponent, CKComponentScopeHandle, CKComponentScopeRoot, NSArray, NSAttributedString, NSCharacterSet, NSDictionary, NSNumber, NSSet, NSString, NSValue, UIColor, UIFont, UIImage, UITraitCollection, WFModuleAppearance, WFVariableString;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CKBuildComponentResult {
    id _field1;
    id _field2;
    struct CKComponentBoundsAnimation _field3;
};

struct CKButtonComponentAccessibilityConfiguration {
    id _field1;
};

struct CKComponentAccessibilityTextAttribute {
    CDUnknownBlockType accessibilityLazyTextBlock;
};

struct CKComponentAnimation;

struct CKComponentBoundsAnimation {
    double duration;
    double delay;
    unsigned long long mode;
    unsigned long long options;
    double springDampingRatio;
    double springInitialVelocity;
};

struct CKComponentControllerAnimationData;

struct CKComponentControllerAnimationWrapper {
    struct unique_ptr<CKComponentControllerAnimationData, std::default_delete<CKComponentControllerAnimationData>> _animationData;
};

struct CKComponentHostingViewInputs {
    CKComponentScopeRoot *scopeRoot;
    id model;
    id context;
    struct unordered_multimap<int, id (^)(id), std::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, id (^)(id)>>> stateUpdates;
};

struct CKComponentLayout {
    CKComponent *component;
    struct CGSize size;
    shared_ptr_3e79f8e7 children;
    NSDictionary *extra;
};

struct CKComponentMountInfo;

struct CKComponentScopeFramePair {
    id _field1;
    id _field2;
};

struct CKComponentSize {
    struct CKRelativeDimension width;
    struct CKRelativeDimension height;
    struct CKRelativeDimension minWidth;
    struct CKRelativeDimension minHeight;
    struct CKRelativeDimension maxWidth;
    struct CKRelativeDimension maxHeight;
};

struct CKComponentViewConfiguration {
    struct shared_ptr<const CKComponentViewConfiguration::Repr> rep;
};

struct CKComponentViewContext {
    id _field1;
    struct CGRect _field2;
};

struct CKLabelAttributes {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    long long _field5;
    unsigned long long _field6;
    struct CGSize _field7;
    id _field8;
    double _field9;
    double _field10;
    long long _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
};

struct CKMemoizationKey {
    unsigned long long _field1;
    struct shared_ptr<const void> _field2;
    CDUnknownFunctionPointerType _field3;
};

struct CKNetworkImageComponentOptions {
    id _field1;
    struct CGRect _field2;
};

struct CKRelativeDimension {
    int _type;
    double _value;
};

struct CKSizeRange {
    struct CGSize min;
    struct CGSize max;
};

struct CKStackLayoutComponentChild;

struct CKStackLayoutComponentStyle {
    unsigned long long direction;
    double spacing;
    unsigned long long justifyContent;
    unsigned long long alignItems;
};

struct CKStatefulViewComponentAccessibility {
    id _field1;
    id _field2;
};

struct CKStaticLayoutComponentChild;

struct CKTextComponentAccessibilityContext {
    NSNumber *isAccessibilityElement;
    NSNumber *providesAccessibleElements;
    struct CKComponentAccessibilityTextAttribute accessibilityLabel;
};

struct CKTextComponentOptions {
    unsigned long long _field1;
    struct CKTextComponentAccessibilityContext _field2;
};

struct CKTextKitAttributes {
    NSAttributedString *attributedString;
    NSAttributedString *truncationAttributedString;
    NSCharacterSet *avoidTailTruncationSet;
    long long lineBreakMode;
    unsigned long long maximumNumberOfLines;
    struct CGSize shadowOffset;
    UIColor *shadowColor;
    double shadowOpacity;
    double shadowRadius;
    CDUnknownFunctionPointerType layoutManagerFactory;
};

struct CKTypedComponentAction<> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
};

struct CKTypedComponentAction<UIEvent *> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
};

struct CKTypedComponentAction<UIGestureRecognizer *> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
};

struct CKTypedComponentAction<WFListEditorDeletionConfirmation *> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
};

struct CKTypedComponentAction<bool> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
};

struct CKTypedComponentAction<unsigned long> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
};

struct CLLocationCoordinate2D {
    double _field1;
    double _field2;
};

struct MountContext {
    struct shared_ptr<CK::Component::ViewManager> _field1;
    struct CGPoint _field2;
    struct UIEdgeInsets _field3;
    _Bool _field4;
};

struct MountResult {
    _Bool _field1;
    struct MountContext _field2;
};

struct Repr;

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct ViewManager;

struct ViewReusePoolMap {
    struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::hash<CK::Component::ViewKey>, std::equal_to<CK::Component::ViewKey>, std::allocator<std::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool>>> map;
    struct vector<UIView *, std::allocator<UIView *>> vendedViews;
};

struct WFCompressionResistance {
    int _type;
    double _value;
};

struct WFContactFieldAttributes {
    _Bool editable;
    _Bool allowsTextEntry;
    NSString *placeholder;
    long long keyboardType;
    long long keyboardAppearance;
    long long textAlignment;
    NSString *textContentType;
    long long autocorrectionType;
    long long autocapitalizationType;
    NSArray *entries;
    NSSet *supportedPersonProperties;
    id variableProvider;
    id variableUIDelegate;
    NSSet *allowedVariableTypes;
    _Bool variablesDisabled;
};

struct WFDatePickerAttributes {
    _Bool _field1;
    id _field2;
    struct WFDatePickerTitleAttachment _field3;
    id _field4;
    id _field5;
    long long _field6;
    id _field7;
    id _field8;
    id _field9;
    _Bool _field10;
    id _field11;
    id _field12;
    id _field13;
};

struct WFDatePickerTitleAttachment {
    id _field1;
    id _field2;
};

struct WFMaskedShadowComponentOptions {
    double _field1;
    id _field2;
    id _field3;
    struct CGSize _field4;
    double _field5;
    double _field6;
    id _field7;
    double _field8;
    id _field9;
    id _field10;
};

struct WFNumberFieldAttributes {
    _Bool editable;
    NSString *placeholder;
    long long textAlignment;
    _Bool becomeFirstResponder;
    NSString *text;
    _Bool allowsDecimalNumbers;
    _Bool allowsNegatingNumbers;
    id variableProvider;
    id variableUIDelegate;
    NSSet *allowedVariableTypes;
    _Bool variablesDisabled;
    long long keyboardAppearance;
};

struct WFParameterComponentOptions {
    _Bool editable;
    _Bool processing;
    _Bool becomeFirstResponder;
    NSString *actionName;
    WFModuleAppearance *appearance;
    _Bool lastParameter;
    long long widgetFamily;
    UITraitCollection *traitCollection;
};

struct WFParameterLayoutComponentAccessibility {
    _Bool _field1;
    id _field2;
    id _field3;
    id _field4;
    unsigned long long _field5;
};

struct WFParameterLayoutComponentStyle {
    UIColor *backgroundColor;
    UIColor *highlightedBackgroundColor;
    UIFont *labelFont;
    UIColor *labelColor;
};

struct WFRowTemplateItemDateFieldOptions {
    _Bool _field1;
    id _field2;
    id _field3;
    long long _field4;
    id _field5;
    id _field6;
    id _field7;
    _Bool _field8;
    id _field9;
    id _field10;
    id _field11;
};

struct WFRowTemplateItemEnumerationComponentOptions {
    _Bool _field1;
    _Bool _field2;
    id _field3;
    id _field4;
    id _field5;
    _Bool _field6;
};

struct WFRowTemplateItemLabelComponentOptions {
    _Bool _field1;
    id _field2;
    id _field3;
};

struct WFRowTemplateItemNumberFieldOptions {
    _Bool _field1;
    id _field2;
    id _field3;
    _Bool _field4;
    id _field5;
    id _field6;
    _Bool _field7;
    id _field8;
    id _field9;
    id _field10;
};

struct WFRowTemplateItemTextFieldOptions {
    _Bool _field1;
    id _field2;
    id _field3;
    long long _field4;
    id _field5;
    id _field6;
    id _field7;
    _Bool _field8;
    _Bool _field9;
    id _field10;
    id _field11;
    id _field12;
};

struct WFRowTemplateParameterComponentOptions {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    id _field6;
    id _field7;
};

struct WFTagFieldAttributes {
    _Bool editable;
    _Bool allowsTextEntry;
    NSString *placeholder;
    long long keyboardType;
    long long textAlignment;
    long long autocorrectionType;
    long long autocapitalizationType;
    NSString *tags;
    NSString *fieldTitle;
    NSArray *suggestedTags;
    id variableProvider;
    id variableUIDelegate;
    NSSet *allowedVariableTypes;
    _Bool variablesDisabled;
};

struct WFTextInputAttributes {
    _Bool editable;
    _Bool multiline;
    _Bool secureTextEntry;
    NSString *placeholder;
    long long keyboardType;
    long long textAlignment;
    NSString *textContentType;
    long long autocorrectionType;
    long long autocapitalizationType;
    _Bool smartQuotesDisabled;
    _Bool smartDashesDisabled;
    _Bool becomeFirstResponder;
    WFVariableString *variableString;
    NSValue *selectedRange;
    id variableProvider;
    id variableUIDelegate;
    NSSet *allowedVariableTypes;
    _Bool variablesDisabled;
    UIFont *font;
    _Bool throttleUpdates;
    struct UIEdgeInsets textContainerInset;
    UIColor *textColor;
    UIColor *backgroundColor;
    unsigned long long syntaxHighlightingType;
    long long keyboardAppearance;
};

struct WFWrappingStackLayoutComponentStyle {
    unsigned long long direction;
    double spacing;
    unsigned long long alignItems;
    double rowHeight;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __shared_weak_count;

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct shared_ptr<CK::Component::ViewManager> {
    struct ViewManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const CKComponentViewConfiguration::Repr> {
    struct Repr *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::unordered_map<CKComponentViewAttribute, CKBoxedValue>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<CKComponentLayoutChild>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::vector<__weak id>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const void> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct unique_ptr<CKComponentControllerAnimationData, std::default_delete<CKComponentControllerAnimationData>> {
    struct __compressed_pair<CKComponentControllerAnimationData *, std::default_delete<CKComponentControllerAnimationData>> {
        struct CKComponentControllerAnimationData *__value_;
    } __ptr_;
};

struct unique_ptr<CKComponentMountInfo, std::default_delete<CKComponentMountInfo>> {
    struct __compressed_pair<CKComponentMountInfo *, std::default_delete<CKComponentMountInfo>> {
        struct CKComponentMountInfo *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::hash<CK::Component::ViewKey>, std::equal_to<CK::Component::ViewKey>, std::allocator<std::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool>>> {
    struct __hash_table<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__unordered_map_hasher<CK::Component::ViewKey, std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::hash<CK::Component::ViewKey>, std::equal_to<CK::Component::ViewKey>, true>, std::__unordered_map_equal<CK::Component::ViewKey, std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::equal_to<CK::Component::ViewKey>, std::hash<CK::Component::ViewKey>, true>, std::allocator<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CK::Component::ViewKey, std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::hash<CK::Component::ViewKey>, std::equal_to<CK::Component::ViewKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CK::Component::ViewKey, std::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::equal_to<CK::Component::ViewKey>, std::hash<CK::Component::ViewKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<CKComponentViewAttribute, CKBoxedValue, std::hash<CKComponentViewAttribute>, std::equal_to<CKComponentViewAttribute>, std::allocator<std::pair<const CKComponentViewAttribute, CKBoxedValue>>> {
    struct __hash_table<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__unordered_map_hasher<CKComponentViewAttribute, std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::hash<CKComponentViewAttribute>, std::equal_to<CKComponentViewAttribute>, true>, std::__unordered_map_equal<CKComponentViewAttribute, std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::equal_to<CKComponentViewAttribute>, std::hash<CKComponentViewAttribute>, true>, std::allocator<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CKComponentViewAttribute, std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::hash<CKComponentViewAttribute>, std::equal_to<CKComponentViewAttribute>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CKComponentViewAttribute, std::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::equal_to<CKComponentViewAttribute>, std::hash<CKComponentViewAttribute>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::allocator<std::pair<const CKLayoutMemoizationKey, CKComponentLayout>>> {
    struct __hash_table<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__unordered_map_hasher<CKLayoutMemoizationKey, std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, true>, std::__unordered_map_equal<CKLayoutMemoizationKey, std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, CKLayoutMemoizationKey::Hash, true>, std::allocator<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CKLayoutMemoizationKey, std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CKLayoutMemoizationKey, std::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, CKLayoutMemoizationKey::Hash, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::hash<_CKStateScopeKey>, std::equal_to<_CKStateScopeKey>, std::allocator<std::pair<const _CKStateScopeKey, CKComponentScopeFrame *>>> {
    struct __hash_table<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__unordered_map_hasher<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::hash<_CKStateScopeKey>, std::equal_to<_CKStateScopeKey>, true>, std::__unordered_map_equal<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::equal_to<_CKStateScopeKey>, std::hash<_CKStateScopeKey>, true>, std::allocator<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::hash<_CKStateScopeKey>, std::equal_to<_CKStateScopeKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<_CKStateScopeKey, std::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::equal_to<_CKStateScopeKey>, std::hash<_CKStateScopeKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, std::unordered_multimap<int, id (^)(id)>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, std::unordered_multimap<int, id (^)(id)>>>> {
    struct __hash_table<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::hash<int>, std::equal_to<int>, true>, std::__unordered_map_equal<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::equal_to<int>, std::hash<int>, true>, std::allocator<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::hash<int>, std::equal_to<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<int, std::__hash_value_type<int, std::unordered_multimap<int, id (^)(id)>>, std::equal_to<int>, std::hash<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::equal_to<std::pair<__unsafe_unretained Class, id>>, std::allocator<std::pair<const std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>>> {
    struct __hash_table<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__unordered_map_hasher<std::pair<__unsafe_unretained Class, id>, std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, std::equal_to<std::pair<__unsafe_unretained Class, id>>, true>, std::__unordered_map_equal<std::pair<__unsafe_unretained Class, id>, std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::equal_to<std::pair<__unsafe_unretained Class, id>>, PoolKeyHasher, true>, std::allocator<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::pair<__unsafe_unretained Class, id>, std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, std::equal_to<std::pair<__unsafe_unretained Class, id>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::pair<__unsafe_unretained Class, id>, std::__hash_value_type<std::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::equal_to<std::pair<__unsafe_unretained Class, id>>, PoolKeyHasher, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const CKComponentAnnouncedEvent, CKComponentController *>>> {
    struct __hash_table<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<CKComponentAnnouncedEvent, std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CKComponentAnnouncedEvent, std::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_multimap<CKMemoizationKey, CKComponent *, std::hash<CKMemoizationKey>, std::equal_to<CKMemoizationKey>, std::allocator<std::pair<const CKMemoizationKey, CKComponent *>>> {
    struct __hash_table<std::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__unordered_map_hasher<CKMemoizationKey, std::__hash_value_type<CKMemoizationKey, CKComponent *>, std::hash<CKMemoizationKey>, std::equal_to<CKMemoizationKey>, true>, std::__unordered_map_equal<CKMemoizationKey, std::__hash_value_type<CKMemoizationKey, CKComponent *>, std::equal_to<CKMemoizationKey>, std::hash<CKMemoizationKey>, true>, std::allocator<std::__hash_value_type<CKMemoizationKey, CKComponent *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CKMemoizationKey, std::__hash_value_type<CKMemoizationKey, CKComponent *>, std::hash<CKMemoizationKey>, std::equal_to<CKMemoizationKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CKMemoizationKey, std::__hash_value_type<CKMemoizationKey, CKComponent *>, std::equal_to<CKMemoizationKey>, std::hash<CKMemoizationKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_multimap<int, id (^)(id), std::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, id (^)(id)>>> {
    struct __hash_table<std::__hash_value_type<int, id (^)(id)>, std::__unordered_map_hasher<int, std::__hash_value_type<int, id (^)(id)>, std::hash<int>, std::equal_to<int>, true>, std::__unordered_map_equal<int, std::__hash_value_type<int, id (^)(id)>, std::equal_to<int>, std::hash<int>, true>, std::allocator<std::__hash_value_type<int, id (^)(id)>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<int, id (^)(id)>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<int, std::__hash_value_type<int, id (^)(id)>, std::hash<int>, std::equal_to<int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<int, std::__hash_value_type<int, id (^)(id)>, std::equal_to<int>, std::hash<int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<CKComponent *, std::allocator<CKComponent *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<CKComponent *__strong *, std::allocator<CKComponent *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<CKComponentAnimation, std::allocator<CKComponentAnimation>> {
    struct CKComponentAnimation *_field1;
    struct CKComponentAnimation *_field2;
    struct __compressed_pair<CKComponentAnimation *, std::allocator<CKComponentAnimation>> {
        struct CKComponentAnimation *_field1;
    } _field3;
};

struct vector<CKStackLayoutComponentChild, std::allocator<CKStackLayoutComponentChild>> {
    struct CKStackLayoutComponentChild *__begin_;
    struct CKStackLayoutComponentChild *__end_;
    struct __compressed_pair<CKStackLayoutComponentChild *, std::allocator<CKStackLayoutComponentChild>> {
        struct CKStackLayoutComponentChild *__value_;
    } __end_cap_;
};

struct vector<CKStaticLayoutComponentChild, std::allocator<CKStaticLayoutComponentChild>> {
    struct CKStaticLayoutComponentChild *__begin_;
    struct CKStaticLayoutComponentChild *__end_;
    struct __compressed_pair<CKStaticLayoutComponentChild *, std::allocator<CKStaticLayoutComponentChild>> {
        struct CKStaticLayoutComponentChild *__value_;
    } __end_cap_;
};

struct vector<SEL *, std::allocator<SEL *>> {
    SEL *__begin_;
    SEL *__end_;
    struct __compressed_pair<SEL **, std::allocator<SEL *>> {
        SEL *__value_;
    } __end_cap_;
};

struct vector<UIView *, std::allocator<UIView *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<UIView *__strong *, std::allocator<UIView *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<_NSRange, std::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#if 0
// Names with conflicting types:
typedef struct ?<CKStateConfiguration, 8UL> {
    struct CKStateConfiguration {
        NSString *title;
        NSAttributedString *attributedTitle;
        UIColor *titleColor;
        UIImage *image;
        UIImage *backgroundImage;
    } __elems_[8];
} array_a554f25a;

typedef struct ?<CKStateConfiguration, 8UL> {
    struct CKStateConfiguration {
        NSString *title;
        UIColor *titleColor;
        UIImage *image;
        UIImage *backgroundImage;
    } __elems_[8];
} array_3de32509;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    double start;
    double end;
    double dt;
} CDStruct_37002fae;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    CDStruct_c3b9c2ee _field1;
    CDStruct_c3b9c2ee _field2;
} CDStruct_90e2a262;

// Template types
typedef struct CKTypedComponentAction<> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
} CKTypedComponentAction_789af415;

typedef struct CKTypedComponentAction<UIEvent *> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
} CKTypedComponentAction_e16478d5;

typedef struct CKTypedComponentAction<UIGestureRecognizer *> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
} CKTypedComponentAction_47faeeaf;

typedef struct CKTypedComponentAction<WFListEditorDeletionConfirmation *> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
} CKTypedComponentAction_9dede3e0;

typedef struct CKTypedComponentAction<bool> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
} CKTypedComponentAction_58381653;

typedef struct CKTypedComponentAction<unsigned long> {
    unsigned long long _variant;
    id _target;
    CKComponentScopeHandle *_scopeHandle;
    SEL _selector;
} CKTypedComponentAction_0d80aa58;

typedef struct shared_ptr<const std::vector<CKComponentLayoutChild>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3e79f8e7;

typedef struct vector<CKComponentAnimation, std::allocator<CKComponentAnimation>> {
    struct CKComponentAnimation *_field1;
    struct CKComponentAnimation *_field2;
    struct __compressed_pair<CKComponentAnimation *, std::allocator<CKComponentAnimation>> {
        struct CKComponentAnimation *_field1;
    } _field3;
} vector_e842ebe3;

typedef struct vector<SEL *, std::allocator<SEL *>> {
    SEL *__begin_;
    SEL *__end_;
    struct __compressed_pair<SEL **, std::allocator<SEL *>> {
        SEL *__value_;
    } __end_cap_;
} vector_290ed355;

typedef struct vector<_NSRange, std::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
} vector_d2213b4e;

