//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSConditionLock, NSMapTable, NSMutableArray, NSMutableDictionary, NSString, VMUProcessDescription;

@interface VMUSampler : NSObject
{
    unsigned long long _options;	// 8 = 0x8
    int _pid;	// 16 = 0x10
    unsigned int _task;	// 20 = 0x14
    _Bool _needTaskPortDealloc;	// 24 = 0x18
    _Bool _recordThreadStates;	// 25 = 0x19
    _Bool _sampling;	// 26 = 0x1a
    unsigned int _numberOfCopiedBacktraces;	// 28 = 0x1c
    NSString *_processName;	// 32 = 0x20
    VMUProcessDescription *_processDescription;	// 40 = 0x28
    struct _CSTypeRef _symbolicator;	// 48 = 0x30
    unsigned int _suspensionToken;	// 64 = 0x40
    struct sampling_context_t *_samplingContext;	// 72 = 0x48
    NSMapTable *_lastThreadBacktraceMap;	// 80 = 0x50
    unsigned int *_previousThreadList;	// 88 = 0x58
    unsigned int _mainThread;	// 96 = 0x60
    unsigned int _previousThreadCount;	// 100 = 0x64
    unsigned int _maxPreviousThreadCount;	// 104 = 0x68
    double _tbRate;	// 112 = 0x70
    double _tbInterval;	// 120 = 0x78
    NSConditionLock *_stateLock;	// 128 = 0x80
    double _interval;	// 136 = 0x88
    double _timeLimit;	// 144 = 0x90
    unsigned int _sampleLimit;	// 152 = 0x98
    unsigned int _numberOfSamples;	// 156 = 0x9c
    NSMutableArray *_samples;	// 160 = 0xa0
    _Bool _stacksFixed;	// 168 = 0xa8
    id _delegate;	// 176 = 0xb0
    double _timeSpentSampling;	// 184 = 0xb8
    unsigned int _dispatchThreadSoftLimit;	// 192 = 0xc0
    unsigned int _dispatchThreadSoftLimitCount;	// 196 = 0xc4
    unsigned int _dispatchThreadHardLimit;	// 200 = 0xc8
    unsigned int _dispatchThreadHardLimitCount;	// 204 = 0xcc
    NSMutableDictionary *_threadPortToNameMap;	// 208 = 0xd0
    NSMutableDictionary *_dispatchQueueSerialNumToNameMap;	// 216 = 0xd8
}

+ (id)sampleAllThreadsOfTask:(unsigned int)arg1 symbolicate:(_Bool)arg2;	// IMP=0x000000000003e9f0
+ (id)sampleAllThreadsOfTask:(unsigned int)arg1;	// IMP=0x000000000003e99c
+ (id)sampleAllThreadsOfPID:(int)arg1;	// IMP=0x000000000003e948
+ (void)initialize;	// IMP=0x000000000003e44e
- (void).cxx_destruct;	// IMP=0x000000000003fc20
- (void)writeOutput:(id)arg1 append:(_Bool)arg2;	// IMP=0x000000000003f855
- (id)outputString;	// IMP=0x000000000003f583
- (id)stopSamplingAndReturnCallNode;	// IMP=0x000000000003f4da
- (void)forceStop;	// IMP=0x000000000003f4c8
- (void)stopSampling;	// IMP=0x000000000003f4b6
- (void)sampleForDuration:(unsigned int)arg1 interval:(unsigned int)arg2;	// IMP=0x000000000003f448
- (void)preloadSymbols;	// IMP=0x000000000003f41c
- (id)delegate;	// IMP=0x000000000003f40b
- (void)setDelegate:(id)arg1;	// IMP=0x000000000003f3f7
- (id)threadDescriptionStringForBacktrace:(id)arg1 returnedAddress:(unsigned long long *)arg2;	// IMP=0x000000000003ef61
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)arg1;	// IMP=0x000000000003ef4a
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)arg1 returnedConcurrentFlag:(_Bool *)arg2 returnedThreadId:(unsigned long long *)arg3;	// IMP=0x000000000003eedd
- (id)threadNameForThread:(unsigned int)arg1;	// IMP=0x000000000003eec6
- (id)threadNameForThread:(unsigned int)arg1 returnedThreadId:(unsigned long long *)arg2 returnedDispatchQueueSerialNum:(unsigned long long *)arg3;	// IMP=0x000000000003ee80
- (unsigned int)mainThread;	// IMP=0x000000000003ee77
- (void)flushData;	// IMP=0x000000000003ee37
- (unsigned int)sampleCount;	// IMP=0x000000000003ee2b
- (id)samples;	// IMP=0x000000000003ee03
- (int)pid;	// IMP=0x000000000003edfa
- (struct _CSTypeRef)symbolicator;	// IMP=0x000000000003edec
- (void)setRecordThreadStates:(_Bool)arg1;	// IMP=0x000000000003ede3
- (unsigned int)sampleLimit;	// IMP=0x000000000003edd7
- (void)setSampleLimit:(unsigned int)arg1;	// IMP=0x000000000003edcb
- (double)timeLimit;	// IMP=0x000000000003edbd
- (void)setTimeLimit:(double)arg1;	// IMP=0x000000000003eda5
- (double)samplingInterval;	// IMP=0x000000000003ed97
- (void)setSamplingInterval:(double)arg1;	// IMP=0x000000000003ed7f
- (_Bool)waitUntilDone;	// IMP=0x000000000003ed0b
- (_Bool)stop;	// IMP=0x000000000003ec93
- (_Bool)start;	// IMP=0x000000000003eba5
- (id)sampleThread:(unsigned int)arg1;	// IMP=0x000000000003eb05
- (id)sampleAllThreadsOnce;	// IMP=0x000000000003eaf1
- (id)sampleAllThreadsOnceWithFramePointers:(_Bool)arg1;	// IMP=0x000000000003ea57
- (void)_runSamplingThread;	// IMP=0x000000000003e5c4
- (void)_fixupStacks:(id)arg1;	// IMP=0x000000000003e47b
- (unsigned long long)recordSampleTo:(id)arg1 beginTime:(double)arg2 endTime:(double)arg3 thread:(unsigned int)arg4 recordFramePointers:(_Bool)arg5 clearMemoryCache:(_Bool)arg6;	// IMP=0x000000000003dd74
- (void)_checkDispatchThreadLimits;	// IMP=0x000000000003dd26
- (void)initializeSamplingContextWithOptions:(int)arg1;	// IMP=0x000000000003dc5f
- (void)dealloc;	// IMP=0x000000000003db7a
- (id)initWithTask:(unsigned int)arg1 options:(unsigned long long)arg2;	// IMP=0x000000000003db61
- (id)initWithPID:(int)arg1 options:(unsigned long long)arg2;	// IMP=0x000000000003db4a
- (id)initWithTask:(unsigned int)arg1;	// IMP=0x000000000003db31
- (id)initWithPID:(int)arg1;	// IMP=0x000000000003db1a
- (id)initWithPID:(int)arg1 orTask:(unsigned int)arg2 options:(unsigned long long)arg3;	// IMP=0x000000000003da0a
- (id)initWithPID:(int)arg1 task:(unsigned int)arg2 processName:(id)arg3 is64Bit:(_Bool)arg4 options:(unsigned long long)arg5;	// IMP=0x000000000003d631

@end

