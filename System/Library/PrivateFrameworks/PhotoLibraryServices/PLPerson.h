//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <PhotoLibraryServices/PLCloudDeletable-Protocol.h>
#import <PhotoLibraryServices/PLFileSystemMetadataPersistence-Protocol.h>
#import <PhotoLibraryServices/PLSyncablePerson-Protocol.h>
#import <PhotoLibraryServices/PLUserFeedbackSupporting-Protocol.h>

@class NSDictionary, NSSet, NSString, PLDetectedFace, PLDetectedFaceGroup;

@interface PLPerson <PLSyncablePerson, PLCloudDeletable, PLFileSystemMetadataPersistence, PLUserFeedbackSupporting>
{
}

+ (id)fetchFinalMergeTargetPersonForPersonWithUUID:(id)arg1 context:(id)arg2 predicate:(id)arg3;	// IMP=0x000000000058c933
+ (_Bool)resetAllInLibrary:(id)arg1 error:(id *)arg2;	// IMP=0x000000000058c728
+ (id)predicateToExcludeTorsoOnlyPerson;	// IMP=0x000000000058c6ff
+ (id)predicateForIncludedDetectionTypes:(id)arg1;	// IMP=0x000000000058c626
+ (id)predicateForPersistence;	// IMP=0x000000000058c5e7
+ (id)predicateForVisibleKeyFace;	// IMP=0x000000000058c444
+ (id)predicateForPersonsNeedingFaceCropGenerationForFaceObjectID:(id)arg1;	// IMP=0x000000000058c08a
+ (id)_stringFromContact:(id)arg1 preferGivenName:(_Bool)arg2;	// IMP=0x000000000058bfed
+ (id)displayNameFromContact:(id)arg1;	// IMP=0x000000000058bfd6
+ (id)fullNameFromContact:(id)arg1;	// IMP=0x000000000058bfc2
+ (void)batchFetchAssociatedPersonByFaceGroupUUIDWithFaceGroupUUIDs:(id)arg1 predicate:(id)arg2 library:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000058bee4
+ (id)fetchPersonCountByAssetUUIDForAssetUUIDs:(id)arg1 predicate:(id)arg2 library:(id)arg3 error:(id *)arg4;	// IMP=0x000000000058bcfa
+ (void)batchFetchPersonsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 library:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000058bbe6
+ (void)batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000058bad5
+ (id)_batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 error:(id *)arg4;	// IMP=0x000000000058b4c4
+ (id)listOfPropertiesToResetAgeAndGender;	// IMP=0x000000000058b46e
+ (id)entityName;	// IMP=0x000000000058b461
+ (void)createAssociatedPersonForFaceGroup:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x000000000058b35c
+ (void)createAssociatedPersonForFaceGroup:(id)arg1;	// IMP=0x000000000058b2ea
+ (id)cloudUUIDKeyForDeletion;	// IMP=0x000000000058b2dd
+ (long long)cloudDeletionTypeForTombstone:(id)arg1;	// IMP=0x000000000058b2d2
+ (id)personsWithUUIDs:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x000000000058b22e
+ (id)personsWithPersonUri:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x000000000058b15f
+ (id)allPersonsInManagedObjectContext:(id)arg1;	// IMP=0x000000000058b136
+ (id)personWithUUID:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x000000000058b00d
+ (id)personsMatchingPredicate:(id)arg1 fetchLimit:(unsigned long long)arg2 sortDescriptors:(id)arg3 relationshipKeyPathsForPrefetching:(id)arg4 inManagedObjectContext:(id)arg5;	// IMP=0x000000000058ae50
+ (id)insertIntoManagedObjectContext:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;	// IMP=0x000000000058acda
+ (id)insertIntoPhotoLibrary:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;	// IMP=0x000000000058ab9b
+ (void)enumerateAssetUUIDsForSearchIndexingWithPersonUUID:(id)arg1 managedObjectContext:(id)arg2 assetUUIDHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000003d16f8
+ (_Bool)person:(id)arg1 isBetterMergeTargetThanPerson:(id)arg2;	// IMP=0x00000000005d2569
+ (void)resetCloudStateInPhotoLibrary:(id)arg1;	// IMP=0x00000000005d22d8
+ (id)personsToPrefetchInManagedObjectContext:(id)arg1;	// IMP=0x00000000005d214a
+ (id)personsToUploadInManagedObjectContext:(id)arg1 limit:(long long)arg2;	// IMP=0x00000000005d1f66
+ (id)_predicateForSupportedDetectionTypesForUpload;	// IMP=0x00000000005d1f42
+ (id)_predicateForSupportedVerifiedTypesForUpload;	// IMP=0x00000000005d1f1e
+ (id)listOfSyncedProperties;	// IMP=0x00000000005d1e39
- (_Bool)dedupeGraphPersons:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000589e21
- (void)mergePersons:(id)arg1 withOptimalState:(id)arg2;	// IMP=0x00000000005899be
- (void)basicMergePersons:(id)arg1;	// IMP=0x000000000058994c
- (void)_basicMergePersons:(id)arg1;	// IMP=0x00000000005882f7
- (id)finalMergeTargetPerson;	// IMP=0x000000000058810d
- (id)pickKeyFaceOptimalStateForContactDedupeWithPersons:(id)arg1;	// IMP=0x0000000000587e3a
- (void)prepareForUserInitiatedMergeWithPersons:(id)arg1;	// IMP=0x00000000005875d0
- (id)reverseOrderedMergeTargetPersons;	// IMP=0x000000000058743b
- (id)pickOptimalStateForUserInitiatedMergeWithPersons:(id)arg1 nominalTarget:(id)arg2;	// IMP=0x0000000000586b61
- (id)_nameRelatedMetadataKeys;	// IMP=0x0000000000586ad9
- (void)removePersistedFileSystemDataWithPathManager:(id)arg1;	// IMP=0x00000000005869e3
- (void)persistMetadataToFileSystemWithPathManager:(id)arg1;	// IMP=0x00000000005868ed
- (_Bool)isValidForPersistence;	// IMP=0x000000000058689f
- (void)refreshInvalidMergeCandidates;	// IMP=0x0000000000586886
- (void)refereshMergeCandidates;	// IMP=0x000000000058686d
- (void)refreshFaceCrops;	// IMP=0x000000000058652a
- (void)refreshRejectedFaces;	// IMP=0x00000000005861e7
- (void)refreshFaces;	// IMP=0x0000000000585ea4
- (void)_refreshRelationshipForKey:(id)arg1;	// IMP=0x0000000000585b33
@property(nonatomic) int effectiveVerifiedType;
- (void)rejectFaceIfPossible:(id)arg1 shouldCreateFaceCrop:(_Bool)arg2;	// IMP=0x0000000000585999
- (void)resetAllFacesToDefault;	// IMP=0x0000000000585613
- (id)faceGroupDescription;	// IMP=0x000000000058555e
- (id)debugLogDescription;	// IMP=0x000000000058544c
- (void)setKeyFace:(id)arg1 pickSource:(short)arg2;	// IMP=0x00000000005853e7
- (id)mutableInvalidMergeCandidates;	// IMP=0x00000000005853ce
- (id)mutableMergeCandidates;	// IMP=0x00000000005853b5
- (id)mutableFaceCrops;	// IMP=0x000000000058539c
- (id)mutableRejectedFacesNeedingFaceCrops;	// IMP=0x0000000000585383
- (id)mutableRejectedFaces;	// IMP=0x000000000058536a
- (id)mutableFaces;	// IMP=0x0000000000585351
- (void)willSave;	// IMP=0x0000000000584b66
- (void)disconnectFaceGroup;	// IMP=0x0000000000584aed
@property(readonly, copy) NSString *cloudUUIDForDeletion;
@property(readonly) long long cloudDeletionType;
- (void)prepareForDeletion;	// IMP=0x00000000005849b3
@property(readonly, nonatomic) _Bool shouldIndexForSearch;
- (_Bool)validForPersistenceChangedForChangedKeys:(id)arg1;	// IMP=0x000000000044ede8
- (id)payloadIDForTombstone:(id)arg1;	// IMP=0x000000000044ed7b
- (id)payloadForChangedKeys:(id)arg1;	// IMP=0x000000000044ed13
- (id)payloadID;	// IMP=0x000000000044ecb0
- (id)syncDescription;	// IMP=0x00000000005d1d21
@property(readonly, nonatomic) _Bool isTombstone;
@property(readonly, nonatomic) _Bool graphVerified;
@property(readonly, nonatomic) _Bool userVerified;
- (void)setKeyFaceToPicked;	// IMP=0x00000000005d1cbf
@property(readonly, nonatomic) _Bool keyFaceIsPicked;
@property(readonly, retain, nonatomic) id localID;
- (void)setCPLSyncedMergeTarget:(id)arg1;	// IMP=0x00000000005d1ac1
- (id)cplPersonChange;	// IMP=0x00000000005d1792
- (id)momentShare;	// IMP=0x00000000005d178a
- (void)applyCPLChangeForContactMatchingDictionary:(id)arg1;	// IMP=0x00000000005d13ee
- (id)cplFullRecord;	// IMP=0x00000000005d13dc
- (_Bool)isSyncableChange;	// IMP=0x00000000005d123e
- (_Bool)supportsCloudUpload;	// IMP=0x00000000005d1196

// Remaining properties
@property(nonatomic) unsigned short ageType; // @dynamic ageType;
@property(retain, nonatomic) PLDetectedFaceGroup *associatedFaceGroup; // @dynamic associatedFaceGroup;
@property(nonatomic) short cloudDeleteState; // @dynamic cloudDeleteState;
@property(nonatomic) short cloudLocalState; // @dynamic cloudLocalState;
@property(nonatomic) int cloudVerifiedType; // @dynamic cloudVerifiedType;
@property(retain, nonatomic) NSSet *clusterRejectedFaces; // @dynamic clusterRejectedFaces;
@property(retain, nonatomic) NSDictionary *contactMatchingDictionary; // @dynamic contactMatchingDictionary;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) NSSet *detectedFaces; // @dynamic detectedFaces;
@property(nonatomic) short detectionType; // @dynamic detectionType;
@property(retain, nonatomic) NSString *displayName; // @dynamic displayName;
@property(readonly, nonatomic) int faceCount; // @dynamic faceCount;
@property(retain, nonatomic) NSSet *faceCrops; // @dynamic faceCrops;
@property(retain, nonatomic) NSString *fullName; // @dynamic fullName;
@property(nonatomic) unsigned short genderType; // @dynamic genderType;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool inPersonNamingModel; // @dynamic inPersonNamingModel;
@property(retain, nonatomic) NSSet *invalidMergeCandidates; // @dynamic invalidMergeCandidates;
@property(retain, nonatomic) PLDetectedFace *keyFace; // @dynamic keyFace;
@property(nonatomic) short keyFacePickSource; // @dynamic keyFacePickSource;
@property(nonatomic) unsigned int manualOrder; // @dynamic manualOrder;
@property(retain, nonatomic) NSSet *mergeCandidates; // @dynamic mergeCandidates;
@property(retain, nonatomic) NSSet *mergeSourcePersons; // @dynamic mergeSourcePersons;
@property(retain, nonatomic) PLPerson *mergeTargetPerson; // @dynamic mergeTargetPerson;
@property(retain, nonatomic) NSSet *personReferences; // @dynamic personReferences;
@property(retain, nonatomic) NSString *personUUID; // @dynamic personUUID;
@property(retain, nonatomic) NSString *personUri; // @dynamic personUri;
@property(nonatomic) short questionType; // @dynamic questionType;
@property(retain, nonatomic) NSSet *rejectedFaces; // @dynamic rejectedFaces;
@property(retain, nonatomic) NSSet *rejectedFacesNeedingFaceCrops; // @dynamic rejectedFacesNeedingFaceCrops;
@property(nonatomic) unsigned short suggestedForClientType; // @dynamic suggestedForClientType;
@property(readonly) Class superclass;
@property(nonatomic) int type; // @dynamic type;
@property(retain, nonatomic) NSSet *userFeedbacks; // @dynamic userFeedbacks;
@property(nonatomic) int verifiedType; // @dynamic verifiedType;

@end

