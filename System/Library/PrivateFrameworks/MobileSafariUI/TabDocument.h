//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MobileSafariUI/LoadableResource-Protocol.h>
#import <MobileSafariUI/LoadingControllerDelegate-Protocol.h>
#import <MobileSafariUI/QuickWebsiteSearchEventListener-Protocol.h>
#import <MobileSafariUI/ReadingListMetadataProvider-Protocol.h>
#import <MobileSafariUI/SFDialogControllerDelegate-Protocol.h>
#import <MobileSafariUI/SFDialogPresenting-Protocol.h>
#import <MobileSafariUI/SFDialogViewControllerPresenting-Protocol.h>
#import <MobileSafariUI/SFFormAutoFillControllerDelegate-Protocol.h>
#import <MobileSafariUI/WBReusableTab-Protocol.h>
#import <MobileSafariUI/WBSFluidProgressControllerWindowDelegate-Protocol.h>
#import <MobileSafariUI/WBSFluidProgressStateSource-Protocol.h>
#import <MobileSafariUI/WBSOrderedTab-Protocol.h>
#import <MobileSafariUI/WBSTabItemSearchSupport-Protocol.h>
#import <MobileSafariUI/WBSTranslationConsentAlertHelperDelegate-Protocol.h>
#import <MobileSafariUI/WBSTranslationContextDelegate-Protocol.h>
#import <MobileSafariUI/WBSWebExtensionTab-Protocol.h>
#import <MobileSafariUI/WKNavigationDelegatePrivate-Protocol.h>
#import <MobileSafariUI/WKUIDelegatePrivate-Protocol.h>
#import <MobileSafariUI/_SFBrowserDocument-Protocol.h>
#import <MobileSafariUI/_SFDownloadDelegate-Protocol.h>
#import <MobileSafariUI/_SFFindOnPageViewDelegate-Protocol.h>
#import <MobileSafariUI/_SFLinkPreviewHandler-Protocol.h>
#import <MobileSafariUI/_SFMediaRecordingDocument-Protocol.h>
#import <MobileSafariUI/_SFNavigationIntentHandling-Protocol.h>
#import <MobileSafariUI/_SFPageLoadErrorControllerDelegate-Protocol.h>
#import <MobileSafariUI/_SFPrintControllerDelegate-Protocol.h>
#import <MobileSafariUI/_SFQuickLookDocumentSource-Protocol.h>
#import <MobileSafariUI/_SFReaderControllerDelegate-Protocol.h>
#import <MobileSafariUI/_SFWebViewDelegate-Protocol.h>
#import <MobileSafariUI/_WKDiagnosticLoggingDelegate-Protocol.h>
#import <MobileSafariUI/_WKFullscreenDelegate-Protocol.h>
#import <MobileSafariUI/_WKIconLoadingDelegate-Protocol.h>
#import <MobileSafariUI/_WKInputDelegate-Protocol.h>
#import <MobileSafariUI/_WKWebAuthenticationPanelDelegate-Protocol.h>

@class ActionPanelActivityItemProvider, BrowserController, CSSearchableItemAttributeSet, FindOnPageCompletionProvider, FindOnPageView, LinkPreviewViewController, LoadingController, NSArray, NSDictionary, NSError, NSHashTable, NSMutableArray, NSNumber, NSPointerArray, NSString, NSTimer, NSURL, NSUUID, NSUserActivity, PageLoadTest, PageLoadTestStatistics, SFApplicationManifestFetcher, SFBannerTheme, SFBrowserDocumentTrackerInfo, SFDialogController, SFNavigationBarItem, SFPinnableBanner, STBlockingViewController, TabBarItem, TabDocumentView, TabOverviewItem, TiltedTabItem, TouchIconFetcher, UIColor, UIImage, UnifiedTabBarItem, WBSFluidProgressController, WBSFluidProgressState, WBSHistoryContextController, WBSHistoryVisit, WBSPermissionDialogThrottler, WBSSafariExtensionStateObserver, WBSSameDocumentNavigationToHistoryVisitCorrelator, WBSTranslationContext, WBSURLSpoofingMitigator, WBTab, WKBackForwardListItem, WKWebView, WebBookmark, _SFBrowserConfiguration, _SFCalendarEventDetector, _SFDownload, _SFFluidProgressView, _SFFormAutoFillController, _SFInjectedJavaScriptController, _SFNavigationIntent, _SFNavigationUtilitiesManager, _SFPageLoadErrorController, _SFPrintController, _SFQuickLookDocument, _SFQuickLookDocumentWriter, _SFReaderController, _SFReloadOptionsController, _SFSafariSharingExtensionController, _SFSafeBrowsingController, _SFSecIdentityPreferencesController, _SFTabStateData, _SFTelephonyNavigationMitigationPolicy, _SFWebClipMetadataFetcher, _SFWebView, _WKActivatedElementInfo, _WKRemoteObjectInterface, _WKSessionState, _WKUserInitiatedAction;
@protocol LoadProgressObserver, SFReaderContext, TabDocumentDelegate, UIDragSession, WBSWebExtensionWindow;

@interface TabDocument : NSObject <LoadingControllerDelegate, QuickWebsiteSearchEventListener, SFFormAutoFillControllerDelegate, WBSFluidProgressControllerWindowDelegate, WBSFluidProgressStateSource, WKNavigationDelegatePrivate, WKUIDelegatePrivate, SFDialogControllerDelegate, SFDialogViewControllerPresenting, _SFFindOnPageViewDelegate, _SFLinkPreviewHandler, _SFPageLoadErrorControllerDelegate, _SFPrintControllerDelegate, _SFReaderControllerDelegate, _SFWebViewDelegate, _WKDiagnosticLoggingDelegate, _WKFullscreenDelegate, _WKIconLoadingDelegate, _WKInputDelegate, _WKWebAuthenticationPanelDelegate, WBSTranslationConsentAlertHelperDelegate, WBSTranslationContextDelegate, _SFQuickLookDocumentSource, WBSWebExtensionTab, WBReusableTab, LoadableResource, ReadingListMetadataProvider, WBSOrderedTab, WBSTabItemSearchSupport, _SFBrowserDocument, SFDialogPresenting, _SFDownloadDelegate, _SFMediaRecordingDocument, _SFNavigationIntentHandling>
{
    long long _retainCount;	// 8 = 0x8
    unsigned long long _progressAnimationSuppressedCount;	// 16 = 0x10
    NSString *_EVOrganizationName;	// 24 = 0x18
    NSError *_lastLoadError;	// 32 = 0x20
    NSError *_lastLoadErrorForFormatMenu;	// 40 = 0x28
    WBSURLSpoofingMitigator *_URLSpoofingMitigator;	// 48 = 0x30
    _WKSessionState *_savedSessionState;	// 56 = 0x38
    _WKRemoteObjectInterface *_siteSpecificSearchEventListenerInterface;	// 64 = 0x40
    _SFSafariSharingExtensionController *_sharingExtensionController;	// 72 = 0x48
    _SFReloadOptionsController *_reloadOptionsController;	// 80 = 0x50
    _SFCalendarEventDetector *_calendarEventDetector;	// 88 = 0x58
    _SFInjectedJavaScriptController *_activityJSController;	// 96 = 0x60
    _SFWebClipMetadataFetcher *_webClipMetadataFetcher;	// 104 = 0x68
    TouchIconFetcher *_touchIconFetcher;	// 112 = 0x70
    NSMutableArray *_fallbackURLs;	// 120 = 0x78
    unsigned long long _lastReaderDeactivationMode;	// 128 = 0x80
    FindOnPageCompletionProvider *_findCompletionProvider;	// 136 = 0x88
    _SFFormAutoFillController *_autoFillController;	// 144 = 0x90
    CDUnknownBlockType _autoFillAuthenticationCompletionBlock;	// 152 = 0x98
    LoadingController *_loadingController;	// 160 = 0xa0
    WBSFluidProgressController *_fluidProgressController;	// 168 = 0xa8
    NSDictionary *_initialArticleScrollDictionaryForCloudTab;	// 176 = 0xb0
    NSURL *_overrideURLForHTTPAuthenticationDialog;	// 184 = 0xb8
    WKBackForwardListItem *_parentTabItem;	// 192 = 0xc0
    SFApplicationManifestFetcher *_applicationManifestFetcher;	// 200 = 0xc8
    _SFDownload *_activeDownload;	// 208 = 0xd0
    TabDocumentView *_cachedView;	// 216 = 0xd8
    unsigned long long _currentUsageState;	// 224 = 0xe0
    NSURL *_lastURLForWhichUsageStateWasSet;	// 232 = 0xe8
    long long _concurrentNavigationActionPolicyDecisions;	// 240 = 0xf0
    NSHashTable *_renderingProgressEventObservers;	// 248 = 0xf8
    NSHashTable *_navigationObservers;	// 256 = 0x100
    _SFFluidProgressView *_progressView;	// 264 = 0x108
    SFNavigationBarItem *_navigationBarItem;	// 272 = 0x110
    SFDialogController *_dialogController;	// 280 = 0x118
    _SFReaderController *_readerContext;	// 288 = 0x120
    WebBookmark *_bookmarkForIconFetching;	// 296 = 0x128
    WKBackForwardListItem *_backForwardListItemForCurrentAppLinkBannerCheck;	// 304 = 0x130
    SFPinnableBanner *_appBannerPendingFirstPaint;	// 312 = 0x138
    NSTimer *_appBannerRemovalTimer;	// 320 = 0x140
    _SFTelephonyNavigationMitigationPolicy *_telephonyNavigationPolicy;	// 328 = 0x148
    _WKUserInitiatedAction *_lastUserInitiatedAction;	// 336 = 0x150
    _SFSecIdentityPreferencesController *_secIdentityPreferencesController;	// 344 = 0x158
    PageLoadTest *_pageLoadTest;	// 352 = 0x160
    NSTimer *_donateTextTimer;	// 360 = 0x168
    NSTimer *_unresponsiveWebProcessTimer;	// 368 = 0x170
    CDUnknownBlockType _unresponsiveWebProcessBlock;	// 376 = 0x178
    _SFNavigationIntent *_deferredDropNavigationIntent;	// 384 = 0x180
    unsigned long long _deferredDropNavigationIntentGeneration;	// 392 = 0x188
    NSNumber *_deferredDropWasHandledByWebKit;	// 400 = 0x190
    id <UIDragSession> _webKitDragSession;	// 408 = 0x198
    unsigned long long _cachedMediaStateIcon;	// 416 = 0x1a0
    NSPointerArray *_spawnedTabDocuments;	// 424 = 0x1a8
    NSURL *_cachedCanonicalURL;	// 432 = 0x1b0
    ActionPanelActivityItemProvider *_cachedActivityItemProvider;	// 440 = 0x1b8
    CDUnknownBlockType _pendingNavigationActionDueToExternalSchemePromptHandler;	// 448 = 0x1c0
    NSURL *_cachedURL;	// 456 = 0x1c8
    id _faviconToken;	// 464 = 0x1d0
    NSURL *_originalURL;	// 472 = 0x1d8
    NSTimer *_updateFaviconTimer;	// 480 = 0x1e0
    NSURL *_urlToReloadForcingContentBlockers;	// 488 = 0x1e8
    _Bool _enableContentBlockersWhenReloading;	// 496 = 0x1f0
    _SFNavigationUtilitiesManager *_navigationUtilitiesManager;	// 504 = 0x1f8
    NSString *_domainWhereUserDeclinedAutomaticStrongPassword;	// 512 = 0x200
    _WKActivatedElementInfo *_elementInfoToAnimateForNextDownload;	// 520 = 0x208
    _SFDownload *_downloadReflectedInFluidProgress;	// 528 = 0x210
    _Bool _closeWhenNextDownloadStarts;	// 536 = 0x218
    _Bool _loadNextNavigationInline;	// 537 = 0x219
    _Bool _EVOrganizationNameIsValid;	// 538 = 0x21a
    _Bool _forwardActivityToCoreSpotlight;	// 539 = 0x21b
    _Bool _loadWasUserDriven;	// 540 = 0x21c
    _Bool _userDrivenLoadWasConsumed;	// 541 = 0x21d
    _Bool _shouldDismissReaderInReponseToSameDocumentNavigation;	// 542 = 0x21e
    _Bool _allowURLAsTitle;	// 543 = 0x21f
    _Bool _wasOpenedFromHistory;	// 544 = 0x220
    _Bool _displayingStandaloneImage;	// 545 = 0x221
    _Bool _displayingStandaloneMedia;	// 546 = 0x222
    _Bool _quickLookDocumentCheckCompleted;	// 547 = 0x223
    _Bool _didFirstPaint;	// 548 = 0x224
    _Bool _shouldSuppressDialogsThatBlockWebProcessForProvisionalNavigation;	// 549 = 0x225
    _Bool _shouldResetPrintSuppressionOnNextCommit;	// 550 = 0x226
    _Bool _sourceApplicationIsValid;	// 551 = 0x227
    _Bool _isDisplayingTelephonyPrompt;	// 552 = 0x228
    _Bool _isDecidingNavigationResponsePolicyForMainFrameDownload;	// 553 = 0x229
    NSURL *_urlForDisplayedContent;	// 560 = 0x230
    _Bool _hasFocusedInputFieldOnCurrentPage;	// 568 = 0x238
    _Bool _suppressCrashBanner;	// 569 = 0x239
    _Bool _needsSendTelemetryForProvisionalLoad;	// 570 = 0x23a
    _Bool _webViewIsLoading;	// 571 = 0x23b
    _Bool _gestureRequiresGoBackToParentTab;	// 572 = 0x23c
    _Bool _didCommitCurrentNavigation;	// 573 = 0x23d
    _Bool _didQuickStopWhileBlank;	// 574 = 0x23e
    _Bool _allowsExternalRedirectWithoutPrompting;	// 575 = 0x23f
    _SFQuickLookDocumentWriter *_quickLookDocumentWriter;	// 576 = 0x240
    NSString *_suggestedFilenameForNextCommit;	// 584 = 0x248
    _Bool _shouldReflectTranslationAsFluidProgress;	// 592 = 0x250
    struct {
        long long impressionProvenance;
        unsigned int shouldIgnoreURLAsAnalyticsImpression:1;
        unsigned int shouldNotifyImpressionAnalyticsRecorder:1;
        unsigned int shouldNotifyImpressionAnalyticsRecorderWhenDisplayedToUser:1;
    } _flags;	// 600 = 0x258
    unsigned long long _phishingURLClassification;	// 616 = 0x268
    double _idForWebExtensions;	// 624 = 0x270
    WBSSafariExtensionStateObserver *_webExtensionsStateObserver;	// 632 = 0x278
    NSTimer *_fireOnUpdatedWebExtensionEventTimer;	// 640 = 0x280
    NSURL *_startPageOverriddenByExtensionPageURL;	// 648 = 0x288
    WBTab *_tabGroupTab;	// 656 = 0x290
    WBSPermissionDialogThrottler *_permissionDialogThrottler;	// 664 = 0x298
    _Bool _hasDeferredNavigation;	// 672 = 0x2a0
    NSURL *_deferredNavigationURL;	// 680 = 0x2a8
    NSString *_deferredNavigationTitle;	// 688 = 0x2b0
    _Bool _hasDoneReaderAvailabilityDetection;	// 696 = 0x2b8
    _Bool _matchedLastSearch;	// 697 = 0x2b9
    _Bool _wasLoadedWithContentBlockersEnabled;	// 698 = 0x2ba
    _Bool _wasOpenedFromLink;	// 699 = 0x2bb
    _Bool _showingReader;	// 700 = 0x2bc
    _Bool _shouldRestoreReader;	// 701 = 0x2bd
    _Bool _shouldRevealAppLinkBannerForNextCommit;	// 702 = 0x2be
    _Bool _appBannerRemovalWasDeferred;	// 703 = 0x2bf
    _Bool _siteCustomIconPrecomposed;	// 704 = 0x2c0
    _Bool _suppressingProgressAnimationForNavigationGesture;	// 705 = 0x2c1
    _Bool _wantsReaderWhenActivated;	// 706 = 0x2c2
    _Bool _hibernatedDueToMemoryWarning;	// 707 = 0x2c3
    _Bool _webViewIsFullscreen;	// 708 = 0x2c4
    _Bool _exitingElementFullscreen;	// 709 = 0x2c5
    _Bool _allowsProgrammaticFocusToBeginInputSession;	// 710 = 0x2c6
    _Bool _showingContinuous;	// 711 = 0x2c7
    _Bool _showingInlineDialog;	// 712 = 0x2c8
    _Bool _persistWhenHibernated;	// 713 = 0x2c9
    _Bool _isBlank;	// 714 = 0x2ca
    _Bool _isPlaceholder;	// 715 = 0x2cb
    _Bool _hasBeenInserted;	// 716 = 0x2cc
    _Bool _preparingForNewUserActivity;	// 717 = 0x2cd
    _Bool _isShowingSearchQueryInNavigationBar;	// 718 = 0x2ce
    _Bool _hibernated;	// 719 = 0x2cf
    _Bool _wasRecentlyUnhibernated;	// 720 = 0x2d0
    _Bool _canStopLoading;	// 721 = 0x2d1
    _Bool _supportsReuseForSpotlightSearch;	// 722 = 0x2d2
    _Bool _closed;	// 723 = 0x2d3
    _Bool _performingFirstLoadAfterOpenInBackground;	// 724 = 0x2d4
    _Bool _performingRedirectAfterOpenInBackground;	// 725 = 0x2d5
    _Bool _didFinishDocumentLoad;	// 726 = 0x2d6
    _Bool _didFirstLayout;	// 727 = 0x2d7
    _Bool _didFirstMeaningfulPaint;	// 728 = 0x2d8
    _Bool _contentIsReadyForSnapshot;	// 729 = 0x2d9
    _Bool _mediaCaptureEnabled;	// 730 = 0x2da
    _Bool _isMediaSuspendedForScreenTime;	// 731 = 0x2db
    _Bool _hasFormControlInteraction;	// 732 = 0x2dc
    _Bool _suppressWebExtensionEvents;	// 733 = 0x2dd
    _Bool _previousLoadingCompleteStateForWebExtensionOnUpdatedEvent;	// 734 = 0x2de
    _Bool _active;	// 735 = 0x2df
    WBSFluidProgressState *_fluidProgressState;	// 736 = 0x2e0
    NSArray *_titleWords;	// 744 = 0x2e8
    NSString *_lastSearchTerm;	// 752 = 0x2f0
    NSString *_titleForLastSearch;	// 760 = 0x2f8
    NSString *_URLStringForLastSearch;	// 768 = 0x300
    NSArray *_URLStringComponents;	// 776 = 0x308
    WBSHistoryContextController *_contextController;	// 784 = 0x310
    WBSTranslationContext *_translationContext;	// 792 = 0x318
    _SFWebView *_webView;	// 800 = 0x320
    NSDictionary *_extensionIdentifierToDynamicallyInjectedStyleSheets;	// 808 = 0x328
    unsigned long long _changedPropertiesForOnUpdatedWebExtensionEvent;	// 816 = 0x330
    SFBrowserDocumentTrackerInfo *_trackerInfo;	// 824 = 0x338
    BrowserController *_browserController;	// 832 = 0x340
    TabDocument *_parentTabDocumentForBackClosesSpawnedTab;	// 840 = 0x348
    FindOnPageView *_findOnPageView;	// 848 = 0x350
    _SFQuickLookDocument *_quickLookDocument;	// 856 = 0x358
    long long _readerViewTopScrollOffset;	// 864 = 0x360
    SFPinnableBanner *_appBanner;	// 872 = 0x368
    SFBannerTheme *_bannerTheme;	// 880 = 0x370
    NSString *_sourceApplicationBundleIdentifierForNextCommit;	// 888 = 0x378
    long long _externalAppRedirectState;	// 896 = 0x380
    UIImage *_siteCustomIcon;	// 904 = 0x388
    TabOverviewItem *_tabOverviewItem;	// 912 = 0x390
    TiltedTabItem *_tiltedTabItem;	// 920 = 0x398
    WebBookmark *_readingListBookmark;	// 928 = 0x3a0
    unsigned long long _sessionStateRestorationSource;	// 936 = 0x3a8
    id <TabDocumentDelegate> _delegate;	// 944 = 0x3b0
    id <LoadProgressObserver> _loadProgressObserver;	// 952 = 0x3b8
    _SFBrowserConfiguration *_configuration;	// 960 = 0x3c0
    LinkPreviewViewController *_linkPreviewViewController;	// 968 = 0x3c8
    PageLoadTestStatistics *_pageLoadStatistics;	// 976 = 0x3d0
    NSURL *_URLFromExternalApplication;	// 984 = 0x3d8
    _SFPageLoadErrorController *_pageLoadErrorController;	// 992 = 0x3e0
    WBSSameDocumentNavigationToHistoryVisitCorrelator *_sameDocumentNavigationToHistoryVisitCorrelator;	// 1000 = 0x3e8
    NSString *_libraryType;	// 1008 = 0x3f0
    TabBarItem *_tabBarItem;	// 1016 = 0x3f8
    UnifiedTabBarItem *_unifiedTabBarItem;	// 1024 = 0x400
    UIColor *_themeColor;	// 1032 = 0x408
    _SFSafeBrowsingController *_safeBrowsingController;	// 1040 = 0x410
    NSURL *_tabReuseURL;	// 1048 = 0x418
    NSUUID *_uuid;	// 1056 = 0x420
    double _lastViewedTime;	// 1064 = 0x428
    WBSHistoryVisit *_lastVisit;	// 1072 = 0x430
    _SFPrintController *_printController;	// 1080 = 0x438
    NSUUID *_ownerUUID;	// 1088 = 0x440
    CSSearchableItemAttributeSet *_searchableItemAttributes;	// 1096 = 0x448
    NSString *_sourceApplicationBundleIdentifier;	// 1104 = 0x450
    NSArray *_ancestorUUIDs;	// 1112 = 0x458
    _SFWebView *_readerWebView;	// 1120 = 0x460
    long long _policy;	// 1128 = 0x468
    STBlockingViewController *_associatedBlockingViewController;	// 1136 = 0x470
    NSString *_previousTitleForWebExtensionOnUpdatedEvent;	// 1144 = 0x478
    NSURL *_previousURLForWebExtensionOnUpdatedEvent;	// 1152 = 0x480
    NSUserActivity *_userActivity;	// 1160 = 0x488
    struct CGPoint _scrollPoint;	// 1168 = 0x490
}

+ (id)tabDocumentForWKWebView:(id)arg1;	// IMP=0x0000000000153500
+ (id)urlForExternalURL:(id)arg1;	// IMP=0x000000000013ff0c
- (void).cxx_destruct;	// IMP=0x000000000016ee08
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
@property(readonly, nonatomic) NSUserActivity *userActivity; // @synthesize userActivity=_userActivity;
@property(readonly, nonatomic) NSURL *previousURLForWebExtensionOnUpdatedEvent; // @synthesize previousURLForWebExtensionOnUpdatedEvent=_previousURLForWebExtensionOnUpdatedEvent;
@property(readonly, copy, nonatomic) NSString *previousTitleForWebExtensionOnUpdatedEvent; // @synthesize previousTitleForWebExtensionOnUpdatedEvent=_previousTitleForWebExtensionOnUpdatedEvent;
@property(readonly, nonatomic) _Bool previousLoadingCompleteStateForWebExtensionOnUpdatedEvent; // @synthesize previousLoadingCompleteStateForWebExtensionOnUpdatedEvent=_previousLoadingCompleteStateForWebExtensionOnUpdatedEvent;
@property(nonatomic) _Bool suppressWebExtensionEvents; // @synthesize suppressWebExtensionEvents=_suppressWebExtensionEvents;
@property(readonly, nonatomic) _Bool hasFormControlInteraction; // @synthesize hasFormControlInteraction=_hasFormControlInteraction;
@property(nonatomic) _Bool isMediaSuspendedForScreenTime; // @synthesize isMediaSuspendedForScreenTime=_isMediaSuspendedForScreenTime;
@property(nonatomic) __weak STBlockingViewController *associatedBlockingViewController; // @synthesize associatedBlockingViewController=_associatedBlockingViewController;
@property(nonatomic) long long policy; // @synthesize policy=_policy;
@property(nonatomic) _Bool mediaCaptureEnabled; // @synthesize mediaCaptureEnabled=_mediaCaptureEnabled;
@property(readonly, nonatomic) _SFWebView *readerWebView; // @synthesize readerWebView=_readerWebView;
@property(readonly, nonatomic) NSArray *ancestorUUIDs; // @synthesize ancestorUUIDs=_ancestorUUIDs;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(retain, nonatomic) CSSearchableItemAttributeSet *searchableItemAttributes; // @synthesize searchableItemAttributes=_searchableItemAttributes;
@property(retain, nonatomic) NSUUID *ownerUUID; // @synthesize ownerUUID=_ownerUUID;
@property(readonly, nonatomic) _SFPrintController *printController; // @synthesize printController=_printController;
@property(readonly, nonatomic) _Bool contentIsReadyForSnapshot; // @synthesize contentIsReadyForSnapshot=_contentIsReadyForSnapshot;
@property(readonly, nonatomic) _Bool didFirstMeaningfulPaint; // @synthesize didFirstMeaningfulPaint=_didFirstMeaningfulPaint;
@property(readonly, nonatomic) _Bool didFirstLayout; // @synthesize didFirstLayout=_didFirstLayout;
@property(readonly, nonatomic) _Bool didFinishDocumentLoad; // @synthesize didFinishDocumentLoad=_didFinishDocumentLoad;
@property(nonatomic, getter=isPerformingRedirectAfterOpenInBackground) _Bool performingRedirectAfterOpenInBackground; // @synthesize performingRedirectAfterOpenInBackground=_performingRedirectAfterOpenInBackground;
@property(nonatomic, getter=isPerformingFirstLoadAfterOpenInBackground) _Bool performingFirstLoadAfterOpenInBackground; // @synthesize performingFirstLoadAfterOpenInBackground=_performingFirstLoadAfterOpenInBackground;
@property(retain, nonatomic) WBSHistoryVisit *lastVisit; // @synthesize lastVisit=_lastVisit;
@property(nonatomic, getter=isClosed) _Bool closed; // @synthesize closed=_closed;
@property(nonatomic) double lastViewedTime; // @synthesize lastViewedTime=_lastViewedTime;
@property(copy, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(copy, nonatomic) NSURL *tabReuseURL; // @synthesize tabReuseURL=_tabReuseURL;
@property(nonatomic) _Bool supportsReuseForSpotlightSearch; // @synthesize supportsReuseForSpotlightSearch=_supportsReuseForSpotlightSearch;
@property(nonatomic) struct CGPoint scrollPoint; // @synthesize scrollPoint=_scrollPoint;
@property(readonly, nonatomic) _Bool canStopLoading; // @synthesize canStopLoading=_canStopLoading;
@property(readonly, nonatomic) _Bool wasRecentlyUnhibernated; // @synthesize wasRecentlyUnhibernated=_wasRecentlyUnhibernated;
@property(readonly, nonatomic, getter=isHibernated) _Bool hibernated; // @synthesize hibernated=_hibernated;
@property(readonly, nonatomic) _SFSafeBrowsingController *safeBrowsingController; // @synthesize safeBrowsingController=_safeBrowsingController;
@property(readonly, nonatomic) _Bool isShowingSearchQueryInNavigationBar; // @synthesize isShowingSearchQueryInNavigationBar=_isShowingSearchQueryInNavigationBar;
@property(readonly, nonatomic) UIColor *themeColor; // @synthesize themeColor=_themeColor;
@property(readonly, nonatomic) UnifiedTabBarItem *unifiedTabBarItem; // @synthesize unifiedTabBarItem=_unifiedTabBarItem;
@property(readonly, nonatomic) TabBarItem *tabBarItem; // @synthesize tabBarItem=_tabBarItem;
@property(nonatomic, getter=isPreparingForNewUserActivity) _Bool preparingForNewUserActivity; // @synthesize preparingForNewUserActivity=_preparingForNewUserActivity;
@property(copy, nonatomic) NSString *libraryType; // @synthesize libraryType=_libraryType;
@property(nonatomic) _Bool hasBeenInserted; // @synthesize hasBeenInserted=_hasBeenInserted;
@property(nonatomic) _Bool isPlaceholder; // @synthesize isPlaceholder=_isPlaceholder;
@property(nonatomic) _Bool isBlank; // @synthesize isBlank=_isBlank;
@property(nonatomic) _Bool persistWhenHibernated; // @synthesize persistWhenHibernated=_persistWhenHibernated;
@property(readonly, nonatomic) WBSSameDocumentNavigationToHistoryVisitCorrelator *sameDocumentNavigationToHistoryVisitCorrelator; // @synthesize sameDocumentNavigationToHistoryVisitCorrelator=_sameDocumentNavigationToHistoryVisitCorrelator;
@property(readonly, nonatomic, getter=isShowingInlineDialog) _Bool showingInlineDialog; // @synthesize showingInlineDialog=_showingInlineDialog;
@property(readonly, nonatomic) SFDialogController *dialogController; // @synthesize dialogController=_dialogController;
@property(readonly, nonatomic) _SFPageLoadErrorController *pageLoadErrorController; // @synthesize pageLoadErrorController=_pageLoadErrorController;
@property(retain, nonatomic) NSURL *URLFromExternalApplication; // @synthesize URLFromExternalApplication=_URLFromExternalApplication;
@property(nonatomic, getter=isShowingContinuous) _Bool showingContinuous; // @synthesize showingContinuous=_showingContinuous;
@property(nonatomic) _Bool allowsProgrammaticFocusToBeginInputSession; // @synthesize allowsProgrammaticFocusToBeginInputSession=_allowsProgrammaticFocusToBeginInputSession;
@property(retain, nonatomic) PageLoadTestStatistics *pageLoadStatistics; // @synthesize pageLoadStatistics=_pageLoadStatistics;
@property(retain, nonatomic) LinkPreviewViewController *linkPreviewViewController; // @synthesize linkPreviewViewController=_linkPreviewViewController;
@property(readonly, nonatomic, getter=isExitingElementFullscreen) _Bool exitingElementFullscreen; // @synthesize exitingElementFullscreen=_exitingElementFullscreen;
@property(readonly, nonatomic) _Bool webViewIsFullscreen; // @synthesize webViewIsFullscreen=_webViewIsFullscreen;
@property(readonly, nonatomic) _SFBrowserConfiguration *configuration; // @synthesize configuration=_configuration;
@property(nonatomic) __weak id <LoadProgressObserver> loadProgressObserver; // @synthesize loadProgressObserver=_loadProgressObserver;
@property(nonatomic) __weak id <TabDocumentDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned long long sessionStateRestorationSource; // @synthesize sessionStateRestorationSource=_sessionStateRestorationSource;
@property(nonatomic, getter=wasHibernatedDueToMemoryWarning) _Bool hibernatedDueToMemoryWarning; // @synthesize hibernatedDueToMemoryWarning=_hibernatedDueToMemoryWarning;
@property(nonatomic, getter=isDisplayingStandaloneMedia) _Bool displayingStandaloneMedia; // @synthesize displayingStandaloneMedia=_displayingStandaloneMedia;
@property(nonatomic, getter=isDisplayingStandaloneImage) _Bool displayingStandaloneImage; // @synthesize displayingStandaloneImage=_displayingStandaloneImage;
@property(nonatomic) _Bool wantsReaderWhenActivated; // @synthesize wantsReaderWhenActivated=_wantsReaderWhenActivated;
@property(nonatomic) _Bool suppressingProgressAnimationForNavigationGesture; // @synthesize suppressingProgressAnimationForNavigationGesture=_suppressingProgressAnimationForNavigationGesture;
@property(retain, nonatomic) WebBookmark *readingListBookmark; // @synthesize readingListBookmark=_readingListBookmark;
@property(readonly, nonatomic) TiltedTabItem *tiltedTabItem; // @synthesize tiltedTabItem=_tiltedTabItem;
@property(readonly, nonatomic) TabOverviewItem *tabOverviewItem; // @synthesize tabOverviewItem=_tabOverviewItem;
@property(nonatomic) _Bool siteCustomIconPrecomposed; // @synthesize siteCustomIconPrecomposed=_siteCustomIconPrecomposed;
@property(retain, nonatomic) UIImage *siteCustomIcon; // @synthesize siteCustomIcon=_siteCustomIcon;
@property(nonatomic) long long externalAppRedirectState; // @synthesize externalAppRedirectState=_externalAppRedirectState;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifierForNextCommit; // @synthesize sourceApplicationBundleIdentifierForNextCommit=_sourceApplicationBundleIdentifierForNextCommit;
@property(retain, nonatomic) SFBannerTheme *bannerTheme; // @synthesize bannerTheme=_bannerTheme;
@property(nonatomic) _Bool appBannerRemovalWasDeferred; // @synthesize appBannerRemovalWasDeferred=_appBannerRemovalWasDeferred;
@property(nonatomic) _Bool shouldRevealAppLinkBannerForNextCommit; // @synthesize shouldRevealAppLinkBannerForNextCommit=_shouldRevealAppLinkBannerForNextCommit;
@property(retain, nonatomic) SFPinnableBanner *appBanner; // @synthesize appBanner=_appBanner;
@property(nonatomic) long long readerViewTopScrollOffset; // @synthesize readerViewTopScrollOffset=_readerViewTopScrollOffset;
@property(nonatomic) _Bool shouldRestoreReader; // @synthesize shouldRestoreReader=_shouldRestoreReader;
@property(nonatomic, getter=isShowingReader) _Bool showingReader; // @synthesize showingReader=_showingReader;
@property(nonatomic) _Bool wasOpenedFromLink; // @synthesize wasOpenedFromLink=_wasOpenedFromLink;
@property(retain, nonatomic) _SFQuickLookDocument *quickLookDocument; // @synthesize quickLookDocument=_quickLookDocument;
@property(readonly, nonatomic) FindOnPageView *findOnPageView; // @synthesize findOnPageView=_findOnPageView;
@property(nonatomic) __weak TabDocument *parentTabDocumentForBackClosesSpawnedTab; // @synthesize parentTabDocumentForBackClosesSpawnedTab=_parentTabDocumentForBackClosesSpawnedTab;
@property(nonatomic) __weak BrowserController *browserController; // @synthesize browserController=_browserController;
@property(readonly, nonatomic) SFBrowserDocumentTrackerInfo *trackerInfo; // @synthesize trackerInfo=_trackerInfo;
@property(nonatomic) unsigned long long changedPropertiesForOnUpdatedWebExtensionEvent; // @synthesize changedPropertiesForOnUpdatedWebExtensionEvent=_changedPropertiesForOnUpdatedWebExtensionEvent;
@property(copy, nonatomic) NSDictionary *extensionIdentifierToDynamicallyInjectedStyleSheets; // @synthesize extensionIdentifierToDynamicallyInjectedStyleSheets=_extensionIdentifierToDynamicallyInjectedStyleSheets;
@property(readonly, nonatomic) _SFWebView *webView; // @synthesize webView=_webView;
@property(readonly, nonatomic) _Bool wasLoadedWithContentBlockersEnabled; // @synthesize wasLoadedWithContentBlockersEnabled=_wasLoadedWithContentBlockersEnabled;
@property(readonly, nonatomic) WBSTranslationContext *translationContext; // @synthesize translationContext=_translationContext;
@property(readonly, nonatomic) _SFReloadOptionsController *reloadOptionsController; // @synthesize reloadOptionsController=_reloadOptionsController;
@property(nonatomic) _Bool matchedLastSearch; // @synthesize matchedLastSearch=_matchedLastSearch;
@property(copy, nonatomic) NSArray *URLStringComponents; // @synthesize URLStringComponents=_URLStringComponents;
@property(copy, nonatomic) NSString *URLStringForLastSearch; // @synthesize URLStringForLastSearch=_URLStringForLastSearch;
@property(copy, nonatomic) NSString *titleForLastSearch; // @synthesize titleForLastSearch=_titleForLastSearch;
@property(copy, nonatomic) NSString *lastSearchTerm; // @synthesize lastSearchTerm=_lastSearchTerm;
@property(copy, nonatomic) NSArray *titleWords; // @synthesize titleWords=_titleWords;
@property(readonly, nonatomic) _Bool hasDoneReaderDetection; // @synthesize hasDoneReaderDetection=_hasDoneReaderAvailabilityDetection;
@property(readonly, nonatomic) WBSFluidProgressState *progressState; // @synthesize progressState=_fluidProgressState;
- (void)evictFromTabReuse;	// IMP=0x000000000016e577
- (void)unmute;	// IMP=0x000000000016e571
- (void)mute;	// IMP=0x000000000016e56b
- (void)select;	// IMP=0x000000000016e497
- (void)loadURL:(id)arg1;	// IMP=0x000000000016e477
@property(readonly, nonatomic) id <WBSWebExtensionWindow> webExtensionWindow;
@property(readonly, nonatomic) struct CGSize tabViewSize;
@property(readonly, copy, nonatomic) NSString *tabTitle;
@property(readonly, nonatomic) _Bool isPrivate;
@property(readonly, nonatomic) _Bool isFrontmost;
@property(readonly, nonatomic) _Bool isMuted;
@property(readonly, nonatomic) _Bool isAudible;
@property(readonly, nonatomic) _Bool isLoadingComplete;
@property(readonly, nonatomic) double parentTabIDForWebExtensions;
@property(readonly, nonatomic) NSURL *pendingURLForWebExtensions;
@property(readonly, nonatomic) NSURL *expectedOrCurrentURLOrLastActiveURLIfCrashed;
@property(readonly, nonatomic) NSURL *urlForExtensions;
@property(readonly, copy, nonatomic) NSArray *webViewsThatCanReceiveMessages;
@property(readonly, nonatomic) WKWebView *webViewForExtensions;
@property(readonly, nonatomic) double idForWebExtensions;
@property(readonly, nonatomic, getter=isShowingStartPageOverriddenByExtension) _Bool showingStartPageOverriddenByExtension;
- (void)displayNewTabOverridePageIfNecessary;	// IMP=0x000000000016dd52
- (void)webViewDidChangeSize;	// IMP=0x000000000016ce18
- (void)webViewDidScroll;	// IMP=0x000000000016ce09
- (id)translationConsentAlertHelperViewControllerToPresentDetailsFrom:(id)arg1;	// IMP=0x000000000016cdaf
- (void)_translationContextStateDidChange:(id)arg1;	// IMP=0x000000000016ca5c
- (void)translationContextWillRequestTranslatingWebpage:(id)arg1;	// IMP=0x000000000016ca0d
- (void)translationContextNeedsScrollHeightVisibilityUpdate:(id)arg1;	// IMP=0x000000000016c6f1
- (void)translationContext:(id)arg1 shouldReportProgressInUnifiedField:(_Bool)arg2;	// IMP=0x000000000016c674
- (void)translationContext:(id)arg1 showTranslationErrorAlertWithTitle:(id)arg2 message:(id)arg3;	// IMP=0x000000000016c502
- (id)safariApplicationVersionForTranslationContext:(id)arg1;	// IMP=0x000000000016c497
- (void)translationContext:(id)arg1 showFeedbackConsentAlertWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000016c488
- (void)translationContext:(id)arg1 showFirstTimeConsentAlertWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000016c3d6
- (void)translationContext:(id)arg1 urlForCurrentPageWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000016c2e8
- (_Bool)translationContextIsUsingPrivateBrowsing:(id)arg1;	// IMP=0x000000000016c2d5
- (void)translationContextReloadPageInOriginalLanguage:(id)arg1;	// IMP=0x000000000016c266
@property(readonly, nonatomic) double lastActivationTime;
@property(readonly, nonatomic, getter=isClosing) _Bool closing;
@property(readonly, nonatomic) _Bool shouldSelectOriginatingTabWhenClosed;
@property(readonly, nonatomic) _Bool isPinnedTab;
@property(readonly, copy, nonatomic) NSString *windowIdentifier;
@property(readonly, copy, nonatomic) NSArray *ancestorTabIdentifiers;
@property(readonly, copy, nonatomic) NSString *identifier;
- (void)updateAncestryToChildOfTopLevelAncestorRelatedTab:(id)arg1;	// IMP=0x000000000016bfc6
- (void)updateAncestryWithParentTab:(id)arg1;	// IMP=0x000000000016bec4
- (void)_webViewDidExitElementFullscreen:(id)arg1;	// IMP=0x000000000016be55
- (void)_webViewWillExitElementFullscreen:(id)arg1;	// IMP=0x000000000016be34
@property(readonly, nonatomic) _Bool shouldObscureForDigitalHealth;
- (void)updateUsageTrackingInformationAfterLinkPreviewDismissal;	// IMP=0x000000000016bd33
- (void)updateUsageTrackingInformationIfNecessaryGivenDocumentIsCurrent:(_Bool)arg1;	// IMP=0x000000000016bd14
- (void)_unresponsiveWebProcessTimerFired:(id)arg1;	// IMP=0x000000000016b381
- (void)fetchMetadataForBookmark:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000016ad2a
- (id)permissionDialogThrottler;	// IMP=0x000000000016ace3
- (void)presentDialog:(id)arg1 sender:(id)arg2;	// IMP=0x000000000016acc9
- (void)createReaderWebViewForReaderController:(id)arg1;	// IMP=0x000000000016aca4
- (id)readerURLForReaderController:(id)arg1;	// IMP=0x000000000016abf9
- (void)collectReadingListItemInfo;	// IMP=0x000000000016aaec
- (void)clearReaderContext;	// IMP=0x000000000016aada
- (void)clearReaderView;	// IMP=0x000000000016aa30
- (void)createBrowserReaderViewIfNeeded;	// IMP=0x000000000016a3e3
- (void)prepareToUseReader;	// IMP=0x000000000016a390
- (id)readerPageArchiveURL;	// IMP=0x000000000016a26a
- (_Bool)isShowingReadingListArchive;	// IMP=0x000000000016a1f0
@property(readonly, nonatomic) WBSHistoryContextController *contextController; // @synthesize contextController=_contextController;
- (void)readerController:(id)arg1 didExtractArticleText:(id)arg2 withMetadata:(id)arg3;	// IMP=0x000000000016a030
- (void)readerController:(id)arg1 didTwoFingerTapLinkInReaderWithContext:(id)arg2;	// IMP=0x0000000000169f2f
- (void)readerController:(id)arg1 didClickLinkRequestingNewWindowInReaderWithRequest:(id)arg2;	// IMP=0x0000000000169d87
- (void)readerController:(id)arg1 didClickLinkInReaderWithRequest:(id)arg2;	// IMP=0x0000000000169b86
- (void)readerController:(id)arg1 didDeactivateReaderWithMode:(unsigned long long)arg2;	// IMP=0x0000000000169a7c
- (void)readerController:(id)arg1 didDetermineReaderAvailability:(id)arg2 dueTo:(long long)arg3;	// IMP=0x000000000016916b
- (void)readerController:(id)arg1 didDetermineAdditionalTextSamples:(id)arg2 dueTo:(long long)arg3;	// IMP=0x00000000001690c7
- (void)didActivateReader;	// IMP=0x0000000000168fce
- (_Bool)isReaderAvailable;	// IMP=0x0000000000168fa3
- (void)updateReadingListItemPreviewText:(id)arg1;	// IMP=0x0000000000168e5f
- (void)clearReaderScrollInformation;	// IMP=0x0000000000168e32
- (_Bool)shouldShowReaderOnActivate;	// IMP=0x0000000000168df8
- (void)pageLoadErrorController:(id)arg1 allowLegacyTLSConnectionForURL:(id)arg2 navigateToURL:(id)arg3;	// IMP=0x0000000000168cba
- (_Bool)pageLoadErrorControllerIsInPreviewMode:(id)arg1;	// IMP=0x0000000000168ca9
- (_Bool)pageLoadErrorControllerShouldReloadAfterError:(id)arg1;	// IMP=0x0000000000168c5a
- (_Bool)pageLoadErrorControllerShouldPermanentlyAcceptCertificate:(id)arg1;	// IMP=0x0000000000168c45
- (void)pageLoadErrorController:(id)arg1 presentViewController:(id)arg2;	// IMP=0x0000000000168bc9
- (void)pageLoadErrorControllerClosePage:(id)arg1;	// IMP=0x0000000000168b39
- (id)pageLoadErrorControllerGetSecIdentityPreferencesController:(id)arg1;	// IMP=0x0000000000168ac4
- (void)pageLoadErrorController:(id)arg1 setAllowsSpecificHTTPSCertificate:(id)arg2 forHost:(id)arg3;	// IMP=0x0000000000168972
- (void)pageLoadErrorController:(id)arg1 loadFailedRequestAfterError:(id)arg2;	// IMP=0x0000000000168902
- (_Bool)pageLoadErrorControllerShouldHandleCertificateError:(id)arg1;	// IMP=0x00000000001688a5
- (void)pageLoadErrorControllerDidAddAlert:(id)arg1;	// IMP=0x0000000000168858
- (void)dialogController:(id)arg1 dismissViewController:(id)arg2 withAdditionalAnimations:(CDUnknownBlockType)arg3;	// IMP=0x00000000001687a7
- (void)dialogController:(id)arg1 presentViewController:(id)arg2 withAdditionalAnimations:(CDUnknownBlockType)arg3;	// IMP=0x00000000001686f6
- (void)dialogController:(id)arg1 didDismissDialog:(id)arg2;	// IMP=0x00000000001686a2
- (void)dialogController:(id)arg1 willPresentDialog:(id)arg2;	// IMP=0x000000000016864e
- (long long)dialogController:(id)arg1 presentationPolicyForDialog:(id)arg2;	// IMP=0x000000000016855b
- (id)loadingDialogPageTitleForPrintController:(id)arg1;	// IMP=0x0000000000168539
- (id)pageTitleForPrintController:(id)arg1;	// IMP=0x0000000000168517
- (id)URLStringForPrintController:(id)arg1;	// IMP=0x00000000001684f5
- (id)presentingViewControllerForPrintController:(id)arg1;	// IMP=0x000000000016849b
- (_Bool)printControllerCanPresentPrintUI:(id)arg1;	// IMP=0x000000000016842b
- (void)printController:(id)arg1 didCreatePrintInfo:(id)arg2;	// IMP=0x000000000016840e
- (_Bool)printControllerPageIsLoading:(id)arg1;	// IMP=0x00000000001683fb
- (_Bool)printControllerShouldPrintReader:(id)arg1;	// IMP=0x000000000016831f
- (void)formAutoFillControllerGetAuthenticationForAutoFill:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000168074
- (_Bool)formAutoFillControllerShouldShowIconsInPasswordPicker:(id)arg1;	// IMP=0x000000000016806c
- (void)formAutoFillControllerDidFocusSensitiveFormField:(id)arg1;	// IMP=0x0000000000168051
- (void)formAutoFillControllerUserChoseToUseGeneratedPassword:(id)arg1;	// IMP=0x0000000000168031
- (_Bool)formAutoFillControllerDidUserDeclineAutomaticStrongPasswordForCurrentDomain:(id)arg1;	// IMP=0x0000000000167f9c
- (_Bool)formAutoFillControllerShouldDisableStreamlinedLogin:(id)arg1;	// IMP=0x0000000000167f80
- (id)formAutoFillControllerURLForFormAutoFill:(id)arg1;	// IMP=0x0000000000167f5e
- (_Bool)formAutoFillControllerCanPrefillForm:(id)arg1;	// IMP=0x0000000000167f29
- (struct UIEdgeInsets)_webView:(id)arg1 finalObscuredInsetsForScrollView:(id)arg2 withVelocity:(struct CGPoint)arg3 targetContentOffset:(inout struct CGPoint *)arg4;	// IMP=0x0000000000167e76
- (void)findOnPageCompletionProvider:(id)arg1 setStringToComplete:(id)arg2;	// IMP=0x0000000000167ddc
- (void)updateFindCompletionProviderWithMatchesCount:(unsigned long long)arg1 forString:(id)arg2 forFindOnPageView:(id)arg3;	// IMP=0x0000000000167c5b
- (void)visibilityWillChangeForFindOnPageView:(id)arg1;	// IMP=0x0000000000167b8c
- (id)webViewForFindOnPageView:(id)arg1;	// IMP=0x0000000000167b54
- (void)didAutoDetectSiteSpecificSearchProviderWithOriginatingURL:(id)arg1 searchURLTemplate:(id)arg2;	// IMP=0x0000000000167a0b
- (void)_webView:(id)arg1 logDiagnosticMessageWithDomain:(id)arg2 domain:(long long)arg3;	// IMP=0x00000000001678e2
- (void)_webView:(id)arg1 logDiagnosticMessage:(id)arg2 description:(id)arg3 valueDictionary:(id)arg4;	// IMP=0x0000000000167816
- (void)_webView:(id)arg1 logDiagnosticMessageWithEnhancedPrivacy:(id)arg2 description:(id)arg3;	// IMP=0x0000000000167805
- (void)_webView:(id)arg1 logDiagnosticMessageWithValue:(id)arg2 description:(id)arg3 value:(id)arg4;	// IMP=0x0000000000167739
- (void)_webView:(id)arg1 logDiagnosticMessageWithResult:(id)arg2 description:(id)arg3 result:(long long)arg4;	// IMP=0x000000000016768a
- (void)_webView:(id)arg1 logDiagnosticMessage:(id)arg2 description:(id)arg3;	// IMP=0x00000000001675e1
- (void)loadingControllerWillStartUserDrivenLoad:(id)arg1;	// IMP=0x00000000001675af
- (void)loadingController:(id)arg1 willLoadRequest:(id)arg2 userDriven:(_Bool)arg3;	// IMP=0x000000000016754d
- (void)_webViewDidDisableInspectorBrowserDomain:(id)arg1;	// IMP=0x000000000016752e
- (void)_webViewDidEnableInspectorBrowserDomain:(id)arg1;	// IMP=0x000000000016744f
- (long long)_webView:(id)arg1 decidePolicyForFocusedElement:(id)arg2;	// IMP=0x00000000001672e0
- (void)_webView:(id)arg1 insertTextSuggestion:(id)arg2 inInputSession:(id)arg3;	// IMP=0x00000000001672c3
- (void)_webView:(id)arg1 accessoryViewCustomButtonTappedInFormInputSession:(id)arg2;	// IMP=0x00000000001672b0
- (void)_webView:(id)arg1 willSubmitFormValues:(id)arg2 userObject:(id)arg3 submissionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000167089
- (id)_webViewAdditionalContextForStrongPasswordAssistance:(id)arg1;	// IMP=0x0000000000166f9e
- (void)_webView:(id)arg1 didResignInputElementStrongPasswordAppearanceWithUserInfo:(id)arg2;	// IMP=0x0000000000166f84
- (_Bool)_webView:(id)arg1 focusRequiresStrongPasswordAssistance:(id)arg2;	// IMP=0x0000000000166edb
- (void)_webView:(id)arg1 didStartInputSession:(id)arg2;	// IMP=0x0000000000166e34
- (void)_webView:(id)arg1 willStartInputSession:(id)arg2;	// IMP=0x0000000000166d7d
- (void)_webView:(id)arg1 hasVideoInPictureInPictureDidChange:(_Bool)arg2;	// IMP=0x0000000000166cfc
- (long long)_webView:(id)arg1 dataOwnerForDragSession:(id)arg2;	// IMP=0x0000000000166ce9
- (long long)_webView:(id)arg1 dataOwnerForDropSession:(id)arg2;	// IMP=0x0000000000166cd9
- (void)_webView:(id)arg1 didChangeSafeAreaShouldAffectObscuredInsets:(_Bool)arg2;	// IMP=0x0000000000166c8c
- (_Bool)_webView:(id)arg1 fileUploadPanelContentIsManagedWithInitiatingFrame:(id)arg2;	// IMP=0x0000000000166b92
- (void)_webView:(id)arg1 requestGeolocationAuthorizationForURL:(id)arg2 frame:(id)arg3 decisionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000166abe
- (id)_webView:(id)arg1 adjustedDataInteractionItemProvidersForItemProvider:(id)arg2 representingObjects:(id)arg3 additionalData:(id)arg4;	// IMP=0x0000000000166823
- (void)_webView:(id)arg1 dataInteractionOperationWasHandled:(_Bool)arg2 forSession:(id)arg3 itemProviders:(id)arg4;	// IMP=0x00000000001667d9
- (_Bool)_webView:(id)arg1 performDataInteractionOperationWithItemProviders:(id)arg2;	// IMP=0x0000000000166572
- (unsigned long long)_webView:(id)arg1 willUpdateDataInteractionOperationToOperation:(unsigned long long)arg2 forSession:(id)arg3;	// IMP=0x00000000001664a8
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 session:(id)arg3 didEndWithOperation:(unsigned long long)arg4;	// IMP=0x0000000000166495
- (void)_webView:(id)arg1 dataInteraction:(id)arg2 sessionWillBegin:(id)arg3;	// IMP=0x0000000000166481
- (void)_webView:(id)arg1 imageOrMediaDocumentSizeChanged:(struct CGSize)arg2;	// IMP=0x0000000000166467
- (void)_webView:(id)arg1 printFrame:(id)arg2;	// IMP=0x00000000001663e5
- (void)_webView:(id)arg1 decideWebApplicationCacheQuotaForSecurityOrigin:(id)arg2 currentQuota:(unsigned long long)arg3 totalBytesNeeded:(unsigned long long)arg4 decisionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000016625c
- (void)_webView:(id)arg1 decideDatabaseQuotaForSecurityOrigin:(id)arg2 currentQuota:(unsigned long long)arg3 currentOriginUsage:(unsigned long long)arg4 currentDatabaseUsage:(unsigned long long)arg5 expectedUsage:(unsigned long long)arg6 decisionHandler:(CDUnknownBlockType)arg7;	// IMP=0x00000000001660c4
- (id)_presentingViewControllerForWebView:(id)arg1;	// IMP=0x0000000000165fdb
- (_Bool)_webView:(id)arg1 shouldIncludeAppLinkActionsForElement:(id)arg2;	// IMP=0x0000000000165fd3
- (struct CGRect)sourceRectForPopoverActionPicker:(id)arg1;	// IMP=0x0000000000165eda
- (id)presentingViewControllerForAction:(id)arg1;	// IMP=0x0000000000165e76
- (id)_webView:(id)arg1 alternateURLFromImage:(id)arg2 userInfo:(id *)arg3;	// IMP=0x0000000000165d9f
- (void)animateElement:(id)arg1 toBarItem:(long long)arg2;	// IMP=0x0000000000165c60
- (void)_webViewFullscreenMayReturnToInline:(id)arg1;	// IMP=0x0000000000165ae4
- (void)webViewDidClose:(id)arg1;	// IMP=0x00000000001659e6
- (_Bool)_webViewCanBecomeFocused:(id)arg1;	// IMP=0x0000000000165997
- (void)_webView:(id)arg1 takeFocus:(long long)arg2;	// IMP=0x00000000001657be
- (void)_webView:(id)arg1 createWebViewWithConfiguration:(id)arg2 forNavigationAction:(id)arg3 windowFeatures:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x0000000000164fe9
- (void)_webView:(id)arg1 requestStorageAccessPanelForDomain:(id)arg2 underCurrentDomain:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000164eb1
- (void)webView:(id)arg1 runJavaScriptTextInputPanelWithPrompt:(id)arg2 defaultText:(id)arg3 initiatedByFrame:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x0000000000164cfd
- (void)webView:(id)arg1 runJavaScriptConfirmPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000164b5e
- (void)webView:(id)arg1 runJavaScriptAlertPanelWithMessage:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000001649c1
- (void)_webView:(id)arg1 mediaCaptureStateDidChange:(unsigned long long)arg2;	// IMP=0x0000000000164924
- (void)_webView:(id)arg1 checkUserMediaPermissionForURL:(id)arg2 mainFrameURL:(id)arg3 frameIdentifier:(unsigned long long)arg4 decisionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000016484f
- (void)_webView:(id)arg1 requestUserMediaAuthorizationForDevices:(unsigned long long)arg2 url:(id)arg3 mainFrameURL:(id)arg4 decisionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000016476b
- (void)_webView:(id)arg1 didFinishLoadWithRequest:(id)arg2 inFrame:(id)arg3;	// IMP=0x00000000001646bc
- (void)_webView:(id)arg1 didFailLoadWithRequest:(id)arg2 inFrame:(id)arg3 withError:(id)arg4;	// IMP=0x000000000016460d
- (void)_webView:(id)arg1 didCommitLoadWithRequest:(id)arg2 inFrame:(id)arg3;	// IMP=0x000000000016453f
- (void)_webView:(id)arg1 didFailProvisionalLoadWithRequest:(id)arg2 inFrame:(id)arg3 withError:(id)arg4;	// IMP=0x0000000000164490
- (void)_webView:(id)arg1 didStartProvisionalLoadWithRequest:(id)arg2 inFrame:(id)arg3;	// IMP=0x00000000001643e1
- (void)_webView:(id)arg1 willGoToBackForwardListItem:(id)arg2 inPageCache:(_Bool)arg3;	// IMP=0x00000000001643c1
- (void)_webView:(id)arg1 willSnapshotBackForwardListItem:(id)arg2;	// IMP=0x000000000016433d
- (void)_webViewDidEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;	// IMP=0x00000000001640da
- (void)_webViewWillEndNavigationGesture:(id)arg1 withNavigationToBackForwardListItem:(id)arg2;	// IMP=0x0000000000163ee4
- (void)_webViewDidBeginNavigationGesture:(id)arg1;	// IMP=0x0000000000163d79
- (void)_webView:(id)arg1 didFinishLoadForQuickLookDocumentInMainFrame:(id)arg2;	// IMP=0x0000000000163cc9
- (void)_webView:(id)arg1 didStartLoadForQuickLookDocumentInMainFrameWithFileName:(id)arg2 uti:(id)arg3;	// IMP=0x0000000000163c25
- (id)_webCryptoMasterKeyForWebView:(id)arg1;	// IMP=0x0000000000163c0b
- (void)_webViewWebProcessDidCrash:(id)arg1;	// IMP=0x0000000000163803
- (void)_webView:(id)arg1 renderingProgressDidChange:(unsigned long long)arg2;	// IMP=0x0000000000163326
- (void)_webView:(id)arg1 navigation:(id)arg2 didSameDocumentNavigation:(long long)arg3;	// IMP=0x0000000000162da6
- (void)_webView:(id)arg1 didNegotiateModernTLSForURL:(id)arg2;	// IMP=0x0000000000162cba
- (void)_webView:(id)arg1 authenticationChallenge:(id)arg2 shouldAllowLegacyTLS:(CDUnknownBlockType)arg3;	// IMP=0x00000000001628e9
- (void)webView:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000162492
- (void)webView:(id)arg1 didFailNavigation:(id)arg2 withError:(id)arg3;	// IMP=0x000000000016229b
- (void)webView:(id)arg1 didFinishNavigation:(id)arg2;	// IMP=0x0000000000161545
- (void)getApplicationManifestWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001614a9
@property(readonly, nonatomic) _SFWebClipMetadataFetcher *webClipMetadataFetcher;
@property(readonly, nonatomic) _SFInjectedJavaScriptController *activityJSController;
- (void)commitPreviewViewController:(id)arg1;	// IMP=0x000000000016129a
- (id)previewViewControllerForURL:(id)arg1;	// IMP=0x0000000000161264
- (void)linkPreviewHelperWillDisableLinkPreview;	// IMP=0x000000000016121d
- (_Bool)isAutomationEnabledForLinkPreviewHelper:(id)arg1;	// IMP=0x000000000016120a
- (_Bool)isPrivateBrowsingEnabledForPreviewHelper:(id)arg1;	// IMP=0x00000000001611f7
- (void)linkPreviewHelperWillOpenUniveralLinkLocally:(id)arg1;	// IMP=0x00000000001611ea
- (void)linkPreviewHelper:(id)arg1 addURLToReadingList:(id)arg2;	// IMP=0x0000000000160f42
- (void)linkPreviewHelperWillBeginDownload:(id)arg1;	// IMP=0x0000000000160edf
- (void)linkPreviewHelper:(id)arg1 didProduceNavigationIntent:(id)arg2 forAction:(long long)arg3;	// IMP=0x0000000000160d6e
- (void)linkPreviewHelper:(id)arg1 redirectToExternalNavigationResult:(id)arg2;	// IMP=0x0000000000160c9b
- (id)linkPreviewHelper:(id)arg1 resultOfLoadingURL:(id)arg2;	// IMP=0x0000000000160c76
- (_Bool)linkPreviewHelper:(id)arg1 supportsAction:(long long)arg2 forURL:(id)arg3;	// IMP=0x0000000000160bc2
- (void)linkPreviewHelper:(id)arg1 commitPreviewViewControllerForAction:(long long)arg2 withTabOrder:(long long)arg3;	// IMP=0x00000000001608f6
- (id)linkPreviewHelper:(id)arg1 previewViewControllerForURL:(id)arg2;	// IMP=0x000000000016064f
- (void)willDismissLinkPreviewViewController;	// IMP=0x00000000001605dd
- (void)_webView:(id)arg1 contextMenuDidEndForElement:(id)arg2;	// IMP=0x0000000000160590
- (void)_webView:(id)arg1 contextMenuForElement:(id)arg2 willCommitWithAnimator:(id)arg3;	// IMP=0x0000000000160408
- (id)_webView:(id)arg1 contextMenuContentPreviewForElement:(id)arg2;	// IMP=0x00000000001603dc
- (void)_webView:(id)arg1 contextMenuWillPresentForElement:(id)arg2;	// IMP=0x00000000001603c2
- (void)_webView:(id)arg1 contextMenuConfigurationForElement:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000160331
- (_Bool)_webView:(id)arg1 gestureRecognizerCouldPinch:(id)arg2;	// IMP=0x00000000001602a3
- (void)userDeclinedAutomaticStrongPasswordForCurrentDomainOnTabWithUUID:(id)arg1;	// IMP=0x000000000015fc43
- (void)automaticPasswordSheetDismissed;	// IMP=0x000000000015fc2a
- (void)removeAutomaticPasswordButton;	// IMP=0x000000000015fc0c
- (void)_webView:(id)arg1 navigationDidFinishDocumentLoad:(id)arg2;	// IMP=0x000000000015fbeb
- (void)_webView:(id)arg1 navigation:(id)arg2 didFailProvisionalLoadInSubframe:(id)arg3 withError:(id)arg4;	// IMP=0x000000000015fbce
- (void)webView:(id)arg1 didCommitNavigation:(id)arg2;	// IMP=0x000000000015ef10
- (void)panel:(id)arg1 decidePolicyForLocalAuthenticatorWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000015ea4b
- (void)panel:(id)arg1 selectAssertionResponse:(id)arg2 source:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000015e934
- (void)panel:(id)arg1 requestPINWithRemainingRetries:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000015e840
- (void)panel:(id)arg1 dismissWebAuthenticationPanelWithResult:(long long)arg2;	// IMP=0x000000000015e787
- (void)panel:(id)arg1 updateWebAuthenticationPanel:(long long)arg2;	// IMP=0x000000000015e649
- (void)_webView:(id)arg1 runWebAuthenticationPanel:(id)arg2 initiatedByFrame:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000015e52c
- (void)_webView:(id)arg1 decidePolicyForSOAuthorizationLoadWithCurrentPolicy:(long long)arg2 forExtension:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000015e495
- (void)_webView:(id)arg1 contentRuleListWithIdentifier:(id)arg2 performedAction:(id)arg3 forURL:(id)arg4;	// IMP=0x000000000015e28c
- (void)webView:(id)arg1 didFailProvisionalNavigation:(id)arg2 withError:(id)arg3;	// IMP=0x000000000015e042
- (void)webView:(id)arg1 didReceiveServerRedirectForProvisionalNavigation:(id)arg2;	// IMP=0x000000000015e037
- (void)updateMenuButtonShowsBadge;	// IMP=0x000000000015de6a
- (void)validateExtensionToolbarItems;	// IMP=0x000000000015de46
- (void)webView:(id)arg1 didStartProvisionalNavigation:(id)arg2;	// IMP=0x000000000015ce3e
- (void)webView:(id)arg1 decidePolicyForNavigationResponse:(id)arg2 decisionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000015beee
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 preferences:(id)arg3 decisionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000158c1b
@property(readonly, nonatomic) unsigned long long mediaStateIcon;
- (void)toggleMediaStateMuted;	// IMP=0x00000000001587ff
- (void)muteMediaCapture;	// IMP=0x00000000001587b7
@property(readonly, nonatomic) _Bool audioOnly;
@property(readonly, nonatomic) _Bool canOverrideStatusBar;
- (void)statusBarIndicatorTappedWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001585aa
- (id)overrideUndoManagerForSFWebView:(id)arg1;	// IMP=0x00000000001584c5
- (_Bool)sfWebView:(id)arg1 shouldAllowGestureToRecognizeSimultaneoulsyWithTouchEvents:(id)arg2;	// IMP=0x0000000000158410
- (id)sfWebView:(id)arg1 didStartDownload:(id)arg2;	// IMP=0x00000000001582eb
- (void)sfWebViewDidEndFormControlInteraction:(id)arg1;	// IMP=0x00000000001582de
- (void)sfWebViewDidStartFormControlInteraction:(id)arg1;	// IMP=0x00000000001580b0
- (void)sfWebViewDidBecomeFirstResponder:(id)arg1;	// IMP=0x0000000000158096
- (void)sfWebViewDidChangeSafeAreaInsets:(id)arg1;	// IMP=0x0000000000158049
- (id)tabStateDataForQuickUpdate;	// IMP=0x00000000001574d3
@property(readonly, nonatomic) _SFTabStateData *tabStateData;
- (void)invalidateSourceApplication;	// IMP=0x0000000000156fa6
- (void)saveWebArchiveToPath:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000156cfa
@property(readonly, nonatomic) _SFSafariSharingExtensionController *sharingExtensionController;
- (void)loadTestURL:(id)arg1 withCallback:(CDUnknownBlockType)arg2 pagesNeedingMemoryWarningSent:(id)arg3;	// IMP=0x0000000000156af4
- (void)loadTestURL:(id)arg1 withCallback:(CDUnknownBlockType)arg2;	// IMP=0x0000000000156ade
- (id)suggestedFileExtensionForQuickLookDocument:(id)arg1;	// IMP=0x0000000000156ad1
- (id)suggestedFileNameForQuickLookDocument:(id)arg1;	// IMP=0x0000000000156aa8
- (id)dataForQuickLookDocument:(id)arg1;	// IMP=0x0000000000156a7f
- (id)suggestedFilenameForDisplayedPDF;	// IMP=0x0000000000156a66
- (id)dataForDisplayedPDF;	// IMP=0x0000000000156a4d
@property(copy, nonatomic) NSString *customUserAgent;
- (id)_backForwardList;	// IMP=0x0000000000156982
- (void)loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;	// IMP=0x0000000000156968
- (void)performPageLevelAutoFill;	// IMP=0x000000000015694f
- (void)performAutoFillAction;	// IMP=0x0000000000156936
- (void)presentNextDialogIfNeeded;	// IMP=0x0000000000156768
- (void)setAllowsRemoteInspection:(_Bool)arg1;	// IMP=0x000000000015674f
- (_Bool)hasFailedURL;	// IMP=0x0000000000156715
@property(readonly, nonatomic) NSURL *expectedOrCurrentURL;
- (id)committedURL;	// IMP=0x00000000001566e3
- (_Bool)mustShowBarsForBackForwardListItem:(id)arg1;	// IMP=0x0000000000156687
- (void)restoreStateFromTab:(id)arg1;	// IMP=0x00000000001563be
- (void)restoreSessionState:(id)arg1 andNavigate:(_Bool)arg2 fromSafariViewService:(_Bool)arg3;	// IMP=0x00000000001560b8
- (void)restoreSessionState:(id)arg1 andNavigate:(_Bool)arg2;	// IMP=0x00000000001560a2
@property(readonly, nonatomic) _WKSessionState *sessionState;
@property(readonly, nonatomic, getter=isAlive) _Bool alive;
- (void)unhibernate;	// IMP=0x00000000001554d9
- (void)hibernate;	// IMP=0x00000000001552ed
- (void)clearBackForwardList;	// IMP=0x0000000000155295
- (void)clearBackForwardListKeepingCurrentItem;	// IMP=0x000000000015523d
- (void)goToBackForwardListItem:(id)arg1;	// IMP=0x000000000015504a
- (_Bool)isPDFDocument;	// IMP=0x0000000000155031
- (void)stopLoading;	// IMP=0x0000000000154ff5
- (void)stopLoadingUserInitiated;	// IMP=0x0000000000154fc8
- (void)setOverlaidAccessoryViewsInset:(struct CGSize)arg1;	// IMP=0x0000000000154c25
- (id)pdfView;	// IMP=0x0000000000154bec
@property(readonly, nonatomic) NSString *URLString;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000000154335
- (id)_initWithBrowserController:(id)arg1 configuration:(id)arg2;	// IMP=0x00000000001535d7
- (void)doneWaitingToContinueUserActivity;	// IMP=0x00000000001534e5
- (void)didFailToContinueUserActivity;	// IMP=0x00000000001534c9
- (void)prepareToContinueUserActivity;	// IMP=0x000000000015343e
- (void)setClosed:(_Bool)arg1 userDriven:(_Bool)arg2;	// IMP=0x00000000001531c6
- (void)userDidManipulateVisibleRegion;	// IMP=0x000000000015319b
- (void)downloadShouldContinueAfterReceivingResponse:(id)arg1 decisionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000152f03
- (void)downloadDidFinish:(id)arg1;	// IMP=0x0000000000152998
- (void)downloadDidFail:(id)arg1;	// IMP=0x0000000000152933
- (void)animateElementToDownloadsBarItemSoon:(id)arg1;	// IMP=0x000000000015291f
- (void)downloadDidStart:(id)arg1;	// IMP=0x0000000000152821
- (void)showDownload:(id)arg1;	// IMP=0x0000000000151658
- (id)resultOfLoadingURL:(id)arg1;	// IMP=0x00000000001513bc
- (void)loadWindowDotOpenExternalNavigationResult:(id)arg1 fromOriginalRequest:(id)arg2;	// IMP=0x00000000001505c5
@property(readonly, nonatomic) _Bool canGoBackToParentTab;
@property(readonly, nonatomic) _Bool isSecure;
- (id)forwardListMenuWithLimit:(int)arg1;	// IMP=0x000000000014eab5
- (id)backListMenuWithLimit:(int)arg1;	// IMP=0x000000000014e462
- (_Bool)canGoForward;	// IMP=0x000000000014e449
- (_Bool)canGoBack;	// IMP=0x000000000014e430
- (int)readingListBookmarkID;	// IMP=0x000000000014e25e
@property(readonly, nonatomic, getter=isShowingErrorPage) _Bool showingErrorPage;
- (_Bool)shouldActivateReaderWhenAvailable;	// IMP=0x000000000014e1a0
- (_Bool)currentPageLoadedFromReadingList;	// IMP=0x000000000014e188
@property(readonly, nonatomic) NSURL *URLForPerSitePreferences;
@property(readonly, nonatomic) _Bool canChangeSearchFieldPosition;
@property(readonly, nonatomic) _Bool canHideToolbar;
- (void)perSiteSettingsUIPresentSettings;	// IMP=0x000000000014df24
@property(readonly, nonatomic) id <SFReaderContext> readerContext;
@property(readonly, nonatomic) _SFWebView *activeWebView;
@property(readonly, nonatomic) _Bool canShowPageFormatMenu;
- (void)reloadEnablingContentBlockers:(_Bool)arg1;	// IMP=0x000000000014db37
- (void)resetPageZoomSetting;	// IMP=0x000000000014d842
- (void)decreasePageZoomSetting;	// IMP=0x000000000014d58c
- (void)increasePageZoomSetting;	// IMP=0x000000000014d2d6
@property(nonatomic) double pageZoomFactor;
- (void)close;	// IMP=0x000000000014cf31
@property(nonatomic) double zoomFactor;
- (void)reloadFromOriginUserInitiated;	// IMP=0x000000000014cec5
- (void)reloadUserInitiated;	// IMP=0x000000000014ce26
- (void)reloadFromOrigin;	// IMP=0x000000000014ce17
- (void)reload;	// IMP=0x000000000014cda7
- (void)goForwardAllowingNewTabToSpawnIfNeeded:(_Bool)arg1;	// IMP=0x000000000014cb4c
- (void)goForward;	// IMP=0x000000000014cb38
- (void)goBackToParentTab;	// IMP=0x000000000014caeb
- (void)goBackAllowingNewTabToSpawnIfNeeded:(_Bool)arg1;	// IMP=0x000000000014c86b
- (void)goBack;	// IMP=0x000000000014c857
- (void)restoreScrollPositionWithCloudTab:(id)arg1;	// IMP=0x000000000014c786
- (id)loadCloudTab:(id)arg1;	// IMP=0x000000000014c6cf
- (void)loadURLForContinuousReadingList:(id)arg1 fromBookmark:(id)arg2;	// IMP=0x000000000014c6c4
- (void)setNeedsSendTelemetryForProvisionalLoad;	// IMP=0x000000000014c539
- (void)clearPageLoadStatistics;	// IMP=0x000000000014c519
- (void)loadURL:(id)arg1 title:(id)arg2 deferNavigationWhenNotActive:(_Bool)arg3;	// IMP=0x000000000014be08
- (id)loadURL:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x000000000014bd3d
- (void)handleNavigationIntent:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000014b0c3
- (void)dispatchNavigationIntent:(id)arg1;	// IMP=0x000000000014af91
- (void)snapshotWithSize:(struct CGSize)arg1 topBackdropHeight:(double)arg2 options:(unsigned long long)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000014aee9
- (void)snapshotWithSize:(struct CGSize)arg1 options:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000014ae48
- (void)snapshotForWebClipIcon:(CDUnknownBlockType)arg1;	// IMP=0x000000000014ad6e
- (id)loadRequest:(id)arg1 userDriven:(_Bool)arg2;	// IMP=0x0000000000149ede
@property(readonly, nonatomic) NSString *suggestedTitleForCurrentURL;
@property(readonly, nonatomic) NSString *titleForCloudTab;
- (id)titleForSharing;	// IMP=0x0000000000149d8a
- (id)titleForNewBookmark;	// IMP=0x0000000000149d79
@property(readonly, copy, nonatomic) NSString *title;
- (_Bool)hasQuickLookContent;	// IMP=0x0000000000149a16
@property(readonly, nonatomic, getter=isLoading) _Bool loading;
- (void)clearBrowserController;	// IMP=0x00000000001497e8
- (void)clearTabReuseURL;	// IMP=0x00000000001497c8
- (id)URLForStatePersisting;	// IMP=0x0000000000149788
@property(readonly, nonatomic) ActionPanelActivityItemProvider *activityItemProvider;
@property(readonly, nonatomic) NSURL *cachedCanonicalURLOrURLForSharing;
- (void)fetchCanonicalURLWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001493d0
- (id)URLForSharing;	// IMP=0x00000000001492df
- (id)URL;	// IMP=0x00000000001492c6
- (id)customUserVisibleStringForReadingListBookmarkURL:(id)arg1;	// IMP=0x00000000001491b1
- (id)currentFluidProgressStateSource;	// IMP=0x000000000014917d
- (void)fluidProgressRocketAnimationDidComplete;	// IMP=0x000000000014910e
- (void)endSuppressingProgressAnimationAnimated:(_Bool)arg1;	// IMP=0x0000000000149004
- (void)endSuppressingProgressAnimation;	// IMP=0x0000000000148fed
- (void)beginSuppressingProgressAnimation;	// IMP=0x0000000000148eff
- (void)clearFluidProgressState;	// IMP=0x0000000000148ead
- (_Bool)createFluidProgressState;	// IMP=0x0000000000148dd1
- (void)animateProgressForCompletedDocument;	// IMP=0x0000000000148d81
@property(readonly, nonatomic, getter=isContentReady) _Bool contentReady;
@property(readonly, nonatomic) double estimatedProgress;
- (void)didReplaceTabDocument:(id)arg1;	// IMP=0x000000000014845b
- (void)willClose;	// IMP=0x0000000000148025
- (void)_closeTabDocumentAnimated:(_Bool)arg1;	// IMP=0x0000000000147fc9
- (void)stopAdvertisingProactiveActivityContent;	// IMP=0x0000000000147f99
- (void)updateUserActivity;	// IMP=0x0000000000147b04
@property(readonly, nonatomic) _SFWebView *frontWebView;
- (void)setNeedsNewTabSnapshot;	// IMP=0x0000000000147566
- (void)unfreezeAfterNavigationGesture:(_Bool)arg1;	// IMP=0x000000000014754c
- (void)freezeForNavigationGesture;	// IMP=0x0000000000147535
- (void)updateThemeColorAndUnderPageBackground:(_Bool)arg1;	// IMP=0x0000000000146e9e
@property(readonly, nonatomic) UnifiedTabBarItem *currentUnifiedTabBarItem;
@property(readonly, nonatomic) SFNavigationBarItem *navigationBarItem;
- (id)initWithTabGroupTab:(id)arg1 privateBrowsingEnabled:(_Bool)arg2 hibernated:(_Bool)arg3 bookmark:(id)arg4 browserController:(id)arg5;	// IMP=0x0000000000146659
- (id)initWithTabStateData:(id)arg1 hibernated:(_Bool)arg2 browserController:(id)arg3;	// IMP=0x00000000001461d3
- (id)initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(_Bool)arg4 controlledByAutomation:(_Bool)arg5 hibernated:(_Bool)arg6 bookmark:(id)arg7 browserController:(id)arg8 relatedWebView:(id)arg9;	// IMP=0x0000000000145f7b
- (void)removeNavigationObserver:(id)arg1;	// IMP=0x00000000001457c7
- (void)addNavigationObserver:(id)arg1;	// IMP=0x00000000001457ad
- (void)removeRenderingProgressObserver:(id)arg1;	// IMP=0x0000000000145793
- (void)addRenderingProgressObserver:(id)arg1;	// IMP=0x0000000000145779
- (void)setBrowserController:(id)arg1 afterTabGroupReuse:(_Bool)arg2;	// IMP=0x000000000014549e
- (id)openInTabGroupMenuWithNewTabGroupName:(id)arg1 URL:(id)arg2 descendantCount:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000145265
@property(readonly, nonatomic) WBTab *tabGroupTab;
@property(readonly, nonatomic) _Bool shouldPersist;
@property(readonly, nonatomic) NSArray *tabCollectionItems;
- (id)itemForTabCollectionView:(id)arg1;	// IMP=0x0000000000144974
- (void)resetTabViewItems;	// IMP=0x00000000001447a7
- (void)_voiceSearchAvailabilityDidChange:(id)arg1;	// IMP=0x0000000000144727
- (void)_translationAvailabilityDidChange:(id)arg1;	// IMP=0x000000000014458f
- (void)_searchEngineControllerDidFinishPopulating:(id)arg1;	// IMP=0x0000000000143aec
- (void)webView:(id)arg1 shouldLoadIconWithParameters:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000143431
- (void)updateTabIcon;	// IMP=0x0000000000142cbb
- (void)updateUsesDarkTheme;	// IMP=0x0000000000142af6
- (void)updateTabIconWithDelay:(double)arg1;	// IMP=0x000000000014289f
- (void)updateTabTitle;	// IMP=0x0000000000142096
@property(readonly, nonatomic, getter=isControlledByAutomation) _Bool controlledByAutomation;
@property(readonly, nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
- (void)updateAccessibilityIdentifier;	// IMP=0x0000000000141b12
@property(readonly, nonatomic) TabDocumentView *view;
- (void)dealloc;	// IMP=0x00000000001412a9
- (void)setInitialURLForStatePersisting:(id)arg1 title:(id)arg2;	// IMP=0x0000000000141217
@property(readonly, copy) NSString *description;
- (id)initWithTitle:(id)arg1 URL:(id)arg2 UUID:(id)arg3 privateBrowsingEnabled:(_Bool)arg4 hibernated:(_Bool)arg5 bookmark:(id)arg6 browserController:(id)arg7;	// IMP=0x0000000000140f98
- (id)initForBackgroundLoadingWithBrowserController:(id)arg1 relatedWebView:(id)arg2;	// IMP=0x00000000001404d0
- (id)initWithBrowserController:(id)arg1;	// IMP=0x0000000000140418
- (_Bool)_isDeallocating;	// IMP=0x000000000007af49
- (_Bool)_tryRetain;	// IMP=0x000000000007af01
- (unsigned long long)retainCount;	// IMP=0x000000000007aee6
- (oneway void)release;	// IMP=0x000000000007ae16
- (id)retain;	// IMP=0x000000000007adf0

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

