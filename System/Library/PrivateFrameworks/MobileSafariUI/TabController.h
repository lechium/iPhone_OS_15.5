//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MobileSafariUI/SFTabHoverPreviewControllerDelegate-Protocol.h>
#import <MobileSafariUI/TabBarDelegate-Protocol.h>
#import <MobileSafariUI/TabBarManagerObserving-Protocol.h>
#import <MobileSafariUI/TabDocumentDragDropDataSource-Protocol.h>
#import <MobileSafariUI/TabOverviewDelegate-Protocol.h>
#import <MobileSafariUI/TabSnapshotCacheDelegate-Protocol.h>
#import <MobileSafariUI/TiltedTabViewDelegate-Protocol.h>
#import <MobileSafariUI/UITextFieldDelegate-Protocol.h>
#import <MobileSafariUI/WBSTabOrderProvider-Protocol.h>
#import <MobileSafariUI/WBTabGroupManagerObserver-Protocol.h>

@class BrowserController, CKContextCompleter, CloudTabStore, NSArray, NSHashTable, NSMapTable, NSMutableArray, NSSet, NSString, NSTimer, NSUUID, NSUndoManager, TabBar, TabBarManager, TabCloseUndoGroup, TabDocument, TabOverview, TabSnapshotCache, TiltedTabView, UIBarButtonItem, UIMenu, UIView, WBSTabOrderManager, WBTabGroup, WBTabGroupManager, WBWindowState, _SFBrowserSavedState;
@protocol TabCollectionView, TabThumbnailCollectionView, WBSOrderedTab;

@interface TabController : NSObject <TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate, TabBarManagerObserving, UITextFieldDelegate, SFTabHoverPreviewControllerDelegate, WBTabGroupManagerObserver, TabDocumentDragDropDataSource, WBSTabOrderProvider>
{
    BrowserController *_browserController;	// 8 = 0x8
    NSMutableArray *_normalTabDocuments;	// 16 = 0x10
    NSMutableArray *_privateTabDocuments;	// 24 = 0x18
    NSTimer *_saveStateTimer;	// 32 = 0x20
    NSTimer *_stateValidateTimer;	// 40 = 0x28
    TabDocument *_tabDocumentBeingHiddenFromTabView;	// 48 = 0x30
    _Bool _didReadWindowState;	// 56 = 0x38
    WBTabGroupManager *_tabGroupManager;	// 64 = 0x40
    WBTabGroup *_activeTabGroup;	// 72 = 0x48
    UIBarButtonItem *_tiltedTabViewAddTabButton;	// 80 = 0x50
    UIBarButtonItem *_tiltedTabViewPrivateBrowsingButton;	// 88 = 0x58
    NSTimer *_updateContinuityTimer;	// 96 = 0x60
    _Bool _tabBarItemsFixed;	// 104 = 0x68
    _Bool _tabViewItemsFixed;	// 105 = 0x69
    TabSnapshotCache *_snapshotCache;	// 112 = 0x70
    _Bool _flushPendingSnapshots;	// 120 = 0x78
    CDUnknownBlockType _flushPendingSnapshotsCompletion;	// 128 = 0x80
    _Bool _didRestoreCloudTabsForEducationDevice;	// 136 = 0x88
    _Bool _didReceiveFirstCloudTabDeviceUpdateNotification;	// 137 = 0x89
    TabDocument *_tabDocumentBeingDragged;	// 144 = 0x90
    NSArray *_tabDocumentsToKeepVisible;	// 152 = 0x98
    NSMapTable *_uuidToTabDocumentMap;	// 160 = 0xa0
    NSHashTable *_documentObservers;	// 168 = 0xa8
    NSHashTable *_documentObserversToReceiveUpdatesDidEnd;	// 176 = 0xb0
    long long _documentUpdateCount;	// 184 = 0xb8
    NSUUID *_blankDocumentGroupIdentifier;	// 192 = 0xc0
    NSUUID *_privateBlankDocumentGroupIdentifier;	// 200 = 0xc8
    _Bool _switchingActiveDocument;	// 208 = 0xd0
    _Bool _isClosingDocuments;	// 209 = 0xd1
    TabCloseUndoGroup *_undoGroup;	// 216 = 0xd8
    NSString *_lastSearchTerm;	// 224 = 0xe0
    NSArray *_searchTermWords;	// 232 = 0xe8
    unsigned long long _veryRecentlyClosedTabCount;	// 240 = 0xf0
    unsigned long long _tabsClosedWhileTabViewPresentedCount;	// 248 = 0xf8
    NSTimer *_veryRecentlyClosedTabCountInvalidationTimer;	// 256 = 0x100
    TabDocument *_tabShowingPreview;	// 264 = 0x108
    long long _updateTabsSuppressionCount;	// 272 = 0x110
    _Bool _suppressTabBarAnimation;	// 280 = 0x118
    _Bool _suppressSidebarReloadAnimation;	// 281 = 0x119
    NSArray *_tabDocumentsThatShouldSuppressOnCreatedEvents;	// 288 = 0x120
    NSArray *_tabGroupSuggestions;	// 296 = 0x128
    CKContextCompleter *_contextCompleter;	// 304 = 0x130
    _Bool _showsTabGroupNameSuggestions;	// 312 = 0x138
    CDUnknownBlockType _postponedSnapshotInvalidationBlock;	// 320 = 0x140
    CDUnknownBlockType _postponedSnapshotInvalidationCondition;	// 328 = 0x148
    _Bool _snapshotInvalidationIsPostponed;	// 336 = 0x150
    _Bool _snapshotsAreEnabled;	// 337 = 0x151
    _Bool _shouldTogglePrivateBrowsingOnSplit;	// 338 = 0x152
    _Bool _shouldDeferSnapshotRequest;	// 339 = 0x153
    WBWindowState *_windowState;	// 344 = 0x158
    TabDocument *_privateActiveTabDocument;	// 352 = 0x160
    TabDocument *_normalActiveTabDocument;	// 360 = 0x168
    _SFBrowserSavedState *_savedState;	// 368 = 0x170
    long long _privateBrowsingMode;	// 376 = 0x178
    WBSTabOrderManager *_tabOrderManager;	// 384 = 0x180
    TabBar *_tabBar;	// 392 = 0x188
    TabBarManager *_tabBarManager;	// 400 = 0x190
    TiltedTabView *_tiltedTabView;	// 408 = 0x198
    long long _tabThumbnailCollectionViewStyle;	// 416 = 0x1a0
    long long _tabDisplayMode;	// 424 = 0x1a8
    NSUndoManager *_undoManager;	// 432 = 0x1b0
    TabOverview *_tabOverview;	// 440 = 0x1b8
}

- (void).cxx_destruct;	// IMP=0x000000000013477c
@property(readonly, retain, nonatomic) TabOverview *tabOverview; // @synthesize tabOverview=_tabOverview;
@property(readonly, nonatomic) NSUndoManager *undoManager; // @synthesize undoManager=_undoManager;
@property(nonatomic) _Bool shouldTogglePrivateBrowsingOnSplit; // @synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit;
@property(nonatomic) long long tabDisplayMode; // @synthesize tabDisplayMode=_tabDisplayMode;
@property(nonatomic) _Bool snapshotsAreEnabled; // @synthesize snapshotsAreEnabled=_snapshotsAreEnabled;
@property(copy, nonatomic) CDUnknownBlockType postponedSnapshotInvalidationCondition; // @synthesize postponedSnapshotInvalidationCondition=_postponedSnapshotInvalidationCondition;
@property(nonatomic) _Bool snapshotInvalidationIsPostponed; // @synthesize snapshotInvalidationIsPostponed=_snapshotInvalidationIsPostponed;
@property(nonatomic) long long tabThumbnailCollectionViewStyle; // @synthesize tabThumbnailCollectionViewStyle=_tabThumbnailCollectionViewStyle;
@property(readonly, retain, nonatomic) TiltedTabView *tiltedTabView; // @synthesize tiltedTabView=_tiltedTabView;
@property(nonatomic) __weak TabBarManager *tabBarManager; // @synthesize tabBarManager=_tabBarManager;
@property(nonatomic) __weak TabBar *tabBar; // @synthesize tabBar=_tabBar;
@property(readonly, nonatomic) WBSTabOrderManager *tabOrderManager; // @synthesize tabOrderManager=_tabOrderManager;
@property(nonatomic) long long privateBrowsingMode; // @synthesize privateBrowsingMode=_privateBrowsingMode;
@property(retain, nonatomic) _SFBrowserSavedState *savedState; // @synthesize savedState=_savedState;
@property(retain, nonatomic) TabDocument *normalActiveTabDocument; // @synthesize normalActiveTabDocument=_normalActiveTabDocument;
@property(retain, nonatomic) TabDocument *privateActiveTabDocument; // @synthesize privateActiveTabDocument=_privateActiveTabDocument;
@property(retain, nonatomic) WBWindowState *windowState; // @synthesize windowState=_windowState;
@property(retain, nonatomic) WBTabGroup *activeTabGroup; // @synthesize activeTabGroup=_activeTabGroup;
@property(readonly, copy, nonatomic) NSArray *privateTabDocuments; // @synthesize privateTabDocuments=_privateTabDocuments;
@property(readonly, copy, nonatomic) NSArray *tabDocuments; // @synthesize tabDocuments=_normalTabDocuments;
- (void)_redoCloseTabsWithUUIDs:(id)arg1;	// IMP=0x0000000000134553
- (void)_undoCloseTabs:(id)arg1;	// IMP=0x000000000013419e
- (void)registerUndoWithType:(long long)arg1 actions:(CDUnknownBlockType)arg2;	// IMP=0x0000000000133ec0
- (void)registerUndoWithName:(id)arg1 actions:(CDUnknownBlockType)arg2;	// IMP=0x0000000000133da0
- (void)tabBarManager:(id)arg1 didCreateTabBar:(id)arg2;	// IMP=0x0000000000133d1e
- (void)makeActiveTabDocumentActive;	// IMP=0x0000000000133b85
- (void)textFieldDidEndEditing:(id)arg1;	// IMP=0x0000000000133a17
- (void)textFieldDidBeginEditing:(id)arg1;	// IMP=0x0000000000133887
- (void)tabGroupManager:(id)arg1 didRemoveTabGroup:(id)arg2;	// IMP=0x0000000000133834
- (void)tabGroupManager:(id)arg1 didUpdateTab:(id)arg2 userDriven:(_Bool)arg3;	// IMP=0x00000000001334f3
- (void)tabGroupManager:(id)arg1 didUpdateTabsInTabGroup:(id)arg2;	// IMP=0x0000000000132db5
- (void)tabGroupManagerDidUpdateTabGroups:(id)arg1;	// IMP=0x0000000000132d02
- (void)tabGroupManager:(id)arg1 didUpdateTabGroup:(id)arg2;	// IMP=0x0000000000132cb3
- (void)tabGroupManagerDidFinishSetup:(id)arg1;	// IMP=0x0000000000132c19
- (id)browserControllerContainingLocalTabGroupUUID:(id)arg1;	// IMP=0x00000000001329a7
- (void)openURL:(id)arg1 inTabGroup:(id)arg2;	// IMP=0x00000000001327b5
- (void)openBookmark:(id)arg1 inTabGroup:(id)arg2;	// IMP=0x00000000001324d8
- (void)removeSingleBlankTabFromActiveTabGroup;	// IMP=0x0000000000132322
- (void)removeSingleBlankTabFromInactiveTabGroup:(id)arg1;	// IMP=0x0000000000132249
- (id)tabGroupsMenuElementsWithOptions:(unsigned long long)arg1 newTabGroupName:(id)arg2 hostTitle:(id)arg3 descendantCount:(long long)arg4 isMoveAction:(_Bool)arg5 actionHandler:(CDUnknownBlockType)arg6;	// IMP=0x0000000000131272
- (void)moveTabGroup:(id)arg1 beforeOrAfterTabGroup:(id)arg2;	// IMP=0x0000000000130af9
- (void)moveTabDocument:(id)arg1 toTabGroup:(id)arg2;	// IMP=0x0000000000130598
- (void)renameTabGroup:(id)arg1;	// IMP=0x000000000013058e
- (void)createNewTabGroup;	// IMP=0x0000000000130578
- (void)closeTabGroup:(id)arg1;	// IMP=0x00000000001304f8
- (void)evictTabDocument:(id)arg1;	// IMP=0x00000000001304c5
- (_Bool)switchToTabWithUUID:(id)arg1 inTabGroupWithUUID:(id)arg2;	// IMP=0x00000000001301e8
- (void)switchOutOfSyncedTabGroup;	// IMP=0x0000000000130175
- (id)openInTabGroupMenuWithNewTabGroupName:(id)arg1 URL:(id)arg2 descendantCount:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x000000000012fef6
- (id)contextMenuConfigurationForTabGroup:(id)arg1 forPickerSheet:(_Bool)arg2;	// IMP=0x000000000012f863
- (id)menuForTabGroup:(id)arg1 forPickerSheet:(_Bool)arg2 forEditMode:(_Bool)arg3;	// IMP=0x000000000012e50b
- (id)swipeActionsConfigurationForTabGroup:(id)arg1 forPickerSheet:(_Bool)arg2;	// IMP=0x000000000012da61
- (id)imageForTabGroup:(id)arg1;	// IMP=0x000000000012d96c
- (id)existingPersistedTitleForTabDocument:(id)arg1;	// IMP=0x000000000012d721
@property(readonly, nonatomic) NSSet *nonActiveTabGroups;
@property(readonly, nonatomic) NSArray *syncedTabGroups;
@property(readonly, nonatomic) NSArray *localTabGroups;
@property(readonly, nonatomic) NSArray *tabGroups;
@property(readonly, nonatomic) NSString *activeLibraryType;
@property(readonly, nonatomic) NSString *moveLocalTabsToNewGroupTitle;
@property(readonly, nonatomic) _Bool createTabGroupAlertIsPresented;
@property(nonatomic) _Bool tabGroupOverviewIsPresented;
- (void)tabGroupNamingTextDidChange:(id)arg1;	// IMP=0x000000000012c094
- (id)addNewTabGroupWithTitle:(id)arg1 fromExistingTabs:(_Bool)arg2;	// IMP=0x000000000012b483
- (void)presentAlertToCreateTabGroupFromExistingTabs:(_Bool)arg1 withTitle:(id)arg2 withMessage:(id)arg3 withSuggestedName:(id)arg4 okActionTitle:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x000000000012b096
- (void)openTabDocumentForLibraryType:(id)arg1;	// IMP=0x000000000012a416
- (void)updateSelectedTabGroupName;	// IMP=0x000000000012a281
- (void)updateActiveTab;	// IMP=0x000000000012a0db
- (void)selectNextTabGroup;	// IMP=0x000000000012a0af
- (void)selectPreviousTabGroup;	// IMP=0x0000000000129f76
@property(readonly, nonatomic) UIMenu *newTabGroupMenu;
@property(readonly, nonatomic) UIMenu *tabExposeMenu;
@property(readonly, nonatomic) _Bool canCreateTabGroupFromCurrentTabs;
- (id)tabGroupsMenuForTabGroupButton:(_Bool)arg1;	// IMP=0x00000000001295db
- (void)createTabGroupFromExistingTabs:(_Bool)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000128cfd
@property(readonly, nonatomic) _Bool canRenameActiveTabGroup;
- (id)tabGroupWithUUID:(id)arg1;	// IMP=0x0000000000128581
- (unsigned long long)indexForTab:(id)arg1;	// IMP=0x000000000012844e
@property(readonly, nonatomic) unsigned long long numberOfTabs;
@property(readonly, nonatomic) id <WBSOrderedTab> selectedTabForTabOrderProvider;
- (id)originatingTabForTab:(id)arg1;	// IMP=0x0000000000128309
- (id)tabAtIndex:(unsigned long long)arg1;	// IMP=0x00000000001282aa
@property(readonly, nonatomic) unsigned long long indexOfSelectedTab;
- (void)didTransitionTabView;	// IMP=0x0000000000128237
- (void)willTransitionTabView;	// IMP=0x0000000000128101
@property(readonly, nonatomic) NSArray *tabDocumentsMatchingSearchTerm;
- (void)_updateUserActivityTimerFired;	// IMP=0x0000000000127fac
- (void)saveTabDocumentUserActivitySoon:(id)arg1;	// IMP=0x0000000000127f14
- (unsigned long long)capacityForTabSnapshotCache:(id)arg1;	// IMP=0x0000000000127eb8
- (id)snapshotsToPresistOnDiskForTabSnapshotCache:(id)arg1;	// IMP=0x0000000000127a3b
- (_Bool)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1;	// IMP=0x0000000000127a2f
- (_Bool)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2;	// IMP=0x00000000001277a2
- (void)tabSnapshotCacheDidFinishUpdating:(id)arg1;	// IMP=0x000000000012774c
- (void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2;	// IMP=0x000000000012773d
- (void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2;	// IMP=0x0000000000127299
- (void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000127004
- (void)requestSnapshotForTabDocument:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000126cee
- (id)cachedContentImageForTabDocument:(id)arg1;	// IMP=0x0000000000126ce2
- (void)flushPendingSnapshotsWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000126b2b
- (void)removeSnapshotForDocument:(id)arg1;	// IMP=0x0000000000126aca
- (void)invalidateSnapshotForTabDocument:(id)arg1;	// IMP=0x0000000000126738
@property(readonly, nonatomic, getter=isShowingTabView) _Bool showingTabView;
@property(readonly, nonatomic) _Bool usesTabOverview;
- (_Bool)tabItem:(id)arg1 matchesSearchText:(id)arg2;	// IMP=0x0000000000125074
- (_Bool)tabOverviewShouldReserveSpaceForSidebarButton:(id)arg1;	// IMP=0x0000000000124ff6
- (void)tabOverview:(id)arg1 closeItems:(id)arg2;	// IMP=0x0000000000124e66
- (void)tabOverview:(id)arg1 willInteractivelyCloseItem:(id)arg2;	// IMP=0x0000000000124dc3
- (void)tabOverviewWillUpdateInteractivePresentation:(id)arg1;	// IMP=0x0000000000124d92
- (void)tabOverviewDidChangeAllowsInteractivePresentation:(id)arg1;	// IMP=0x0000000000124d61
- (id)itemsToKeepVisibleForTabOverview:(id)arg1;	// IMP=0x0000000000124d0e
- (id)currentItemForTabOverview:(id)arg1;	// IMP=0x0000000000124cbe
- (void)tabCollectionViewDidCancelDismissal:(id)arg1;	// IMP=0x0000000000124c77
- (void)tiltedTabViewDidEndSearching:(id)arg1;	// IMP=0x0000000000124b8f
- (void)tiltedTabViewWillBeginSearching:(id)arg1;	// IMP=0x0000000000124aac
- (struct CGSize)suggestedSnapshotSizeForTiltedTabView:(id)arg1;	// IMP=0x00000000001249dc
- (void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(_Bool)arg3;	// IMP=0x000000000012498a
- (id)expectedSuperviewForTiltedTabView:(id)arg1;	// IMP=0x0000000000124919
- (id)itemsToKeepVisibleForTiltedTabView:(id)arg1;	// IMP=0x00000000001248e4
- (id)currentItemForTiltedTabView:(id)arg1;	// IMP=0x0000000000124894
- (id)undoManagerForTabCollectionView:(id)arg1;	// IMP=0x0000000000124883
- (_Bool)tabCollectionView:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;	// IMP=0x000000000012486b
- (_Bool)tabCollectionView:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;	// IMP=0x00000000001247cc
- (void)tabCollectionView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;	// IMP=0x0000000000124746
- (void)tabCollectionView:(id)arg1 relinquishBorrowedContentView:(id)arg2 forItem:(id)arg3;	// IMP=0x0000000000124699
- (id)tabCollectionView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id *)arg3 ofHeight:(double)arg4;	// IMP=0x00000000001245c3
- (struct UIEdgeInsets)effectiveSafeAreaInsetsForTabCollectionView:(id)arg1;	// IMP=0x0000000000124521
- (double)tabCollectionViewItemHeaderHeight:(id)arg1;	// IMP=0x0000000000124464
- (void)tabCollectionViewDidUpdateItemVisibilityOrder:(id)arg1;	// IMP=0x000000000012445a
- (id)tabCollectionView:(id)arg1 snapshotForItem:(id)arg2;	// IMP=0x00000000001243f7
- (_Bool)tabCollectionView:(id)arg1 validSnapshotExistsForItem:(id)arg2;	// IMP=0x00000000001243a0
- (void)tabCollectionViewEndIgnoringUserInteraction:(id)arg1 reason:(id)arg2;	// IMP=0x0000000000124346
- (void)tabCollectionViewBeginIgnoringUserInteraction:(id)arg1 reason:(id)arg2;	// IMP=0x00000000001242ec
- (void)tabCollectionViewDidDismiss:(id)arg1;	// IMP=0x0000000000124243
- (void)tabCollectionViewWillDismiss:(id)arg1;	// IMP=0x00000000001241e1
- (void)tabCollectionViewDidPresent:(id)arg1;	// IMP=0x0000000000124187
- (void)updateSnapshotCacheAndSnapshotActiveTab;	// IMP=0x0000000000124053
- (void)tabCollectionViewWillPresent:(id)arg1;	// IMP=0x0000000000123fd9
- (void)tabCollectionView:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;	// IMP=0x0000000000123f31
- (void)tabCollectionView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;	// IMP=0x0000000000123e0a
- (void)tabCollectionView:(id)arg1 closeItem:(id)arg2;	// IMP=0x0000000000123c32
- (_Bool)tabCollectionView:(id)arg1 canCloseItem:(id)arg2;	// IMP=0x000000000012392a
- (void)tabCollectionView:(id)arg1 didSelectItem:(id)arg2;	// IMP=0x000000000012354f
@property(readonly, nonatomic) UIView<TabThumbnailCollectionView> *tabThumbnailCollectionView;
- (void)_dismissTabView;	// IMP=0x0000000000122fc8
- (void)didEndTrackingSession:(id)arg1;	// IMP=0x0000000000122f6e
- (void)didBeginTrackingSession:(id)arg1;	// IMP=0x0000000000122f0c
- (void)tabDocumentDidUpdateUUID:(id)arg1 previousUUID:(id)arg2;	// IMP=0x0000000000122e78
- (void)willLoseOwnershipOfTabDocument:(id)arg1;	// IMP=0x0000000000122e25
- (void)didGainOwnershipOfTabDocument:(id)arg1;	// IMP=0x0000000000122db5
- (id)tabDocumentWithUUID:(id)arg1;	// IMP=0x0000000000122d9c
- (void)unhideTabDocuments:(id)arg1;	// IMP=0x0000000000122d3d
- (void)hideTabDocuments:(id)arg1;	// IMP=0x0000000000122b7c
- (id)replacePlaceholderTabDocument:(id)arg1 withTabDocuments:(id)arg2 transitionToDragStateWithBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000000001221a7
@property(readonly, nonatomic) UIView<TabCollectionView> *tabCollectionView;
- (id)restoreRecentlyClosedTabDocumentWithTabStateData:(id)arg1;	// IMP=0x000000000012201d
- (void)updateTiltedTabViewToolbarItems:(_Bool)arg1;	// IMP=0x0000000000121fd2
@property(readonly, nonatomic) NSArray *tiltedTabViewToolbarItems;
- (void)updateEducationTabsLastSyncDate;	// IMP=0x00000000001217ef
- (void)restoreEducationDeviceTabs;	// IMP=0x00000000001217e3
- (void)_cloudTabsDidUpdate:(id)arg1;	// IMP=0x000000000012167a
@property(readonly, nonatomic) _Bool usesTiltedTabView;
- (void)updateTabViewsAnimatingTabBar:(_Bool)arg1;	// IMP=0x00000000001214c4
- (void)updateTabBarAnimated:(_Bool)arg1;	// IMP=0x000000000012141d
- (void)insertTabDocumentFromTabStateData:(id)arg1;	// IMP=0x0000000000120f38
- (void)adoptTabsFromTabController:(id)arg1;	// IMP=0x0000000000120aa2
- (id)insertPlaceholderTabDocumentAfterDocument:(id)arg1;	// IMP=0x00000000001208ce
- (void)tabHoverPreviewControllerNeedsSnapshotUpdate:(id)arg1;	// IMP=0x00000000001208bc
- (void)tabHoverPreviewControllerDismissPreview:(id)arg1;	// IMP=0x000000000012081a
- (void)tabHoverPreviewController:(id)arg1 showPreviewForItem:(id)arg2;	// IMP=0x0000000000120164
- (void)updateSnapshotsForTabHoverPreviewIfNeeded;	// IMP=0x0000000000120040
- (void)tabBar:(id)arg1 toggleMediaStateMutedForItem:(id)arg2;	// IMP=0x000000000011ffce
- (_Bool)tabBar:(id)arg1 canMoveItem:(id)arg2;	// IMP=0x000000000011ffc6
@property(readonly, nonatomic) _Bool hasTabBar;
- (void)setPrivateBrowsingMode:(long long)arg1 animated:(_Bool)arg2;	// IMP=0x000000000011ee18
@property(nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
@property(readonly, nonatomic, getter=isControlledByAutomation) _Bool controlledByAutomation;
- (void)clearBrowserController;	// IMP=0x000000000011eb78
- (void)dealloc;	// IMP=0x000000000011ead5
@property(readonly, nonatomic) CloudTabStore *cloudTabStore;
- (void)_didReceiveMemoryWarning:(id)arg1;	// IMP=0x000000000011e5b6
- (void)removeSnapshotCacheObserver:(id)arg1;	// IMP=0x000000000011e5a0
- (void)addSnapshotCacheObserver:(id)arg1;	// IMP=0x000000000011e58a
- (id)initWithBrowserController:(id)arg1;	// IMP=0x000000000011e11e
- (void)openInitialBlankTabDocumentIfNeeded;	// IMP=0x000000000011dd63
- (void)updateTabGroupTabWithTabDocument:(id)arg1 notify:(_Bool)arg2;	// IMP=0x000000000011dcdb
- (void)updateTabGroupTabWithTabDocument:(id)arg1;	// IMP=0x000000000011dcc4
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2;	// IMP=0x000000000011d8fd
- (void)sortTabsWithMode:(long long)arg1;	// IMP=0x000000000011d58c
- (id)duplicateTabDocument:(id)arg1;	// IMP=0x000000000011d430
- (id)tabDocumentWithIDForWebExtensions:(double)arg1;	// IMP=0x000000000011d341
@property(readonly, nonatomic) TabDocument *hiddenPrivateTabDocumentWhenShowingPrivateBrowsingExplanationText;
@property(readonly, nonatomic) TabDocument *tabDocumentForSpotlightSearch;
- (id)tabDocumentForURL:(id)arg1;	// IMP=0x000000000011cc96
- (void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2;	// IMP=0x000000000011c9e1
- (void)closeTabDocuments:(id)arg1 animated:(_Bool)arg2;	// IMP=0x000000000011c9c5
- (void)closeTabDocuments:(id)arg1;	// IMP=0x000000000011c9ae
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 temporarily:(_Bool)arg2;	// IMP=0x000000000011c829
- (void)closeAllOpenTabsAnimated:(_Bool)arg1;	// IMP=0x000000000011c815
- (void)closeOtherTabs;	// IMP=0x000000000011c593
- (void)closeTab;	// IMP=0x000000000011c542
- (void)closeTabDocuments:(id)arg1 animated:(_Bool)arg2 allowAddingToRecentlyClosedTabs:(_Bool)arg3 showAutoCloseTabsAlert:(_Bool)arg4;	// IMP=0x000000000011c281
- (void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2;	// IMP=0x000000000011a2d2
- (void)closeTabDocument:(id)arg1 animated:(_Bool)arg2;	// IMP=0x000000000011a2ae
- (void)openNewTabWithOptions:(long long)arg1 libraryType:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000119b47
- (void)openNewTabWithOptions:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000119b30
@property(readonly, nonatomic) long long visibleTabCollectionViewType;
- (void)_newTabFromTabViewButton;	// IMP=0x00000000001199b0
- (id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(_Bool)arg1;	// IMP=0x0000000000119875
- (id)blankTabDocumentToReuseAllowingReorder:(_Bool)arg1;	// IMP=0x000000000011973a
- (id)blankTabDocumentToReuse;	// IMP=0x0000000000119726
- (void)insertNewBlankTabDocumentAnimated:(_Bool)arg1;	// IMP=0x00000000001196ef
- (void)insertNewTabDocumentWithDefaultOrdering:(id)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;	// IMP=0x0000000000119251
- (void)insertNewTabDocument:(id)arg1 forcingOrderAfterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;	// IMP=0x000000000011914b
- (void)insertTabDocuments:(id)arg1 beforeTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;	// IMP=0x0000000000118eb5
- (void)insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;	// IMP=0x0000000000118d76
- (void)performBatchUpdatesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000117f65
- (_Bool)canAddNewTabForPrivateBrowsing:(_Bool)arg1;	// IMP=0x00000000001174e5
@property(readonly, nonatomic) _Bool canAddNewTabForCurrentBrowsingMode;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2 deferActivation:(_Bool)arg3;	// IMP=0x00000000001169da
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2;	// IMP=0x00000000001169c5
@property(retain, nonatomic) TabDocument *activeTabDocument;
@property(readonly, nonatomic) _Bool canCloseOtherTabs;
@property(readonly, nonatomic) _Bool canCloseTab;
@property(nonatomic) _Bool tabViewDefersActivation;
@property(readonly, nonatomic) TabDocument *tabDocumentBeingActivated;
@property(readonly, nonatomic) _Bool hasTabsThatShouldBeObscuredForDigitalHealth;
- (void)deactivateAllUsageTrackingInformationIfNecessary;	// IMP=0x00000000001163a6
- (void)updateUsageTrackingInformationIfNecessary;	// IMP=0x0000000000116239
- (void)logTabActivationInterval:(double)arg1 forActivationType:(long long)arg2;	// IMP=0x0000000000115e31
- (void)updateHibernatedTabDocumentsSavingState;	// IMP=0x0000000000115d9d
- (void)updateLocalTabGroupTitle;	// IMP=0x0000000000115c84
- (void)updateTabCount;	// IMP=0x0000000000115a94
- (void)removeDocumentObserver:(id)arg1;	// IMP=0x000000000011573e
- (void)addDocumentObserver:(id)arg1;	// IMP=0x0000000000115725
@property(readonly, copy, nonatomic) NSSet *allSnapshotIdentifiers;
@property(readonly, copy, nonatomic) NSArray *allTabDocuments;
@property(readonly, copy, nonatomic) NSArray *currentTabDocuments;
@property(readonly, nonatomic) unsigned long long numberOfCurrentNonHiddenTabs;
- (id)_currentTabs;	// IMP=0x000000000011533a
- (void)_cancelVeryRecentlyClosedTabCountInvalidationTimer;	// IMP=0x0000000000115283
- (void)closeTabsAutomaticallyIfNecessary;	// IMP=0x0000000000114d30
@property(readonly, nonatomic) _Bool updatingTabGroupTabs;
- (void)_validateSavedState:(id)arg1;	// IMP=0x000000000013f8fb
- (void)_saveStateFromTimer:(id)arg1;	// IMP=0x000000000013f8e8

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

