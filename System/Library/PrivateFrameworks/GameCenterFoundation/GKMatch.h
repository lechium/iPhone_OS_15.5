//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <GameCenterFoundation/GKSessionDelegate-Protocol.h>
#import <GameCenterFoundation/GKSessionPrivateDelegate-Protocol.h>

@class GKConnection, GKSession, GKThreadsafeDictionary, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString;
@protocol GKMatchDelegate, GKMatchDelegatePrivate, OS_dispatch_queue;

@interface GKMatch : NSObject <GKSessionDelegate, GKSessionPrivateDelegate>
{
    unsigned char _version;	// 8 = 0x8
    _Bool _needHostScore;	// 9 = 0x9
    _Bool _hostScoreForQuery;	// 10 = 0xa
    _Bool _recentlyBecameActive;	// 11 = 0xb
    _Bool _fastStartStateActive;	// 12 = 0xc
    unsigned int _packetSequenceNumber;	// 16 = 0x10
    GKThreadsafeDictionary *_playersByIdentifier;	// 24 = 0x18
    NSMutableSet *_connectedPlayerIDs;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_stateChangeQueue;	// 40 = 0x28
    id <GKMatchDelegate> _delegate;	// 48 = 0x30
    GKSession *_session;	// 56 = 0x38
    GKConnection *_connection;	// 64 = 0x40
    unsigned long long _expectedPlayerCount;	// 72 = 0x48
    NSMutableDictionary *_guestConnections;	// 80 = 0x50
    NSMutableDictionary *_guestSessions;	// 88 = 0x58
    NSMutableDictionary *_playerEventQueues;	// 96 = 0x60
    NSMutableArray *_reinvitedPlayers;	// 104 = 0x68
    NSData *_selfBlob;	// 112 = 0x70
    id <GKMatchDelegatePrivate> _inviteDelegateWeak;	// 120 = 0x78
    NSMutableDictionary *_playerPushTokens;	// 128 = 0x80
    NSMutableArray *_opponentIDs;	// 136 = 0x88
    NSString *_rematchID;	// 144 = 0x90
    long long _rematchCount;	// 152 = 0x98
    NSDictionary *_networkStatistics;	// 160 = 0xa0
    NSMutableDictionary *_hostScores;	// 168 = 0xa8
    CDUnknownBlockType _chooseHostCompletion;	// 176 = 0xb0
    NSString *_groupIdentifier;	// 184 = 0xb8
    NSMutableDictionary *_playersByJoinType;	// 192 = 0xc0
}

- (void).cxx_destruct;	// IMP=0x00000000000760a0
@property(retain, nonatomic) NSMutableDictionary *playersByJoinType; // @synthesize playersByJoinType=_playersByJoinType;
@property(retain, nonatomic) NSString *groupIdentifier; // @synthesize groupIdentifier=_groupIdentifier;
@property(nonatomic) _Bool fastStartStateActive; // @synthesize fastStartStateActive=_fastStartStateActive;
@property(nonatomic) _Bool recentlyBecameActive; // @synthesize recentlyBecameActive=_recentlyBecameActive;
@property(copy, nonatomic) CDUnknownBlockType chooseHostCompletion; // @synthesize chooseHostCompletion=_chooseHostCompletion;
@property(nonatomic) _Bool hostScoreForQuery; // @synthesize hostScoreForQuery=_hostScoreForQuery;
@property(nonatomic) _Bool needHostScore; // @synthesize needHostScore=_needHostScore;
@property(retain, nonatomic) NSMutableDictionary *hostScores; // @synthesize hostScores=_hostScores;
@property(retain, nonatomic) NSDictionary *networkStatistics; // @synthesize networkStatistics=_networkStatistics;
@property(nonatomic) long long rematchCount; // @synthesize rematchCount=_rematchCount;
@property(retain, nonatomic) NSString *rematchID; // @synthesize rematchID=_rematchID;
@property(retain, nonatomic) NSMutableArray *opponentIDs; // @synthesize opponentIDs=_opponentIDs;
@property(retain, nonatomic) NSMutableDictionary *playerPushTokens; // @synthesize playerPushTokens=_playerPushTokens;
@property(nonatomic) unsigned int packetSequenceNumber; // @synthesize packetSequenceNumber=_packetSequenceNumber;
@property(nonatomic) __weak id <GKMatchDelegatePrivate> inviteDelegate; // @synthesize inviteDelegate=_inviteDelegateWeak;
@property(nonatomic) unsigned char version; // @synthesize version=_version;
@property(retain, nonatomic) NSData *selfBlob; // @synthesize selfBlob=_selfBlob;
@property(retain, nonatomic) NSMutableArray *reinvitedPlayers; // @synthesize reinvitedPlayers=_reinvitedPlayers;
@property(retain, nonatomic) NSMutableDictionary *playerEventQueues; // @synthesize playerEventQueues=_playerEventQueues;
@property(retain, nonatomic) NSMutableDictionary *guestSessions; // @synthesize guestSessions=_guestSessions;
@property(retain, nonatomic) NSMutableDictionary *guestConnections; // @synthesize guestConnections=_guestConnections;
@property(readonly, nonatomic) unsigned long long expectedPlayerCount; // @synthesize expectedPlayerCount=_expectedPlayerCount;
@property(retain, nonatomic) GKConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) GKSession *session; // @synthesize session=_session;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *stateChangeQueue; // @synthesize stateChangeQueue=_stateChangeQueue;
@property(retain, nonatomic) NSMutableSet *connectedPlayerIDs; // @synthesize connectedPlayerIDs=_connectedPlayerIDs;
@property(retain, nonatomic) GKThreadsafeDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
- (id)dataFromBase64String:(id)arg1;	// IMP=0x0000000000075daf
- (void)session:(id)arg1 updateRelay:(id)arg2 forPeer:(id)arg3;	// IMP=0x0000000000075bf5
- (void)session:(id)arg1 initiateRelay:(id)arg2 forPeer:(id)arg3;	// IMP=0x0000000000075804
- (_Bool)shouldStartRelay:(id)arg1;	// IMP=0x000000000007545d
- (void)preemptRelay:(id)arg1;	// IMP=0x00000000000751ed
- (void)initRelayResponse:(id)arg1 player:(id)arg2;	// IMP=0x0000000000074f62
- (void)acceptRelayResponse:(id)arg1 player:(id)arg2;	// IMP=0x0000000000074cb4
- (void)updateRelayConnectionForPlayer:(id)arg1;	// IMP=0x000000000007409d
- (void)initRelayConnectionForPlayer:(id)arg1;	// IMP=0x0000000000073345
- (void)updateRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;	// IMP=0x0000000000072b91
- (void)initRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;	// IMP=0x0000000000072527
- (void)requestRelayUpdateForPlayer:(id)arg1;	// IMP=0x0000000000071511
- (void)requestRelayInitForPlayer:(id)arg1;	// IMP=0x00000000000706e0
- (void)updateRelayInfo:(id)arg1 forPlayer:(id)arg2;	// IMP=0x000000000006ffb3
- (void)initRelayInfoFromPush:(id)arg1 forPlayer:(id)arg2;	// IMP=0x000000000006f85d
- (void)initRelayInfoFromServerResponse:(id)arg1 forPlayer:(id)arg2;	// IMP=0x000000000006f1c2
- (void)relayPush:(id)arg1;	// IMP=0x000000000006df1a
- (void)relayPushNotification:(id)arg1;	// IMP=0x000000000006decb
- (void)session:(id)arg1 networkStatisticsChanged:(id)arg2;	// IMP=0x000000000006de50
- (void)receiveData:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void *)arg4;	// IMP=0x000000000006d183
- (id)playerForSession:(id)arg1;	// IMP=0x000000000006cf4e
- (void)session:(id)arg1 didFailWithError:(id)arg2;	// IMP=0x000000000006cb1a
- (void)session:(id)arg1 connectionWithPeerFailed:(id)arg2 withError:(id)arg3;	// IMP=0x000000000006c788
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;	// IMP=0x000000000006a0e3
- (void)addPlayerToGroup:(id)arg1;	// IMP=0x00000000000693d8
- (id)stringForGKPeerConnectionState:(int)arg1;	// IMP=0x0000000000069195
- (id)stringForGKPlayerConnectionState:(long long)arg1;	// IMP=0x0000000000068f81
- (void)sendHostScoreAsQuery:(_Bool)arg1;	// IMP=0x0000000000068d27
- (void)calculateHostScore;	// IMP=0x0000000000068227
- (_Bool)selectHostIfRequestedAndAllScored;	// IMP=0x0000000000067dd6
- (_Bool)haveAllHostScores;	// IMP=0x0000000000067cc3
- (void)addHostScore:(int)arg1 forPlayer:(id)arg2;	// IMP=0x0000000000067b42
- (void)receivedChooseHostData:(id)arg1 fromPlayer:(id)arg2;	// IMP=0x0000000000067981
- (void)chooseBestHostingPlayerWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000676c2
- (void)chooseBestHostPlayerWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000067561
- (void)rematchWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000674e5
- (void)conditionallyRelaunchPlayer:(id)arg1;	// IMP=0x0000000000067021
- (void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2;	// IMP=0x00000000000663dd
- (void)reinviteeDeclinedNotification:(id)arg1;	// IMP=0x0000000000065f68
- (void)reinviteeAcceptedNotification:(id)arg1;	// IMP=0x0000000000065a06
- (void)sendConnectingStateCallbackToDelegate:(id)arg1 forPlayers:(id)arg2;	// IMP=0x000000000006562e
- (id)connectedPlayers;	// IMP=0x000000000006533f
- (void)sendStateCallbackToDelegate:(id)arg1 forPlayer:(id)arg2 state:(long long)arg3;	// IMP=0x0000000000064c81
- (void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2;	// IMP=0x00000000000648f9
- (void)updateStateForPlayer:(id)arg1 state:(long long)arg2;	// IMP=0x0000000000063ff0
- (void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2;	// IMP=0x0000000000063b04
- (void)sendQueuedPacketsForPlayer:(id)arg1;	// IMP=0x00000000000635b8
- (void)sendQueuedStatesAndPackets;	// IMP=0x000000000006305a
- (void)sendData:(id)arg1 forRecipient:(id)arg2 fromPlayer:(id)arg3;	// IMP=0x0000000000062ba6
- (void)_delegate:(id)arg1 didReceiveData:(id)arg2 forRecipient:(id)arg3 fromPlayer:(id)arg4;	// IMP=0x00000000000626f8
- (void)queueData:(id)arg1 withEventQueueForPlayer:(id)arg2 forRecipient:(id)arg3;	// IMP=0x0000000000062583
- (id)peerFromPlayer:(id)arg1;	// IMP=0x000000000006213a
- (id)playerFromPeer:(id)arg1;	// IMP=0x0000000000061de0
- (void)addPlayers:(id)arg1;	// IMP=0x0000000000061a98
- (id)voiceChatWithName:(id)arg1;	// IMP=0x0000000000061976
- (void)putMultiplayerGroup;	// IMP=0x0000000000061167
- (void)clearSession;	// IMP=0x0000000000060eee
- (void)disconnect;	// IMP=0x0000000000060cbc
- (void)disconnectGuestSessions;	// IMP=0x000000000006095e
- (void)sendVersionData:(unsigned char)arg1 toPeer:(id)arg2;	// IMP=0x0000000000060878
- (void)sendVersionData:(unsigned char)arg1;	// IMP=0x0000000000060684
- (_Bool)sendInviteData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000605d7
- (void)receivedPlayerSyncData:(id)arg1;	// IMP=0x000000000005fd27
- (void)syncPlayers:(id)arg1 forJoinType:(int)arg2 toInvitees:(id)arg3;	// IMP=0x000000000005f56e
- (_Bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id *)arg3;	// IMP=0x000000000005f4c6
- (_Bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id *)arg4;	// IMP=0x000000000005f2c7
- (_Bool)sendData:(id)arg1 toPlayers:(id)arg2 dataMode:(long long)arg3 error:(id *)arg4;	// IMP=0x000000000005eeb0
- (id)packet:(unsigned char)arg1 data:(id)arg2;	// IMP=0x000000000005ed89
- (void)inviteeComboMatched:(long long)arg1;	// IMP=0x000000000005e9dd
- (void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2;	// IMP=0x000000000005dc98
- (void)connectToGuestPlayer:(id)arg1 withHostPlayer:(id)arg2;	// IMP=0x000000000005d1ff
- (void)connectToPlayers:(id)arg1 withPeerDictionaries:(id)arg2 version:(unsigned char)arg3 sessionToken:(id)arg4 cdxTicket:(id)arg5;	// IMP=0x000000000005bff6
- (void)updateJoinedPlayer:(id)arg1 joinType:(int)arg2;	// IMP=0x000000000005baba
- (void)updateRematchID;	// IMP=0x000000000005b4f0
- (void)preLoadInviter:(id)arg1 sessionToken:(id)arg2;	// IMP=0x000000000005b187
- (void)withEventQueueForPlayer:(id)arg1 create:(CDUnknownBlockType)arg2 perform:(CDUnknownBlockType)arg3;	// IMP=0x000000000005aae2
- (void)withEventQueueForPlayer:(id)arg1 createIfNeeded:(_Bool)arg2 perform:(CDUnknownBlockType)arg3;	// IMP=0x000000000005aab8
- (void)withEventQueueForPlayer:(id)arg1 perform:(CDUnknownBlockType)arg2;	// IMP=0x000000000005aaa1
- (id)nearbyConnectionData;	// IMP=0x000000000005a8f2
- (void)getLocalConnectionDataWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000005a580
- (void)localPlayerDidChange:(id)arg1;	// IMP=0x000000000005a164
- (void)dealloc;	// IMP=0x000000000005a0a1
- (void)applicationWillEnterForeground:(id)arg1;	// IMP=0x000000000005a000
- (void)applicationWillTerminateNotification:(id)arg1;	// IMP=0x0000000000059e41
- (id)init;	// IMP=0x0000000000059a55
@property(nonatomic) __weak id <GKMatchDelegate> delegate; // @synthesize delegate=_delegate;
- (_Bool)connected:(id)arg1;	// IMP=0x000000000005954a
- (id)allIDs;	// IMP=0x0000000000059321
- (id)playerIDs;	// IMP=0x0000000000058fe9
- (id)guestPlayers;	// IMP=0x0000000000058d7a
@property(readonly, nonatomic) NSArray *players;
@property(readonly, copy) NSString *description;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

