//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class TRIActivationEventDatabase, TRIClient, TRIContentTracker, TRIDatabase, TRIExperimentDatabase, TRIExperimentHistoryDatabase, TRIKVStore, TRILimitedCarryProfileManager, TRIMLRuntimeEvaluationHistoryDatabase, TRINamespaceDatabase, TRIRolloutDatabase, TRISQLiteCKDatabase, TRISQLiteCKDatabaseFailureInjectionDelegate, TRITaskDatabase;
@protocol TRIPaths, TRIPushServiceConnectionMultiplexing, TRITaskQueuing, TRIXPCActivityManagementProtocol;

@interface TRIServerContext : NSObject
{
    _Bool _useCKNative;	// 8 = 0x8
    id <TRIPaths> _paths;	// 16 = 0x10
    TRIExperimentDatabase *_experimentDatabase;	// 24 = 0x18
    TRIActivationEventDatabase *_activationEventDatabase;	// 32 = 0x20
    TRIExperimentHistoryDatabase *_experimentHistoryDatabase;	// 40 = 0x28
    TRINamespaceDatabase *_namespaceDatabase;	// 48 = 0x30
    TRIRolloutDatabase *_rolloutDatabase;	// 56 = 0x38
    TRIMLRuntimeEvaluationHistoryDatabase *_evaluationHistoryDatabase;	// 64 = 0x40
    TRITaskDatabase *_taskDatabase;	// 72 = 0x48
    TRIClient *_client;	// 80 = 0x50
    TRIKVStore *_keyValueStore;	// 88 = 0x58
    TRIContentTracker *_contentTracker;	// 96 = 0x60
    TRISQLiteCKDatabase *_fakeCKDatabase;	// 104 = 0x68
    TRISQLiteCKDatabaseFailureInjectionDelegate *_failureInjectionDelegate;	// 112 = 0x70
    TRILimitedCarryProfileManager *_limitedCarryManager;	// 120 = 0x78
    id <TRIXPCActivityManagementProtocol> _xpcActivityManager;	// 128 = 0x80
    TRIDatabase *_underlyingDatabase;	// 136 = 0x88
    id <TRITaskQueuing> _taskQueue;	// 144 = 0x90
    id <TRIPushServiceConnectionMultiplexing> _pushServiceMuxer;	// 152 = 0x98
}

- (void).cxx_destruct;	// IMP=0x000000000008d550
@property(retain, nonatomic) id <TRIPushServiceConnectionMultiplexing> pushServiceMuxer; // @synthesize pushServiceMuxer=_pushServiceMuxer;
@property(retain, nonatomic) id <TRITaskQueuing> taskQueue; // @synthesize taskQueue=_taskQueue;
@property(readonly, nonatomic) TRIDatabase *underlyingDatabase; // @synthesize underlyingDatabase=_underlyingDatabase;
@property(nonatomic) _Bool useCKNative; // @synthesize useCKNative=_useCKNative;
@property(readonly, nonatomic) __weak id <TRIXPCActivityManagementProtocol> xpcActivityManager; // @synthesize xpcActivityManager=_xpcActivityManager;
@property(retain, nonatomic) TRILimitedCarryProfileManager *limitedCarryManager; // @synthesize limitedCarryManager=_limitedCarryManager;
@property(retain, nonatomic) TRISQLiteCKDatabaseFailureInjectionDelegate *failureInjectionDelegate; // @synthesize failureInjectionDelegate=_failureInjectionDelegate;
@property(retain) TRISQLiteCKDatabase *fakeCKDatabase; // @synthesize fakeCKDatabase=_fakeCKDatabase;
@property(readonly, nonatomic) TRIContentTracker *contentTracker; // @synthesize contentTracker=_contentTracker;
@property(readonly, nonatomic) TRIKVStore *keyValueStore; // @synthesize keyValueStore=_keyValueStore;
@property(readonly, nonatomic) TRIClient *client; // @synthesize client=_client;
@property(readonly, nonatomic) TRITaskDatabase *taskDatabase; // @synthesize taskDatabase=_taskDatabase;
@property(readonly, nonatomic) TRIMLRuntimeEvaluationHistoryDatabase *evaluationHistoryDatabase; // @synthesize evaluationHistoryDatabase=_evaluationHistoryDatabase;
@property(readonly, nonatomic) TRIRolloutDatabase *rolloutDatabase; // @synthesize rolloutDatabase=_rolloutDatabase;
@property(readonly, nonatomic) TRINamespaceDatabase *namespaceDatabase; // @synthesize namespaceDatabase=_namespaceDatabase;
@property(readonly, nonatomic) TRIExperimentHistoryDatabase *experimentHistoryDatabase; // @synthesize experimentHistoryDatabase=_experimentHistoryDatabase;
@property(readonly, nonatomic) TRIActivationEventDatabase *activationEventDatabase; // @synthesize activationEventDatabase=_activationEventDatabase;
@property(readonly, nonatomic) TRIExperimentDatabase *experimentDatabase; // @synthesize experimentDatabase=_experimentDatabase;
@property(readonly, nonatomic) id <TRIPaths> paths; // @synthesize paths=_paths;
- (id)ensureFakeCKDatabase;	// IMP=0x000000000008d1b6
- (void)setXpcActivityManager:(id)arg1;	// IMP=0x000000000008d07d
- (id)initWithPaths:(id)arg1 client:(id)arg2 storageManagement:(id)arg3 xpcActivityManagement:(id)arg4;	// IMP=0x000000000008cb79
- (id)initWithPaths:(id)arg1 client:(id)arg2 storageManagement:(id)arg3;	// IMP=0x000000000008cb64
- (void)_logInitErrorWithClient:(id)arg1 message:(id)arg2;	// IMP=0x000000000008caab
- (void)logErrorMetric:(id)arg1;	// IMP=0x000000000008c962
- (id)init;	// IMP=0x000000000008c95c

@end

