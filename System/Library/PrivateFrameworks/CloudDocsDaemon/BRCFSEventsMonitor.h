//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CloudDocsDaemon/BRCModule-Protocol.h>
#import <CloudDocsDaemon/BRCSuspendable-Protocol.h>

@class BRCAccountSession, BRCFSEventsPersistedState, BRCFairSource, BRCRelativePath, BRCVolume, NSMutableArray, NSString, PQLConnection;
@protocol BRCFSEventsDelegate, OS_dispatch_queue, OS_dispatch_semaphore, OS_dispatch_source;

@interface BRCFSEventsMonitor : NSObject <BRCModule, BRCSuspendable>
{
    BRCAccountSession *_session;	// 8 = 0x8
    NSString *_name;	// 16 = 0x10
    _Atomic int _suspendCount;	// 24 = 0x18
    _Atomic int _resetCount;	// 28 = 0x1c
    BRCFSEventsPersistedState *_persistedState;	// 32 = 0x20
    NSString *_devicePath;	// 40 = 0x28
    NSObject<OS_dispatch_source> *_rootVnodeWatcher;	// 48 = 0x30
    struct __FSEventStream *_stream;	// 56 = 0x38
    NSObject<OS_dispatch_queue> *_streamQueue;	// 64 = 0x40
    NSObject<OS_dispatch_source> *_historicalEventSource;	// 72 = 0x48
    NSObject<OS_dispatch_queue> *_processQueue;	// 80 = 0x50
    BRCFairSource *_fseventsProcessSource;	// 88 = 0x58
    NSMutableArray *_fseventsToProcess;	// 96 = 0x60
    unsigned long long _maxFSEventQueueSize;	// 104 = 0x68
    unsigned long long _fseventProcessBatchSize;	// 112 = 0x70
    _Bool _hasMarkSelf;	// 120 = 0x78
    BRCFSEventsPersistedState *_rendezVous;	// 128 = 0x80
    NSObject<OS_dispatch_semaphore> *_semaphore;	// 136 = 0x88
    _Bool _drainEvents;	// 144 = 0x90
    BRCVolume *_volume;	// 152 = 0x98
    _Bool _isCancelled;	// 160 = 0xa0
    BRCRelativePath *_root;	// 168 = 0xa8
    id <BRCFSEventsDelegate> _delegate;	// 176 = 0xb0
    PQLConnection *_db;	// 184 = 0xb8
}

- (void).cxx_destruct;	// IMP=0x00000000002b4fe5
@property(retain, nonatomic, setter=setDB:) PQLConnection *db; // @synthesize db=_db;
@property __weak id <BRCFSEventsDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) BRCRelativePath *root; // @synthesize root=_root;
@property(readonly, nonatomic) _Bool isCancelled; // @synthesize isCancelled=_isCancelled;
- (void)cancel;	// IMP=0x00000000002b4ed1
- (void)_cancel;	// IMP=0x00000000002b4e55
- (void)resume;	// IMP=0x00000000002b4cc2
- (void)suspend;	// IMP=0x00000000002b4beb
- (void)resetWithReason:(id)arg1 dropFSEventID:(_Bool)arg2;	// IMP=0x00000000002b47d6
- (void)resetWithReason:(id)arg1;	// IMP=0x00000000002b47bf
- (void)close;	// IMP=0x00000000002b4584
- (void)_close;	// IMP=0x00000000002b444a
- (void)flushStream;	// IMP=0x00000000002b4433
- (void)stopWatcher;	// IMP=0x00000000002b43cf
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x00000000002b42b3
- (id)initWithAccountSession:(id)arg1 name:(id)arg2;	// IMP=0x00000000002b3f48
- (id)initWithAccountSession:(id)arg1;	// IMP=0x00000000002b3f34
- (void)fseventOnRootWithEventID:(unsigned long long)arg1 andReason:(id)arg2;	// IMP=0x00000000002b3dae
- (void)fseventAtPath:(id)arg1 withFlags:(unsigned int)arg2 andID:(unsigned long long)arg3 eventIndex:(unsigned int)arg4 eventCount:(unsigned int)arg5 initialScan:(_Bool)arg6;	// IMP=0x00000000002b2c9e
- (void)processFseventBatch;	// IMP=0x00000000002b277f
- (void)queueEvents:(id)arg1 markSelfEncountered:(_Bool)arg2;	// IMP=0x00000000002b24b8
- (_Bool)_queueEvents:(id)arg1 markSelfEncountered:(_Bool)arg2;	// IMP=0x00000000002b1e06
- (void)_updatePersistedStateWithState:(id)arg1;	// IMP=0x00000000002b1d53
- (void)didProcessEventID:(unsigned long long)arg1;	// IMP=0x00000000002b1bb6
- (void)signalAfterCurrentFSEvent:(id)arg1;	// IMP=0x00000000002b181c
- (_Bool)openWithRoot:(id)arg1 isImmutableRoot:(_Bool)arg2 volume:(id)arg3 error:(id *)arg4;	// IMP=0x00000000002b1657
- (_Bool)openWithRoot:(id)arg1 volume:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002b163a
- (_Bool)setUpStreamSynchronously:(_Bool)arg1 reason:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002b06dd
- (_Bool)setUpRoot:(id)arg1 isImmutableRoot:(_Bool)arg2 volume:(id)arg3 error:(id *)arg4;	// IMP=0x00000000002afe1f
@property(readonly, nonatomic) _Bool volumeIsCaseSensitive;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

