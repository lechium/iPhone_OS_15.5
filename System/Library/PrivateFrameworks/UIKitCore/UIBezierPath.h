//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <UIKitCore/NSCopying-Protocol.h>
#import <UIKitCore/NSSecureCoding-Protocol.h>

@interface UIBezierPath : NSObject <NSCopying, NSSecureCoding>
{
    struct CGPath *_path;	// 8 = 0x8
    double *_lineDashPattern;	// 16 = 0x10
    unsigned long long _lineDashPatternCount;	// 24 = 0x18
    double _lineWidth;	// 32 = 0x20
    double _miterLimit;	// 40 = 0x28
    double _flatness;	// 48 = 0x30
    double _lineDashPhase;	// 56 = 0x38
    int _lineCapStyle;	// 64 = 0x40
    int _lineJoinStyle;	// 68 = 0x44
    _Bool _usesEvenOddFillRule;	// 72 = 0x48
    struct CGPath *_immutablePath;	// 80 = 0x50
    _Bool _immutablePathIsValid;	// 88 = 0x58
    _Bool _isRoundedRect;	// 89 = 0x59
    double _cornerRadius;	// 96 = 0x60
    _Bool _hasContinuousCorners;	// 104 = 0x68
    unsigned long long _cornerMask;	// 112 = 0x70
}

+ (id)_continuousRoundedRectBezierPath:(struct CGRect)arg1 withRoundedCorners:(unsigned long long)arg2 cornerRadii:(id)arg3 segments:(int)arg4 smoothPillShapes:(_Bool)arg5;	// IMP=0x00000000007f43e0
+ (id)_continuousRoundedRectBezierPath:(struct CGRect)arg1 withRoundedCorners:(unsigned long long)arg2 cornerRadius:(struct CGSize)arg3 segments:(int)arg4;	// IMP=0x00000000007f42ed
+ (id)_bezierPathWithPillRect:(struct CGRect)arg1 cornerRadius:(double)arg2;	// IMP=0x00000000007f41f8
+ (id)_roundedRectBezierPath:(struct CGRect)arg1 withRoundedCorners:(unsigned long long)arg2 cornerRadius:(double)arg3 segments:(int)arg4 legacyCorners:(_Bool)arg5;	// IMP=0x00000000007f3bab
+ (id)_roundedRectBezierPath:(struct CGRect)arg1 withRoundedCorners:(unsigned long long)arg2 cornerRadius:(double)arg3 segments:(int)arg4;	// IMP=0x00000000007f3b96
+ (id)roundedRectBezierPath:(struct CGRect)arg1 withRoundedCorners:(unsigned long long)arg2 withCornerRadii:(id)arg3;	// IMP=0x00000000007f3b74
+ (id)roundedRectBezierPath:(struct CGRect)arg1 withRoundedCorners:(unsigned long long)arg2 withCornerRadius:(double)arg3;	// IMP=0x00000000007f3b62
+ (id)roundedRectBezierPath:(struct CGRect)arg1 withRoundedEdges:(unsigned long long)arg2;	// IMP=0x00000000007f3af6
+ (id)_bezierPathWithRoundedRect:(struct CGRect)arg1 byRoundingCorners:(unsigned long long)arg2 cornerRadius:(double)arg3;	// IMP=0x00000000007f265f
+ (id)roundedRectBezierPath:(struct CGRect)arg1 withTopCornerRadius:(double)arg2 withBottomCornerRadius:(double)arg3;	// IMP=0x00000000007f2565
+ (id)bezierPathWithCGPath:(struct CGPath *)arg1;	// IMP=0x00000000007f1ae8
+ (id)bezierPathWithArcCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;	// IMP=0x00000000007f1a54
+ (id)bezierPathWithRoundedRect:(struct CGRect)arg1 byRoundingCorners:(unsigned long long)arg2 cornerRadii:(struct CGSize)arg3;	// IMP=0x00000000007f1a42
+ (id)_bezierPathWithArcRoundedRect:(struct CGRect)arg1 cornerRadius:(double)arg2;	// IMP=0x00000000007f1a1e
+ (id)bezierPathWithRoundedRect:(struct CGRect)arg1 cornerRadius:(double)arg2;	// IMP=0x00000000007f1a05
+ (id)bezierPathWithOvalInRect:(struct CGRect)arg1;	// IMP=0x00000000007f191b
+ (id)bezierPathWithRect:(struct CGRect)arg1;	// IMP=0x00000000007f18b0
+ (id)bezierPath;	// IMP=0x00000000007f186c
+ (_Bool)supportsSecureCoding;	// IMP=0x00000000007f0fa9
+ (id)shadowBezierPath:(struct CGRect)arg1 withRoundedEdges:(unsigned long long)arg2;	// IMP=0x00000000008cc63d
@property(nonatomic) _Bool usesEvenOddFillRule; // @synthesize usesEvenOddFillRule=_usesEvenOddFillRule;
@property(nonatomic) double flatness; // @synthesize flatness=_flatness;
@property(nonatomic) double miterLimit; // @synthesize miterLimit=_miterLimit;
@property(nonatomic) int lineJoinStyle; // @synthesize lineJoinStyle=_lineJoinStyle;
@property(nonatomic) int lineCapStyle; // @synthesize lineCapStyle=_lineCapStyle;
@property(nonatomic) double lineWidth; // @synthesize lineWidth=_lineWidth;
- (unsigned long long)_cornerMask;	// IMP=0x00000000007f51fd
- (_Bool)_hasContinuousCorners;	// IMP=0x00000000007f51f4
- (double)_cornerRadius;	// IMP=0x00000000007f51e9
- (_Bool)_isRoundedRect;	// IMP=0x00000000007f51e0
- (id)_bezierPathConvertedFromCoordinateSpace:(id)arg1 toCoordinateSpace:(id)arg2;	// IMP=0x00000000007f4f19
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;	// IMP=0x00000000007f3ac6
- (void)appendBezierPathWithOvalInRect:(struct CGRect)arg1 transform:(struct CGAffineTransform)arg2;	// IMP=0x00000000007f3a85
- (void)appendBezierPathWithOvalInRect:(struct CGRect)arg1;	// IMP=0x00000000007f3a47
- (void)appendBezierPathWithRect:(struct CGRect)arg1;	// IMP=0x00000000007f3a09
- (void)appendBezierPath:(id)arg1;	// IMP=0x00000000007f39be
- (void)clip;	// IMP=0x00000000007f39ac
- (void)lineToPoint:(struct CGPoint)arg1;	// IMP=0x00000000007f399a
- (struct CGPath *)_pathRef;	// IMP=0x00000000007f3990
- (id)_objcCodeDescription;	// IMP=0x00000000007f3500
- (id)description;	// IMP=0x00000000007f3105
- (void)_addRoundedCornerWithTrueCorner:(struct CGPoint)arg1 radius:(struct CGSize)arg2 corner:(unsigned long long)arg3 clockwise:(_Bool)arg4 leadInIsContinuous:(_Bool)arg5 leadOutIsContinuous:(_Bool)arg6;	// IMP=0x00000000007f308e
- (void)_addRoundedCornerWithTrueCorner:(struct CGPoint)arg1 radius:(struct CGSize)arg2 corner:(unsigned long long)arg3 clockwise:(_Bool)arg4;	// IMP=0x00000000007f2ab0
- (struct CGPath *)_createMutablePathByDecodingData:(id)arg1;	// IMP=0x00000000007f2679
- (struct CGPath *)_mutablePath;	// IMP=0x00000000007f255b
- (void)addClip;	// IMP=0x00000000007f250c
- (void)strokeWithBlendMode:(int)arg1 alpha:(double)arg2;	// IMP=0x00000000007f243a
- (void)fillWithBlendMode:(int)arg1 alpha:(double)arg2;	// IMP=0x00000000007f23a6
- (void)stroke;	// IMP=0x00000000007f22fd
- (void)fill;	// IMP=0x00000000007f2292
- (void)getLineDash:(double *)arg1 count:(long long *)arg2 phase:(double *)arg3;	// IMP=0x00000000007f2246
- (void)setLineDash:(const double *)arg1 count:(long long)arg2 phase:(double)arg3;	// IMP=0x00000000007f21c0
- (_Bool)containsPoint:(struct CGPoint)arg1;	// IMP=0x00000000007f21a9
@property(readonly, nonatomic) struct CGPoint currentPoint;
@property(readonly, nonatomic) struct CGRect bounds;
@property(readonly, getter=isEmpty) _Bool empty;
@property(nonatomic) const struct CGPath *CGPath;
- (id)bezierPathByReversingPath;	// IMP=0x00000000007f1d22
- (void)_invalidatePathMetadata;	// IMP=0x00000000007f1d08
- (void)removeAllPoints;	// IMP=0x00000000007f1cd7
- (void)closePath;	// IMP=0x00000000007f1cba
- (void)applyTransform:(struct CGAffineTransform)arg1;	// IMP=0x00000000007f1c76
- (void)appendPath:(id)arg1;	// IMP=0x00000000007f1c2b
- (void)addArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;	// IMP=0x00000000007f1c06
- (void)addQuadCurveToPoint:(struct CGPoint)arg1 controlPoint:(struct CGPoint)arg2;	// IMP=0x00000000007f1bd5
- (void)addCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x00000000007f1b9e
- (void)addLineToPoint:(struct CGPoint)arg1;	// IMP=0x00000000007f1b7f
- (void)moveToPoint:(struct CGPoint)arg1;	// IMP=0x00000000007f1b60
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000007f168d
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000007f1598
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000007f1297
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000007f0fb1
- (void)dealloc;	// IMP=0x00000000007f0f4e
- (id)_initWithCGMutablePath:(struct CGPath *)arg1;	// IMP=0x00000000007f0ed4
- (id)init;	// IMP=0x00000000007f0e34

@end

