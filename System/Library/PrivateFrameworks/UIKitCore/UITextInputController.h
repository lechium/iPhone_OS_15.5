//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <UIKitCore/UIResponderStandardEditActions-Protocol.h>
#import <UIKitCore/UITextInput-Protocol.h>
#import <UIKitCore/UITextInputAdditions-Protocol.h>
#import <UIKitCore/UITextInputPrivate-Protocol.h>
#import <UIKitCore/UITextInput_Internal-Protocol.h>

@class NSArray, NSAttributedString, NSDictionary, NSHashTable, NSIndexSet, NSLayoutManager, NSSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIKeyboardCameraSession, UIResponder, UITextChecker, UITextCheckingController, UITextInputPasswordRules, UITextInputTraits, UITextInteractionAssistant, UITextPlaceholder, UITextPosition, UITextRange, UIView, _UISupplementalLexicon, _UITextInputControllerTokenizer, _UITextLayoutController, _UITextServiceSession, _UITextUndoManager, _UITextUndoOperationTyping;
@protocol UITextInput, UITextInputControllerDelegate, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface UITextInputController : NSObject <UITextInput_Internal, UITextInput, UITextInputAdditions, UIResponderStandardEditActions, UITextInputPrivate>
{
    id <UITextInputDelegate> _inputDelegate;	// 8 = 0x8
    UITextRange *_selectedTextRange;	// 16 = 0x10
    _UITextInputControllerTokenizer *_tokenizer;	// 24 = 0x18
    NSLayoutManager *_layoutManager;	// 32 = 0x20
    NSHashTable *_observedScrollViews;	// 40 = 0x28
    _UITextServiceSession *_learnSession;	// 48 = 0x30
    _UITextServiceSession *_shareSession;	// 56 = 0x38
    _UITextServiceSession *_lookupSession;	// 64 = 0x40
    _UITextServiceSession *_translateSession;	// 72 = 0x48
    UIKeyboardCameraSession *_keyboardCameraSession;	// 80 = 0x50
    UITextInputTraits *_textInputTraits;	// 88 = 0x58
    struct _NSRange _markedTextRange;	// 96 = 0x60
    struct _NSRange _markedTextSelection;	// 112 = 0x70
    NSDictionary *_markedTextStyle;	// 128 = 0x80
    NSAttributedString *_markedText;	// 136 = 0x88
    struct {
        unsigned int delegateRespondsToTextInputShouldBeginEditing:1;
        unsigned int delegateRespondsToTextInputShouldChangeCharactersInRangeReplacementText:1;
        unsigned int delegateRespondsToTextInputDidChange:1;
        unsigned int delegateRespondsToTextInputDidChangeSelection:1;
        unsigned int delegateRespondsToTextInputWillChangeSelectionFromCharacterRangeToCharacterRange:1;
        unsigned int delegateRespondsToTextInputEditorDidChangeSelection:1;
        unsigned int delegateRespondsToTextInputPrepareAttributedTextForInsertion:1;
        unsigned int delegateRespondsToTextInputShouldExtendCaretHeight:1;
        unsigned int delegateRespondsToIsSingleLine:1;
        unsigned int textOrSelectionChangeOriginatesWithKeyboard:1;
        unsigned int showingTextStyleOptions:1;
        unsigned int undoRedoInProgress:1;
        unsigned int textOrSelectionChangeOriginatesWithMarkedText:1;
        unsigned int nextSelectionChangeMustUpdate:1;
        unsigned int hasTextAlternatives:1;
        unsigned int hasDictationResultMetadata:1;
        unsigned int suppressDelegateChangeNotifications:1;
    } _tiFlags;	// 144 = 0x90
    NSArray *_extraItemsBeforeTextStyleOptions;	// 152 = 0x98
    UIView<UITextInput> *_firstTextView;	// 160 = 0xa0
    _UITextUndoManager *_undoManager;	// 168 = 0xa8
    _UITextUndoOperationTyping *_undoOperationForCoalescing;	// 176 = 0xb0
    UITextChecker *_textChecker;	// 184 = 0xb8
    UITextCheckingController *_textCheckingController;	// 192 = 0xc0
    NSSet *_whitelistedTypingAttributes;	// 200 = 0xc8
    unsigned long long _dontRemoveAllActionsCount;	// 208 = 0xd0
    UITextPlaceholder *_textPlaceholder;	// 216 = 0xd8
    _Bool _allowsEditingTextAttributes;	// 224 = 0xe0
    _Bool _continuousSpellCheckingEnabled;	// 225 = 0xe1
    _Bool _shouldStartUndoGroup;	// 226 = 0xe2
    int _currentUndoGroupType;	// 228 = 0xe4
    NSDictionary *_emptyStringAttributes;	// 232 = 0xe8
    _UITextLayoutController *_textLayoutController;	// 240 = 0xf0
    NSDictionary *_typingAttributes;	// 248 = 0xf8
    id <UITextInputControllerDelegate> _delegate;	// 256 = 0x100
    UITextRange *_previousSelectedTextRange;	// 264 = 0x108
}

+ (_Bool)_shouldUseStandardTextScaling:(id)arg1;	// IMP=0x0000000001098fd3
- (void).cxx_destruct;	// IMP=0x000000000109e52b
@property(nonatomic) _Bool shouldStartUndoGroup; // @synthesize shouldStartUndoGroup=_shouldStartUndoGroup;
@property(nonatomic) int currentUndoGroupType; // @synthesize currentUndoGroupType=_currentUndoGroupType;
@property(retain, nonatomic) UITextRange *previousSelectedTextRange; // @synthesize previousSelectedTextRange=_previousSelectedTextRange;
@property(nonatomic) _Bool continuousSpellCheckingEnabled; // @synthesize continuousSpellCheckingEnabled=_continuousSpellCheckingEnabled;
@property(nonatomic) __weak id <UITextInputControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy, nonatomic) NSDictionary *typingAttributes; // @synthesize typingAttributes=_typingAttributes;
@property(nonatomic) _Bool allowsEditingTextAttributes; // @synthesize allowsEditingTextAttributes=_allowsEditingTextAttributes;
@property(readonly, nonatomic) __weak _UITextLayoutController *textLayoutController; // @synthesize textLayoutController=_textLayoutController;
@property(copy, nonatomic, getter=_emptyStringAttributes, setter=_setEmptyStringAttributes:) NSDictionary *emptyStringAttributes; // @synthesize emptyStringAttributes=_emptyStringAttributes;
- (void)captureTextFromCamera:(id)arg1;	// IMP=0x000000000109e2ef
- (void)removeAnnotation:(id)arg1 forRange:(id)arg2;	// IMP=0x000000000109e16d
- (void)replaceRange:(id)arg1 withAnnotatedString:(id)arg2 relativeReplacementRange:(struct _NSRange)arg3;	// IMP=0x000000000109da6b
- (id)annotatedSubstringForRange:(id)arg1;	// IMP=0x000000000109d9fe
- (id)validAnnotations;	// IMP=0x000000000109d9e5
- (id)methodSignatureForSelector:(SEL)arg1;	// IMP=0x000000000109d984
- (_Bool)respondsToSelector:(SEL)arg1;	// IMP=0x000000000109d929
- (void)forwardInvocation:(id)arg1;	// IMP=0x000000000109d884
- (id)_textInputTraits;	// IMP=0x000000000109d876
- (void)_resetShowingTextStyle:(id)arg1;	// IMP=0x000000000109d7a4
- (void)_showTextStyleOptions:(id)arg1;	// IMP=0x000000000109d4b9
- (void)validateCommand:(id)arg1;	// IMP=0x000000000109cf78
- (void)_validateCommand:(id)arg1 forFont:(id)arg2 traits:(int)arg3;	// IMP=0x000000000109ce03
- (void)alignRight:(id)arg1;	// IMP=0x000000000109cd83
- (void)alignJustified:(id)arg1;	// IMP=0x000000000109cd03
- (void)alignCenter:(id)arg1;	// IMP=0x000000000109cc83
- (void)alignLeft:(id)arg1;	// IMP=0x000000000109cc06
- (void)_changeTextAlignment:(long long)arg1 undoString:(id)arg2;	// IMP=0x000000000109c7f6
- (void)toggleUnderline:(id)arg1;	// IMP=0x000000000109c5ac
- (void)toggleItalics:(id)arg1;	// IMP=0x000000000109c4ca
- (void)toggleBoldface:(id)arg1;	// IMP=0x000000000109c3e8
- (void)_toggleFontTrait:(unsigned int)arg1;	// IMP=0x000000000109bff7
- (void)_addShortcut:(id)arg1;	// IMP=0x000000000109bdbd
- (void)_clearSelectionUI;	// IMP=0x000000000109bd29
- (_Bool)_isDisplayingShareViewController;	// IMP=0x000000000109bd13
- (_Bool)_isDisplayingLookupViewController;	// IMP=0x000000000109bcfd
- (_Bool)_isDisplayingReferenceLibraryViewController;	// IMP=0x000000000109bce7
- (_Bool)_isDisplayingShortcutViewController;	// IMP=0x000000000109bcd1
- (_Bool)_isDisplayingTextService;	// IMP=0x000000000109bc70
- (void)_translate:(id)arg1;	// IMP=0x000000000109ba8a
- (void)_define:(id)arg1;	// IMP=0x000000000109b8a4
- (void)_removeShortcutController;	// IMP=0x000000000109b889
- (void)_share:(id)arg1;	// IMP=0x000000000109b73f
- (void)_removeShareController;	// IMP=0x000000000109b724
- (void)_transliterateChinese:(id)arg1;	// IMP=0x000000000109b6e7
- (void)_promptForReplace:(id)arg1;	// IMP=0x000000000109b6aa
- (void)selectAll:(id)arg1;	// IMP=0x000000000109b638
- (void)select:(id)arg1;	// IMP=0x000000000109b5fb
- (void)updateTextAttributesWithConversionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000109b36c
- (void)decreaseSize:(id)arg1;	// IMP=0x000000000109af73
- (void)increaseSize:(id)arg1;	// IMP=0x000000000109ab8a
- (void)_pasteRawAttributedString:(id)arg1 asRichText:(_Bool)arg2;	// IMP=0x000000000109a9c8
- (void)_pasteAttributedString:(id)arg1 toRange:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000109a7af
- (void)_pasteAttributedString:(id)arg1 pasteAsRichText:(_Bool)arg2;	// IMP=0x000000000109a75e
- (id)_attributedStringForInsertionOfAttributedString:(id)arg1;	// IMP=0x000000000109a294
- (void)pasteItemProviders:(id)arg1;	// IMP=0x000000000109a280
- (void)pasteItemProviders:(id)arg1 matchesStyle:(_Bool)arg2;	// IMP=0x000000000109a170
- (_Bool)_pasteFromPasteboard:(id)arg1 andMatchStyle:(_Bool)arg2;	// IMP=0x0000000001099bea
- (void)_pasteAndMatchStyle:(_Bool)arg1;	// IMP=0x0000000001099aeb
- (void)pasteAndMatchStyle:(id)arg1;	// IMP=0x0000000001099ad4
- (void)paste:(id)arg1;	// IMP=0x0000000001099ac0
- (void)copy:(id)arg1;	// IMP=0x0000000001099aae
- (void)cut:(id)arg1;	// IMP=0x00000000010999d6
- (id)_itemProviderForCopyingRange:(struct _NSRange)arg1;	// IMP=0x0000000001099278
- (void)_copySelectionToClipboard:(id)arg1;	// IMP=0x00000000010990d3
- (void)_copySelectionToClipboard;	// IMP=0x0000000001099080
- (void)removeTextStylingFromString:(id)arg1;	// IMP=0x0000000001098ee9
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;	// IMP=0x0000000001098e9b
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;	// IMP=0x0000000001098e4a
- (void)makeTextWritingDirectionNatural:(id)arg1;	// IMP=0x0000000001098df7
- (long long)writingDirectionAtPosition:(id)arg1;	// IMP=0x0000000001098d96
- (_Bool)_isSecureTextEntry;	// IMP=0x0000000001098d62
- (void)replace:(id)arg1;	// IMP=0x0000000001098840
- (void)selectAll;	// IMP=0x0000000001098788
- (id)_selectedAttributedText;	// IMP=0x0000000001098719
- (id)_selectedText;	// IMP=0x0000000001098689
- (_Bool)_shouldHandleResponderAction:(SEL)arg1;	// IMP=0x000000000109779e
- (_Bool)_canHandleResponderAction:(SEL)arg1;	// IMP=0x0000000001097665
- (id)metadataDictionariesForDictationResults;	// IMP=0x0000000001096d20
- (id)rangeWithTextAlternatives:(id *)arg1 atPosition:(id)arg2;	// IMP=0x0000000001096953
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x0000000001096922
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x000000000109690b
- (void)removeTextPlaceholder:(id)arg1 notifyInputDelegate:(_Bool)arg2;	// IMP=0x00000000010962df
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x00000000010962c0
- (struct CGRect)frameForTextPlaceholder:(id)arg1;	// IMP=0x0000000001095fe0
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x0000000001095cbb
- (void)_updateRectsForPlaceholder;	// IMP=0x00000000010956db
- (void)_layoutManagerDidCompleteLayout;	// IMP=0x00000000010954e0
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1 embeddingType:(long long)arg2;	// IMP=0x0000000001094c3f
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x0000000001094974
- (void)_insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2 replacingRange:(struct _NSRange)arg3 resultLength:(unsigned long long *)arg4;	// IMP=0x0000000001094762
- (void)_setSelectedRangeToEndIfNecessary;	// IMP=0x000000000109475c
- (_Bool)_isSystemAttachment:(id)arg1;	// IMP=0x0000000001094711
- (void)clearText;	// IMP=0x0000000001094639
- (void)changeWillBeUndone:(id)arg1;	// IMP=0x00000000010945f9
- (_Bool)dontRemoveAllActions;	// IMP=0x00000000010945e8
- (void)stopCoalescing;	// IMP=0x00000000010945ab
- (_Bool)isCoalescing;	// IMP=0x0000000001094581
- (_Bool)_undoRedoInProgress;	// IMP=0x0000000001094570
- (void)_setUndoRedoInProgress:(_Bool)arg1;	// IMP=0x0000000001094554
- (void)undoDidChangeText;	// IMP=0x0000000001094538
- (void)undoWillChangeText;	// IMP=0x000000000109451c
- (void)registerUndoOperationForType:(int)arg1 actionName:(id)arg2 affectedRange:(struct _NSRange)arg3 replacementText:(id)arg4;	// IMP=0x0000000001094231
- (void)scheduleUndoOperationForType:(int)arg1 actionName:(id)arg2 previousSelectedRange:(struct _NSRange)arg3 replacementText:(id)arg4;	// IMP=0x0000000001094071
- (_Bool)shouldStartNewUndoGroup:(id)arg1 textGranularity:(long long)arg2 operationType:(int)arg3;	// IMP=0x0000000001093f6f
- (void)appendUndoOperation:(id)arg1 newGroup:(_Bool)arg2;	// IMP=0x0000000001093f69
- (void)coalesceInTextView:(id)arg1 actionName:(id)arg2 affectedRange:(struct _NSRange)arg3 replacementRange:(struct _NSRange)arg4 replacementText:(id)arg5;	// IMP=0x0000000001093cfb
- (void)_undoManagerWillUndo:(id)arg1;	// IMP=0x0000000001093cbb
- (id)undoManager;	// IMP=0x0000000001093c00
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000010939a2
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x0000000001093919
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x00000000010937f3
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x00000000010937e1
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x00000000010934e1
@property(readonly, nonatomic, getter=_caretRect) struct CGRect caretRect;
- (struct CGRect)_caretRectForOffset:(unsigned long long)arg1;	// IMP=0x00000000010933d0
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x0000000001093313
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x0000000001092f27
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x0000000001092bd7
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (void)_updateEmptyStringAttributes;	// IMP=0x0000000001092a41
- (void)_invalidateEmptyStringAttributes;	// IMP=0x0000000001092a2d
- (void)_invalidateTypingAttributes;	// IMP=0x0000000001092a19
- (void)_addToTypingAttributes:(id)arg1 value:(id)arg2;	// IMP=0x000000000109295e
- (id)_attributesForReplacementInRange:(struct _NSRange)arg1;	// IMP=0x000000000109249e
- (id)_attributesForInsertionOfText:(struct _NSRange)arg1;	// IMP=0x000000000109242a
- (id)_newAttributedStringForInsertionOfAttributedText:(id)arg1 inRange:(struct _NSRange)arg2;	// IMP=0x0000000001092237
- (id)_newAttributedStringForInsertionOfText:(id)arg1 inRange:(struct _NSRange)arg2;	// IMP=0x000000000109215b
- (id)_fixupTypingAttributeForAttributes:(id)arg1;	// IMP=0x0000000001091f54
@property(copy, nonatomic, getter=_whitelistedTypingAttributes, setter=_setWhitelistedTypingAttributes:) NSSet *_whitelistedTypingAttributes;
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x0000000001091cbe
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0000000001091c5e
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x0000000001091bdb
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x0000000001091b58
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x0000000001091810
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x000000000109179d
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x000000000109170e
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
- (void)unmarkText;	// IMP=0x00000000010914a6
- (struct _NSRange)markedRange;	// IMP=0x0000000001091498
- (void)_forceUnmarkTextDueToEditing;	// IMP=0x0000000001091454
- (void)_clearMarkedText;	// IMP=0x0000000001091429
- (void)setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x000000000109137f
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x00000000010912d5
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2 fromKeyboard:(_Bool)arg3 useTextStyle:(_Bool)arg4;	// IMP=0x0000000001090cf7
@property(readonly, nonatomic) UITextRange *markedTextRange;
@property(nonatomic) long long selectionAffinity;
- (void)_performWhileSuppressingDelegateNotifications:(CDUnknownBlockType)arg1;	// IMP=0x0000000001090bc3
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x00000000010908eb
- (void)_replaceRange:(id)arg1 withAttributedTextFromKeyboard:(id)arg2 addingUnderlinesForAlternatives:(_Bool)arg3;	// IMP=0x00000000010902ea
- (void)replaceRange:(id)arg1 withAttributedText:(id)arg2;	// IMP=0x00000000010902d2
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x0000000001090237
- (id)attributedTextInRange:(id)arg1;	// IMP=0x000000000108fe68
- (id)textInRange:(id)arg1;	// IMP=0x000000000108fad0
- (void)_ensureSelectionVisible;	// IMP=0x000000000108fa9a
- (void)scrollRangeToVisible:(struct _NSRange)arg1;	// IMP=0x000000000108f9a1
- (id)_parentScrollView;	// IMP=0x000000000108f907
- (unsigned long long)_validCaretPositionFromCharacterIndex:(unsigned long long)arg1 downstream:(_Bool)arg2;	// IMP=0x000000000108f60f
- (id)_characterPositionForPoint:(struct CGPoint)arg1;	// IMP=0x000000000108f0f4
- (id)_rectsForRange:(struct _NSRange)arg1;	// IMP=0x000000000108f064
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x000000000108ea98
- (id)selectionView;	// IMP=0x000000000108ea48
- (void)updateSelection;	// IMP=0x000000000108ea36
- (void)endSelectionChange;	// IMP=0x000000000108e8fb
- (void)beginSelectionChange;	// IMP=0x000000000108e885
- (void)checkSpellingForSelectionChangeIfNecessary;	// IMP=0x000000000108e5bd
- (void)notifyTextCheckingControllerForSelectionChange;	// IMP=0x000000000108e56d
- (void)removeSpellingMarkersForCurrentWord;	// IMP=0x000000000108e442
- (void)removeSpellingMarkersFromWordInRange:(id)arg1;	// IMP=0x000000000108e285
- (id)textRangeForNSRange:(struct _NSRange)arg1;	// IMP=0x000000000108e1bb
- (struct _NSRange)nsRangeForTextRange:(id)arg1;	// IMP=0x000000000108e0ae
- (void)checkSpellingForWordInRange:(id)arg1;	// IMP=0x000000000108dc1c
- (void)preheatTextChecker;	// IMP=0x000000000108dbc7
- (id)textChecker;	// IMP=0x000000000108db46
- (void)checkSmartPunctuationForWordInRange:(id)arg1;	// IMP=0x000000000108d702
- (void)deleteBackward;	// IMP=0x000000000108d3df
- (void)didEndEditing;	// IMP=0x000000000108d18e
- (void)_updateRangeForSmartDelete;	// IMP=0x000000000108d028
- (struct _NSRange)_rangeForBackwardsDelete;	// IMP=0x000000000108cf8d
- (void)_registerUndoOperationForReplacementWithActionName:(id)arg1 replacementText:(id)arg2;	// IMP=0x000000000108ced9
- (_Bool)_hasDictationPlaceholder;	// IMP=0x000000000108cec8
@property(readonly, nonatomic) NSAttributedString *filteredAttributedText;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;	// IMP=0x000000000108cd0f
- (void)_insertAttributedText:(id)arg1 fromKeyboard:(_Bool)arg2;	// IMP=0x000000000108c960
- (void)insertAttributedText:(id)arg1;	// IMP=0x000000000108c7ca
- (void)addTextAlternativesDisplayStyle:(long long)arg1 toRange:(struct _NSRange)arg2;	// IMP=0x000000000108c678
- (void)insertText:(id)arg1;	// IMP=0x000000000108c403
- (void)removeAlternativesForCurrentWord;	// IMP=0x000000000108c1e6
@property(readonly, nonatomic) _Bool hasText;
- (_Bool)_mightHaveSelection;	// IMP=0x000000000108c075
@property(readonly, nonatomic, getter=isEditing) _Bool editing;
@property(readonly, nonatomic, getter=isEditable) _Bool editable;
- (id)attributedSubstringForMarkedRange;	// IMP=0x000000000108becb
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (long long)_resolveNaturalDirection:(long long)arg1;	// IMP=0x000000000108bd79
- (void)_insertText:(id)arg1 fromKeyboard:(_Bool)arg2;	// IMP=0x000000000108b49d
- (struct _NSRange)_rangeToReplaceWhenInsertingText;	// IMP=0x000000000108b406
- (void)_coordinateSelectionChange:(CDUnknownBlockType)arg1;	// IMP=0x000000000108b0fb
- (void)_ensureSelectionValid;	// IMP=0x000000000108b030
@property(nonatomic) struct _NSRange selectedRange;
- (struct _NSRange)_selectedRange;	// IMP=0x000000000108af3a
- (void)_setSelectedRange:(struct _NSRange)arg1;	// IMP=0x000000000108aed8
@property(copy) UITextRange *selectedTextRange;
- (void)_selectionDidScroll:(id)arg1;	// IMP=0x000000000108a8dd
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (id)_firstTextView;	// IMP=0x000000000108a809
- (void)_selectionGeometryChanged;	// IMP=0x000000000108a77d
- (void)_textStorageDidProcessEditing:(id)arg1;	// IMP=0x000000000108a288
- (_Bool)supportLetterByLetterUndo;	// IMP=0x000000000108a280
- (id)_pasteController;	// IMP=0x000000000108a0a1
- (void)_updateFirstTextView;	// IMP=0x00000000010897a0
- (_Bool)_shouldConsiderTextViewForGeometry:(id)arg1;	// IMP=0x00000000010896e5
- (void)_textContainerDidChangeView:(id)arg1;	// IMP=0x00000000010896d3
- (void)_setInternalGestureRecognizers;	// IMP=0x0000000001089691
- (id)_textStorage;	// IMP=0x000000000108964b
- (_Bool)_delegateShouldChangeTextInRange:(struct _NSRange)arg1 replacementText:(id)arg2;	// IMP=0x00000000010895ae
- (void)_sendDelegateChangeNotificationsForText:(_Bool)arg1 selection:(_Bool)arg2;	// IMP=0x00000000010894c3
- (void)_sendDelegateWillChangeNotificationsForText:(_Bool)arg1 selection:(_Bool)arg2;	// IMP=0x0000000001089444
- (id)_senderForDelegateNotifications;	// IMP=0x00000000010893b8
- (struct _NSRange)_rangeAfterCancelDictationIfNecessaryForChangeInRange:(struct _NSRange)arg1;	// IMP=0x00000000010892dc
- (void)_detachFromLayoutManager;	// IMP=0x00000000010890cd
- (void)dealloc;	// IMP=0x0000000001088f9d
- (id)initWithTextLayoutController:(id)arg1;	// IMP=0x0000000001088c8c
- (id)_selectableText;	// IMP=0x0000000000b73aa7
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0000000000b739f8
- (void)_unmarkText;	// IMP=0x0000000000b73992
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0000000000b73792
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0000000000b73727
- (_Bool)_hasMarkedText;	// IMP=0x0000000000b736cc
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0000000000b7369a
- (void)_setGestureRecognizers;	// IMP=0x0000000000b733b5
- (long long)_selectionAffinity;	// IMP=0x0000000000b732bc
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0000000000b7324c
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0000000000b73207
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b730d7
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b72fa7
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b72d8f
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b72b77
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b72a4d
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b7296a
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b727eb
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b72660
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b72492
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b722b8
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b720da
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000b71d83
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0000000000b71bb2
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0000000000b71954
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0000000000b71914
- (id)_fontForCaretSelection;	// IMP=0x0000000000b7182a
- (id)_textColorForCaretSelection;	// IMP=0x0000000000b71740
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0000000000b7161b
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0000000000b71585
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0000000000b710a8
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0000000000b70f53
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0000000000b70e9f
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0000000000b70dc5
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0000000000b70d63
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0000000000b70ce0
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0000000000b70b74
- (id)_fullRange;	// IMP=0x0000000000b70b1a
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0000000000b70b00
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0000000000b70ae6
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0000000000b70acc
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0000000000b70ab2
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0000000000b70a10
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0000000000b7078c
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0000000000b70738
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000b70673
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0000000000b705e7
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0000000000b7056c
- (void)_transpose;	// IMP=0x0000000000b7037f
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0000000000b7024f
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0000000000b70224
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0000000000b70148
- (void)_deleteToEndOfParagraph;	// IMP=0x0000000000b70015
- (void)_deleteToEndOfLine;	// IMP=0x0000000000b6fee2
- (void)_deleteToStartOfLine;	// IMP=0x0000000000b6fdac
- (void)_deleteForwardByWord;	// IMP=0x0000000000b6fbdf
- (void)_deleteByWord;	// IMP=0x0000000000b6faea
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0000000000b6fa51
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0000000000b6f8c0
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0000000000b6f799
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0000000000b6f77f
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0000000000b6f717
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0000000000b6f65a
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0000000000b6f643
- (void)_expandSelectionToBackwardDeletionCluster;	// IMP=0x0000000000b6f46a
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0000000000b6f376
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0000000000b6f287
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0000000000b6f213
- (_Bool)_isEmptySelection;	// IMP=0x0000000000b6f1a5
- (struct CGRect)_selectionClipRect;	// IMP=0x0000000000b6f187
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0000000000b6f112
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0000000000b6f09d
- (_Bool)_selectionAtWordStart;	// IMP=0x0000000000b6eff9
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0000000000b6ef93
- (id)_fullText;	// IMP=0x0000000000b6ef29
- (id)_wordContainingCaretSelection;	// IMP=0x0000000000b6ee87
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0000000000b6ed64
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0000000000b6eb85
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0000000000b6eafc
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0000000000b6eae5
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0000000000b6ead1
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0000000000b6ea23
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0000000000b6e996
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0000000000b6e949
- (void)_selectAll;	// IMP=0x0000000000b6e90b
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0000000000b6e81a
- (struct _NSRange)_selectedNSRange;	// IMP=0x0000000000b6e7bd
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0000000000b6e679
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(readonly, nonatomic) long long cursorBehavior;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) _Bool isSingleLineDocument;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) long long keyboardType;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic) long long returnKeyType;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UIView *textInputView;
@property(nonatomic) int textLoupeVisibility;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(nonatomic) id textSuggestionDelegate;
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;

@end

