//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <UIKitCore/UIKBEmojiHitTestResponder-Protocol.h>
#import <UIKitCore/UIKBKeyplaneViewDelegate-Protocol.h>
#import <UIKitCore/UIKBResizingKeyplaneCoordinatorCoordinatorDelegate-Protocol.h>
#import <UIKitCore/UIKeyboardPinchGestureRecognizerDelegate-Protocol.h>
#import <UIKitCore/UIKeyboardTypingStyleEstimatorDelegate-Protocol.h>

@class CADisplayLink, NSArray, NSDate, NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, UIButton, UIDelayedAction, UIGestureKeyboardIntroduction, UIImageView, UIKBBackgroundView, UIKBKeyViewAnimator, UIKBKeyplaneView, UIKBRenderConfig, UIKBResizingKeyplaneCoordinator, UIKBTree, UIKeyboardEmojiKeyDisplayController, UIKeyboardPathEffectView, UIKeyboardPinchGestureRecognizer, UIKeyboardSplitTransitionView, UISelectionFeedbackGenerator, UISwipeGestureRecognizer, UIView, _UIKeyboardTypingSpeedLogger;
@protocol UIKeyboardLayoutStarDelegate, UITextCursorAssertion;

__attribute__((visibility("hidden")))
@interface UIKeyboardLayoutStar <UIKBEmojiHitTestResponder, UIKBResizingKeyplaneCoordinatorCoordinatorDelegate, UIKeyboardPinchGestureRecognizerDelegate, UIKeyboardTypingStyleEstimatorDelegate, UIKBKeyplaneViewDelegate>
{
    UIKBTree *_keyboard;	// 184 = 0xb8
    UIKBTree *_keyplane;	// 192 = 0xc0
    NSString *_keyboardName;	// 200 = 0xc8
    NSString *_keyplaneName;	// 208 = 0xd0
    long long _appearance;	// 216 = 0xd8
    UIKBTree *_activeKey;	// 224 = 0xe0
    UIKBTree *_inactiveLanguageIndicator;	// 232 = 0xe8
    UIKBKeyplaneView *_keyplaneView;	// 240 = 0xf0
    UIKBBackgroundView *_backgroundView;	// 248 = 0xf8
    UIKBKeyViewAnimator *_keyViewAnimator;	// 256 = 0x100
    UIKeyboardEmojiKeyDisplayController *_emojiKeyManager;	// 264 = 0x108
    double _prevTouchUpTime;	// 272 = 0x110
    double _prevTouchUpFinishedTime;	// 280 = 0x118
    double _prevTouchDownTime;	// 288 = 0x120
    unsigned long long _prevUpActions;	// 296 = 0x128
    NSMutableDictionary *_keyboards;	// 304 = 0x130
    NSMutableDictionary *_allKeyplaneViews;	// 312 = 0x138
    NSMutableSet *_allKeyplaneKeycaps;	// 320 = 0x140
    NSMutableSet *_validInputStrings;	// 328 = 0x148
    NSString *_localizedInputKey;	// 336 = 0x150
    struct __CFDictionary *_extendedTouchInfoMap;	// 344 = 0x158
    int _preferredTrackingChangeCount;	// 352 = 0x160
    int _shiftTrackingChangeCount;	// 356 = 0x164
    NSMutableSet *_accentInfo;	// 360 = 0x168
    NSMutableSet *_hasAccents;	// 368 = 0x170
    id _spaceTarget;	// 376 = 0x178
    SEL _spaceAction;	// 384 = 0x180
    SEL _spaceLongAction;	// 392 = 0x188
    id _returnTarget;	// 400 = 0x190
    SEL _returnAction;	// 408 = 0x198
    SEL _returnLongAction;	// 416 = 0x1a0
    id _deleteTarget;	// 424 = 0x1a8
    SEL _deleteAction;	// 432 = 0x1b0
    SEL _deleteLongAction;	// 440 = 0x1b8
    _Bool _shift;	// 448 = 0x1c0
    _Bool _autoshift;	// 449 = 0x1c1
    _Bool _settingShift;	// 450 = 0x1c2
    _Bool _holdingShift;	// 451 = 0x1c3
    _Bool _didLongPress;	// 452 = 0x1c4
    NSString *_preTouchKeyplaneName;	// 456 = 0x1c8
    _Bool _revertKeyplaneAfterTouch;	// 464 = 0x1d0
    _Bool _wasShifted;	// 465 = 0x1d1
    _Bool _swipeDetected;	// 466 = 0x1d2
    _Bool _showIntlKey;	// 467 = 0x1d3
    _Bool _showDictationKey;	// 468 = 0x1d4
    _Bool _suppressDeactivateKeys;	// 469 = 0x1d5
    _Bool _suppressShiftKeyplaneAnimation;	// 470 = 0x1d6
    _Bool _isTrackpadMode;	// 471 = 0x1d7
    _Bool _shiftLockReady;	// 472 = 0x1d8
    double _shiftLockFirstTapTime;	// 480 = 0x1e0
    UISwipeGestureRecognizer *_rightSwipeRecognizer;	// 488 = 0x1e8
    UISwipeGestureRecognizer *_leftSwipeRecognizer;	// 496 = 0x1f0
    UISwipeGestureRecognizer *_upSwipeRecognizer;	// 504 = 0x1f8
    UIKeyboardPinchGestureRecognizer *_pinchGestureRecognizer;	// 512 = 0x200
    UIKeyboardSplitTransitionView *_transitionView;	// 520 = 0x208
    double _initialSplitProgress;	// 528 = 0x210
    double _finalSplitProgress;	// 536 = 0x218
    double _autoSplitLastUpdate;	// 544 = 0x220
    double _autoSplitElapsedTime;	// 552 = 0x228
    CADisplayLink *_displayLink;	// 560 = 0x230
    _Bool _ghostKeysEnabled;	// 568 = 0x238
    UIDelayedAction *_delayedCentroidUpdate;	// 576 = 0x240
    _Bool _isRebuilding;	// 584 = 0x248
    long long _currentHandBias;	// 592 = 0x250
    NSString *_layoutTag;	// 600 = 0x258
    _Bool _preRotateShift;	// 608 = 0x260
    NSString *_preRotateKeyplaneName;	// 616 = 0x268
    _Bool _preRotateTrackpadMode;	// 624 = 0x270
    UIDelayedAction *_multitapAction;	// 632 = 0x278
    _Bool _unshiftAfterMultitap;	// 640 = 0x280
    int _multitapCount;	// 644 = 0x284
    UIKBTree *_multitapKey;	// 648 = 0x288
    UIView *_flickPopupView;	// 656 = 0x290
    NSMutableDictionary *_compositeImages;	// 664 = 0x298
    NSTimer *_flickPopuptimer;	// 672 = 0x2a0
    id _touchInfo;	// 680 = 0x2a8
    UIView *_dimKeyboardImageView;	// 688 = 0x2b0
    _Bool _keyboardImageViewIsDim;	// 696 = 0x2b8
    _Bool _isOutOfBounds;	// 697 = 0x2b9
    _Bool _inDealloc;	// 698 = 0x2ba
    NSMutableSet *_keysUnderIndicator;	// 704 = 0x2c0
    _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;	// 712 = 0x2c8
    UIKBRenderConfig *_passcodeRenderConfig;	// 720 = 0x2d0
    long long _setKeyplaneViewCount;	// 728 = 0x2d8
    _Bool _inputTraitsPreventInitialReuse;	// 736 = 0x2e0
    _Bool _settingFloat;	// 737 = 0x2e1
    NSMutableSet *_leftKeySet;	// 744 = 0x2e8
    NSMutableSet *_rightKeySet;	// 752 = 0x2f0
    struct CGPoint _leftDriftOffset;	// 760 = 0x2f8
    struct CGPoint _rightDriftOffset;	// 776 = 0x308
    NSMutableArray *_leftSideReachability;	// 792 = 0x318
    NSMutableArray *_rightSideReachability;	// 800 = 0x320
    NSNumber *_homeRowHint;	// 808 = 0x328
    double _touchDownTimeSpan;	// 816 = 0x330
    NSDate *_prevTouchMoreKeyTime;	// 824 = 0x338
    NSDate *_prevProgressiveCandidateRequestTime;	// 832 = 0x340
    NSTimer *_progressiveCandidateUpdateTimer;	// 840 = 0x348
    NSString *_lastInputMode;	// 848 = 0x350
    _Bool _pendingDictationReload;	// 856 = 0x358
    _Bool _hasPeekedGestureKey;	// 857 = 0x359
    _Bool _lastInputIsGestureKey;	// 858 = 0x35a
    UIGestureKeyboardIntroduction *_gestureKeyboardIntroduction;	// 864 = 0x360
    _Bool _dictationUsingServerManualEndpointing;	// 872 = 0x368
    _Bool _splitTransitionNeedsRebuild;	// 873 = 0x369
    UIKBResizingKeyplaneCoordinator *_resizingKeyplaneCoordinator;	// 880 = 0x370
    UIButton *_biasEscapeButton;	// 888 = 0x378
    NSLayoutConstraint *_biasEscapeButtonLeftConstraint;	// 896 = 0x380
    NSLayoutConstraint *_biasEscapeButtonRightConstraint;	// 904 = 0x388
    NSMutableSet *_keyplaneTransformations;	// 912 = 0x390
    UIImageView *_pathEffectGlowView;	// 920 = 0x398
    UIKeyboardPathEffectView *_pathEffectView;	// 928 = 0x3a0
    NSArray *_pathEffectViewConstraints;	// 936 = 0x3a8
    _Bool _isContinuousPathUnderway;	// 944 = 0x3b0
    UIView *_keyplaneTransformationAreaView;	// 952 = 0x3b8
    _Bool _externalDictationAndInternationalKeys;	// 960 = 0x3c0
    _Bool _showsPunctuationKeysOnPrimaryKeyplane;	// 961 = 0x3c1
    _Bool _preventPaddlesForPointerTouches;	// 962 = 0x3c2
    _Bool _muteNextKeyClickSound;	// 963 = 0x3c3
    int playKeyClickSoundOn;	// 964 = 0x3c4
    UIKBRenderConfig *_renderConfig;	// 968 = 0x3c8
    UIView *_modalDisplayView;	// 976 = 0x3d0
    UISelectionFeedbackGenerator *_slideBehaviour;	// 984 = 0x3d8
    id <UIKeyboardLayoutStarDelegate> _delegate;	// 992 = 0x3e0
    double _lastTwoFingerTapTimestamp;	// 1000 = 0x3e8
    id <UITextCursorAssertion> _blinkAssertion;	// 1008 = 0x3f0
}

+ (id)sharedPunctuationCharacterSet;	// IMP=0x00000000009d1971
+ (id)sharedRivenKeyplaneGenerator;	// IMP=0x00000000009b8a7f
+ (struct CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 keyboardType:(long long)arg3;	// IMP=0x00000000009b4661
+ (id)keyboardWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x00000000009b4518
+ (id)keyboardFromFactoryWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x00000000009b4374
+ (void)accessibilitySensitivityChanged;	// IMP=0x00000000009b3c39
+ (Class)_subclassForScreenTraits:(id)arg1;	// IMP=0x00000000009b34e4
@property(retain, nonatomic) id <UITextCursorAssertion> blinkAssertion; // @synthesize blinkAssertion=_blinkAssertion;
@property(nonatomic) _Bool muteNextKeyClickSound; // @synthesize muteNextKeyClickSound=_muteNextKeyClickSound;
@property(nonatomic) _Bool preventPaddlesForPointerTouches; // @synthesize preventPaddlesForPointerTouches=_preventPaddlesForPointerTouches;
@property(nonatomic) double lastTwoFingerTapTimestamp; // @synthesize lastTwoFingerTapTimestamp=_lastTwoFingerTapTimestamp;
@property(nonatomic) id <UIKeyboardLayoutStarDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UISelectionFeedbackGenerator *slideBehaviour; // @synthesize slideBehaviour=_slideBehaviour;
@property(retain, nonatomic) UIView *modalDisplayView; // @synthesize modalDisplayView=_modalDisplayView;
@property(retain, nonatomic) UIKBRenderConfig *renderConfig; // @synthesize renderConfig=_renderConfig;
@property(copy, nonatomic) NSString *preTouchKeyplaneName; // @synthesize preTouchKeyplaneName=_preTouchKeyplaneName;
@property(nonatomic) int playKeyClickSoundOn; // @synthesize playKeyClickSoundOn;
@property(copy, nonatomic) NSString *localizedInputKey; // @synthesize localizedInputKey=_localizedInputKey;
@property(readonly, nonatomic) _Bool showsDictationKey; // @synthesize showsDictationKey=_showDictationKey;
@property(readonly, nonatomic) _Bool showsInternationalKey; // @synthesize showsInternationalKey=_showIntlKey;
@property(nonatomic) _Bool didLongPress; // @synthesize didLongPress=_didLongPress;
@property(nonatomic) _Bool autoShift; // @synthesize autoShift=_autoshift;
@property(nonatomic) _Bool shift; // @synthesize shift=_shift;
@property(retain, nonatomic) UIKBTree *activeKey; // @synthesize activeKey=_activeKey;
@property(copy, nonatomic) NSString *keyplaneName; // @synthesize keyplaneName=_keyplaneName;
@property(copy, nonatomic) NSString *keyboardName; // @synthesize keyboardName=_keyboardName;
@property(readonly, nonatomic) UIKBTree *keyplane; // @synthesize keyplane=_keyplane;
@property(readonly, nonatomic) UIKBTree *keyboard; // @synthesize keyboard=_keyboard;
- (void)typingStyleEstimator:(id)arg1 didChangeTypingStyleEstimate:(unsigned long long)arg2;	// IMP=0x00000000009df0e9
- (void)triggerSpaceKeyplaneSwitchIfNecessary;	// IMP=0x00000000009df004
- (_Bool)is10KeyRendering;	// IMP=0x00000000009def8c
- (_Bool)isEmojiKeyplane;	// IMP=0x00000000009def61
- (_Bool)keyplaneContainsEmojiKey;	// IMP=0x00000000009deeff
- (_Bool)keyplaneContainsDismissKey;	// IMP=0x00000000009deed4
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)arg1;	// IMP=0x00000000009ded27
- (id)currentKeyplaneView;	// IMP=0x00000000009ded16
- (id)currentKeyplane;	// IMP=0x00000000009ded05
- (void)fadeWithInvocation:(id)arg1;	// IMP=0x00000000009dec22
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint)arg2 shouldTypeVariants:(_Bool)arg3 baseKeyForVariants:(_Bool)arg4;	// IMP=0x00000000009de9fd
- (id)simulateTouch:(struct CGPoint)arg1;	// IMP=0x00000000009de8d8
- (struct CGPoint)applyError:(struct CGPoint)arg1 toKey:(id)arg2;	// IMP=0x00000000009de536
- (void)changeToKeyplane:(id)arg1;	// IMP=0x00000000009de480
- (id)keyplaneNamed:(id)arg1;	// IMP=0x00000000009de44f
- (id)keyplaneForKey:(id)arg1;	// IMP=0x00000000009de41e
- (id)baseKeyForString:(id)arg1;	// IMP=0x00000000009ddd97
- (_Bool)shouldRetestKey:(id)arg1 slidOffKey:(id)arg2 withKeyplane:(id)arg3;	// IMP=0x00000000009ddcff
- (_Bool)shouldRetestTouchDraggedFromKey:(id)arg1;	// IMP=0x00000000009ddcea
- (void)didRotate;	// IMP=0x00000000009ddb7a
- (void)willRotate;	// IMP=0x00000000009ddaac
- (void)updateKeyCentroids;	// IMP=0x00000000009dd275
- (void)divideKeysIntoLeft:(id)arg1 right:(id)arg2;	// IMP=0x00000000009dccab
- (_Bool)isShiftKeyBeingHeld;	// IMP=0x00000000009dcc82
- (void)setAutoshift:(_Bool)arg1;	// IMP=0x00000000009dcc44
- (void)updateUndoKeyState;	// IMP=0x00000000009dcb7c
- (void)setMultitapReverseKeyState;	// IMP=0x00000000009dca3e
- (void)updateShiftKeyState;	// IMP=0x00000000009dc392
- (int)stateForShiftKey:(id)arg1;	// IMP=0x00000000009dc1c2
- (_Bool)diacriticForwardCompose;	// IMP=0x00000000009dc19b
- (_Bool)supportsContinuousPath;	// IMP=0x00000000009dc174
- (_Bool)isKanaPlane;	// IMP=0x00000000009dc157
- (_Bool)isAlphabeticPlane;	// IMP=0x00000000009dc130
- (_Bool)ignoresShiftState;	// IMP=0x00000000009dc109
- (_Bool)usesAutoShift;	// IMP=0x00000000009dc0e2
- (void)upActionShift;	// IMP=0x00000000009dbfc4
- (void)downActionShiftWithKey:(id)arg1;	// IMP=0x00000000009dbd3e
- (void)refreshDualStringKeys;	// IMP=0x00000000009dbbbc
- (unsigned long long)upActionFlagsForKey:(id)arg1;	// IMP=0x00000000009db818
- (unsigned long long)downActionFlagsForKey:(id)arg1;	// IMP=0x00000000009db32c
- (_Bool)keyHasAccentedVariants:(id)arg1;	// IMP=0x00000000009db08c
- (_Bool)hasActiveContinuousPathInput;	// IMP=0x00000000009daf4f
- (id)activeTouchInfoForShift;	// IMP=0x00000000009dadb2
- (id)touchInfoForKey:(id)arg1;	// IMP=0x00000000009dac5f
- (void)clearAllTouchInfo;	// IMP=0x00000000009dab21
- (void)clearInfoForTouch:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x00000000009daaad
- (void)clearInfoForTouch:(id)arg1;	// IMP=0x00000000009daa99
- (void)cancelTouchIfNecessaryForInfo:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x00000000009da862
- (id)generateInfoForTouch:(id)arg1;	// IMP=0x00000000009da7de
- (id)infoForTouch:(id)arg1;	// IMP=0x00000000009da7aa
- (id)infoForTouchUUID:(id)arg1;	// IMP=0x00000000009da792
- (void)swipeDetected:(id)arg1;	// IMP=0x00000000009da711
- (void)uninstallGestureRecognizers;	// IMP=0x00000000009da5cb
- (void)installGestureRecognizers;	// IMP=0x00000000009da427
- (void)_gestureRecognizerFailed:(id)arg1;	// IMP=0x00000000009da400
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x00000000009da396
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x00000000009da2a1
- (void)touchChanged:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000009da1ed
- (void)touchCancelled:(id)arg1 forResting:(_Bool)arg2 executionContext:(id)arg3;	// IMP=0x00000000009d9f2b
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000009d9f14
- (void)continueFromInternationalActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x00000000009d9390
- (void)completeSendStringActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x00000000009d885c
- (_Bool)shouldSendStringForFlick:(id)arg1;	// IMP=0x00000000009d86ef
- (_Bool)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint)arg1 finalPoint:(struct CGPoint)arg2;	// IMP=0x00000000009d8613
- (void)presentModalDisplayForKey:(id)arg1;	// IMP=0x00000000009d8431
- (void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4;	// IMP=0x00000000009d68cd
- (void)_recordKeystrokeStatisticForKeyPress;	// IMP=0x00000000009d6870
- (_Bool)shouldSendTouchUpToInputManager:(id)arg1;	// IMP=0x00000000009d67aa
- (void)handleKeyboardMenusForTouch:(id)arg1;	// IMP=0x00000000009d6517
- (void)touchUp:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000009d5c8c
- (_Bool)shouldRetestTouchUp:(id)arg1;	// IMP=0x00000000009d5968
- (void)handleDelayedCentroidUpdate;	// IMP=0x00000000009d58ae
- (void)cancelDelayedCentroidUpdate;	// IMP=0x00000000009d5875
- (void)refreshGhostKeyState;	// IMP=0x00000000009d57ba
- (_Bool)performSpaceAction;	// IMP=0x00000000009d577c
- (_Bool)performReturnAction;	// IMP=0x00000000009d573e
- (void)resetPanAlternativesForEndedTouch:(id)arg1;	// IMP=0x00000000009d56d9
- (void)updatePanAlternativesForTouchInfo:(id)arg1;	// IMP=0x00000000009d53b0
- (void)updateSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2 withPoint:(struct CGPoint)arg3;	// IMP=0x00000000009d4fe5
- (long long)defaultSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2;	// IMP=0x00000000009d4eb0
- (void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2;	// IMP=0x00000000009d3ef5
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000009d2fce
- (void)touchDragged:(id)arg1;	// IMP=0x00000000009d2ef8
- (_Bool)touchPassesDragThreshold:(id)arg1;	// IMP=0x00000000009d2c23
- (_Bool)canForceTouchUUIDCommit:(id)arg1 inWindow:(id)arg2;	// IMP=0x00000000009d2b7d
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)arg1 executionContext:(id)arg2;	// IMP=0x00000000009d2a2a
- (void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x00000000009d2058
- (_Bool)showGestureKeyboardIntroductionIfNeeded;	// IMP=0x00000000009d1e23
- (_Bool)shouldShowGestureKeyboardIntroduction;	// IMP=0x00000000009d1d96
- (id)synthesizeTouchUpEventForKey:(id)arg1;	// IMP=0x00000000009d1cb8
- (id)keyplaneNameForRevertAfterTouch;	// IMP=0x00000000009d1c58
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x00000000009d1acd
- (void)incrementPunctuationIfNeeded:(id)arg1;	// IMP=0x00000000009d19c7
- (_Bool)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)arg1;	// IMP=0x00000000009d1929
- (void)touchDownWithKey:(id)arg1 withTouchInfo:(id)arg2 atPoint:(struct CGPoint)arg3 executionContext:(id)arg4;	// IMP=0x00000000009d0959
- (void)_cleanUpBlinkAssertionIfNecessary;	// IMP=0x00000000009d091c
- (_Bool)isKeyScriptSwitchKey:(id)arg1;	// IMP=0x00000000009d08c8
- (_Bool)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x00000000009d080c
- (void)playKeyClickSoundOnUpForKey:(id)arg1;	// IMP=0x00000000009d07fa
- (void)playKeyClickSoundOnDownForKey:(id)arg1;	// IMP=0x00000000009d07bf
- (void)playKeyClickSoundForKey:(id)arg1;	// IMP=0x00000000009d063c
- (void)playKeyReleaseSoundForKey:(id)arg1;	// IMP=0x00000000009d05d9
- (void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000009d0019
- (void)touchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000009cf994
- (_Bool)pointInside:(struct CGPoint)arg1 forEvent:(struct __GSEvent *)arg2;	// IMP=0x00000000009cf44d
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000009cf3fd
- (_Bool)_pointAllowedInStaticHitBuffer:(struct CGPoint)arg1;	// IMP=0x00000000009cf19e
- (double)hitBuffer;	// IMP=0x00000000009cf10d
- (struct CGRect)_paddedKeyUnionFrame;	// IMP=0x00000000009cee77
- (_Bool)_handleTouchForEmojiInputView;	// IMP=0x00000000009cedaa
- (void)prepareForFloatingTransition:(_Bool)arg1;	// IMP=0x00000000009ced1c
- (void)setSplit:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x00000000009cebb2
- (void)_autoSplit:(id)arg1;	// IMP=0x00000000009cea70
- (void)setSplitProgress:(double)arg1;	// IMP=0x00000000009ce9e4
- (void)pinchHandler:(id)arg1;	// IMP=0x00000000009ce970
- (void)pinchDidConsumeTouch:(id)arg1;	// IMP=0x00000000009ce91b
- (void)didDetectPinchWithSeparation:(double)arg1;	// IMP=0x00000000009ce876
- (_Bool)pinchCanBeginWithTouches:(id)arg1 andScale:(double)arg2;	// IMP=0x00000000009ce63b
- (_Bool)pinchSplitGestureEnabled;	// IMP=0x00000000009ce631
- (_Bool)pinchDetected;	// IMP=0x00000000009ce614
- (void)finishSplitTransitionWithProgress:(double)arg1;	// IMP=0x00000000009ce5f6
- (void)finishSplitTransitionWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000009ce4e0
- (void)finishSplitTransition;	// IMP=0x00000000009ce4cc
- (void)finishSplitWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000009ce1ee
- (void)showSplitTransitionView:(_Bool)arg1;	// IMP=0x00000000009ce09a
- (void)prepareForSplitTransition;	// IMP=0x00000000009cdfce
- (id)hostViewForResizingKeyplane:(id)arg1;	// IMP=0x00000000009cdfc5
- (void)resizeKeyplaneAndRedraw:(_Bool)arg1;	// IMP=0x00000000009cdb38
- (_Bool)keyplaneSupportsResizingGesture;	// IMP=0x00000000009cdaff
- (_Bool)keyplaneUsesResizingOffset;	// IMP=0x00000000009cda03
- (void)_didTapBiasEscapeButton:(id)arg1;	// IMP=0x00000000009cd99c
- (void)_setBiasEscapeButtonVisible:(_Bool)arg1;	// IMP=0x00000000009cd437
- (void)setKeyboardBias:(long long)arg1;	// IMP=0x00000000009cd3bf
- (long long)currentHandBias;	// IMP=0x00000000009cd357
- (double)biasedKeyboardWidthRatio;	// IMP=0x00000000009cd2f6
- (void)calculateReachabilityScoreWithKey:(id)arg1 keyError:(struct CGPoint)arg2;	// IMP=0x00000000009cce10
- (void)resetHRRLayoutState;	// IMP=0x00000000009ccdcf
- (void)setNeedsVirtualDriftUpdate;	// IMP=0x00000000009ccd7a
- (_Bool)_handRestRecognizerCancelShouldBeEnd;	// IMP=0x00000000009ccd5d
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)arg1;	// IMP=0x00000000009cca2c
- (struct CGPoint)getCenterForKeyUnderRightIndexFinger;	// IMP=0x00000000009cc928
- (struct CGPoint)getCenterForKeyUnderLeftIndexFinger;	// IMP=0x00000000009cc824
- (void)handRestRecognizerNotifyRestForBegin:(_Bool)arg1 location:(struct CGPoint)arg2 timestamp:(double)arg3 pathIndex:(int)arg4 touchUUID:(id)arg5 context:(id)arg6;	// IMP=0x00000000009cc733
- (CDUnknownBlockType)handRestRecognizerSilenceNextTouchDown;	// IMP=0x00000000009cc719
- (struct CGSize)handRestRecognizerStandardKeyPixelSize;	// IMP=0x00000000009cc56f
- (id)handRestRecognizerGetHomeRowHint;	// IMP=0x00000000009cc37a
- (id)getSortedKeysForDisplayRowHint:(int)arg1;	// IMP=0x00000000009cc166
- (_Bool)handRestRecognizerShouldNeverIgnoreTouchState:(id)arg1 fromPoint:(struct CGPoint)arg2 toPoint:(struct CGPoint)arg3 forRestingState:(unsigned long long)arg4 otherRestedTouchLocations:(id)arg5;	// IMP=0x00000000009cbd32
- (unsigned char)getHandRestRecognizerState;	// IMP=0x00000000009cbb31
- (void)layoutSubviews;	// IMP=0x00000000009cbab4
- (unsigned long long)targetEdgesForScreenGestureRecognition;	// IMP=0x00000000009cba83
- (_Bool)shouldDeactivateWithoutWindow;	// IMP=0x00000000009cba7b
- (id)activationIndicatorView;	// IMP=0x00000000009ca096
- (void)setHideKeysUnderIndicator:(_Bool)arg1;	// IMP=0x00000000009c9fe7
- (_Bool)shouldShowIndicator;	// IMP=0x00000000009c9f8b
- (void)showPopupVariantsForKey:(id)arg1;	// IMP=0x00000000009c8d2c
- (id)_variantsOfCurrencyKey:(id)arg1 language:(id)arg2;	// IMP=0x00000000009c8b4f
- (id)_variantsByAppendingDualStringKey:(id)arg1 toVariants:(id)arg2;	// IMP=0x00000000009c8950
- (id)_appendingSecondaryStringToVariantsTop:(id)arg1 secondaryString:(id)arg2 withDirection:(id)arg3;	// IMP=0x00000000009c889a
- (id)_keyplaneVariantsKeyForString:(id)arg1;	// IMP=0x00000000009c8854
- (id)_keyboardLongPressInteractionRegions;	// IMP=0x00000000009c85fb
- (void)longPressAction;	// IMP=0x00000000009c7b26
- (void)showMenu:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000009c7aa9
- (_Bool)shouldShowInternationalMenuForKey:(id)arg1;	// IMP=0x00000000009c7a57
- (_Bool)isLongPressedKey:(id)arg1;	// IMP=0x00000000009c79d6
- (_Bool)isShiftKeyPlaneChooser;	// IMP=0x00000000009c78e6
- (void)restoreDefaultsForAllKeys;	// IMP=0x00000000009c789c
- (void)restoreDefaultsForKey:(id)arg1;	// IMP=0x00000000009c77f9
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x00000000009c77c4
- (void)setAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x00000000009c778f
- (void)setTarget:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000009c775a
- (void)setLabel:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000009c727f
- (void)updateLayoutTags;	// IMP=0x00000000009c6cc4
@property(retain, nonatomic) NSString *layoutTag; // @synthesize layoutTag=_layoutTag;
- (void)didClearInput;	// IMP=0x00000000009c6c18
- (void)touchMultitapTimer;	// IMP=0x00000000009c6b53
- (void)cancelMultitapTimer;	// IMP=0x00000000009c6b1a
- (_Bool)isMultitapKey:(id)arg1;	// IMP=0x00000000009c6a96
- (void)handleMultitapTimerFired;	// IMP=0x00000000009c69dc
- (void)multitapExpired;	// IMP=0x00000000009c6993
- (void)endMultitapForKey:(id)arg1;	// IMP=0x00000000009c6972
- (void)multitapInterrupted;	// IMP=0x00000000009c67a5
- (_Bool)canMultitap;	// IMP=0x00000000009c6746
- (id)multitapForwardKeys;	// IMP=0x00000000009c6722
- (id)multitapCompleteKeys;	// IMP=0x00000000009c66fe
- (id)activeMultitapCompleteKey;	// IMP=0x00000000009c63f1
- (_Bool)hasAccentKey;	// IMP=0x00000000009c63c6
- (_Bool)hasCandidateKeys;	// IMP=0x00000000009c639b
- (id)candidateList;	// IMP=0x00000000009c6331
- (void)logHandwritingData;	// IMP=0x00000000009c62b4
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;	// IMP=0x00000000009c6222
- (void)clearHandwritingStrokesIfNeededAndNotify:(_Bool)arg1;	// IMP=0x00000000009c617f
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 inputFlags:(int)arg3;	// IMP=0x00000000009c5d9e
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 touchInfo:(id)arg3 inputFlags:(int)arg4;	// IMP=0x00000000009c5d1d
- (id)currentRepresentedStringForDualDisplayKey:(id)arg1;	// IMP=0x00000000009c5c20
- (void)updatePhysicalKeyboardEvent:(id)arg1 withMarkedInput:(id)arg2;	// IMP=0x00000000009c5a6d
- (_Bool)isDeadkeyInput:(id)arg1;	// IMP=0x00000000009c5a17
- (void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 executionContextPassingUIKBTree:(id)arg3;	// IMP=0x00000000009c50f5
- (id)unprocessedTouchEventsForTouchInfo:(id)arg1 touchStage:(int)arg2 forcedKeyCode:(int)arg3;	// IMP=0x00000000009c4e56
- (int)keycodeForKey:(id)arg1;	// IMP=0x00000000009c4e1a
- (_Bool)shouldIgnoreDistantKey;	// IMP=0x00000000009c4d9b
- (_Bool)shouldPreventInputManagerHitTestingForKey:(id)arg1;	// IMP=0x00000000009c4d86
- (_Bool)isGeometricShiftOrMoreKeyForTouch:(id)arg1;	// IMP=0x00000000009c4ced
- (id)keyHitTest:(struct CGPoint)arg1;	// IMP=0x00000000009c4c72
- (id)keyHitTestWithoutCharging:(struct CGPoint)arg1;	// IMP=0x00000000009c4b88
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1 inKeys:(id)arg2;	// IMP=0x00000000009c493e
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1;	// IMP=0x00000000009c48e6
- (id)keyHitTestContainingPoint:(struct CGPoint)arg1;	// IMP=0x00000000009c471c
- (id)keyViewHitTestForPoint:(struct CGPoint)arg1;	// IMP=0x00000000009c452a
- (_Bool)shouldHitTestKey:(id)arg1;	// IMP=0x00000000009c44c8
- (void)finishSliderBehaviorFeedback;	// IMP=0x00000000009c448b
- (void)provideSliderBehaviorFeedback;	// IMP=0x00000000009c4460
- (void)prepareSliderBehaviorFeedback;	// IMP=0x00000000009c43e6
- (_Bool)isTrackpadMode;	// IMP=0x00000000009c43d6
- (void)deactivateActiveKey;	// IMP=0x00000000009c4369
- (void)deactivateActiveKeys;	// IMP=0x00000000009c42aa
- (void)deactivateActiveKeysClearingTouchInfo:(_Bool)arg1 clearingDimming:(_Bool)arg2;	// IMP=0x00000000009c4178
- (void)cleanupPreviousKeyboardWithNewInputTraits:(id)arg1;	// IMP=0x00000000009c40d8
- (id)initialKeyplaneNameWithKBStarName:(id)arg1;	// IMP=0x00000000009c3d19
- (_Bool)shouldUseDefaultShiftStateFromLayout;	// IMP=0x00000000009c3d11
- (void)setToInitialKeyplane;	// IMP=0x00000000009c3cc5
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x00000000009c3c9e
- (void)reloadKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x00000000009c3c77
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5 reload:(_Bool)arg6;	// IMP=0x00000000009c395f
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5;	// IMP=0x00000000009c3943
- (_Bool)_shouldInheritScreenScaleAsContentScaleFactor;	// IMP=0x00000000009c393b
- (void)updateCachedKeyplaneKeycaps;	// IMP=0x00000000009c3715
- (id)cacheTokenForKeyplane:(id)arg1 caseAlternates:(_Bool)arg2;	// IMP=0x00000000009c3567
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1;	// IMP=0x00000000009c34e9
@property(readonly, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager; // @synthesize emojiKeyManager=_emojiKeyManager;
- (Class)keyViewAnimatorClassForCurrentKeyboardLayout;	// IMP=0x00000000009c348c
- (id)keyViewAnimator;	// IMP=0x00000000009c3454
- (void)updateState:(int)arg1 forKey:(id)arg2;	// IMP=0x00000000009c340f
- (void)setState:(int)arg1 forKey:(id)arg2;	// IMP=0x00000000009c33eb
- (int)stateForKey:(id)arg1;	// IMP=0x00000000009c33ce
- (void)refreshForDictationAvailablityDidChange;	// IMP=0x00000000009c3331
- (_Bool)shouldMergeKey:(id)arg1;	// IMP=0x00000000009c3050
- (id)inputModeToMergeCapsLockKey;	// IMP=0x00000000009c300d
- (_Bool)canAddRomanSwitchKey;	// IMP=0x00000000009c2f39
- (void)relayoutForWriteboardKey;	// IMP=0x00000000009c2da2
- (void)transitionToModalContinuousPathKeyplane;	// IMP=0x00000000009c2cc9
- (void)updateReturnKeysIfNeeded;	// IMP=0x00000000009c2c20
- (void)updateMoreAndInternationalKeys;	// IMP=0x00000000009c24e6
- (void)_transformCarPlayIfNecessary;	// IMP=0x00000000009c242c
- (void)_transformFloatingKeyboardIfNecessary;	// IMP=0x00000000009c2382
- (void)_addResizeTransformationIfNecessary;	// IMP=0x00000000009c22d8
- (void)_addExtraControlKeysIfNecessary;	// IMP=0x00000000009c222e
- (id)_currentKeyplaneTransformationContext;	// IMP=0x00000000009c2130
- (_Bool)_shouldAttemptToAddSupplementaryControlKeys;	// IMP=0x00000000009c1fbf
- (void)_updateSupplementaryKeys;	// IMP=0x00000000009c1c37
- (void)_swapGlobeAndMoreKeysIfNecessary;	// IMP=0x00000000009c182b
- (void)mergeKeysIfNeeded;	// IMP=0x00000000009c1775
- (id)keylistContainingKey:(id)arg1;	// IMP=0x00000000009c14e9
- (int)stateForKeyplaneSwitchKey:(id)arg1;	// IMP=0x00000000009c1389
- (void)setTextEditingTraits:(id)arg1;	// IMP=0x00000000009c0eab
- (unsigned long long)textEditingKeyMask;	// IMP=0x00000000009c0d58
- (int)stateForManipulationKey:(id)arg1;	// IMP=0x00000000009c0b53
- (id)highlightedVariantListForStylingKey:(id)arg1;	// IMP=0x00000000009c0a70
- (int)stateForStylingKey:(id)arg1;	// IMP=0x00000000009c096c
- (_Bool)supportStylingWithKey:(id)arg1;	// IMP=0x00000000009c0850
- (int)stateForDictationKey:(id)arg1;	// IMP=0x00000000009c0752
- (int)stateForCandidateListKey:(id)arg1;	// IMP=0x00000000009c0747
- (int)stateForMultitapForwardKey:(id)arg1;	// IMP=0x00000000009c0735
- (int)stateForMultitapReverseKey:(id)arg1;	// IMP=0x00000000009c06a4
- (int)displayTypeHintForShiftKey;	// IMP=0x00000000009c0614
- (int)displayTypeHintForMoreKey;	// IMP=0x00000000009c0563
- (void)setPercentSignKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x00000000009bffb6
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x00000000009bfabd
- (void)updateCurrencySymbolForKey:(id)arg1 withCurrencyString:(id)arg2;	// IMP=0x00000000009bf908
- (_Bool)_stringContainsCurrencyCharacters:(id)arg1;	// IMP=0x00000000009bf744
- (void)_setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x00000000009bf42e
- (void)setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x00000000009bf3a5
- (void)updateTransitionWithFlags:(unsigned long long)arg1;	// IMP=0x00000000009bf331
- (void)clearKeyAnnotationsIfNecessary;	// IMP=0x00000000009bef76
- (void)annotateWriteboardDisplayTypeHintForKeyIfNeeded;	// IMP=0x00000000009bec5b
- (_Bool)useUndoForMessagesWriteboard;	// IMP=0x00000000009bebe2
- (_Bool)useDismissForMessagesWriteboard;	// IMP=0x00000000009be868
- (_Bool)ignoreWriteboard;	// IMP=0x00000000009be7a6
- (void)annotateKeysWithDeveloperPunctuation;	// IMP=0x00000000009be2b2
- (void)reloadCurrentKeyplane;	// IMP=0x00000000009bb022
- (_Bool)_allowPaddle;	// IMP=0x00000000009bafb5
- (_Bool)_allowContinuousPathUI;	// IMP=0x00000000009bae69
- (_Bool)shouldIgnoreContinuousPathRequirements;	// IMP=0x00000000009bade9
- (_Bool)_allowStartingContinuousPathForTouchInfo:(id)arg1 alreadyActiveKeyExisting:(_Bool)arg2;	// IMP=0x00000000009babbf
- (unsigned long long)keyplaneShiftState;	// IMP=0x00000000009bab15
- (_Bool)shouldAllowCurrentKeyplaneReload;	// IMP=0x00000000009baaba
- (_Bool)shouldMergeAssistantBarWithKeyboardLayout;	// IMP=0x00000000009baa2b
- (struct CGSize)stretchFactor;	// IMP=0x00000000009ba89a
- (double)stretchFactorHeight;	// IMP=0x00000000009ba73a
- (_Bool)stretchKeyboardToFitKeyplane:(id)arg1;	// IMP=0x00000000009ba622
- (_Bool)stretchKeyboardToFit;	// IMP=0x00000000009ba605
- (_Bool)showsDedicatedEmojiKeyAlongsideGlobeButton;	// IMP=0x00000000009ba526
- (_Bool)globeKeyDisplaysAsEmojiKey;	// IMP=0x00000000009ba1c3
- (void)updateGlobeKeyDisplayString;	// IMP=0x00000000009ba13e
- (void)setTwoFingerTapTimestamp:(double)arg1;	// IMP=0x00000000009ba12c
- (_Bool)shouldAllowSelectionGestures:(_Bool)arg1 atPoint:(struct CGPoint)arg2 toBegin:(_Bool)arg3;	// IMP=0x00000000009b9dba
- (_Bool)isResized;	// IMP=0x00000000009b9d6e
- (_Bool)isResizing;	// IMP=0x00000000009b9d51
- (_Bool)supportsEmoji;	// IMP=0x00000000009b9d49
- (_Bool)canReuseKeyplaneView;	// IMP=0x00000000009b9bb2
- (_Bool)shouldShowDictationKey;	// IMP=0x00000000009b995c
- (void)updateBackgroundIfNeeded;	// IMP=0x00000000009b9766
- (void)updateBackgroundCorners;	// IMP=0x00000000009b96c4
- (_Bool)isHandwritingPlane;	// IMP=0x00000000009b9635
- (void)didEndIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x00000000009b9368
- (_Bool)isDeveloperGestureKeybaord;	// IMP=0x00000000009b9312
- (void)didEndIndirectSelectionGesture;	// IMP=0x00000000009b92fb
- (void)cancelTouchesForTwoFingerTapGesture:(id)arg1;	// IMP=0x00000000009b92b0
- (void)willBeginIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x00000000009b8fc0
- (void)willBeginIndirectSelectionGesture;	// IMP=0x00000000009b8fa9
- (void)setPasscodeOutlineAlpha:(double)arg1;	// IMP=0x00000000009b8eaa
- (void)didTriggerDestructiveRenderConfigChange;	// IMP=0x00000000009b8e71
- (void)setRenderConfig:(id)arg1 updateKeyplane:(_Bool)arg2;	// IMP=0x00000000009b8c9e
- (void)traitCollectionDidChange;	// IMP=0x00000000009b8ac4
- (struct CGImage *)renderedKeyplaneWithToken:(id)arg1 split:(_Bool)arg2;	// IMP=0x00000000009b8a2d
- (struct CGImage *)renderedImageWithToken:(id)arg1;	// IMP=0x00000000009b8746
- (struct CGImage *)renderedImageWithStateFallbacksForToken:(id)arg1;	// IMP=0x00000000009b869d
- (struct CGImage *)cachedCompositeImageWithCacheKey:(id)arg1;	// IMP=0x00000000009b847b
- (void)rebuildSplitTransitionView;	// IMP=0x00000000009b8254
- (_Bool)shouldMatchCaseForDomainKeys;	// IMP=0x00000000009b824c
- (void)updateLocalizedKeysForKeyplane:(id)arg1 updateAllKeyplanes:(_Bool)arg2;	// IMP=0x00000000009b7fe4
- (void)updateLocalizedKeys:(_Bool)arg1;	// IMP=0x00000000009b7fac
- (void)updateInputModeLocalizedKeysForKeyplane:(id)arg1;	// IMP=0x00000000009b7643
- (void)updateLocalizedDisplayStringsForKeys:(id)arg1;	// IMP=0x00000000009b6dba
- (void)updateAutolocalizedKeysForKeyplane:(id)arg1;	// IMP=0x00000000009b6c92
- (void)updateLocalizedKeysOnKeyplane:(id)arg1;	// IMP=0x00000000009b658b
- (void)nextToUseInputModeDidChange:(id)arg1;	// IMP=0x00000000009b64ed
- (id)internationalKeyDisplayStringOnEmojiKeyboard;	// IMP=0x00000000009b6493
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)arg1 withInputMode:(id)arg2;	// IMP=0x00000000009b611a
- (_Bool)canProduceString:(id)arg1;	// IMP=0x00000000009b5bc7
@property(readonly, nonatomic) _Bool hasActiveKeys;
- (double)lastTouchDownTimestamp;	// IMP=0x00000000009b5b7a
- (double)lastTouchUpTimestamp;	// IMP=0x00000000009b5b68
- (void)setKeyboardName:(id)arg1 appearance:(long long)arg2;	// IMP=0x00000000009b57c6
- (id)keyForKeyboardName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x00000000009b5775
- (void)updateKeyboardForKeyplane:(id)arg1;	// IMP=0x00000000009b5639
- (struct CGSize)sizeForKeyplane:(id)arg1;	// IMP=0x00000000009b542c
- (_Bool)allKeyplanesHaveSameHeight;	// IMP=0x00000000009b5240
- (void)setKeyboardAppearance:(long long)arg1;	// IMP=0x00000000009b4f9c
- (int)visualStyleForKeyboardIfSplit:(_Bool)arg1;	// IMP=0x00000000009b4ede
- (void)refreshForRivenPreferences;	// IMP=0x00000000009b4d76
- (void)tearDownSplitTransitionView;	// IMP=0x00000000009b4cf9
- (struct CGRect)frameForKeylayoutName:(id)arg1;	// IMP=0x00000000009b4c11
- (struct CGRect)frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2;	// IMP=0x00000000009b4bbb
- (struct CGRect)dragGestureRectInView:(id)arg1;	// IMP=0x00000000009b49e6
- (id)defaultKeyplaneForKeyplane:(id)arg1;	// IMP=0x00000000009b498e
- (id)splitNameForKeyplane:(id)arg1;	// IMP=0x00000000009b4924
- (id)splitNameForKeyplaneName:(id)arg1;	// IMP=0x00000000009b48f2
- (id)defaultNameForKeyplaneName:(id)arg1;	// IMP=0x00000000009b48cf
@property(readonly, nonatomic) NSString *localizedInputMode;
- (SEL)handlerForNotification:(id)arg1;	// IMP=0x00000000009b431f
- (void)flushKeyCache:(id)arg1;	// IMP=0x00000000009b4166
- (void)removeFromSuperview;	// IMP=0x00000000009b40d5
- (void)clearTransientState;	// IMP=0x00000000009b4059
- (void)clearUnusedObjects:(_Bool)arg1;	// IMP=0x00000000009b3cf7
- (void)willMoveToWindow:(id)arg1;	// IMP=0x00000000009b3c93
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000009b3c52
- (void)accessibilitySensitivityChanged;	// IMP=0x00000000009b3c1c
- (void)removePathEffectViewConstraintsIfNeeded;	// IMP=0x00000000009b3bd7
- (void)dealloc;	// IMP=0x00000000009b37f0
- (id)initWithFrame:(struct CGRect)arg1;	// IMP=0x00000000009b3577
@property(readonly, nonatomic, getter=isRotating) _Bool rotating;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;	// IMP=0x00000000009dfd4c
- (id)popupKeyViews;	// IMP=0x00000000009dfb72
- (struct CGRect)frameForLastKeyWithRepresentedString:(id)arg1;	// IMP=0x00000000009df99e
- (struct CGRect)frameForKeyWithRepresentedString:(id)arg1;	// IMP=0x00000000009df5f2
- (id)keyWithRepresentedString:(id)arg1;	// IMP=0x00000000009df424
- (id)keyplaneView:(id)arg1 containingViewForActiveKey:(id)arg2;	// IMP=0x00000000009e11a5
- (void)_didChangeKeyplaneWithContext:(id)arg1;	// IMP=0x00000000009e1131
- (void)showPopupView:(long long)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(_Bool)arg4;	// IMP=0x00000000009e1011
- (void)setKeyboardDim:(_Bool)arg1;	// IMP=0x00000000009e0e49
- (void)setPreferredHeight:(double)arg1;	// IMP=0x00000000009e0d2e
- (void)setDisableInteraction:(_Bool)arg1;	// IMP=0x00000000009e0ce3
- (void)setKeyboardDim:(_Bool)arg1 amount:(double)arg2 withDuration:(double)arg3;	// IMP=0x00000000009e09c3
- (void)dismissGestureKeyboardIntroduction;	// IMP=0x00000000009e0985
- (void)handleDismissFlickView;	// IMP=0x00000000009e0928
- (void)handleDismissFlickView:(id)arg1;	// IMP=0x00000000009e0803
- (void)handlePopupView;	// IMP=0x00000000009e0741
- (void)handlePopupView:(id)arg1;	// IMP=0x00000000009e068f
- (void)showFlickView:(long long)arg1 withKey:(id)arg2 flickString:(id)arg3;	// IMP=0x00000000009e0617
- (_Bool)handleFlick:(id)arg1;	// IMP=0x00000000009e0281
- (void)populateFlickPopupsForKey:(id)arg1;	// IMP=0x00000000009dfee1
- (id)flickStringForInputKey:(id)arg1 direction:(long long)arg2;	// IMP=0x00000000009dfda5
- (id)flickPopupStringForKey:(id)arg1 withString:(id)arg2;	// IMP=0x00000000009dfd64
- (void)finishContinuousPathView:(_Bool)arg1;	// IMP=0x00000000009e1c93
- (void)clearContinuousPathView;	// IMP=0x00000000009e1bc8
- (void)addContinuousPathPoint:(struct CGPoint)arg1 withTimestamp:(double)arg2;	// IMP=0x00000000009e1a88
- (void)didBeginContinuousPath;	// IMP=0x00000000009e17e0
- (void)transitionToPunctuationKeysVisible:(_Bool)arg1;	// IMP=0x00000000009e17da
- (void)_transitionToContinuousPathState:(long long)arg1 forTouchInfo:(id)arg2;	// IMP=0x00000000009e173f
@property(retain, nonatomic) UIKeyboardPathEffectView *pathEffectView;
- (void)didMoveToWindow;	// IMP=0x00000000009e12ea
- (_Bool)_continuousPathModalPunctuationPlaneEnabled;	// IMP=0x00000000009e1272
- (_Bool)_continuousPathSpotlightEffectEnabled;	// IMP=0x00000000009e1236

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

