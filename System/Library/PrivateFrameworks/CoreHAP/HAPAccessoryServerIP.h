//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreHAP/HAPAccessoryServerMetricProtocol-Protocol.h>
#import <CoreHAP/HAPAuthSessionDelegate-Protocol.h>
#import <CoreHAP/HAPHTTPClientDebugDelegate-Protocol.h>
#import <CoreHAP/HAPHTTPClientDelegate-Protocol.h>
#import <CoreHAP/HAPWACAccessoryClientDelegate-Protocol.h>
#import <CoreHAP/HMFNetMonitorDelegate-Protocol.h>
#import <CoreHAP/HMFTimerDelegate-Protocol.h>

@class HAPAccessory, HAPAccessoryProtocolInfo, HAPAccessoryServerBrowserIP, HAPAccessoryWiFiConfiguration, HAPAuthSession, HAPHTTPClient, HAPWACAccessory, HMFBlockOperation, HMFNetAddress, HMFNetMonitor, HMFTimer, HMFUnfairLock, NSArray, NSData, NSDate, NSDictionary, NSMutableArray, NSObject, NSOperationQueue, NSString;
@protocol OS_dispatch_queue;

@interface HAPAccessoryServerIP <HAPAccessoryServerMetricProtocol, HAPHTTPClientDelegate, HAPHTTPClientDebugDelegate, HMFTimerDelegate, HAPAuthSessionDelegate, HMFNetMonitorDelegate, HAPWACAccessoryClientDelegate>
{
    struct PairingSessionPrivate *_pairingSession;	// 32 = 0x20
    unsigned long long _featureFlags;	// 40 = 0x28
    HMFUnfairLock *_lock;	// 48 = 0x30
    long long _idleTimerActiveSessions;	// 56 = 0x38
    _Bool _retryingPairSetup;	// 64 = 0x40
    _Bool _establishingSecureConnection;	// 65 = 0x41
    _Bool _wacAccessory;	// 66 = 0x42
    _Bool _wacComplete;	// 67 = 0x43
    _Bool _wacLegacy;	// 68 = 0x44
    _Bool _preSoftAuthWacStarted;	// 69 = 0x45
    _Bool _postSoftAuthWacStarted;	// 70 = 0x46
    _Bool _bonjourDiscoveryPending;	// 71 = 0x47
    _Bool _hasUpdatedBonjour;	// 72 = 0x48
    _Bool _authenticated;	// 73 = 0x49
    _Bool _hasAttributeDatabase;	// 74 = 0x4a
    _Bool _econnresetRetryInProgress;	// 75 = 0x4b
    _Bool _invalidated;	// 76 = 0x4c
    _Bool _continuingLegacyWACpairing;	// 77 = 0x4d
    _Bool _wacStarted;	// 78 = 0x4e
    _Bool _hasStartedPairing;	// 79 = 0x4f
    _Bool _pairingRequestPending;	// 80 = 0x50
    _Bool _tokenValidationPending;	// 81 = 0x51
    _Bool _handlingInvalidSetupCode;	// 82 = 0x52
    int _cancelPairingErr;	// 84 = 0x54
    HAPWACAccessory *_hapWACAccessory;	// 88 = 0x58
    NSDictionary *_bonjourDeviceInfo;	// 96 = 0x60
    NSObject<OS_dispatch_queue> *_reachabilityQueue;	// 104 = 0x68
    HMFTimer *_reachabilityEventTimer;	// 112 = 0x70
    double _minimumReachabilityPingInterval;	// 120 = 0x78
    unsigned long long _abruptDisconnectionCounter;	// 128 = 0x80
    NSDate *_reachabilityStartTime;	// 136 = 0x88
    NSString *_model;	// 144 = 0x90
    NSString *_sourceVersion;	// 152 = 0x98
    unsigned long long _statusFlags;	// 160 = 0xa0
    NSData *_token;	// 168 = 0xa8
    unsigned long long _metricHAPIPInvalidationCount;	// 176 = 0xb0
    unsigned long long _metricHAPIPHTTPEventsCount;	// 184 = 0xb8
    unsigned long long _metricHAPIPHTTPRequestsCount;	// 192 = 0xc0
    unsigned long long _metricHAPIPHTTPResponsesCount;	// 200 = 0xc8
    HAPAccessoryServerBrowserIP *_browser;	// 208 = 0xd0
    NSArray *_ipServices;	// 216 = 0xd8
    NSMutableArray *_queuedOperations;	// 224 = 0xe0
    HAPAccessory *_primaryAccessoryForServer;	// 232 = 0xe8
    HAPAuthSession *_authSession;	// 240 = 0xf0
    HAPAccessoryProtocolInfo *_authenticatedProtocolInfo;	// 248 = 0xf8
    CDUnknownBlockType _pairVerifyCompletionBlock;	// 256 = 0x100
    CDUnknownBlockType _netServiceResolveCompletionBlock;	// 264 = 0x108
    HMFBlockOperation *_pairOperation;	// 272 = 0x110
    NSOperationQueue *_clientOperationQueue;	// 280 = 0x118
    NSData *_ownershipToken;	// 288 = 0x120
    HAPAccessoryWiFiConfiguration *_wifiConfiguration;	// 296 = 0x128
    HMFTimer *_bonjourEventTimer;	// 304 = 0x130
    HMFNetMonitor *_networkMonitor;	// 312 = 0x138
    HMFTimer *_connectionIdleTimer;	// 320 = 0x140
    double _disconnectOnIdleTimeout;	// 328 = 0x148
    HAPHTTPClient *_httpClient;	// 336 = 0x150
}

+ (id)sharedPairOperationQueue;	// IMP=0x000000000004611e
+ (void)initialize;	// IMP=0x00000000000460f7
- (void).cxx_destruct;	// IMP=0x0000000000031ff2
@property(retain, nonatomic) HAPHTTPClient *httpClient; // @synthesize httpClient=_httpClient;
@property double disconnectOnIdleTimeout; // @synthesize disconnectOnIdleTimeout=_disconnectOnIdleTimeout;
@property(retain, nonatomic) HMFTimer *connectionIdleTimer; // @synthesize connectionIdleTimer=_connectionIdleTimer;
@property(nonatomic) int cancelPairingErr; // @synthesize cancelPairingErr=_cancelPairingErr;
@property(nonatomic, getter=isHandlingInvalidSetupCode) _Bool handlingInvalidSetupCode; // @synthesize handlingInvalidSetupCode=_handlingInvalidSetupCode;
@property(nonatomic, getter=isTokenValidationPending) _Bool tokenValidationPending; // @synthesize tokenValidationPending=_tokenValidationPending;
@property(nonatomic, getter=isPairingRequestPending) _Bool pairingRequestPending; // @synthesize pairingRequestPending=_pairingRequestPending;
@property(readonly, nonatomic) HMFNetMonitor *networkMonitor; // @synthesize networkMonitor=_networkMonitor;
@property(nonatomic) _Bool hasStartedPairing; // @synthesize hasStartedPairing=_hasStartedPairing;
@property(retain, nonatomic) HMFTimer *bonjourEventTimer; // @synthesize bonjourEventTimer=_bonjourEventTimer;
@property(nonatomic, getter=isWacStarted) _Bool wacStarted; // @synthesize wacStarted=_wacStarted;
@property(nonatomic, getter=isContinuingLegacyWACpairing) _Bool continuingLegacyWACpairing; // @synthesize continuingLegacyWACpairing=_continuingLegacyWACpairing;
@property(retain, nonatomic) HAPAccessoryWiFiConfiguration *wifiConfiguration; // @synthesize wifiConfiguration=_wifiConfiguration;
@property(nonatomic) _Bool invalidated; // @synthesize invalidated=_invalidated;
@property(readonly, nonatomic) NSData *ownershipToken; // @synthesize ownershipToken=_ownershipToken;
@property(readonly, nonatomic) NSOperationQueue *clientOperationQueue; // @synthesize clientOperationQueue=_clientOperationQueue;
@property(retain, nonatomic) HMFBlockOperation *pairOperation; // @synthesize pairOperation=_pairOperation;
@property(nonatomic) _Bool econnresetRetryInProgress; // @synthesize econnresetRetryInProgress=_econnresetRetryInProgress;
@property(nonatomic) _Bool hasAttributeDatabase; // @synthesize hasAttributeDatabase=_hasAttributeDatabase;
@property(copy, nonatomic) CDUnknownBlockType netServiceResolveCompletionBlock; // @synthesize netServiceResolveCompletionBlock=_netServiceResolveCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType pairVerifyCompletionBlock; // @synthesize pairVerifyCompletionBlock=_pairVerifyCompletionBlock;
@property(nonatomic) _Bool authenticated; // @synthesize authenticated=_authenticated;
@property(retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo; // @synthesize authenticatedProtocolInfo=_authenticatedProtocolInfo;
@property(readonly, nonatomic) HAPAuthSession *authSession; // @synthesize authSession=_authSession;
@property(retain, nonatomic) HAPAccessory *primaryAccessoryForServer; // @synthesize primaryAccessoryForServer=_primaryAccessoryForServer;
@property(retain, nonatomic) NSMutableArray *queuedOperations; // @synthesize queuedOperations=_queuedOperations;
@property(retain, nonatomic) NSArray *ipServices; // @synthesize ipServices=_ipServices;
@property(nonatomic) __weak HAPAccessoryServerBrowserIP *browser; // @synthesize browser=_browser;
@property(nonatomic) _Bool hasUpdatedBonjour; // @synthesize hasUpdatedBonjour=_hasUpdatedBonjour;
@property(nonatomic) unsigned long long metricHAPIPHTTPResponsesCount; // @synthesize metricHAPIPHTTPResponsesCount=_metricHAPIPHTTPResponsesCount;
@property(nonatomic) unsigned long long metricHAPIPHTTPRequestsCount; // @synthesize metricHAPIPHTTPRequestsCount=_metricHAPIPHTTPRequestsCount;
@property(nonatomic) unsigned long long metricHAPIPHTTPEventsCount; // @synthesize metricHAPIPHTTPEventsCount=_metricHAPIPHTTPEventsCount;
@property(nonatomic) unsigned long long metricHAPIPInvalidationCount; // @synthesize metricHAPIPInvalidationCount=_metricHAPIPInvalidationCount;
@property(copy, nonatomic) NSData *token; // @synthesize token=_token;
@property(nonatomic) unsigned long long statusFlags; // @synthesize statusFlags=_statusFlags;
@property(copy, nonatomic) NSString *sourceVersion; // @synthesize sourceVersion=_sourceVersion;
@property(copy, nonatomic) NSString *model; // @synthesize model=_model;
@property(retain, nonatomic) NSDate *reachabilityStartTime; // @synthesize reachabilityStartTime=_reachabilityStartTime;
@property(nonatomic) double minimumReachabilityPingInterval; // @synthesize minimumReachabilityPingInterval=_minimumReachabilityPingInterval;
@property(retain, nonatomic) HMFTimer *reachabilityEventTimer; // @synthesize reachabilityEventTimer=_reachabilityEventTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *reachabilityQueue; // @synthesize reachabilityQueue=_reachabilityQueue;
- (void)disconnectOnIdleUpdated;	// IMP=0x0000000000031a49
- (void)_suspendConnectionIdleTimer;	// IMP=0x0000000000031877
- (void)_startConnectionIdleTimer;	// IMP=0x0000000000031583
- (void)_kickConnectionIdleTimer;	// IMP=0x00000000000313f8
- (void)_handleConnectionIdleTimeout;	// IMP=0x0000000000031298
- (void)updateActiveDisconnectOnIdleTimeout:(double)arg1;	// IMP=0x0000000000031218
- (_Bool)_delegateRespondsToSelector:(SEL)arg1;	// IMP=0x000000000003116c
- (void)_accessoryDidBecomeUnreachable:(id)arg1;	// IMP=0x0000000000030db5
- (void)pollAccessory;	// IMP=0x0000000000030d44
- (void)_doPollForAccessory:(id)arg1;	// IMP=0x0000000000030a21
- (void)_doReachabilityWithError:(id)arg1 forAccessory:(id)arg2;	// IMP=0x0000000000030545
- (void)_indicateSessionActivityWithReason:(id)arg1;	// IMP=0x00000000000304b1
- (void)_startReachability;	// IMP=0x00000000000301c4
- (double)_getReachabilityTimeoutValue;	// IMP=0x0000000000030100
- (double)_getReachabilityTimeoutValueWithSleepInterval:(id)arg1;	// IMP=0x00000000000300bf
- (void)_stopReachability;	// IMP=0x000000000002ff66
- (void)_stopReachabilityTimer;	// IMP=0x000000000002fe62
- (_Bool)pingSupported;	// IMP=0x000000000002fe5a
- (void)stopPing;	// IMP=0x000000000002fde9
- (void)startPing;	// IMP=0x000000000002fd78
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000002fcc7
- (void)httpClient:(id)arg1 willSendHTTPMessageWithHeaders:(id)arg2 body:(id)arg3;	// IMP=0x000000000002fb73
- (void)httpClient:(id)arg1 didReceiveHTTPMessageWithHeaders:(id)arg2 body:(id)arg3;	// IMP=0x000000000002fa1f
- (void)_handleListPairingsResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 httpError:(id)arg4 completionQueue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x000000000002f28c
- (void)_listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000002ee48
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000002ed6c
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000002e7b5
- (void)_handlePairingsResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 httpError:(id)arg4 removeRequest:(_Bool)arg5 completionQueue:(id)arg6 completionBlock:(CDUnknownBlockType)arg7;	// IMP=0x000000000002de9a
- (void)_sendRemovePairingWithData:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000002dd7f
- (void)_establishSecureSessionAndRemovePairing:(id)arg1 queue:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000002da68
- (void)_removePairingWithIdentifier:(id)arg1 publicKey:(id)arg2 queue:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000002d7af
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000002d6a5
- (void)_startAddPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(_Bool)arg3 queue:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000000002d1c1
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000002d0b6
- (void)authSession:(id)arg1 authComplete:(id)arg2;	// IMP=0x000000000002d005
- (void)authSession:(id)arg1 confirmUUID:(id)arg2 token:(id)arg3;	// IMP=0x000000000002cefa
- (void)authSession:(id)arg1 authenticateUUID:(id)arg2 token:(id)arg3;	// IMP=0x000000000002cdef
- (void)authSession:(id)arg1 validateUUID:(id)arg2 token:(id)arg3;	// IMP=0x000000000002cce4
- (void)authSession:(id)arg1 sendAuthExchangeData:(id)arg2;	// IMP=0x000000000002cb72
- (void)tearDownSessionOnAuthCompletion;	// IMP=0x000000000002cb01
- (void)provisionToken:(id)arg1;	// IMP=0x000000000002c99a
- (void)continueAuthAfterValidation:(_Bool)arg1;	// IMP=0x000000000002c84f
- (void)authenticateAccessory;	// IMP=0x000000000002c7de
- (_Bool)_validateAuthChallengeResponse:(id)arg1 expectedTID:(unsigned char)arg2 error:(id *)arg3;	// IMP=0x000000000002c1ce
- (void)_validatePairingAuthMethod:(CDUnknownBlockType)arg1 activity:(id)arg2;	// IMP=0x000000000002b647
- (void)validatePairingAuthMethod:(CDUnknownBlockType)arg1;	// IMP=0x000000000002b52e
- (_Bool)_validateProtocolInfo:(id)arg1;	// IMP=0x000000000002b1e5
- (void)getAccessoryInfo:(CDUnknownBlockType)arg1;	// IMP=0x000000000002b084
- (void)networkMonitorIsUnreachable:(id)arg1;	// IMP=0x000000000002afd3
- (void)networkMonitorIsReachable:(id)arg1;	// IMP=0x000000000002af22
- (void)timerDidFire:(id)arg1;	// IMP=0x000000000002ac75
- (void)validateReachabilityTimer;	// IMP=0x000000000002ac04
- (int)_handlePairVerifyCompletionWithData:(id)arg1;	// IMP=0x000000000002a512
- (int)_pairVerifyStartWithRetry:(_Bool)arg1;	// IMP=0x000000000002a10f
- (int)_pairSetupTryPassword:(id)arg1;	// IMP=0x0000000000029dcf
- (int)_promptForSetupCodeWithFlags:(unsigned int)arg1 delaySeconds:(int)arg2 pairingFlags:(unsigned int)arg3 isWAC:(_Bool)arg4;	// IMP=0x0000000000029a5e
- (void)_handlePairSetupAfterM4Callback;	// IMP=0x0000000000029473
- (int)_handlePairSetupCompletionWithData:(id)arg1;	// IMP=0x000000000002896e
- (int)_continuePairingAfterAuthPromptWithRetry:(_Bool)arg1;	// IMP=0x00000000000284fc
- (int)_pairSetupStartWithConsentRequired:(_Bool)arg1;	// IMP=0x0000000000027b4e
- (int)_ensurePairingSessionIsInitializedWithType:(unsigned int)arg1;	// IMP=0x000000000002767d
- (int)_ensureHTTPClientSetUp;	// IMP=0x000000000002736e
- (int)getBonjourDeviceDNSName:(id *)arg1;	// IMP=0x0000000000027290
- (void)httpClientDidCloseConnectionDueToServer:(id)arg1;	// IMP=0x0000000000026ef6
- (void)_establishSecureSession;	// IMP=0x0000000000026bf2
- (void)invokePairVerifyCompletionBlock:(id)arg1;	// IMP=0x0000000000026b41
- (void)_invokePairVerifyCompletionBlock:(id)arg1;	// IMP=0x0000000000026abc
- (_Bool)_isSessionEstablished;	// IMP=0x000000000002699a
- (_Bool)isSessionEstablised;	// IMP=0x00000000000268d0
- (_Bool)_updateAccessories:(id)arg1;	// IMP=0x0000000000025fc8
- (void)_updateProtocolVersionFromPrimaryAccessory:(id)arg1;	// IMP=0x0000000000025b6b
- (void)__registerForInternalCharacteristicNotifications;	// IMP=0x00000000000256e4
- (void)_parseAttributeDatabase:(id)arg1 transaction:(id)arg2;	// IMP=0x0000000000024c66
- (void)_getAttributeDatabase;	// IMP=0x0000000000024ae3
- (_Bool)_parseTXTRecordDictionary:(id)arg1;	// IMP=0x0000000000023975
- (_Bool)_parseAndValidateTXTRecord;	// IMP=0x0000000000023657
- (_Bool)_processEvent:(id)arg1 matchedCharacteristic:(id *)arg2;	// IMP=0x00000000000225d0
- (void)httpClient:(id)arg1 didReceiveEvent:(id)arg2;	// IMP=0x0000000000021ebe
- (void)_handleEventResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 characteristics:(id)arg5 requestedEventState:(_Bool)arg6 completion:(CDUnknownBlockType)arg7 queue:(id)arg8;	// IMP=0x00000000000205c7
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x000000000001f946
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x000000000001f830
- (void)_handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;	// IMP=0x000000000001f218
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;	// IMP=0x000000000001f13c
- (void)handleHTTPClientUnavailableErrorWithCompletion:(CDUnknownBlockType)arg1 serializationType:(unsigned long long)arg2;	// IMP=0x000000000001efcd
- (void)sendGETRequestToURL:(id)arg1 timeout:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000001ec5b
- (void)sendPOSTRequestToURL:(id)arg1 request:(id)arg2 serializationType:(unsigned long long)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000001ea48
- (void)sendPUTRequestToURL:(id)arg1 request:(id)arg2 serializationType:(unsigned long long)arg3 timeout:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000001e577
- (void)_handleWriteResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 requestTuples:(id)arg5 completion:(CDUnknownBlockType)arg6;	// IMP=0x000000000001c1cc
- (void)_handlePrepareWriteResponseObject:(id)arg1 type:(unsigned long long)arg2 prepareIdentifier:(id)arg3 httpStatus:(int)arg4 error:(id)arg5 requestTuples:(id)arg6 timeout:(double)arg7 queue:(id)arg8 originalCompletion:(CDUnknownBlockType)arg9 completion:(CDUnknownBlockType)arg10;	// IMP=0x000000000001b2af
- (void)_performExecuteWriteValues:(id)arg1 prepareIdentifier:(id)arg2 timeout:(double)arg3 queue:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000001aed7
- (void)_performTimedWriteValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000001a6b2
- (void)_performWriteValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000001a1de
- (void)_handleWriteECONNResetError:(id)arg1 writeRequests:(id)arg2 responses:(id)arg3 timeout:(double)arg4 queue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x0000000000019f03
- (void)_writeCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000019742
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000019549
- (void)_handleReadResponseObject:(id)arg1 type:(unsigned long long)arg2 httpStatus:(int)arg3 error:(id)arg4 characteristics:(id)arg5 completion:(CDUnknownBlockType)arg6;	// IMP=0x000000000001749b
- (void)_readCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000016a0c
- (void)_handleReadECONNRESETError:(id)arg1 readCharacteristics:(id)arg2 responses:(id)arg3 timeout:(double)arg4 queue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x0000000000016731
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000016538
- (void)_processQueuedOperationsWithError:(id)arg1;	// IMP=0x0000000000016262
- (void)_queueEnableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x0000000000016053
- (void)_queueListPairingWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000015e84
- (void)_queueAddPairingWithIdentifier:(id)arg1 publicKey:(id)arg2 admin:(_Bool)arg3 queue:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x0000000000015c38
- (void)_insertWriteCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000015a46
- (void)_queueWriteCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000015774
- (CDUnknownBlockType)_queuedWriteOperationBlock:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000015663
- (void)_insertReadCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000015471
- (void)_queueReadCharacteristicValues:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000001519f
- (CDUnknownBlockType)_queuedReadOperationBlock:(id)arg1 timeout:(double)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000001508e
- (void)_error:(id)arg1 forWriteCharacteristicValues:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000014b32
- (void)_error:(id)arg1 forReadCharacteristicValues:(id)arg2 queue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000014648
- (void)_continuePairingAfterMFiCertValidation;	// IMP=0x00000000000143bc
- (void)_handleMFiCertValidation;	// IMP=0x0000000000013ecd
- (_Bool)stopPairingWithError:(id *)arg1;	// IMP=0x0000000000013e5a
- (void)disconnect;	// IMP=0x0000000000013e46
- (void)disconnectWithError:(id)arg1;	// IMP=0x0000000000013d95
- (void)_tearDownSessionAndReconfirm;	// IMP=0x0000000000013d81
- (void)_tearDownSessionAndReconfirmWithError:(id)arg1;	// IMP=0x0000000000013b32
- (void)_skipReconfirm;	// IMP=0x0000000000013a37
- (_Bool)_matchWithError:(id)arg1 domain:(id)arg2 code:(long long)arg3;	// IMP=0x0000000000013979
- (void)_doBonjourReconfirm;	// IMP=0x0000000000013944
- (void)_tearDownSession;	// IMP=0x0000000000013930
- (void)_tearDownSessionWithError:(id)arg1;	// IMP=0x00000000000135ed
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;	// IMP=0x000000000001353a
- (void)continuePairingAfterAuthPrompt;	// IMP=0x00000000000133e3
- (void)reconfirm;	// IMP=0x0000000000013372
- (void)startPairingWithConsentRequired:(_Bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;	// IMP=0x000000000001324f
- (void)_isAccessoryPublicKeyPresent:(_Bool *)arg1 registeredWithHomeKit:(_Bool *)arg2;	// IMP=0x00000000000130a2
- (id)controllerUsername;	// IMP=0x0000000000013090
- (void)_establishSecureConnectionAndFetchAttributeDatabaseWithReason:(id)arg1;	// IMP=0x0000000000012e57
- (void)discoverAccessories;	// IMP=0x0000000000012c9b
@property(readonly, nonatomic) NSString *peerEndpointDescription;
@property(readonly, copy, nonatomic) HMFNetAddress *peerAddressEx;
@property(readonly, copy, nonatomic) HMFNetAddress *peerAddress;
- (long long)linkType;	// IMP=0x0000000000012a43
- (id)primaryAccessory;	// IMP=0x0000000000012917
- (id)services;	// IMP=0x00000000000127eb
- (void)createKeysForDataStreamWithKeySalt:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000001270f
- (void)pairSetupStartSoftAuthWAC;	// IMP=0x000000000001269e
- (void)_tearDownWAC;	// IMP=0x00000000000124d6
- (void)_continuePairingAfterWAC:(id)arg1;	// IMP=0x0000000000012425
- (int)_continuePairingWithSetupCode:(id)arg1;	// IMP=0x000000000001241d
- (void)_continuePairingUsingWAC;	// IMP=0x0000000000012417
- (void)_performEasyConfigWithParingPrompt:(CDUnknownFunctionPointerType)arg1 performPairSetup:(_Bool)arg2 isSplit:(_Bool)arg3 wacWiFiConfig:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x0000000000012411
- (void)continuePairingUsingWAC;	// IMP=0x00000000000123a0
- (void)_continuePairingAfterConfirmingSecureWAC:(id)arg1;	// IMP=0x000000000001216c
- (void)_pairVerifyStartWAC:(id)arg1;	// IMP=0x0000000000012166
- (void)_pairSetupContinueWAC;	// IMP=0x000000000001202e
- (id)_joinAccessoryNetworkWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000011fb2
- (void)_invalidateWAC;	// IMP=0x0000000000011e59
- (void)resetPostSoftAuthWAC;	// IMP=0x0000000000011e45
- (void)startReprovisioningWiFiConfig:(id)arg1;	// IMP=0x0000000000011d94
@property(nonatomic, getter=isPostSoftAuthWacStarted) _Bool postSoftAuthWacStarted; // @synthesize postSoftAuthWacStarted=_postSoftAuthWacStarted;
@property(nonatomic, getter=isPreSoftAuthWacStarted) _Bool preSoftAuthWacStarted; // @synthesize preSoftAuthWacStarted=_preSoftAuthWacStarted;
@property(nonatomic, getter=isWacLegacy) _Bool wacLegacy; // @synthesize wacLegacy=_wacLegacy;
@property(readonly, getter=isWacNeeded) _Bool wacNeeded;
@property(nonatomic, getter=isWacComplete) _Bool wacComplete; // @synthesize wacComplete=_wacComplete;
@property(nonatomic, getter=isWacAccessory) _Bool wacAccessory; // @synthesize wacAccessory=_wacAccessory;
- (_Bool)isPaired;	// IMP=0x0000000000011411
@property(readonly, nonatomic) HAPWACAccessory *hapWACAccessory; // @synthesize hapWACAccessory=_hapWACAccessory;
- (void)updateWithHAPWACAccessory:(id)arg1;	// IMP=0x000000000001117c
- (id)initWithHAPWACAccessory:(id)arg1 keystore:(id)arg2 browser:(id)arg3;	// IMP=0x0000000000011116
- (void)_updateWithBonjourDeviceInfo:(id)arg1;	// IMP=0x0000000000010845
- (void)_submitStateNumberChangeEvent:(_Bool)arg1;	// IMP=0x000000000001077e
- (void)updateWithBonjourDeviceInfo:(id)arg1;	// IMP=0x00000000000106cd
@property(nonatomic) unsigned long long abruptDisconnectionCounter; // @synthesize abruptDisconnectionCounter=_abruptDisconnectionCounter;
@property(nonatomic, getter=isBonjourDiscoveryPending) _Bool bonjourDiscoveryPending; // @synthesize bonjourDiscoveryPending=_bonjourDiscoveryPending;
@property(nonatomic, getter=isEstablishingSecureConnection) _Bool establishingSecureConnection; // @synthesize establishingSecureConnection=_establishingSecureConnection;
- (_Bool)hasBonjourDeviceInfo;	// IMP=0x00000000000101bf
@property(retain, nonatomic) NSDictionary *bonjourDeviceInfo; // @synthesize bonjourDeviceInfo=_bonjourDeviceInfo;
- (void)_notifyDelegateOfDiscoveryFailureWithError:(id)arg1;	// IMP=0x000000000000fe98
- (void)_notifyDelegateNeedsOwnershipToken;	// IMP=0x000000000000fe0c
- (void)_notifyDelegatesOfAddAccessoryFailureWithError:(id)arg1;	// IMP=0x000000000000fc9d
- (void)_notifyDelegatesPairingStopped:(id)arg1;	// IMP=0x000000000000fb91
- (void)removeActiveSession:(long long)arg1;	// IMP=0x000000000000fb15
- (void)addActiveSession:(long long)arg1;	// IMP=0x000000000000fa99
- (void)hapWACAccessoryClient:(id)arg1 setBonjourInfo:(id)arg2;	// IMP=0x000000000000f9e8
- (void)hapWACAccessoryClient:(id)arg1 wacProgress:(unsigned long long)arg2;	// IMP=0x000000000000f9bb
- (void)_notifyDelegateOfPairingProgress:(long long)arg1;	// IMP=0x000000000000f8ec
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x000000000000f6ae
- (void)invalidateWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000000f5c6
- (void)_reset;	// IMP=0x000000000000f574
- (id)initWithBonjourDeviceInfo:(id)arg1 keyStore:(id)arg2 browser:(id)arg3;	// IMP=0x000000000000f499
- (id)initWithKeyStore:(id)arg1 browser:(id)arg2;	// IMP=0x000000000000f0cc
- (void)_requestResource:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000046a5a
- (void)requestResource:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000046890
- (void)processPendingBonjourRemoveEvents;	// IMP=0x00000000000461bb
- (id)readAndResetHAPMetrics:(_Bool)arg1;	// IMP=0x0000000000046529
- (void)incrementHAPIPHTTPEventsCount;	// IMP=0x0000000000046487
- (void)incrementHAPIPHTTPResponsesCount;	// IMP=0x00000000000463e5
- (void)incrementHAPIPHTTPRequestsCount;	// IMP=0x0000000000046343
- (void)incrementHAPIPInvalidationCount;	// IMP=0x00000000000462a1

// Remaining properties
@property(readonly, copy, nonatomic) NSArray *attributeDescriptions;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly, copy, nonatomic) NSString *identifier;
@property(readonly, copy) NSString *privateDescription;
@property(readonly, copy) NSString *propertyDescription;
@property(readonly, copy) NSString *shortDescription;
@property(readonly) Class superclass;

@end

