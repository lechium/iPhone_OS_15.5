//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreHAP/HAP2AccessoryDelegate-Protocol.h>
#import <CoreHAP/HAP2AccessoryServerDelegate-Protocol.h>
#import <CoreHAP/HAP2PairedAccessoryServerDelegate-Protocol.h>
#import <CoreHAP/HAP2UnpairedAccessoryServerDelegate-Protocol.h>
#import <CoreHAP/HAP2UnpairedAccessoryServerPairDelegate-Protocol.h>
#import <CoreHAP/HMFTimerDelegate-Protocol.h>

@class HAP2SerializedOperationQueue, HAPAccessory, HMFTimer, NSArray, NSString;
@protocol HAP2Cancelable, HAP2PairedAccessoryServer, HAP2UnpairedAccessoryServer;

@interface HAPAccessoryServerHAP2Adapter <HAP2AccessoryDelegate, HAP2PairedAccessoryServerDelegate, HAP2UnpairedAccessoryServerDelegate, HAP2UnpairedAccessoryServerPairDelegate, HMFTimerDelegate, HAP2AccessoryServerDelegate>
{
    _Bool _internallyPaired;	// 32 = 0x20
    _Bool _skipUserConsent;	// 33 = 0x21
    _Bool _discoverAccessoriesOncePaired;	// 34 = 0x22
    id <HAP2UnpairedAccessoryServer> _unpairedServer;	// 40 = 0x28
    id <HAP2PairedAccessoryServer> _pairedServer;	// 48 = 0x30
    id <HAP2Cancelable> _pairingSessionCancelable;	// 56 = 0x38
    CDUnknownBlockType _setupCodeCompletion;	// 64 = 0x40
    CDUnknownBlockType _userConsentCompletion;	// 72 = 0x48
    CDUnknownBlockType _authValidationCompletion;	// 80 = 0x50
    CDUnknownBlockType _softwareAuthFinishedCompletion;	// 88 = 0x58
    CDUnknownBlockType _authenticateUUIDCompletion;	// 96 = 0x60
    HAPAccessory *_primaryAccessory;	// 104 = 0x68
    NSArray *_accessories;	// 112 = 0x70
    HAP2SerializedOperationQueue *_operationQueue;	// 120 = 0x78
    HMFTimer *_connectionIdleTimer;	// 128 = 0x80
    double _disconnectOnIdleTimeout;	// 136 = 0x88
}

+ (void)initialize;	// IMP=0x000000000010c274
- (void).cxx_destruct;	// IMP=0x0000000000106444
@property double disconnectOnIdleTimeout; // @synthesize disconnectOnIdleTimeout=_disconnectOnIdleTimeout;
@property(retain, nonatomic) HMFTimer *connectionIdleTimer; // @synthesize connectionIdleTimer=_connectionIdleTimer;
@property(readonly, nonatomic) HAP2SerializedOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(nonatomic, getter=shouldSkipUserConsent) _Bool skipUserConsent; // @synthesize skipUserConsent=_skipUserConsent;
@property(nonatomic, getter=isInternallyPaired) _Bool internallyPaired; // @synthesize internallyPaired=_internallyPaired;
@property(retain, nonatomic) id <HAP2PairedAccessoryServer> pairedServer; // @synthesize pairedServer=_pairedServer;
@property(retain, nonatomic) id <HAP2UnpairedAccessoryServer> unpairedServer; // @synthesize unpairedServer=_unpairedServer;
- (void)_firedConnectionIdleTimer:(id)arg1;	// IMP=0x000000000010629c
- (void)timerDidFire:(id)arg1;	// IMP=0x000000000010628a
@property(readonly, copy) NSString *description;
- (void)accessoryServer:(id)arg1 validateSoftwareAuthUUID:(id)arg2 token:(id)arg3 model:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x0000000000106024
- (void)accessoryServer:(id)arg1 validatePairingCert:(id)arg2 model:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0000000000105ebb
- (void)accessoryServer:(id)arg1 didFinishAuthWithError:(id)arg2;	// IMP=0x0000000000105da5
- (void)accessoryServer:(id)arg1 confirmSoftwareAuthUUID:(id)arg2 token:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0000000000105c3c
- (void)accessoryServer:(id)arg1 authenticateSoftwareAuthUUID:(id)arg2 token:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x0000000000105ad3
- (void)accessoryServer:(id)arg1 doesRequireSetupCodeWithCompletion:(CDUnknownBlockType)arg2;	// IMP=0x00000000001059bd
- (void)accessoryServer:(id)arg1 didRejectSetupCodeWithBackoffInterval:(double)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000105898
- (void)accessoryServer:(id)arg1 doesRequirePermission:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010577b
- (void)accessoryServer:(id)arg1 didCompleteWithError:(id)arg2;	// IMP=0x0000000000105665
- (id)_accessoryFromHAP2Accessory:(id)arg1;	// IMP=0x00000000001053c4
- (void)accessoryServer:(id)arg1 didFailToUpdateAccessoriesWithError:(id)arg2;	// IMP=0x0000000000105369
- (void)accessoryServerDidUpdateAccessories:(id)arg1;	// IMP=0x0000000000104fd9
- (void)accessoryServerDidBecomeUnpaired:(id)arg1;	// IMP=0x0000000000104ec8
- (id)currentIdentity;	// IMP=0x0000000000104e78
- (_Bool)onDemandConnectionsAreEnabled;	// IMP=0x0000000000104e66
- (void)accessoryServerDidUpdateHasPairings:(id)arg1;	// IMP=0x0000000000104d7b
- (id)_hapIdentifierForAccessory:(id)arg1;	// IMP=0x0000000000104cfe
- (void)_informDelegateOfUpdatedAccessories:(id)arg1 error:(id)arg2;	// IMP=0x0000000000104bbe
- (_Bool)_isActiveServer:(id)arg1;	// IMP=0x0000000000104b1a
- (void)discoverAccessories;	// IMP=0x00000000001048de
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;	// IMP=0x00000000001047b4
- (void)accessory:(id)arg1 didNotifyForUpdatedValuesOnCharacteristic:(id)arg2;	// IMP=0x00000000001042b9
- (void)accessoryServerDidUpdateCategory:(id)arg1;	// IMP=0x0000000000104228
- (void)accessoryServerDidUpdateName:(id)arg1;	// IMP=0x00000000001041ae
- (void)accessoryServerDidUpdateConnectionState:(id)arg1;	// IMP=0x0000000000104164
- (_Bool)_hap2CharacteristicTuplesForHAPCharacteristics:(id)arg1 tuples:(id *)arg2 error:(id *)arg3;	// IMP=0x0000000000103ed5
- (void)_printMissingValues:(id)arg1;	// IMP=0x0000000000103cf9
- (void)_writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000010399d
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000103786
- (void)_readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000010343c
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000103225
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000103133
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000103034
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000102f06
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000102dd8
- (_Bool)stopPairingWithError:(id *)arg1;	// IMP=0x0000000000102d0f
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000102c11
- (void)startPairingWithConsentRequired:(_Bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;	// IMP=0x0000000000102a5e
- (void)continuePairingUsingWAC;	// IMP=0x00000000001029b6
- (void)_continuePairingAfterAuthPromptWithError:(id)arg1;	// IMP=0x0000000000102867
- (void)continuePairingAfterAuthPrompt;	// IMP=0x00000000001027a0
- (void)_resetPairingState;	// IMP=0x000000000010270d
- (void)_notifyDelegatePairingStoppedWithError:(id)arg1;	// IMP=0x00000000001025d5
- (void)_handleIncorrectStartPairingCall;	// IMP=0x0000000000102500
- (void)validatePairingAuthMethod:(CDUnknownBlockType)arg1;	// IMP=0x0000000000102404
- (void)tearDownSessionOnAuthCompletion;	// IMP=0x00000000001023fe
- (void)provisionToken:(id)arg1;	// IMP=0x00000000001022fb
- (void)continueAuthAfterValidation:(_Bool)arg1;	// IMP=0x0000000000102229
- (void)authenticateAccessory;	// IMP=0x0000000000102181
- (void)stopPing;	// IMP=0x00000000001020af
- (void)startPing;	// IMP=0x0000000000101fdd
- (void)disconnect;	// IMP=0x0000000000101fd7
- (void)closeSessions;	// IMP=0x0000000000101f05
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000101e16
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000001018af
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x000000000010174b
- (id)productData;	// IMP=0x00000000001016fb
- (_Bool)supportsTimedWrite;	// IMP=0x00000000001016f3
- (void)setSecuritySessionOpen:(_Bool)arg1;	// IMP=0x000000000010164b
- (_Bool)isSecuritySessionOpen;	// IMP=0x0000000000101602
- (void)setPrimaryAccessory:(id)arg1;	// IMP=0x000000000010154c
- (id)primaryAccessory;	// IMP=0x0000000000101467
- (long long)linkType;	// IMP=0x000000000010145c
- (void)setAccessories:(id)arg1;	// IMP=0x0000000000101329
- (id)accessories;	// IMP=0x0000000000101244
- (id)reachabilityChangedReason;	// IMP=0x00000000001011f4
- (_Bool)hasAdvertisement;	// IMP=0x00000000001011b0
- (unsigned long long)configNumber;	// IMP=0x000000000010116b
- (id)setupHash;	// IMP=0x000000000010111b
- (id)version;	// IMP=0x00000000001010cb
- (id)category;	// IMP=0x000000000010105b
- (_Bool)isReachable;	// IMP=0x0000000000101012
- (_Bool)isPaired;	// IMP=0x0000000000101000
- (void)disconnectOnIdleUpdated;	// IMP=0x0000000000100f39
- (void)_kickConnectionIdleTimer;	// IMP=0x0000000000100dfb
- (void)_suspendConnectionIdleTimer;	// IMP=0x0000000000100c63
- (void)_startConnectionIdleTimer;	// IMP=0x0000000000100a22
- (void)_handleConnectionIdleTimeout;	// IMP=0x000000000010092d
- (void)updateActiveDisconnectOnIdleTimeout:(double)arg1;	// IMP=0x0000000000100857
@property(nonatomic, getter=shouldDiscoverAccessoriesOncePaired) _Bool discoverAccessoriesOncePaired; // @synthesize discoverAccessoriesOncePaired=_discoverAccessoriesOncePaired;
@property(copy, nonatomic) CDUnknownBlockType authenticateUUIDCompletion; // @synthesize authenticateUUIDCompletion=_authenticateUUIDCompletion;
@property(copy, nonatomic) CDUnknownBlockType softwareAuthFinishedCompletion; // @synthesize softwareAuthFinishedCompletion=_softwareAuthFinishedCompletion;
@property(copy, nonatomic) CDUnknownBlockType authValidationCompletion; // @synthesize authValidationCompletion=_authValidationCompletion;
@property(copy, nonatomic) CDUnknownBlockType userConsentCompletion; // @synthesize userConsentCompletion=_userConsentCompletion;
@property(copy, nonatomic) CDUnknownBlockType setupCodeCompletion; // @synthesize setupCodeCompletion=_setupCodeCompletion;
@property(retain, nonatomic) id <HAP2Cancelable> pairingSessionCancelable; // @synthesize pairingSessionCancelable=_pairingSessionCancelable;
- (id)clientQueue;	// IMP=0x00000000000ffa4a
- (id)activeServer;	// IMP=0x00000000000ff91e
- (void)setShouldBePaired:(_Bool)arg1;	// IMP=0x00000000000ff879
- (id)initWithPairedServer:(id)arg1;	// IMP=0x00000000000ff11d
- (id)initWithUnpairedServer:(id)arg1;	// IMP=0x00000000000ff030
- (id)initWithOperationQueue:(id)arg1 accessoryServer:(id)arg2;	// IMP=0x00000000000fecc7

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

