//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreHAP/CBPeripheralDelegate-Protocol.h>
#import <CoreHAP/HAPAuthSessionDelegate-Protocol.h>
#import <CoreHAP/HAPBTLEControlOutputStreamDelegate-Protocol.h>
#import <CoreHAP/HAPPairSetupSessionClientDelegate-Protocol.h>
#import <CoreHAP/HAPSecuritySessionDelegate-Protocol.h>
#import <CoreHAP/HMFLogging-Protocol.h>
#import <CoreHAP/HMFTimerDelegate-Protocol.h>

@class HAPAccessoryProtocolInfo, HAPAuthSession, HAPBLEAccessoryCache, HAPCharacteristic, HAPPairSetupSession, HAPSecuritySession, HMFTimer, NSError, NSMapTable, NSMutableArray, NSOperationQueue, NSString, _HAPBTLEDiscoveryContext;

@interface _HAPAccessoryServerBTLE200 <CBPeripheralDelegate, HAPBTLEControlOutputStreamDelegate, HAPPairSetupSessionClientDelegate, HAPSecuritySessionDelegate, HMFTimerDelegate, HAPAuthSessionDelegate, HMFLogging>
{
    _Bool _hasValidCache;	// 32 = 0x20
    _Bool _discovering;	// 33 = 0x21
    _Bool _verified;	// 34 = 0x22
    _Bool _badPairSetupCode;	// 35 = 0x23
    _Bool _pairing;	// 36 = 0x24
    _Bool _authenticated;	// 37 = 0x25
    unsigned char _featureFlags;	// 38 = 0x26
    HAPSecuritySession *_securitySession;	// 40 = 0x28
    long long _connectionState;	// 48 = 0x30
    HAPBLEAccessoryCache *_accessoryCache;	// 56 = 0x38
    CDUnknownBlockType _connectionCompletionHandler;	// 64 = 0x40
    HMFTimer *_connectionIdleTimer;	// 72 = 0x48
    _HAPBTLEDiscoveryContext *_discoveryContext;	// 80 = 0x50
    HAPCharacteristic *_identifyCharacteristic;	// 88 = 0x58
    HAPPairSetupSession *_pairSetupSession;	// 96 = 0x60
    double _pairSetupBackoffTimeInterval;	// 104 = 0x68
    CDUnknownBlockType _setupCodeCompletionHandler;	// 112 = 0x70
    NSError *_pairingDisconnectionError;	// 120 = 0x78
    HAPAuthSession *_authSession;	// 128 = 0x80
    HAPAccessoryProtocolInfo *_authenticatedProtocolInfo;	// 136 = 0x88
    HAPCharacteristic *_pairingFeaturesCharacteristic;	// 144 = 0x90
    HAPCharacteristic *_pairSetupCharacteristic;	// 152 = 0x98
    HAPCharacteristic *_pairVerifyCharacteristic;	// 160 = 0xa0
    NSOperationQueue *_pairVerifyOperationQueue;	// 168 = 0xa8
    HAPCharacteristic *_pairingsCharacteristic;	// 176 = 0xb0
    NSMutableArray *_pendingRequests;	// 184 = 0xb8
    NSOperationQueue *_requestOperationQueue;	// 192 = 0xc0
    NSMutableArray *_pendingResponses;	// 200 = 0xc8
    NSMapTable *_characteristicWriteCompletionHandlers;	// 208 = 0xd0
    NSMapTable *_characteristicEnableEventCompletionHandlers;	// 216 = 0xd8
}

+ (id)logCategory;	// IMP=0x00000000000e5d3e
+ (_Bool)parseCharacteristicConfigurationResponse:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e5949
+ (id)configurationRequestForCharacteristic:(id)arg1 isBroadcasted:(_Bool)arg2 interval:(unsigned long long)arg3 error:(id *)arg4;	// IMP=0x00000000000e571b
+ (_Bool)parseProtocolConfigurationResponse:(id)arg1 key:(id *)arg2 stateNumber:(id *)arg3 error:(id *)arg4;	// IMP=0x00000000000e4ea3
+ (id)configurationRequestForService:(id)arg1 configRequestType:(unsigned char)arg2 error:(id *)arg3;	// IMP=0x00000000000e4aab
+ (_Bool)parseWriteResponse:(id)arg1 value:(id *)arg2 error:(id *)arg3;	// IMP=0x00000000000e47d3
+ (id)executeWriteRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;	// IMP=0x00000000000e45cc
+ (id)prepareWriteRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 error:(id *)arg6;	// IMP=0x00000000000e42b9
+ (id)writeRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 error:(id *)arg6;	// IMP=0x00000000000e3f91
+ (id)extractNotificationContextFromBodyData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e3e3d
+ (id)extractSerializedRequestValueFromBodyData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e3cf2
+ (_Bool)parseReadResponse:(id)arg1 value:(id *)arg2 notificationContext:(id *)arg3 error:(id *)arg4;	// IMP=0x00000000000e37de
+ (id)readRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;	// IMP=0x00000000000e361a
+ (_Bool)isHAPDescriptor:(id)arg1;	// IMP=0x00000000000e359b
+ (_Bool)isHAPService:(id)arg1;	// IMP=0x00000000000e2f31
+ (id)parseServiceSignatureResponse:(id)arg1 serviceInstanceID:(id)arg2 serviceType:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000e2abf
+ (id)parseSignatureResponse:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e155a
+ (id)signatureRequestForService:(id)arg1 characteristic:(id)arg2 requiresAuthentication:(_Bool)arg3 error:(id *)arg4;	// IMP=0x00000000000e14ee
+ (id)signatureRequestForCharacteristic:(id)arg1 requiresAuthentication:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00000000000e1482
- (void).cxx_destruct;	// IMP=0x00000000000ccaab
@property(nonatomic) unsigned char featureFlags; // @synthesize featureFlags=_featureFlags;
@property(readonly, nonatomic) NSMapTable *characteristicEnableEventCompletionHandlers; // @synthesize characteristicEnableEventCompletionHandlers=_characteristicEnableEventCompletionHandlers;
@property(readonly, nonatomic) NSMapTable *characteristicWriteCompletionHandlers; // @synthesize characteristicWriteCompletionHandlers=_characteristicWriteCompletionHandlers;
@property(readonly, nonatomic) NSMutableArray *pendingResponses; // @synthesize pendingResponses=_pendingResponses;
@property(readonly, nonatomic) NSOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) NSMutableArray *pendingRequests; // @synthesize pendingRequests=_pendingRequests;
@property(nonatomic) __weak HAPCharacteristic *pairingsCharacteristic; // @synthesize pairingsCharacteristic=_pairingsCharacteristic;
@property(readonly, nonatomic) NSOperationQueue *pairVerifyOperationQueue; // @synthesize pairVerifyOperationQueue=_pairVerifyOperationQueue;
@property(nonatomic) __weak HAPCharacteristic *pairVerifyCharacteristic; // @synthesize pairVerifyCharacteristic=_pairVerifyCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairSetupCharacteristic; // @synthesize pairSetupCharacteristic=_pairSetupCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairingFeaturesCharacteristic; // @synthesize pairingFeaturesCharacteristic=_pairingFeaturesCharacteristic;
@property(retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo; // @synthesize authenticatedProtocolInfo=_authenticatedProtocolInfo;
@property(retain, nonatomic) HAPAuthSession *authSession; // @synthesize authSession=_authSession;
@property(nonatomic) _Bool authenticated; // @synthesize authenticated=_authenticated;
@property(retain, nonatomic) NSError *pairingDisconnectionError; // @synthesize pairingDisconnectionError=_pairingDisconnectionError;
@property(nonatomic, getter=isPairing) _Bool pairing; // @synthesize pairing=_pairing;
@property(copy, nonatomic) CDUnknownBlockType setupCodeCompletionHandler; // @synthesize setupCodeCompletionHandler=_setupCodeCompletionHandler;
@property(nonatomic, getter=isBadSetupCode) _Bool badPairSetupCode; // @synthesize badPairSetupCode=_badPairSetupCode;
@property(nonatomic) double pairSetupBackoffTimeInterval; // @synthesize pairSetupBackoffTimeInterval=_pairSetupBackoffTimeInterval;
@property(retain, nonatomic) HAPPairSetupSession *pairSetupSession; // @synthesize pairSetupSession=_pairSetupSession;
@property(nonatomic) __weak HAPCharacteristic *identifyCharacteristic; // @synthesize identifyCharacteristic=_identifyCharacteristic;
@property(nonatomic, getter=isVerified) _Bool verified; // @synthesize verified=_verified;
@property(nonatomic, getter=isDiscovering) _Bool discovering; // @synthesize discovering=_discovering;
@property(retain, nonatomic) _HAPBTLEDiscoveryContext *discoveryContext; // @synthesize discoveryContext=_discoveryContext;
@property(retain, nonatomic) HMFTimer *connectionIdleTimer; // @synthesize connectionIdleTimer=_connectionIdleTimer;
@property(copy, nonatomic) CDUnknownBlockType connectionCompletionHandler; // @synthesize connectionCompletionHandler=_connectionCompletionHandler;
@property _Bool hasValidCache; // @synthesize hasValidCache=_hasValidCache;
@property(retain) HAPBLEAccessoryCache *accessoryCache; // @synthesize accessoryCache=_accessoryCache;
@property(nonatomic) long long connectionState; // @synthesize connectionState=_connectionState;
- (void)disconnect;	// IMP=0x00000000000cc65e
- (void)timerDidFire:(id)arg1;	// IMP=0x00000000000cc2ee
- (void)securitySession:(id)arg1 didCloseWithError:(id)arg2;	// IMP=0x00000000000cc212
- (void)securitySessionDidOpen:(id)arg1;	// IMP=0x00000000000cc161
- (void)securitySessionIsOpening:(id)arg1;	// IMP=0x00000000000cc0b0
- (void)securitySession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;	// IMP=0x00000000000cbfd4
- (id)securitySession:(id)arg1 didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000cbb0a
- (id)securitySession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;	// IMP=0x00000000000cb9da
- (void)submitPairVerifyMetricWithError:(id)arg1;	// IMP=0x00000000000cb841
- (void)authSession:(id)arg1 authComplete:(id)arg2;	// IMP=0x00000000000cb790
- (void)authSession:(id)arg1 confirmUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000cb685
- (void)authSession:(id)arg1 authenticateUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000cb57a
- (void)authSession:(id)arg1 validateUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000cb46f
- (void)authSession:(id)arg1 sendAuthExchangeData:(id)arg2;	// IMP=0x00000000000cb3be
- (void)_notifyDelegatesPairingStopped:(id)arg1;	// IMP=0x00000000000cb2f7
- (void)_continuePairingAfterMFiCertValidation;	// IMP=0x00000000000cb28a
- (void)tearDownSessionOnAuthCompletion;	// IMP=0x00000000000cb219
- (void)provisionToken:(id)arg1;	// IMP=0x00000000000cb078
- (void)continueAuthAfterValidation:(_Bool)arg1;	// IMP=0x00000000000cae68
- (void)authenticateAccessory;	// IMP=0x00000000000cadf7
- (_Bool)_validateProtocolInfo:(id)arg1;	// IMP=0x00000000000caa5a
- (void)getAccessoryInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000000000ca95e
- (_Bool)pairSetupSession:(id)arg1 didReceiveBackoffRequestWithTimeInterval:(double)arg2;	// IMP=0x00000000000ca89c
- (void)pairSetupSessionDidReceiveInvalidSetupCode:(id)arg1;	// IMP=0x00000000000ca7eb
- (void)pairSetupSession:(id)arg1 didReceiveSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ca70f
- (void)pairSetupSession:(id)arg1 didReceiveProductData:(id)arg2;	// IMP=0x00000000000ca633
- (void)pairSetupSession:(id)arg1 didStopWithError:(id)arg2;	// IMP=0x00000000000ca557
- (_Bool)pairSetupSession:(id)arg1 didPairWithPeer:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000c9ece
- (id)pairSetupSession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;	// IMP=0x00000000000c9d64
- (void)pairSetupSession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;	// IMP=0x00000000000c9c88
- (void)controlOutputStreamDidComplete:(id)arg1;	// IMP=0x00000000000c9bdf
- (void)controlOutputStream:(id)arg1 didCloseWithError:(id)arg2;	// IMP=0x00000000000c9b0c
- (void)controlOutputStreamDidOpen:(id)arg1;	// IMP=0x00000000000c9b06
- (void)controlOutputStream:(id)arg1 didReceiveRequestToSendControlPacket:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c99fc
- (void)peripheral:(id)arg1 didUpdateNotificationStateForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c98f1
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c97e6
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c96db
- (void)peripheral:(id)arg1 didUpdateValueForDescriptor:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c95d0
- (void)peripheral:(id)arg1 didDiscoverDescriptorsForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c94c5
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c93ba
- (void)peripheral:(id)arg1 didModifyServices:(id)arg2;	// IMP=0x00000000000c92de
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;	// IMP=0x00000000000c90a5
- (void)_notifyDelegateOfSentPlaintextData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c8f51
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c8dfd
- (void)_notifyDelegateOfReceivedPlaintextData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c8ca9
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c8b2b
- (_Bool)_validateGeneratedBroadcastKey:(id)arg1;	// IMP=0x00000000000c8702
- (void)_generateBroadcastKey:(unsigned char)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c8607
- (void)generateBroadcastKey:(unsigned char)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c8522
- (_Bool)isBLELinkConnected;	// IMP=0x00000000000c8508
- (void)_handleConnectionIdleTimeout;	// IMP=0x00000000000c824b
- (void)_suspendConnectionIdleTimer;	// IMP=0x00000000000c811a
- (void)_resumeConnectionIdleTimer;	// IMP=0x00000000000c7fe9
- (void)_kickConnectionIdleTimer;	// IMP=0x00000000000c7fac
- (void)handleDisconnectionWithError:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c7de4
- (void)_handleConnectionWithError:(id)arg1;	// IMP=0x00000000000c7bac
- (void)handleConnectionWithPeripheral:(id)arg1 withError:(id)arg2;	// IMP=0x00000000000c7ad0
- (void)_restartConnectionIdleTimer:(double)arg1;	// IMP=0x00000000000c78c1
- (void)_updateConnectionIdleTime:(unsigned char)arg1;	// IMP=0x00000000000c7855
- (void)updateConnectionIdleTime:(unsigned char)arg1;	// IMP=0x00000000000c77d9
- (void)disconnectWithCompletionHandler:(CDUnknownBlockType)arg1 disconnectionError:(id)arg2;	// IMP=0x00000000000c76fd
- (void)disconnectWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c76e9
- (void)_cancelConnectionWithError:(id)arg1;	// IMP=0x00000000000c73a8
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c72f7
- (id)_decryptData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c7068
- (id)_encryptDataAndGenerateAuthTag:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c6de5
- (id)protocolInfoServiceSignatureCharacteristics;	// IMP=0x00000000000c6d18
- (void)_handleSecuritySessionSetupExchangeData:(id)arg1;	// IMP=0x00000000000c697f
- (void)_establishSecureSession;	// IMP=0x00000000000c65b8
- (void)setSecuritySessionOpen:(_Bool)arg1;	// IMP=0x00000000000c6510
- (_Bool)isSecuritySessionOpen;	// IMP=0x00000000000c64cc
@property(retain, nonatomic) HAPSecuritySession *securitySession; // @synthesize securitySession=_securitySession;
- (void)_cancelAllQueuedOperationsWithError:(id)arg1;	// IMP=0x00000000000c60b9
- (void)_resumeAllOperations;	// IMP=0x00000000000c5f3a
- (void)_suspendAllOperations;	// IMP=0x00000000000c5db8
- (unsigned long long)_outstandingRequests;	// IMP=0x00000000000c5c47
- (void)_enqueueRequest:(id)arg1 shouldPrioritize:(_Bool)arg2;	// IMP=0x00000000000c58dc
- (void)_sendProtocolInfoServiceExchangeData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c53b1
- (void)_handleResponseData:(id)arg1 fromCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c4059
- (void)_requestResponseForRequest:(id)arg1;	// IMP=0x00000000000c3e15
- (void)_handleWriteCompletionForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000c3c20
- (void)_sendData:(id)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c37f1
- (void)_sendControlPacket:(id)arg1 forRequest:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c33b7
- (unsigned long long)_maximumControlWriteLengthForRequest:(id)arg1;	// IMP=0x00000000000c2f3e
- (void)_reallySendRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c2e62
- (void)_sendRequest:(id)arg1 shouldPrioritize:(_Bool)arg2 responseHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c2c14
- (id)_pendingResponseForRequest:(id)arg1;	// IMP=0x00000000000c2a41
- (id)_pendingRequestForCharacteristic:(id)arg1;	// IMP=0x00000000000c286e
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c2672
- (unsigned long long)_getPairSetupType;	// IMP=0x00000000000c2601
- (id)getLocalPairingIdentityWithError:(id *)arg1;	// IMP=0x00000000000c2508
- (void)_sendPairingRequestData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c225c
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c2180
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2 serverPairingCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c1d4f
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c1d3a
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c1c30
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c1b25
- (void)_pairingCompletedWithError:(id)arg1;	// IMP=0x00000000000c13b9
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c1306
- (void)_handlePairingSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c1065
- (void)_handlePairSetupSessionExchangeData:(id)arg1;	// IMP=0x00000000000c0dc1
- (_Bool)stopPairingWithError:(id *)arg1;	// IMP=0x00000000000c0d4e
- (void)continuePairingAfterAuthPrompt;	// IMP=0x00000000000c0cdd
- (_Bool)_parsePairingFeaturesCharacteristic:(id)arg1 authMethod:(unsigned long long *)arg2 error:(id *)arg3;	// IMP=0x00000000000c0a6f
- (void)_getPairingFeaturesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c0767
- (void)_checkForAuthPrompt:(_Bool)arg1;	// IMP=0x00000000000c0713
- (void)startPairingWithConsentRequired:(_Bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;	// IMP=0x00000000000c064a
- (void)_enableBroadcastEvent:(_Bool)arg1 interval:(unsigned long long)arg2 forCharacteristic:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000c01ac
- (void)_configureCharacteristics:(id)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bfbee
- (void)configureCharacteristics:(id)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bfae4
- (void)_configureBroadcastKeyGeneration:(unsigned char)arg1 service:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bf768
- (void)_handleEventIndicationForCharacteristic:(id)arg1;	// IMP=0x00000000000bf599
- (void)_handleHAPNotificationStateUpdateForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000bf3c5
- (void)_enableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bf16a
- (void)_performEnableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bf007
- (void)_enableEvent:(_Bool)arg1 forCharacteristic:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000be82f
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bd706
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bd422
- (void)markNotifyingCharacteristicUpdatedforCharacteristic:(id)arg1;	// IMP=0x00000000000bd29f
- (void)_performTimedWriteExecuteForCharacteristic:(id)arg1 value:(id)arg2 options:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bceaa
- (void)_performTimedWritePrepareWithValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bc9ac
- (void)_performTimedWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bc869
- (void)_performWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bc424
- (void)_writeValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bbfd1
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bbdf6
- (void)_readValueForCharacteristic:(id)arg1 options:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bb8de
- (void)_updatePropertiesFromCharacteristic:(id)arg1;	// IMP=0x00000000000bb79f
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bb2bd
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bb0e1
- (id)_parseCharacteristic:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000ba097
- (id)_parseService:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000b8baf
- (_Bool)shouldVerifyHAPService:(id)arg1;	// IMP=0x00000000000b8985
- (_Bool)shouldVerifyHAPCharacteristic:(id)arg1;	// IMP=0x00000000000b84e9
- (_Bool)isHAPCharacteristic:(id)arg1;	// IMP=0x00000000000b8285
- (void)_handleReadServiceSignature:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b80c8
- (void)_handleReadCharacteristicSignature:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b7f0b
- (void)_readServiceSignature:(id)arg1;	// IMP=0x00000000000b6bfb
- (void)_readCharacteristicSignature:(id)arg1;	// IMP=0x00000000000b5c70
- (id)_getProtocolInfoService;	// IMP=0x00000000000b5aab
- (id)_getServiceInstanceID:(id)arg1;	// IMP=0x00000000000b5840
- (id)_getCharacteristicInstanceID:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000b55b1
- (void)_readCharacteristicSignatures;	// IMP=0x00000000000b523d
- (void)_handleUpdateValueForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b4c0f
- (void)_handleReadDescriptorValue:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b4982
- (void)_readDescriptorValue:(id)arg1;	// IMP=0x00000000000b475b
- (void)_handleReadCharacteristicValue:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b4616
- (void)_readCharacteristicValue:(id)arg1;	// IMP=0x00000000000b43d6
- (void)_handleDiscoveredDescriptors:(id)arg1;	// IMP=0x00000000000b426a
- (void)_handleDiscoveredCharactersitic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b3fc4
- (void)_discoverCharacteristic:(id)arg1;	// IMP=0x00000000000b3e29
- (void)_handleReadServiceInstanceId:(id)arg1;	// IMP=0x00000000000b3bb3
- (void)_handleDiscoveredCharacteristicsForService:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b37ff
- (void)_discoverCharacteristicsForService:(id)arg1;	// IMP=0x00000000000b365f
- (void)_handleDiscoveredServices:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b306f
- (void)_discoverServices;	// IMP=0x00000000000b3030
- (void)_cacheServices:(id)arg1;	// IMP=0x00000000000b2c02
- (id)_serviceCacheFromHAPService:(id)arg1 serviceOrder:(unsigned long long)arg2;	// IMP=0x00000000000b2872
- (id)_hapServicesFromCache;	// IMP=0x00000000000b1d26
- (id)_getCachedService:(id)arg1;	// IMP=0x00000000000b1b2d
- (id)_getCBService:(id)arg1 instanceOrder:(unsigned long long)arg2;	// IMP=0x00000000000b16f0
- (id)_getCBCharacteristic:(id)arg1 instanceId:(id)arg2 service:(id)arg3;	// IMP=0x00000000000b13bf
- (void)_handleCompletedDiscovery;	// IMP=0x00000000000aff69
- (void)_retryDiscovery;	// IMP=0x00000000000afddd
- (_Bool)_cancelDiscoveryWithError:(id)arg1;	// IMP=0x00000000000af81e
- (void)_discoverWithType:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000af48c
- (void)_readPendingCharacteritiscTypes:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000aef51
- (void)discoverAccessoriesAndReadCharacteristicTypes:(id)arg1;	// IMP=0x00000000000aeea0
- (void)discoverAccessories;	// IMP=0x00000000000aee8c
- (void)_removePairingOfAccessoryServerCancelledMidPairing;	// IMP=0x00000000000aed89
- (id)_characteristicForCBCharacteristic:(id)arg1;	// IMP=0x00000000000aeb5b
- (id)_serviceForCBService:(id)arg1;	// IMP=0x00000000000ae840
- (_Bool)_delegateRespondsToSelector:(SEL)arg1;	// IMP=0x00000000000ae794
- (void)_createPrimaryAccessoryFromAdvertisementData;	// IMP=0x00000000000ae616
- (unsigned long long)hapBLEProtocolVersion;	// IMP=0x00000000000ae60b
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
- (id)descriptionWithPointer:(_Bool)arg1;	// IMP=0x00000000000ae4b1
- (void)dealloc;	// IMP=0x00000000000ae444
- (void)_resetWithError:(id)arg1;	// IMP=0x00000000000adb70
- (id)initWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 statusFlags:(id)arg4 stateNumber:(id)arg5 stateChanged:(_Bool)arg6 connectReason:(unsigned char)arg7 configNumber:(id)arg8 category:(id)arg9 setupHash:(id)arg10 connectionIdleTime:(unsigned char)arg11 browser:(id)arg12 keyStore:(id)arg13 whbStableIdentifier:(id)arg14;	// IMP=0x00000000000ad2ac

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

