//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <HomeKitDaemon/HMDNSManagedObjectBackingStoreModelObjectRepresentable-Protocol.h>
#import <HomeKitDaemon/MKFAccessorySettingConstraint-Protocol.h>
#import <HomeKitDaemon/MKFAccessorySettingConstraintPrivateExtensions-Protocol.h>

@class MKFAccessorySettingConstraintDatabaseID, NSData, NSDate, NSNumber, NSString, NSUUID;
@protocol MKFAccessorySetting, MKFHome;

@interface _MKFAccessorySettingConstraint <HMDNSManagedObjectBackingStoreModelObjectRepresentable, MKFAccessorySettingConstraint, MKFAccessorySettingConstraintPrivateExtensions>
{
}

+ (Class)backingModelClass;	// IMP=0x0000000000040f61
+ (id)backingModelProtocol;	// IMP=0x0000000000040f50
+ (id)homeRelation;	// IMP=0x0000000000040f20
+ (id)modelIDForParentRelationshipTo:(id)arg1;	// IMP=0x0000000000040e6a
+ (Class)cd_modelClass;	// IMP=0x00000000005db5a9
+ (id)fetchRequest;	// IMP=0x0000000000b92006
- (void)synchronizeSettingRelationWith:(id)arg1;	// IMP=0x0000000000040e48
- (id)findSettingRelationWithModelID:(id)arg1;	// IMP=0x0000000000040e25
- (id)materializeOrCreateSettingRelationWithModelID:(id)arg1 createdNew:(_Bool *)arg2;	// IMP=0x0000000000040dff
@property(readonly) id <MKFHome> home;
- (id)castIfAccessorySettingConstraint;	// IMP=0x0000000000040da6
@property(readonly, copy, nonatomic) MKFAccessorySettingConstraintDatabaseID *databaseID;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, copy, nonatomic) NSUUID *hmd_modelID;
@property(readonly, copy, nonatomic) NSUUID *hmd_parentModelID;
@property(readonly, copy, nonatomic) NSUUID *modelID;
@property(readonly, retain, nonatomic) id <MKFAccessorySetting> setting; // @dynamic setting;
@property(readonly) Class superclass;
@property(copy, nonatomic) NSNumber *type; // @dynamic type;
@property(retain, nonatomic) NSData *value; // @dynamic value;
@property(copy, nonatomic) NSDate *writerTimestamp;

@end

