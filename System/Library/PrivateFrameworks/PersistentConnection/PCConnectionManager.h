//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <PersistentConnection/PCCarrierBundleHelperDelegate-Protocol.h>
#import <PersistentConnection/PCInterfaceMonitorDelegate-Protocol.h>

@class NSRunLoop, NSString, PCKeepAliveState, PCPersistentTimer;
@protocol OS_dispatch_queue, OS_os_log, PCConnectionManagerDelegate, PCGrowthAlgorithm;

@interface PCConnectionManager : NSObject <PCCarrierBundleHelperDelegate, PCInterfaceMonitorDelegate>
{
    int _connectionClass;	// 8 = 0x8
    id <PCConnectionManagerDelegate> _delegate;	// 16 = 0x10
    NSString *_serviceIdentifier;	// 24 = 0x18
    NSString *_duetIdentifier;	// 32 = 0x20
    int _prefsStyle;	// 40 = 0x28
    int _onlyAllowedStyle;	// 44 = 0x2c
    _Bool _onlyAllowedStyleSet;	// 48 = 0x30
    long long _interfaceIdentifier;	// 56 = 0x38
    unsigned long long _guidancePriority;	// 64 = 0x40
    NSRunLoop *_delegateRunLoop;	// 72 = 0x48
    NSObject<OS_dispatch_queue> *_delegateQueue;	// 80 = 0x50
    NSObject<OS_os_log> *_logObject;	// 88 = 0x58
    id <PCGrowthAlgorithm> _wwanGrowthAlgorithm[2];	// 96 = 0x60
    id <PCGrowthAlgorithm> _wifiGrowthAlgorithm[2];	// 112 = 0x70
    id <PCGrowthAlgorithm> _lastScheduledGrowthAlgorithm;	// 128 = 0x80
    PCPersistentTimer *_intervalTimer;	// 136 = 0x88
    PCPersistentTimer *_reconnectWakeTimer;	// 144 = 0x90
    PCPersistentTimer *_delayTimer;	// 152 = 0x98
    unsigned int _powerAssertionID;	// 160 = 0xa0
    double _onTimeKeepAliveTime;	// 168 = 0xa8
    double _lastResumeTime;	// 176 = 0xb0
    double _lastStopTime;	// 184 = 0xb8
    double _lastStartTime;	// 192 = 0xc0
    double _lastReachableTime;	// 200 = 0xc8
    double _lastReconnectTime;	// 208 = 0xd0
    double _lastScheduledIntervalTime;	// 216 = 0xd8
    double _timerGuidance;	// 224 = 0xe0
    double _keepAliveGracePeriod;	// 232 = 0xe8
    double _lastElapsedInterval;	// 240 = 0xf0
    _Bool _minimumIntervalFallbackEnabled;	// 248 = 0xf8
    _Bool _operatorMinimumIntervalFallbackAllowed;	// 249 = 0xf9
    unsigned int _reconnectIteration;	// 252 = 0xfc
    int _timerGuidanceToken;	// 256 = 0x100
    int _pushIsConnectedToken;	// 260 = 0x104
    int _prefsChangedToken;	// 264 = 0x108
    double _defaultPollingInterval;	// 272 = 0x110
    double _pollingIntervalOverride;	// 280 = 0x118
    _Bool _pollingIntervalOverrideSet;	// 288 = 0x120
    _Bool _hasStarted;	// 289 = 0x121
    _Bool _isRunning;	// 290 = 0x122
    _Bool _inCallback;	// 291 = 0x123
    _Bool _isInReconnectMode;	// 292 = 0x124
    _Bool _reconnectWithKeepAliveDelay;	// 293 = 0x125
    _Bool _forceManualWhenRoaming;	// 294 = 0x126
    _Bool _enableNonCellularConnections;	// 295 = 0x127
    _Bool _isReachable;	// 296 = 0x128
    _Bool _disableEarlyFire;	// 297 = 0x129
    _Bool _alwaysWantsInterfaceChangeCallbacks;	// 298 = 0x12a
    int _lastProcessedAction;	// 300 = 0x12c
    _Bool _deviceUnderGoodCondition;	// 304 = 0x130
    int _currentGrowthStage;	// 308 = 0x134
    id _duetContextRegistration;	// 312 = 0x138
    _Bool _powerOptimizationsForExpensiveNetworkingDisabled;	// 320 = 0x140
    double _nonCellularEarlyFireConstantInterval;	// 328 = 0x148
    int _currentAddressFamily;	// 336 = 0x150
}

+ (_Bool)_isCachedKeepAliveIntervalStillValid:(double)arg1 date:(id)arg2;	// IMP=0x000000000000f93e
+ (id)_keepAliveCachePath;	// IMP=0x000000000000f81d
+ (id)intervalCacheDictionaries;	// IMP=0x000000000000f336
+ (Class)growthAlgorithmClass;	// IMP=0x00000000000072d8
- (void).cxx_destruct;	// IMP=0x000000000000fb41
@property(nonatomic) _Bool powerOptimizationsForExpensiveNetworkingDisabled; // @synthesize powerOptimizationsForExpensiveNetworkingDisabled=_powerOptimizationsForExpensiveNetworkingDisabled;
@property(nonatomic) _Bool alwaysWantsInterfaceChangeCallbacks; // @synthesize alwaysWantsInterfaceChangeCallbacks=_alwaysWantsInterfaceChangeCallbacks;
@property(nonatomic) double nonCellularEarlyFireConstantInterval; // @synthesize nonCellularEarlyFireConstantInterval=_nonCellularEarlyFireConstantInterval;
@property(readonly, nonatomic) int lastProcessedAction; // @synthesize lastProcessedAction=_lastProcessedAction;
@property(nonatomic) long long interfaceIdentifier; // @synthesize interfaceIdentifier=_interfaceIdentifier;
@property(nonatomic) double keepAliveGracePeriod; // @synthesize keepAliveGracePeriod=_keepAliveGracePeriod;
- (id)_stringForAddressFamily:(int)arg1;	// IMP=0x000000000000faa4
- (id)_stringForEvent:(int)arg1;	// IMP=0x000000000000fa2c
- (id)_stringForAction:(int)arg1;	// IMP=0x000000000000f9b2
- (id)_stringForStyle:(int)arg1;	// IMP=0x000000000000f97d
- (id)_getCachedWWANKeepAliveIntervalForAddressFamily:(int)arg1;	// IMP=0x000000000000f27e
- (void)_saveWWANKeepAliveInterval;	// IMP=0x000000000000ede2
- (void)_releasePowerAssertion;	// IMP=0x000000000000eddc
- (void)_takePowerAssertionWithTimeout:(double)arg1;	// IMP=0x000000000000edd6
- (id)persistentInterfaceManager;	// IMP=0x000000000000edbd
- (void)_adjustInterfaceAssertions;	// IMP=0x000000000000ec97
- (void)interfaceManagerInternetReachabilityChanged:(id)arg1;	// IMP=0x000000000000e9da
- (void)interfaceManagerInHomeCountryStatusChanged:(id)arg1;	// IMP=0x000000000000e95d
- (void)interfaceManagerWWANInterfaceStatusChanged:(id)arg1;	// IMP=0x000000000000e7f0
- (void)interfaceLinkQualityChanged:(id)arg1 previousLinkQuality:(int)arg2;	// IMP=0x000000000000e5da
- (void)_setTimerGuidance:(double)arg1;	// IMP=0x000000000000e570
- (void)_pauseTimers;	// IMP=0x000000000000e48b
- (void)_clearTimersReleasingPowerAssertion:(_Bool)arg1;	// IMP=0x000000000000e3bf
- (void)_clearTimers;	// IMP=0x000000000000e3a1
- (void)_calloutWithEvent:(int)arg1 context:(id)arg2;	// IMP=0x000000000000e0d6
- (void)_callDelegateWithEventAndContext:(id)arg1;	// IMP=0x000000000000df06
- (void)_delayTimerFired;	// IMP=0x000000000000dd97
- (void)_intervalTimerFired;	// IMP=0x000000000000d7cf
- (_Bool)_hasBudgetRemaining;	// IMP=0x000000000000d7c7
- (void)_setupKeepAliveForReconnect;	// IMP=0x000000000000d19f
- (void)_setupTimerForPollForAdjustment:(_Bool)arg1;	// IMP=0x000000000000c3f1
- (void)_adjustPollTimerIfNecessary;	// IMP=0x000000000000c239
- (void)_setupTimerForPushWithKeepAliveInterval:(double)arg1;	// IMP=0x000000000000bec5
@property(nonatomic) int currentAddressFamily;
- (void)_adjustMinimumIntervalFallback;	// IMP=0x000000000000bd96
- (void)setOperatorMinimumIntervalFallbackAllowed:(_Bool)arg1;	// IMP=0x000000000000bd3c
- (_Bool)operatorMinimumIntervalFallbackAllowed;	// IMP=0x000000000000bd04
@property(nonatomic) _Bool minimumIntervalFallbackEnabled; // @synthesize minimumIntervalFallbackEnabled=_minimumIntervalFallbackEnabled;
@property(nonatomic) _Bool disableEarlyFire;
- (void)setEnableNonCellularConnections:(_Bool)arg1;	// IMP=0x000000000000bb11
- (_Bool)shouldClientScheduleReconnectDueToFailure;	// IMP=0x000000000000b80d
- (void)cancelPollingIntervalOverride;	// IMP=0x000000000000b78d
- (void)setPollingIntervalOverride:(double)arg1;	// IMP=0x000000000000b6b7
@property(readonly, nonatomic) double pollingInterval;
- (_Bool)_isPushConnected;	// IMP=0x000000000000b341
- (void)setKeepAliveOverrideOnInterface:(long long)arg1 interval:(double)arg2 timeout:(double)arg3;	// IMP=0x000000000000b0cf
@property(nonatomic) _Bool usingServerStatsAggressively;
@property(nonatomic) double serverStatsExpectedKeepAliveInterval;
@property(nonatomic) double serverStatsMinKeepAliveInterval;
@property(nonatomic) double serverStatsMaxKeepAliveInterval;
- (void)_setMaximumKeepAliveInterval:(double)arg1 onInterface:(long long)arg2;	// IMP=0x000000000000a68b
@property double maximumKeepAliveInterval;
- (void)_setMinimumKeepAliveInterval:(double)arg1 onInterface:(long long)arg2;	// IMP=0x000000000000a39a
@property(nonatomic) double minimumKeepAliveInterval;
@property(readonly, nonatomic) double currentKeepAliveInterval;
@property(readonly, nonatomic) PCKeepAliveState *currentKeepAliveState;
@property(readonly, nonatomic) unsigned long long countOfGrowthActions;
@property(readonly, nonatomic) _Bool isRunning;
- (void)stopAndResetManager;	// IMP=0x0000000000009f73
- (void)stopManager;	// IMP=0x0000000000009ee0
- (void)_resolveStateWithAction:(int)arg1;	// IMP=0x0000000000009e95
- (void)_validateActionForCurrentStyle:(int)arg1;	// IMP=0x0000000000009c37
- (void)resumeManagerWithAction:(int)arg1 forceGrow:(_Bool)arg2;	// IMP=0x00000000000091a9
- (void)resumeManagerWithAction:(int)arg1;	// IMP=0x0000000000009195
- (void)startManager;	// IMP=0x0000000000009128
@property(readonly, nonatomic) int currentGrowthStage;
- (id)_currentGrowthAlgorithm;	// IMP=0x000000000000903e
- (id)_growthAlgorithmOnInterface:(long long)arg1;	// IMP=0x0000000000008f72
- (void)setOnlyAllowedStyle:(int)arg1;	// IMP=0x0000000000008f17
- (int)currentStyle;	// IMP=0x0000000000008e06
- (void)_processDeviceConditionChanges;	// IMP=0x0000000000008d0b
- (void)_handleDeviceConditionChangeCallback;	// IMP=0x0000000000008975
- (void)_deregisterForDeviceConditionsNotifications;	// IMP=0x000000000000896f
- (void)_registerForDeviceConditionsNotifications;	// IMP=0x0000000000008969
- (void)_loadPreferencesGeneratingEvent:(_Bool)arg1;	// IMP=0x00000000000081ee
- (void)_preferencesChanged;	// IMP=0x0000000000008199
- (void)dealloc;	// IMP=0x0000000000008019
@property(copy, nonatomic) NSString *duetIdentifier;
@property(nonatomic) __weak id <PCConnectionManagerDelegate> delegate;
- (id)initWithConnectionClass:(int)arg1 delegate:(id)arg2 serviceIdentifier:(id)arg3;	// IMP=0x0000000000007de3
- (id)initWithConnectionClass:(int)arg1 interfaceIdentifier:(long long)arg2 guidancePriority:(unsigned long long)arg3 delegate:(id)arg4 serviceIdentifier:(id)arg5;	// IMP=0x0000000000007dc7
- (id)initWithConnectionClass:(int)arg1 delegate:(id)arg2 delegateQueue:(id)arg3 serviceIdentifier:(id)arg4;	// IMP=0x0000000000007d98
- (void)carrierBundleDidChange;	// IMP=0x0000000000007c91
- (id)_initWithConnectionClass:(int)arg1 interfaceIdentifier:(long long)arg2 guidancePriority:(unsigned long long)arg3 delegate:(id)arg4 delegateQueue:(id)arg5 serviceIdentifier:(id)arg6;	// IMP=0x00000000000072e9

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

