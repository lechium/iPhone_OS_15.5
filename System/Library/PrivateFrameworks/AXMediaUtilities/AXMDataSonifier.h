//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AXMAudioDataSource, AXMAudioDataSourceMixer, AXMChartDescriptor, AXMDataSeriesDescriptor, AXMLiveContinuousTone, AXMSynthPatch, NSMutableOrderedSet, NSPointerArray, NSTimer;

@interface AXMDataSonifier : NSObject
{
    struct OpaqueAudioComponentInstance *_audioUnit;	// 8 = 0x8
    _Bool _usesBinauralPanning;	// 16 = 0x10
    _Bool _playing;	// 17 = 0x11
    _Bool _paused;	// 18 = 0x12
    _Bool _scrubbing;	// 19 = 0x13
    _Bool _isEndingScrubbing;	// 20 = 0x14
    _Bool _isInLiveContinuousToneSession;	// 21 = 0x15
    int _dataMode;	// 24 = 0x18
    int _interpolationMode;	// 28 = 0x1c
    double _minimumPlaybackFrequency;	// 32 = 0x20
    double _maximumPlaybackFrequency;	// 40 = 0x28
    double _playbackDuration;	// 48 = 0x30
    CDUnknownBlockType _function;	// 56 = 0x38
    AXMLiveContinuousTone *_continuousScrubbingTone;	// 64 = 0x40
    AXMSynthPatch *_patch;	// 72 = 0x48
    AXMChartDescriptor *_currentChartDescriptor;	// 80 = 0x50
    long long _currentSeriesIndex;	// 88 = 0x58
    NSTimer *_playbackObserverUpdateTimer;	// 96 = 0x60
    AXMAudioDataSourceMixer *_playbackMixerDataSource;	// 104 = 0x68
    AXMAudioDataSource *_playbackChartDataAudioDataSource;	// 112 = 0x70
    AXMAudioDataSource *_playbackTrendlineAudioDataSource;	// 120 = 0x78
    AXMAudioDataSourceMixer *_scrubbingMixerDataSource;	// 128 = 0x80
    AXMAudioDataSource *_scrubbingDiscreteAudioDataSource;	// 136 = 0x88
    AXMAudioDataSource *_scrubbingContinuousAudioDataSource;	// 144 = 0x90
    AXMAudioDataSource *_scrubbingTrendlineAudioDataSource;	// 152 = 0x98
    AXMAudioDataSourceMixer *_liveContinuousMixerDataSource;	// 160 = 0xa0
    AXMAudioDataSource *_liveContinuousAudioDataSource;	// 168 = 0xa8
    NSPointerArray *_playbackObservers;	// 176 = 0xb0
    AXMLiveContinuousTone *_trendlineScrubbingTone;	// 184 = 0xb8
    AXMLiveContinuousTone *_liveContinuousDataTone;	// 192 = 0xc0
    CDUnknownBlockType _trendlineFunction;	// 200 = 0xc8
    void *_scrubbingDiscreteDataRenderingContext;	// 208 = 0xd0
    void *_scrubbingPlaybackCallbackRenderingContext;	// 216 = 0xd8
    void *_liveTonePlaybackCallbackRenderingContext;	// 224 = 0xe0
    unsigned long long _playbackSampleCount;	// 232 = 0xe8
    NSMutableOrderedSet *_dataCategories;	// 240 = 0xf0
    double _minimumDiscreteToneLength;	// 248 = 0xf8
    double _maximumDiscreteToneLength;	// 256 = 0x100
    double _minimumToneVolume;	// 264 = 0x108
    double _maximumToneVolume;	// 272 = 0x110
}

+ (id)sharedInstance;	// IMP=0x000000000007794c
- (void).cxx_destruct;	// IMP=0x000000000008013d
@property(nonatomic) double maximumToneVolume; // @synthesize maximumToneVolume=_maximumToneVolume;
@property(nonatomic) double minimumToneVolume; // @synthesize minimumToneVolume=_minimumToneVolume;
@property(nonatomic) double maximumDiscreteToneLength; // @synthesize maximumDiscreteToneLength=_maximumDiscreteToneLength;
@property(nonatomic) double minimumDiscreteToneLength; // @synthesize minimumDiscreteToneLength=_minimumDiscreteToneLength;
@property(readonly, nonatomic) NSMutableOrderedSet *dataCategories; // @synthesize dataCategories=_dataCategories;
@property(readonly, nonatomic) unsigned long long playbackSampleCount; // @synthesize playbackSampleCount=_playbackSampleCount;
@property(readonly, nonatomic) void *liveTonePlaybackCallbackRenderingContext; // @synthesize liveTonePlaybackCallbackRenderingContext=_liveTonePlaybackCallbackRenderingContext;
@property(readonly, nonatomic) void *scrubbingPlaybackCallbackRenderingContext; // @synthesize scrubbingPlaybackCallbackRenderingContext=_scrubbingPlaybackCallbackRenderingContext;
@property(readonly, nonatomic) void *scrubbingDiscreteDataRenderingContext; // @synthesize scrubbingDiscreteDataRenderingContext=_scrubbingDiscreteDataRenderingContext;
@property(copy, nonatomic) CDUnknownBlockType trendlineFunction; // @synthesize trendlineFunction=_trendlineFunction;
@property(readonly, nonatomic) AXMLiveContinuousTone *liveContinuousDataTone; // @synthesize liveContinuousDataTone=_liveContinuousDataTone;
@property(readonly, nonatomic) AXMLiveContinuousTone *trendlineScrubbingTone; // @synthesize trendlineScrubbingTone=_trendlineScrubbingTone;
@property(retain, nonatomic) NSPointerArray *playbackObservers; // @synthesize playbackObservers=_playbackObservers;
@property(retain, nonatomic) AXMAudioDataSource *liveContinuousAudioDataSource; // @synthesize liveContinuousAudioDataSource=_liveContinuousAudioDataSource;
@property(retain, nonatomic) AXMAudioDataSourceMixer *liveContinuousMixerDataSource; // @synthesize liveContinuousMixerDataSource=_liveContinuousMixerDataSource;
@property(retain, nonatomic) AXMAudioDataSource *scrubbingTrendlineAudioDataSource; // @synthesize scrubbingTrendlineAudioDataSource=_scrubbingTrendlineAudioDataSource;
@property(retain, nonatomic) AXMAudioDataSource *scrubbingContinuousAudioDataSource; // @synthesize scrubbingContinuousAudioDataSource=_scrubbingContinuousAudioDataSource;
@property(retain, nonatomic) AXMAudioDataSource *scrubbingDiscreteAudioDataSource; // @synthesize scrubbingDiscreteAudioDataSource=_scrubbingDiscreteAudioDataSource;
@property(retain, nonatomic) AXMAudioDataSourceMixer *scrubbingMixerDataSource; // @synthesize scrubbingMixerDataSource=_scrubbingMixerDataSource;
@property(retain, nonatomic) AXMAudioDataSource *playbackTrendlineAudioDataSource; // @synthesize playbackTrendlineAudioDataSource=_playbackTrendlineAudioDataSource;
@property(retain, nonatomic) AXMAudioDataSource *playbackChartDataAudioDataSource; // @synthesize playbackChartDataAudioDataSource=_playbackChartDataAudioDataSource;
@property(retain, nonatomic) AXMAudioDataSourceMixer *playbackMixerDataSource; // @synthesize playbackMixerDataSource=_playbackMixerDataSource;
@property(retain, nonatomic) NSTimer *playbackObserverUpdateTimer; // @synthesize playbackObserverUpdateTimer=_playbackObserverUpdateTimer;
@property(nonatomic) long long currentSeriesIndex; // @synthesize currentSeriesIndex=_currentSeriesIndex;
@property(retain, nonatomic) AXMChartDescriptor *currentChartDescriptor; // @synthesize currentChartDescriptor=_currentChartDescriptor;
@property(retain, nonatomic) AXMSynthPatch *patch; // @synthesize patch=_patch;
@property(readonly, nonatomic) _Bool isInLiveContinuousToneSession; // @synthesize isInLiveContinuousToneSession=_isInLiveContinuousToneSession;
@property(readonly, nonatomic) AXMLiveContinuousTone *continuousScrubbingTone; // @synthesize continuousScrubbingTone=_continuousScrubbingTone;
@property(readonly, nonatomic) int interpolationMode; // @synthesize interpolationMode=_interpolationMode;
@property(readonly, nonatomic) _Bool isEndingScrubbing; // @synthesize isEndingScrubbing=_isEndingScrubbing;
@property(readonly, nonatomic) _Bool isScrubbing; // @synthesize isScrubbing=_scrubbing;
@property(readonly, nonatomic) _Bool isPaused; // @synthesize isPaused=_paused;
@property(readonly, nonatomic) _Bool isPlaying; // @synthesize isPlaying=_playing;
@property(readonly, nonatomic) CDUnknownBlockType function; // @synthesize function=_function;
@property(readonly, nonatomic) int dataMode; // @synthesize dataMode=_dataMode;
@property(nonatomic) _Bool usesBinauralPanning; // @synthesize usesBinauralPanning=_usesBinauralPanning;
@property(nonatomic) double playbackDuration; // @synthesize playbackDuration=_playbackDuration;
@property(nonatomic) double maximumPlaybackFrequency; // @synthesize maximumPlaybackFrequency=_maximumPlaybackFrequency;
@property(nonatomic) double minimumPlaybackFrequency; // @synthesize minimumPlaybackFrequency=_minimumPlaybackFrequency;
@property(readonly, nonatomic) AXMDataSeriesDescriptor *currentSeries;
- (void)_regenerateTimeEncodingValuesForDataPoints;	// IMP=0x000000000007f627
- (id)_newContinuousToneEnvelope;	// IMP=0x000000000007f5e2
- (void)_peakNormalizeBuffer:(void *)arg1 length:(unsigned long long)arg2 level:(double)arg3;	// IMP=0x000000000007f576
- (void)setLiveContinuousToneNormalizedFrequency:(double)arg1;	// IMP=0x000000000007f4cb
- (void)endLiveContinuousToneSession;	// IMP=0x000000000007f45c
- (void)beginLiveContinuousToneSession;	// IMP=0x000000000007f1ce
- (_Bool)series:(id)arg1 hasContinuousPitchDataForTimePosition:(double)arg2;	// IMP=0x000000000007f065
- (double)durationForDurationEncodingValue:(double)arg1;	// IMP=0x000000000007eee5
- (double)volumeForVolumeEncodingValue:(double)arg1;	// IMP=0x000000000007ed72
- (double)frequencyForPitchEncodingValue:(double)arg1;	// IMP=0x000000000007ec11
- (unsigned long long)sampleIndexForTimeOffset:(double)arg1;	// IMP=0x000000000007ebdc
- (double)timeOffsetForTimeEncodingValue:(id)arg1;	// IMP=0x000000000007eb61
- (double)interpolatedPitchValueForNormalizedTimePosition:(double)arg1 inSeries:(id)arg2;	// IMP=0x000000000007e655
- (double)valueFromNormalizedValue:(double)arg1 min:(double)arg2 max:(double)arg3;	// IMP=0x000000000007e643
- (double)normalizedValueForValue:(double)arg1 min:(double)arg2 max:(double)arg3;	// IMP=0x000000000007e610
- (double)normalizedTimeEncodingValueForValue:(id)arg1;	// IMP=0x000000000007e301
- (_Bool)_setOutputCallback;	// IMP=0x000000000007d460
- (_Bool)_setAudioFormat;	// IMP=0x000000000007d3b8
- (_Bool)_initializeAudioComponent;	// IMP=0x000000000007d33a
- (_Bool)_uninitializeAudioUnit;	// IMP=0x000000000007d329
- (_Bool)_initializeAudioUnit;	// IMP=0x000000000007d299
- (void)_renderUnivariateFunctionAudio;	// IMP=0x000000000007d293
- (void)_renderContinuousAudioForSeries:(id)arg1;	// IMP=0x000000000007cc4c
- (void)_renderDiscreteAudioForSeries:(id)arg1;	// IMP=0x000000000007c5b3
- (void)_renderSeries:(id)arg1;	// IMP=0x000000000007c540
- (void)renderSonification;	// IMP=0x000000000007c1ce
- (void)scrubToPlaybackFrame:(unsigned long long)arg1;	// IMP=0x000000000007a495
- (void)stopScrubbing;	// IMP=0x000000000007a40d
- (void)endScrubbing;	// IMP=0x000000000007a0e4
- (void)beginScrubbing;	// IMP=0x0000000000079ae1
- (void)setPlaybackPosition:(double)arg1;	// IMP=0x0000000000079784
- (void)removePlaybackObserver:(id)arg1;	// IMP=0x0000000000079662
- (void)addPlaybackObserver:(id)arg1;	// IMP=0x00000000000795da
- (void)stopPlaying;	// IMP=0x00000000000792af
- (void)pause;	// IMP=0x0000000000079017
- (void)play;	// IMP=0x0000000000078829
- (void)setMasterVolume:(double)arg1 fadeDuration:(double)arg2;	// IMP=0x00000000000786a7
@property(nonatomic) double masterVolume;
@property(readonly, nonatomic) double currentPlaybackPosition;
- (void)_initializeLiveToneDataSource;	// IMP=0x000000000007839c
- (void)_initializeAXMAudioDataSources;	// IMP=0x0000000000078118
- (void)dealloc;	// IMP=0x0000000000078074
- (id)init;	// IMP=0x0000000000077bad

@end

