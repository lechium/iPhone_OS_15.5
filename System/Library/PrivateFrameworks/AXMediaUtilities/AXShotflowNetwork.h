//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSArray;

@interface AXShotflowNetwork : NSObject
{
    long long _modelType;	// 8 = 0x8
    void *_espressoPlan;	// 16 = 0x10
    void *_espressoContext;	// 24 = 0x18
    struct {
        void *plan;
        int network_index;
    } _espressoNetwork;	// 32 = 0x20
    struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> _logitsPosOutputs;	// 48 = 0x30
    struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> _logitsNegOutputs;	// 72 = 0x48
    struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> _offsetsOutputs;	// 96 = 0x60
    struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> _rollOutputs;	// 120 = 0x78
    struct vector<std::shared_ptr<espresso_buffer_t>, std::allocator<std::shared_ptr<espresso_buffer_t>>> _yawOutputs;	// 144 = 0x90
    unsigned long long _currentNetworkWidth;	// 168 = 0xa8
    unsigned long long _currentNetworkHeight;	// 176 = 0xb0
    int _version;	// 184 = 0xb8
    int _maxout_layers;	// 188 = 0xbc
    int _bins_neg_maxout;	// 192 = 0xc0
    _Bool _has_pose;	// 196 = 0xc4
    _Bool _pose_square;	// 197 = 0xc5
    _Bool _extra_default_boxes;	// 198 = 0xc6
    int _num_pos_classes;	// 200 = 0xc8
    struct vector<int, std::allocator<int>> _important_classes;	// 208 = 0xd0
    struct vector<NSString *, std::allocator<NSString *>> _model_labels;	// 232 = 0xe8
    int _num_ratios;	// 256 = 0x100
    struct vector<float, std::allocator<float>> _ratios;	// 264 = 0x108
    struct vector<float, std::allocator<float>> _default_boxes_sides;	// 288 = 0x120
    struct vector<float, std::allocator<float>> _default_boxes_sides_normalized;	// 312 = 0x138
    NSArray *_filterThreshold;	// 336 = 0x150
    float _defaultBoxSizes[6][20][2];	// 344 = 0x158
    struct vector<float, std::allocator<float>> _cell_starts_x;	// 1304 = 0x518
    struct vector<float, std::allocator<float>> _cell_starts_y;	// 1328 = 0x530
    float _input_aspect_ratio;	// 1352 = 0x548
    _Bool _keep_aspect_ratio;	// 1356 = 0x54c
    _Bool _can_rotate;	// 1357 = 0x54d
    float _input_height;	// 1360 = 0x550
    float _threshold;	// 1364 = 0x554
}

+ (id)gpuNetworkWithModelPath:(id)arg1 configuration:(id)arg2 preferredMetalDeviceID:(int)arg3 version:(int)arg4 modelType:(long long)arg5;	// IMP=0x00000000000b086f
+ (id)cpuNetworkWithModelPath:(id)arg1 configuration:(id)arg2 version:(int)arg3 modelType:(long long)arg4;	// IMP=0x00000000000b07bd
- (id).cxx_construct;	// IMP=0x00000000000b5faa
- (void).cxx_destruct;	// IMP=0x00000000000b5ebe
@property(nonatomic) long long modelType; // @synthesize modelType=_modelType;
@property(nonatomic) int version; // @synthesize version=_version;
@property(nonatomic) float threshold; // @synthesize threshold=_threshold;
- (id)processCIImage:(id)arg1;	// IMP=0x00000000000b5d4a
- (id)resizeAndProcessVImage:(struct vImage_Buffer)arg1 inputIsBGR:(_Bool)arg2;	// IMP=0x00000000000b52c2
- (id)processVImage:(struct vImage_Buffer)arg1 inputIsBGR:(_Bool)arg2;	// IMP=0x00000000000b4728
- (void)runNetwork:(struct vImage_Buffer)arg1 inputIsBGR:(_Bool)arg2;	// IMP=0x00000000000b465f
- (int)setInputShape:(unsigned long long)arg1 height:(unsigned long long)arg2;	// IMP=0x00000000000b41c8
- (void)dealloc;	// IMP=0x00000000000b4150
- (id)initWithModelPath:(id)arg1 espressoEngineID:(int)arg2 espressoDeviceID:(int)arg3 configuration:(id)arg4 version:(int)arg5 modelType:(long long)arg6;	// IMP=0x00000000000b09eb
@property(readonly, nonatomic) unsigned long long preferredSmallSide;

@end

