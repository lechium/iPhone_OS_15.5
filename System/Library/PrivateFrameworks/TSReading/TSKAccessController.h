//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSCondition, NSMutableArray, NSMutableDictionary, TSUWeakReference;

@interface TSKAccessController : NSObject
{
    struct _opaque_pthread_rwlock_t _rwLock;	// 8 = 0x8
    _Bool _secondaryThreadWriting;	// 208 = 0xd0
    NSCondition *_cond;	// 216 = 0xd8
    NSMutableDictionary *_signalIdentifiers;	// 224 = 0xe0
    NSMutableDictionary *_waitIdentifiers;	// 232 = 0xe8
    struct __CFRunLoopSource *_mainThreadPingSource;	// 240 = 0xf0
    NSMutableArray *_pendingMainThreadInvocations;	// 248 = 0xf8
    struct _TSKThreadInfo _readerInfo[64];	// 256 = 0x100
    unsigned int _readerCount;	// 1280 = 0x500
    NSMutableArray *_writerQueue;	// 1288 = 0x508
    _Bool _writeHeld;	// 1296 = 0x510
    _Bool _writeBlockedMainThread;	// 1297 = 0x511
    TSUWeakReference *_delegate;	// 1304 = 0x518
}

- (_Bool)currentThreadHasWriteLock;	// IMP=0x0000000000081cc0
- (void)p_signalThread:(id)arg1;	// IMP=0x0000000000081ca0
- (_Bool)p_waitWithCondition:(id)arg1 untilDate:(id)arg2;	// IMP=0x0000000000081bda
- (void)p_flushPendingMainThreadBlocksQueueAcquiringLock:(_Bool)arg1;	// IMP=0x0000000000081ab0
- (void)p_performReadOnMainThread:(id)arg1;	// IMP=0x00000000000818c7
- (void)p_scheduleMainThreadRead:(id)arg1;	// IMP=0x00000000000817e7
- (void)p_dequeueWrite;	// IMP=0x000000000008166c
- (void)p_enqueueWriteAndBlock;	// IMP=0x0000000000081375
- (id)p_threadIdentifier;	// IMP=0x000000000008135c
- (void)p_writeUnlockAndPerformWithMainThreadBlocked:(CDUnknownBlockType)arg1;	// IMP=0x0000000000081254
- (void)p_writeUnlock;	// IMP=0x0000000000081240
- (void)p_writeLockAndBlockMainThread:(_Bool)arg1;	// IMP=0x000000000008108b
- (void)p_asyncPerformSelectorOnMainThread:(SEL)arg1 withTarget:(id)arg2 argument:(void *)arg3;	// IMP=0x0000000000080f84
- (void)p_blockMainThreadForWrite;	// IMP=0x0000000000080d43
- (void)p_readUnlock;	// IMP=0x0000000000080a74
- (_Bool)hasWrite;	// IMP=0x0000000000080a62
- (_Bool)hasRead;	// IMP=0x0000000000080a50
- (_Bool)p_hasWrite;	// IMP=0x00000000000809b9
- (_Bool)p_hasRead;	// IMP=0x0000000000080911
- (void)p_readLock;	// IMP=0x0000000000080627
- (void)performRead:(SEL)arg1 thenWrite:(SEL)arg2 thenReadOnMainThread:(SEL)arg3 withTarget:(id)arg4 argument:(void *)arg5 passReadResultToMainThreadRead:(_Bool)arg6;	// IMP=0x00000000000802e1
- (void)performRead:(SEL)arg1 thenWrite:(SEL)arg2 thenReadOnMainThread:(SEL)arg3 withTarget:(id)arg4 argument:(void *)arg5;	// IMP=0x00000000000802c5
- (void)performRead:(SEL)arg1 thenReadOnMainThread:(SEL)arg2 withTarget:(id)arg3 argument:(void *)arg4;	// IMP=0x00000000000801c1
- (void)performWrite:(SEL)arg1 withTarget:(id)arg2 argument:(void *)arg3;	// IMP=0x0000000000080149
- (void)performWrite:(CDUnknownBlockType)arg1 blockMainThread:(_Bool)arg2;	// IMP=0x00000000000800ae
- (void)performWrite:(CDUnknownBlockType)arg1;	// IMP=0x0000000000080097
- (void)performRead:(SEL)arg1 withTarget:(id)arg2 argument:(void *)arg3 argument2:(void *)arg4;	// IMP=0x0000000000080017
- (void)performRead:(SEL)arg1 withTarget:(id)arg2 argument:(void *)arg3;	// IMP=0x000000000007ff9f
- (void)performRead:(CDUnknownBlockType)arg1;	// IMP=0x000000000007ff33
- (void)spinMainThreadRunLoopUntil:(SEL)arg1 onTarget:(id)arg2;	// IMP=0x000000000007fdc7
- (void)signalIdentifier:(id)arg1;	// IMP=0x000000000007fc2c
- (_Bool)waitOnIdentifier:(id)arg1 untilDate:(id)arg2 releaseReadWhileWaiting:(_Bool)arg3;	// IMP=0x000000000007f6d8
- (void)waitOnIdentifier:(id)arg1;	// IMP=0x000000000007f68e
- (void)dealloc;	// IMP=0x000000000007f4d0
- (id)initWithDelegate:(id)arg1;	// IMP=0x000000000007f30b
- (id)init;	// IMP=0x000000000007f2f7

@end

