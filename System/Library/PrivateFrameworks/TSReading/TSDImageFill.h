//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSReading/NSCopying-Protocol.h>
#import <TSReading/NSMutableCopying-Protocol.h>
#import <TSReading/TSDMixing-Protocol.h>
#import <TSReading/TSSPreset-Protocol.h>
#import <TSReading/TSSPresetSource-Protocol.h>

@class NSObject, NSString, TSPData, TSUColor, TSUFlushableCachedImage;
@protocol OS_dispatch_queue;

@interface TSDImageFill <TSDMixing, TSSPreset, TSSPresetSource, NSCopying, NSMutableCopying>
{
    TSPData *mImageData;	// 16 = 0x10
    TSPData *mOriginalImageData;	// 24 = 0x18
    _Bool mInterpretsUntaggedImageDataAsGeneric;	// 32 = 0x20
    int mTechnique;	// 36 = 0x24
    TSUColor *mTintColor;	// 40 = 0x28
    TSUFlushableCachedImage *mStandardSizeTintedImage;	// 48 = 0x30
    TSUFlushableCachedImage *mHalfSizeTintedImage;	// 56 = 0x38
    TSUFlushableCachedImage *mQuarterSizeTintedImage;	// 64 = 0x40
    TSUColor *mReferenceColor;	// 72 = 0x48
    struct CGSize mFillSize;	// 80 = 0x50
    _Bool mHasIndicatedInterestInProvider;	// 96 = 0x60
    NSObject<OS_dispatch_queue> *mTempRenderLock;	// 104 = 0x68
    struct CGImage *mTempRenderCopy;	// 112 = 0x70
    struct CGImage *mSourceOfTempRenderCopy;	// 120 = 0x78
    long long mTempRenderCount;	// 128 = 0x80
}

+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3;	// IMP=0x000000000017f884
+ (id)presetKinds;	// IMP=0x000000000017f861
@property(readonly, nonatomic) _Bool interpretsUntaggedImageDataAsGeneric; // @synthesize interpretsUntaggedImageDataAsGeneric=mInterpretsUntaggedImageDataAsGeneric;
@property(readonly, copy, nonatomic) TSUColor *tintColor; // @synthesize tintColor=mTintColor;
@property(nonatomic) int technique; // @synthesize technique=mTechnique;
@property(readonly, retain, nonatomic) TSPData *originalImageData; // @synthesize originalImageData=mOriginalImageData;
@property(readonly, retain, nonatomic) TSPData *imageData; // @synthesize imageData=mImageData;
- (void)p_drawPDFWithProvider:(id)arg1 inContext:(struct CGContext *)arg2 bounds:(struct CGRect)arg3;	// IMP=0x000000000017ff63
- (void)p_drawBitmapImage:(struct CGImage *)arg1 withOrientation:(long long)arg2 inContext:(struct CGContext *)arg3 bounds:(struct CGRect)arg4;	// IMP=0x000000000017fb16
- (struct CGRect)p_drawnRectForImageSize:(struct CGSize)arg1 destRect:(struct CGRect)arg2 inContext:(struct CGContext *)arg3;	// IMP=0x000000000017f93c
- (id)p_validatedImageProvider;	// IMP=0x000000000017f8ad
- (void)i_flushCaches;	// IMP=0x000000000017f8a7
- (SEL)mapThemeAssetSelector;	// IMP=0x000000000017f89a
@property(readonly, nonatomic) NSString *presetKind;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;	// IMP=0x000000000017f688
- (long long)mixingTypeWithObject:(id)arg1;	// IMP=0x000000000017f470
- (id)p_quarterSizeCachedImage;	// IMP=0x000000000017f399
- (struct CGImage *)p_newQuarterSizeImage;	// IMP=0x000000000017f37f
- (id)p_halfSizeCachedImage;	// IMP=0x000000000017f2a8
- (struct CGImage *)p_newHalfSizeImage;	// IMP=0x000000000017f28e
- (id)p_standardSizeCachedImage;	// IMP=0x000000000017f1b7
- (struct CGImage *)p_newStandardSizeImage;	// IMP=0x000000000017f19d
- (struct CGImage *)p_newTintedImageWithScale:(double)arg1;	// IMP=0x000000000017f024
- (void)paintPath:(struct CGPath *)arg1 naturalBounds:(struct CGRect)arg2 inContext:(struct CGContext *)arg3 isPDF:(_Bool)arg4;	// IMP=0x000000000017ef64
- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x000000000017eea4
- (void)addBitmapsToRenderingQualityInfo:(id)arg1 forShapeRep:(id)arg2 inContext:(struct CGContext *)arg3;	// IMP=0x000000000017ed8d
- (void)p_paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x000000000017e953
- (struct CGSize)p_sizeOfFillImageForDestRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x000000000017e8b9
- (void)drawSwatchInRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x000000000017e7c4
- (struct CGSize)renderedImageSizeForObjectSize:(struct CGSize)arg1;	// IMP=0x000000000017e6f5
- (void)applyToCALayer:(id)arg1 withScale:(double)arg2;	// IMP=0x000000000017dd14
- (id)p_cachedImageForSize:(struct CGSize)arg1 inContext:(struct CGContext *)arg2 orLayer:(id)arg3;	// IMP=0x000000000017db0d
- (_Bool)shouldBeReappliedToCALayer:(id)arg1;	// IMP=0x000000000017da2b
- (_Bool)p_shouldApplyTintedImage;	// IMP=0x000000000017d9ef
- (int)fillType;	// IMP=0x000000000017d9e4
- (_Bool)canApplyToCALayerByAddingSublayers;	// IMP=0x000000000017d971
- (_Bool)canApplyToCALayer;	// IMP=0x000000000017d8fb
- (_Bool)drawsInOneStep;	// IMP=0x000000000017d8a0
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000017d766
- (unsigned long long)hash;	// IMP=0x000000000017d749
- (id)referenceColor;	// IMP=0x000000000017d3cb
- (id)imageDataAtFillSize;	// IMP=0x000000000017d1a3
- (void)p_setFillSizeForApplicationData;	// IMP=0x000000000017d0df
- (_Bool)isOpaque;	// IMP=0x000000000017d048
@property(readonly, nonatomic) struct CGSize fillSize; // @synthesize fillSize=mFillSize;
@property(readonly, nonatomic) double scale;
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000017ce13
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000017cd59
- (void)dealloc;	// IMP=0x000000000017cc5a
- (id)initWithGenericImageData:(id)arg1 technique:(int)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4 originalImageData:(id)arg5;	// IMP=0x000000000017cc37
- (id)initWithImageData:(id)arg1 technique:(int)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4 originalImageData:(id)arg5;	// IMP=0x000000000017cacc

@end

