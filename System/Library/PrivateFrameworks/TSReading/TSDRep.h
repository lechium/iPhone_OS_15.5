//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <TSReading/TSDMagicMoveMatching-Protocol.h>
#import <TSReading/TSDRepTextContaining-Protocol.h>

@class CALayer, NSArray, NSDictionary, NSString, TSDCanvas, TSDInteractiveCanvasController, TSDKnobTracker, TSDLayout, TSDLayoutGeometry, TSDTextureContext, TSDTextureSet, TSDTilingBackgroundQueue;
@protocol OS_dispatch_queue, TSDContainerRep;

@interface TSDRep : NSObject <TSDMagicMoveMatching, TSDRepTextContaining>
{
    TSDCanvas *mCanvas;	// 8 = 0x8
    TSDRep<TSDContainerRep> *mParentRep;	// 16 = 0x10
    NSArray *mKnobs;	// 24 = 0x18
    _Bool mKnobPositionsInvalid;	// 32 = 0x20
    _Bool mShowKnobsWhenManipulated;	// 33 = 0x21
    _Bool mKnobsAreShowing;	// 34 = 0x22
    TSDKnobTracker *mKnobTracker;	// 40 = 0x28
    _Bool mSelectionHighlightLayerValid;	// 48 = 0x30
    CALayer *mSelectionHighlightLayer;	// 56 = 0x38
    unsigned long long mTextureDeliveryStyle;	// 64 = 0x40
    int mTextureByGlyphStyle;	// 72 = 0x48
    TSDTextureContext *mTextureContext;	// 80 = 0x50
    unsigned long long mTextureStage;	// 88 = 0x58
    _Bool mForceRasterization;	// 96 = 0x60
    NSDictionary *mTextureActionAttributes;	// 104 = 0x68
    NSDictionary *mTextureAnimationInfo;	// 112 = 0x70
    _Bool mShowTemporaryHighlight;	// 120 = 0x78
    CALayer *mTemporaryHighlightLayer;	// 128 = 0x80
    _Bool mShowDragAndDropHighlight;	// 136 = 0x88
    CALayer *mDragAndDropHighlightLayer;	// 144 = 0x90
    unsigned long long mLayerUpdatesPausedCount;	// 152 = 0x98
    TSDLayout *mTemporaryMixingLayout;	// 160 = 0xa0
    TSDLayout *mLayout;	// 168 = 0xa8
    TSDTextureSet *mTexture;	// 176 = 0xb0
    struct CGColor *mDefaultSelectionHighlightColor;	// 184 = 0xb8
    TSDLayoutGeometry *mLastGeometryInRoot;	// 192 = 0xc0
    struct CGRect mOriginalLayerFrameInScaledCanvas;	// 200 = 0xc8
    TSDTilingBackgroundQueue *mTileQueue;	// 232 = 0xe8
    long long mTileQueueOnce;	// 240 = 0xf0
    long long mTileProviderQueueLock;	// 248 = 0xf8
    NSObject<OS_dispatch_queue> *mTileProviderQueue;	// 256 = 0x100
    _Bool mHasBeenRemoved;	// 264 = 0x108
}

@property(retain, nonatomic) NSDictionary *textureAnimationInfo; // @synthesize textureAnimationInfo=mTextureAnimationInfo;
@property(retain, nonatomic) NSDictionary *textureActionAttributes; // @synthesize textureActionAttributes=mTextureActionAttributes;
@property(nonatomic) unsigned long long textureStage; // @synthesize textureStage=mTextureStage;
@property(copy, nonatomic) TSDTextureContext *textureContext; // @synthesize textureContext=mTextureContext;
@property(nonatomic) int textureByGlyphStyle; // @synthesize textureByGlyphStyle=mTextureByGlyphStyle;
@property(nonatomic) unsigned long long textureDeliveryStyle; // @synthesize textureDeliveryStyle=mTextureDeliveryStyle;
@property(retain, nonatomic) TSDTextureSet *texture; // @synthesize texture=mTexture;
@property(nonatomic) TSDKnobTracker *currentKnobTracker; // @synthesize currentKnobTracker=mKnobTracker;
@property(nonatomic) TSDRep<TSDContainerRep> *parentRep; // @synthesize parentRep=mParentRep;
@property(retain, nonatomic) TSDLayout *temporaryMixingLayout; // @synthesize temporaryMixingLayout=mTemporaryMixingLayout;
@property _Bool forceRasterization; // @synthesize forceRasterization=mForceRasterization;
@property(readonly, nonatomic) TSDCanvas *canvas; // @synthesize canvas=mCanvas;
- (id)delegateConformingToProtocol:(id)arg1 forRep:(id)arg2;	// IMP=0x00000000000e1cb9
- (void)replaceContentsFromRep:(id)arg1;	// IMP=0x00000000000e1bfd
- (void)willReplaceContentsFromRep:(id)arg1;	// IMP=0x00000000000e1b41
@property(readonly, nonatomic) NSArray *hyperlinkRegions;
- (_Bool)wantsToDistortWithImagerContext;	// IMP=0x00000000000e19f9
- (void)i_shutdownTileQueue;	// IMP=0x00000000000e19e0
- (id)i_tileQueue;	// IMP=0x00000000000e1918
- (id)i_queueForTileProvider;	// IMP=0x00000000000e186d
- (_Bool)mustDrawOnMainThreadForInteractiveCanvas;	// IMP=0x00000000000e1865
- (_Bool)canDrawInParallel;	// IMP=0x00000000000e185d
- (_Bool)canDrawInBackgroundDuringScroll;	// IMP=0x00000000000e1855
- (int)tilingMode;	// IMP=0x00000000000e184d
- (_Bool)directlyManagesLayerContent;	// IMP=0x00000000000e1845
- (void)didCreateLayer:(id)arg1;	// IMP=0x00000000000e183f
- (struct CGPoint)centerForRotation;	// IMP=0x00000000000e1814
- (struct CGRect)boundsForResizeGuideUI;	// IMP=0x00000000000e17e1
- (_Bool)wantsGuidesWhileResizing;	// IMP=0x00000000000e17b6
- (id)infoForTransforming;	// IMP=0x00000000000e17a4
- (_Bool)resizeFromCenterOnly;	// IMP=0x00000000000e179c
- (double)opacity;	// IMP=0x00000000000e178e
- (unsigned long long)adjustedKnobForComputingResizeGeometry:(unsigned long long)arg1;	// IMP=0x00000000000e16ce
- (struct CGRect)targetRectForEditMenu;	// IMP=0x00000000000e16b0
- (id)itemsToAddToEditMenu;	// IMP=0x00000000000e16a8
- (_Bool)handlesEditMenu;	// IMP=0x00000000000e16a0
- (_Bool)isLocked;	// IMP=0x00000000000e1618
- (_Bool)isPlaceholder;	// IMP=0x00000000000e1610
- (_Bool)isSelectable;	// IMP=0x00000000000e15fe
- (int)dragHUDAndGuidesTypeAtCanvasPoint:(struct CGPoint)arg1;	// IMP=0x00000000000e15f3
- (int)dragTypeAtCanvasPoint:(struct CGPoint)arg1;	// IMP=0x00000000000e15c3
- (_Bool)shouldShowSizesInRulers;	// IMP=0x00000000000e15bb
- (_Bool)shouldShowDragHUD;	// IMP=0x00000000000e15b3
- (_Bool)isDraggable;	// IMP=0x00000000000e15ab
- (_Bool)isOpaque;	// IMP=0x00000000000e15a3
- (_Bool)masksToBounds;	// IMP=0x00000000000e159b
- (id)allLayers;	// IMP=0x00000000000e14f4
- (void)invalidateAnnotationColor;	// IMP=0x00000000000e14a4
- (void)invalidateComments;	// IMP=0x00000000000e149e
- (_Bool)shouldShowCommentHighlight;	// IMP=0x00000000000e13ab
- (id)additionalLayersOverLayer;	// IMP=0x00000000000e1354
- (id)additionalLayersUnderLayer;	// IMP=0x00000000000e134c
- (void)didUpdateLayer:(id)arg1;	// IMP=0x00000000000e1346
- (void)willUpdateLayer:(id)arg1;	// IMP=0x00000000000e12fa
- (_Bool)canEditWithEditor:(id)arg1;	// IMP=0x00000000000e12f2
- (id)beginEditing;	// IMP=0x00000000000e12ea
- (void)willBeRemoved;	// IMP=0x00000000000e12e4
- (void)processChangedProperty:(int)arg1;	// IMP=0x00000000000e129c
- (void)drawInContext:(struct CGContext *)arg1;	// IMP=0x00000000000e1296
- (_Bool)repDirectlyManagesContentsScaleOfLayer:(id)arg1;	// IMP=0x00000000000e128e
- (void)didEndDrawingTilingLayerInBackground:(id)arg1 withToken:(id)arg2;	// IMP=0x00000000000e123c
- (_Bool)shouldBeginDrawingTilingLayerInBackground:(id)arg1 returningToken:(id *)arg2 andQueue:(id *)arg3;	// IMP=0x00000000000e11db
- (id)queueForDrawingTilingLayerInBackground:(id)arg1;	// IMP=0x00000000000e1183
- (struct CGRect)visibleBoundsForTilingLayer:(id)arg1;	// IMP=0x00000000000e1135
- (_Bool)mustDrawTilingLayerOnMainThread:(id)arg1;	// IMP=0x00000000000e1104
- (_Bool)canDrawTilingLayerInBackground:(id)arg1;	// IMP=0x00000000000e108f
- (_Bool)shouldLayoutTilingLayer:(id)arg1;	// IMP=0x00000000000e105e
- (id)textureForContext:(id)arg1;	// IMP=0x00000000000e0642
- (void)p_setMagicMoveTextureAttributes:(id)arg1;	// IMP=0x00000000000e0564
- (struct CGAffineTransform)unRotatedTransform:(struct CGAffineTransform)arg1;	// IMP=0x00000000000e037c
- (void)markTextureDirty;	// IMP=0x00000000000e023d
@property(readonly, nonatomic) double textureAngle;
- (_Bool)wantsToHandleTapsWhenLocked;	// IMP=0x00000000000e012c
- (_Bool)wantsToHandleTapsOnContainingGroup;	// IMP=0x00000000000e0124
- (_Bool)canClipThemeContentToCanvas;	// IMP=0x00000000000e00db
- (_Bool)handleDoubleTapAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000000e00d3
- (_Bool)handleSingleTapAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000000e00cb
- (_Bool)shouldIgnoreSingleTapAtPoint:(struct CGPoint)arg1 withRecognizer:(id)arg2;	// IMP=0x00000000000e00c3
- (_Bool)shouldIgnoreEditMenuTapAtPoint:(struct CGPoint)arg1 withRecognizer:(id)arg2;	// IMP=0x00000000000e00bb
- (_Bool)wantsEditMenuForTapAtPoint:(struct CGPoint)arg1 onKnob:(id)arg2;	// IMP=0x00000000000e00b3
- (_Bool)handleDoubleTapAtPoint:(struct CGPoint)arg1 onKnob:(id)arg2;	// IMP=0x00000000000e00ab
- (_Bool)handleSingleTapAtPoint:(struct CGPoint)arg1 onKnob:(id)arg2;	// IMP=0x00000000000e00a3
- (struct CGPoint)unscaledGuidePosition;	// IMP=0x00000000000e0024
- (double)angleForRotation;	// IMP=0x00000000000dffed
- (_Bool)isBeingRotated;	// IMP=0x00000000000dffbe
- (void)p_dynamicRotateDidBegin;	// IMP=0x00000000000dfefd
- (void)dynamicRotateDidBegin;	// IMP=0x00000000000dfec7
- (struct CGRect)i_originalLayerFrameInScaledCanvas;	// IMP=0x00000000000dfea9
- (struct CGPoint)i_dragOffset;	// IMP=0x00000000000dfdbb
- (_Bool)isInDynamicOperation;	// IMP=0x00000000000dfd8d
- (id)popoutLayers;	// IMP=0x00000000000dfd23
- (id)overlayLayers;	// IMP=0x00000000000dfc70
- (id)p_addLayersForKnobsToArray:(id)arg1 withDelegate:(id)arg2 isOverlay:(_Bool)arg3;	// IMP=0x00000000000df705
- (struct CGPoint)convertKnobPositionToUnscaledCanvas:(struct CGPoint)arg1;	// IMP=0x00000000000df6d9
- (void)i_invalidateSelectionHighlightLayer;	// IMP=0x00000000000df6cf
- (id)selectionHighlightLayer;	// IMP=0x00000000000df47b
- (struct CGAffineTransform)transformForHighlightLayer;	// IMP=0x00000000000df41c
- (struct CGRect)boundsForHighlightLayer;	// IMP=0x00000000000df3e9
@property(nonatomic) struct CGColor *selectionHighlightColor;
- (double)selectionHighlightWidth;	// IMP=0x00000000000df2a4
- (_Bool)directlyManagesVisibilityOfKnob:(id)arg1;	// IMP=0x00000000000df287
- (void)fadeKnobsOut;	// IMP=0x00000000000df01a
- (void)fadeKnobsIn;	// IMP=0x00000000000ded59
- (void)turnKnobsOn;	// IMP=0x00000000000debad
- (void)showKnobsDuringManipulation:(_Bool)arg1;	// IMP=0x00000000000deba4
- (_Bool)shouldShowKnobs;	// IMP=0x00000000000deb71
- (_Bool)shouldDisplayHyperlinkUI;	// IMP=0x00000000000deac3
@property(readonly, nonatomic) _Bool isEditingPath;
- (_Bool)shouldShowCommentUIDirectlyOverRep;	// IMP=0x00000000000deaa6
- (_Bool)shouldCreateCommentKnob;	// IMP=0x00000000000dea02
- (_Bool)shouldCreateLockedKnobs;	// IMP=0x00000000000de9c9
- (_Bool)shouldCreateSelectionKnobs;	// IMP=0x00000000000de982
- (_Bool)shouldCreateKnobs;	// IMP=0x00000000000de97a
- (_Bool)shouldShowSelectionHighlight;	// IMP=0x00000000000de922
- (double)additionalRotationForKnobOrientation;	// IMP=0x00000000000de8bf
- (id)knobForTag:(unsigned long long)arg1;	// IMP=0x00000000000de787
- (void)p_actionGhostKnobHit;	// IMP=0x00000000000de756
- (void)p_toggleHyperlinkUIVisibility;	// IMP=0x00000000000de725
- (id)newTrackerForKnob:(id)arg1;	// IMP=0x00000000000de71d
- (void)invalidateKnobPositions;	// IMP=0x00000000000de6ea
- (struct CGPoint)positionOfStandardKnob:(id)arg1 forBounds:(struct CGRect)arg2;	// IMP=0x00000000000de2f2
- (struct CGPoint)p_positionOfActionGhostKnobForBounds:(struct CGRect)arg1;	// IMP=0x00000000000de220
- (struct CGPoint)positionOfActionGhostKnob;	// IMP=0x00000000000de1c7
- (struct CGPoint)positionOfHyperlinkKnob;	// IMP=0x00000000000de0a5
- (_Bool)forcesPlacementOnTop;	// IMP=0x00000000000de09d
- (void)updatePositionsOfKnobs:(id)arg1;	// IMP=0x00000000000ddb68
- (struct CGRect)trackingBoundsForStandardKnobs;	// IMP=0x00000000000ddb05
- (struct CGRect)boundsForStandardKnobs;	// IMP=0x00000000000ddabc
- (_Bool)canUseSpecializedHitRegionForKnob:(id)arg1;	// IMP=0x00000000000dda9f
- (void)addActionGhostKnobToArrayIfNecessary:(id)arg1;	// IMP=0x00000000000dda41
- (void)addHyperlinkKnobToArray:(id)arg1;	// IMP=0x00000000000dda3b
- (void)addCommentKnobToArray:(id)arg1;	// IMP=0x00000000000dda35
- (void)addLockedKnobsToArray:(id)arg1;	// IMP=0x00000000000dd8dc
- (void)addSelectionKnobsToArray:(id)arg1;	// IMP=0x00000000000dd811
- (id)newSelectionKnobForType:(int)arg1 tag:(unsigned long long)arg2;	// IMP=0x00000000000dd7b2
- (void)addKnobsToArray:(id)arg1;	// IMP=0x00000000000dd6fc
- (unsigned long long)enabledKnobMask;	// IMP=0x00000000000dd449
- (void)invalidateKnobs;	// IMP=0x00000000000dd3fc
@property(readonly, nonatomic) NSArray *knobs;
- (void)becameNotSelected;	// IMP=0x00000000000dd17a
- (void)becameSelected;	// IMP=0x00000000000dd14b
- (_Bool)isSelected;	// IMP=0x00000000000dd114
- (_Bool)isSelectedIgnoringLocking;	// IMP=0x00000000000dd078
- (void)i_configureFontSmoothingForContext:(struct CGContext *)arg1 layer:(id)arg2;	// IMP=0x00000000000dd072
- (void)endDrawingOperation;	// IMP=0x00000000000dd06c
- (void)beginDrawingOperation;	// IMP=0x00000000000dd066
- (void)recursivelyDrawChildrenInContext:(struct CGContext *)arg1;	// IMP=0x00000000000dcefd
- (void)recursivelyDrawInContext:(struct CGContext *)arg1;	// IMP=0x00000000000dcd8a
- (void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000000dcd84
- (struct CGRect)clipRect;	// IMP=0x00000000000dcd51
- (_Bool)isDrawingInFlippedContext;	// IMP=0x00000000000dcccc
- (void)didDrawInLayer:(id)arg1 context:(struct CGContext *)arg2;	// IMP=0x00000000000dcc5f
- (void)drawInLayerContext:(struct CGContext *)arg1;	// IMP=0x00000000000dcc4d
- (void)setupForDrawingInLayer:(id)arg1 context:(struct CGContext *)arg2;	// IMP=0x00000000000dca0f
- (id)colorBehindLayer:(id)arg1;	// IMP=0x00000000000dca07
- (Class)layerClass;	// IMP=0x00000000000dc9f6
- (void)viewScrollingEnded;	// IMP=0x00000000000dc9f0
- (void)viewScrollDidChange;	// IMP=0x00000000000dc9ea
- (void)viewScrollWillChange;	// IMP=0x00000000000dc9e4
- (void)viewScaleDidChange;	// IMP=0x00000000000dc9a9
- (void)wideGamutValueDidChange;	// IMP=0x00000000000dc997
- (void)screenScaleDidChange;	// IMP=0x00000000000dc95c
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;	// IMP=0x00000000000dc8a1
- (void)setNeedsDisplay;	// IMP=0x00000000000dc829
- (void)processChanges:(id)arg1;	// IMP=0x00000000000dc5c2
- (void)computeDirectLayerFrame:(struct CGRect *)arg1 andTransform:(struct CGAffineTransform *)arg2 basedOnLayoutGeometry:(id)arg3;	// IMP=0x00000000000dc52c
- (void)computeDirectLayerFrame:(struct CGRect *)arg1 andTransform:(struct CGAffineTransform *)arg2;	// IMP=0x00000000000dc468
- (void)computeDirectLayerFrame:(struct CGRect *)arg1 andTransform:(struct CGAffineTransform *)arg2 basedOnTransform:(struct CGAffineTransform)arg3 andSize:(struct CGSize)arg4;	// IMP=0x00000000000dc0c8
- (void)antiAliasDefeatLayerFrame:(struct CGRect *)arg1 forTransform:(struct CGAffineTransform)arg2;	// IMP=0x00000000000dbf01
- (void)antiAliasDefeatLayerTransform:(struct CGAffineTransform *)arg1 forFrame:(struct CGRect)arg2;	// IMP=0x00000000000dbb4f
- (void)updateLayerGeometryFromLayout:(id)arg1;	// IMP=0x00000000000dbaa1
- (struct CGAffineTransform)layerTransformInRootForZeroAnchor;	// IMP=0x00000000000db893
- (struct CGAffineTransform)parentLayerInverseTransformInRootForZeroAnchor;	// IMP=0x00000000000db7ad
- (struct CGAffineTransform)layerTransform;	// IMP=0x00000000000db4d2
- (void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(_Bool)arg3;	// IMP=0x00000000000db23a
- (void)updateFromLayout;	// IMP=0x00000000000db12e
- (void)updateChildrenFromLayout;	// IMP=0x00000000000db128
- (id)repForHandleSingleTap;	// IMP=0x00000000000db116
- (id)repForRotating;	// IMP=0x00000000000db050
- (id)repForSelecting;	// IMP=0x00000000000dafb3
- (id)additionalRepsForDragging;	// IMP=0x00000000000daf9a
- (id)repForDragging;	// IMP=0x00000000000daebd
- (_Bool)intersectsUnscaledRect:(struct CGRect)arg1;	// IMP=0x00000000000dadb4
- (double)shortestDistanceToPoint:(struct CGPoint)arg1 countAsHit:(_Bool *)arg2;	// IMP=0x00000000000dada6
- (_Bool)shouldExpandHitRegionWhenSmall;	// IMP=0x00000000000dad9e
- (id)hitRepChrome:(struct CGPoint)arg1;	// IMP=0x00000000000dad03
- (id)hitRepChrome:(struct CGPoint)arg1 passingTest:(CDUnknownBlockType)arg2;	// IMP=0x00000000000dacc7
- (id)hitReps:(struct CGPoint)arg1 withSlopBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000dac47
- (id)hitReps:(struct CGPoint)arg1 withSlop:(struct CGSize)arg2;	// IMP=0x00000000000dabe5
- (id)hitRep:(struct CGPoint)arg1;	// IMP=0x00000000000dabbd
- (id)hitRep:(struct CGPoint)arg1 withGesture:(id)arg2 passingTest:(CDUnknownBlockType)arg3;	// IMP=0x00000000000dab81
- (_Bool)containsPoint:(struct CGPoint)arg1 withSlop:(struct CGSize)arg2;	// IMP=0x00000000000dab00
- (_Bool)containsPoint:(struct CGPoint)arg1;	// IMP=0x00000000000daaa3
- (void)scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x00000000000daa74
- (double)scaleToConvertNaturalToLayerRelative;	// IMP=0x00000000000daa1e
- (struct CGPoint)convertUnscaledPointFromLayerRelative:(struct CGPoint)arg1;	// IMP=0x00000000000da9f0
- (struct CGPoint)convertUnscaledPointToLayerRelative:(struct CGPoint)arg1;	// IMP=0x00000000000da9c2
- (struct CGRect)convertNaturalRectFromLayerRelative:(struct CGRect)arg1;	// IMP=0x00000000000da943
- (struct CGRect)convertNaturalRectToLayerRelative:(struct CGRect)arg1;	// IMP=0x00000000000da8c4
- (struct CGPoint)convertNaturalPointFromLayerRelative:(struct CGPoint)arg1;	// IMP=0x00000000000da83c
- (struct CGPoint)convertNaturalPointToLayerRelative:(struct CGPoint)arg1;	// IMP=0x00000000000da7b4
- (struct CGAffineTransform)transformToConvertNaturalFromLayerRelative;	// IMP=0x00000000000da756
- (struct CGAffineTransform)transformToConvertNaturalToLayerRelative;	// IMP=0x00000000000da5ce
- (struct CGPoint)layerOffsetForDragging;	// IMP=0x00000000000da532
- (struct CGRect)layerFrameInScaledCanvasRelativeToParent;	// IMP=0x00000000000da477
- (struct CGRect)i_layerFrameInScaledCanvasIgnoringDragging;	// IMP=0x00000000000da287
- (struct CGRect)layerFrameInScaledCanvas;	// IMP=0x00000000000da175
- (struct CGRect)frameInScreenSpace;	// IMP=0x00000000000da047
- (struct CGRect)frameInUnscaledCanvasIncludingChrome;	// IMP=0x00000000000da014
- (struct CGRect)frameInUnscaledCanvas;	// IMP=0x00000000000d9fcb
- (struct CGPoint)convertNaturalPointFromUnscaledCanvas:(struct CGPoint)arg1;	// IMP=0x00000000000d9f2a
- (struct CGPoint)convertNaturalPointToUnscaledCanvas:(struct CGPoint)arg1;	// IMP=0x00000000000d9e9b
- (struct CGPath *)newPathInScaledCanvasFromNaturalRect:(struct CGRect)arg1;	// IMP=0x00000000000d9ba7
- (struct CGRect)convertNaturalRectFromUnscaledCanvas:(struct CGRect)arg1;	// IMP=0x00000000000d9ae9
- (struct CGRect)convertNaturalRectToUnscaledCanvas:(struct CGRect)arg1;	// IMP=0x00000000000d9a54
- (_Bool)isVisibleOnCanvas;	// IMP=0x00000000000d9995
- (struct CGRect)naturalBounds;	// IMP=0x00000000000d994a
- (double)angleInRoot;	// IMP=0x00000000000d9882
- (void)addToSet:(id)arg1;	// IMP=0x00000000000d9867
- (id)parentRepToPerformSelecting;	// IMP=0x00000000000d97fb
- (void)i_willEnterForeground;	// IMP=0x00000000000d97f5
- (_Bool)hasBeenRemoved;	// IMP=0x00000000000d97e9
- (void)i_willBeRemoved;	// IMP=0x00000000000d9755
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;	// IMP=0x00000000000d9743
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;	// IMP=0x00000000000d95e9
- (void)recursivelyPerformSelector:(SEL)arg1;	// IMP=0x00000000000d949d
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;	// IMP=0x00000000000d9450
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;	// IMP=0x00000000000d92da
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;	// IMP=0x00000000000d917b
- (void)wasAddedToParent;	// IMP=0x00000000000d9175
- (void)willBeRemovedFromParent;	// IMP=0x00000000000d916f
- (id)connectedReps;	// IMP=0x00000000000d8f77
- (void)resumeLayerUpdatesAndLayoutImmediately;	// IMP=0x00000000000d8f3c
- (void)resumeLayerUpdates;	// IMP=0x00000000000d8dbb
- (void)pauseLayerUpdates;	// IMP=0x00000000000d8cf4
- (_Bool)layerUpdatesPaused;	// IMP=0x00000000000d8ce3
- (id)info;	// IMP=0x00000000000d8cb8
@property(readonly, nonatomic) TSDLayout *layout; // @synthesize layout=mLayout;
@property(readonly, nonatomic) TSDInteractiveCanvasController *interactiveCanvasController;
- (_Bool)i_hasInteractiveCanvasController;	// IMP=0x00000000000d8bcc
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x00000000000d89d4
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;	// IMP=0x00000000000d894a
- (id)subviewsController;	// IMP=0x00000000001a9dbb
- (struct CGRect)i_partition_deepClipRect;	// IMP=0x00000000001f721c
- (_Bool)allowTrackingContainedRep:(id)arg1;	// IMP=0x000000000025a9f8
- (void)addTrackingAboveChildren:(id)arg1;	// IMP=0x000000000025a9f2
- (void)addTracking:(id)arg1;	// IMP=0x000000000025a9ec

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

