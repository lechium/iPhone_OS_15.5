//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSReading/TSDTilingLayerDelegate-Protocol.h>
#import <TSReading/TSKAVPlayerControllerDelegate-Protocol.h>

@class AVAsset, AVPlayerLayer, CALayer, NSString, TSDButtonKnob, TSDFrameRep, TSDMovieInfo, TSKAVPlayerController;

@interface TSDMovieRep <TSKAVPlayerControllerDelegate, TSDTilingLayerDelegate>
{
    TSKAVPlayerController *mPlayerController;	// 416 = 0x1a0
    _Bool mCurrentlyObservingPlayerLayer;	// 424 = 0x1a8
    _Bool mPlayerLayerShouldBeDisplayed;	// 425 = 0x1a9
    AVPlayerLayer *mPlayerLayer;	// 432 = 0x1b0
    CALayer *mLayerToStroke;	// 440 = 0x1b8
    CALayer *mMovieReflectionLayer;	// 448 = 0x1c0
    CALayer *mMovieReflectionMaskLayer;	// 456 = 0x1c8
    AVPlayerLayer *mReflectionPlayerLayer;	// 464 = 0x1d0
    CALayer *mReflectionPlayerStrokeMaskLayer;	// 472 = 0x1d8
    _Bool mPreventDisposeOfPlayerLayer;	// 480 = 0x1e0
    CALayer *mPlayerStrokeLayer;	// 488 = 0x1e8
    CALayer *mReflectionPlayerStrokeLayer;	// 496 = 0x1f0
    TSDFrameRep *mReflectionFrameRep;	// 504 = 0x1f8
    CALayer *mReflectionFrameMaskLayer;	// 512 = 0x200
    AVAsset *mAssetForPlayability;	// 520 = 0x208
    _Bool mDidCheckPlayability;	// 528 = 0x210
    _Bool mIsPlayable;	// 529 = 0x211
    TSDButtonKnob *mPlayButtonKnob;	// 536 = 0x218
    _Bool mPlayButtonKnobVisible;	// 544 = 0x220
    _Bool mDidCancelUpdatingPlayButtonVisibility;	// 545 = 0x221
    _Bool mInReadMode;	// 546 = 0x222
    struct CGImage *mAlternatePosterImage;	// 552 = 0x228
    unsigned long long mIsChangingDynamicVisibleTimeCount;	// 560 = 0x230
    float mDynamicVolume;	// 568 = 0x238
    _Bool mIsChangingDynamicVolume;	// 572 = 0x23c
    _Bool mNeedsTeardownPlayerController;	// 573 = 0x23d
}

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2;	// IMP=0x00000000001b32d8
@property(nonatomic) struct CGImage *alternatePosterImage; // @synthesize alternatePosterImage=mAlternatePosterImage;
@property(readonly, nonatomic, getter=isPlayable) _Bool playable; // @synthesize playable=mIsPlayable;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x00000000001b348f
- (void)dynamicVolumeChangeDidEnd;	// IMP=0x00000000001b32c7
- (void)dynamicVolumeUpdateToValue:(float)arg1;	// IMP=0x00000000001b32a9
- (void)dynamicVolumeChangeDidBegin;	// IMP=0x00000000001b3275
@property(readonly, nonatomic) float volume;
- (void)dynamicVisibleTimeChangeDidEnd;	// IMP=0x00000000001b3084
- (void)dynamicVisibleTimeUpdateToValue:(double)arg1 withTolerance:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000001b2f11
- (void)dynamicVisibleTimeChangeDidBegin;	// IMP=0x00000000001b2e14
@property(readonly, nonatomic) double visibleTime;
- (_Bool)isDraggable;	// IMP=0x00000000001b2d43
- (_Bool)canResetMediaSize;	// IMP=0x00000000001b2cc2
- (id)additionalLayersOverLayer;	// IMP=0x00000000001b2c25
- (id)additionalLayersUnderLayer;	// IMP=0x00000000001b2b96
- (void)p_updateEndTime;	// IMP=0x00000000001b2b09
- (void)p_updateStartTime;	// IMP=0x00000000001b2a7c
- (void)p_updateVolume;	// IMP=0x00000000001b2a2f
- (void)p_teardownPlayerControllerIfNeeded;	// IMP=0x00000000001b2816
- (void)p_setNeedsTeardownPlayerControllerOnUpdateLayer;	// IMP=0x00000000001b2805
- (void)p_teardownPlayerController;	// IMP=0x00000000001b27d7
- (void)p_setupPlayerControllerIfNecessary;	// IMP=0x00000000001b261a
- (_Bool)p_shouldPlayerControllerExistThroughoutSelection;	// IMP=0x00000000001b2612
- (void)p_togglePlaying;	// IMP=0x00000000001b259e
- (void)p_playForKnob;	// IMP=0x00000000001b2552
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
- (void)playbackDidStopForPlayerController:(id)arg1;	// IMP=0x00000000001b24f1
- (void)playerController:(id)arg1 playbackDidFailWithError:(id)arg2;	// IMP=0x00000000001b24be
- (id)playerController;	// IMP=0x00000000001b2496
- (void)p_updatePlayButtonVisibility;	// IMP=0x00000000001b2186
@property(readonly, nonatomic) _Bool p_playButtonFitsInFrame;
- (void)p_cancelUpdatingUIStateForMoviePlayability;	// IMP=0x00000000001b202e
- (void)p_stopUpdatingUIStateForMoviePlayability;	// IMP=0x00000000001b1fea
- (void)p_updateUIStateForMoviePlayability;	// IMP=0x00000000001b1d8d
@property(readonly, nonatomic) TSDButtonKnob *p_playButtonKnob;
- (_Bool)shouldShowMediaReplaceUI;	// IMP=0x00000000001b1cce
- (void)willEndReadMode;	// IMP=0x00000000001b1cb1
- (void)willBeginReadMode;	// IMP=0x00000000001b1c78
- (void)willBeRemoved;	// IMP=0x00000000001b1c22
- (_Bool)directlyManagesVisibilityOfKnob:(id)arg1;	// IMP=0x00000000001b1bd1
- (unsigned long long)enabledKnobMask;	// IMP=0x00000000001b1b4f
- (void)addKnobsToArray:(id)arg1;	// IMP=0x00000000001b1b04
- (void)p_addPlayButtonToKnobs:(id)arg1;	// IMP=0x00000000001b1aad
- (void)screenScaleDidChange;	// IMP=0x00000000001b1a5f
- (void)p_updateRepeatMode;	// IMP=0x00000000001b19da
- (_Bool)handleSingleTapAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000001b1946
- (_Bool)wantsToHandleTapsWhenLocked;	// IMP=0x00000000001b193e
@property(readonly, nonatomic) _Bool shouldSingleTapPlay;
- (void)becameNotSelected;	// IMP=0x00000000001b18d6
- (void)becameSelected;	// IMP=0x00000000001b1870
- (void)processChangedProperty:(int)arg1;	// IMP=0x00000000001b16da
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000001b16c1
- (void)drawInLayerContext:(struct CGContext *)arg1;	// IMP=0x00000000001b1686
- (void)drawInContextWithoutEffects:(struct CGContext *)arg1 withContent:(_Bool)arg2 withStroke:(_Bool)arg3 withOpacity:(_Bool)arg4 forAlphaOnly:(_Bool)arg5 drawChildren:(_Bool)arg6;	// IMP=0x00000000001b1624
- (void)p_drawInContext:(struct CGContext *)arg1 withContent:(_Bool)arg2 withStroke:(_Bool)arg3 withOpacity:(double)arg4 withMask:(_Bool)arg5 forShadowOrHitTest:(_Bool)arg6;	// IMP=0x00000000001b1287
- (void)p_drawPosterImageInContext:(struct CGContext *)arg1;	// IMP=0x00000000001b10e0
- (void)p_updateMovieReflectionMaskLayer;	// IMP=0x00000000001b0fc1
- (void)p_drawReflectionGradientIntoMovieReflectionLayer:(struct CGContext *)arg1 reflectionSize:(struct CGSize)arg2;	// IMP=0x00000000001b0f09
- (void)p_updateStrokeLayerForStroke:(id)arg1 repLayer:(id)arg2;	// IMP=0x00000000001b0777
- (void)p_applyBasicStrokeToLayer:(id)arg1 layer:(id)arg2 bounds:(struct CGRect)arg3;	// IMP=0x00000000001b06a2
- (void)p_drawStrokeInContext:(struct CGContext *)arg1;	// IMP=0x00000000001b0690
- (void)p_drawReflectionStrokeInContext:(struct CGContext *)arg1;	// IMP=0x00000000001b067e
- (void)p_commonDrawStrokeInContext:(struct CGContext *)arg1;	// IMP=0x00000000001b0603
- (void)i_updateFrameRep;	// IMP=0x00000000001b059d
- (void)p_updateReflectionFrameRep;	// IMP=0x00000000001b04c0
- (void)updateFromLayout;	// IMP=0x00000000001b047f
- (void)updateLayerGeometryFromLayout:(id)arg1;	// IMP=0x00000000001b02cf
- (void)p_placeReflectionPlayerLayer:(struct CGRect)arg1 transform:(struct CGAffineTransform)arg2;	// IMP=0x00000000001affd0
- (void)p_setPositionAndBoundsIfDifferent:(id)arg1 position:(struct CGPoint)arg2 bounds:(struct CGRect)arg3;	// IMP=0x00000000001afef2
- (void)didUpdateLayer:(id)arg1;	// IMP=0x00000000001afb15
- (void)willUpdateLayer:(id)arg1;	// IMP=0x00000000001af98c
- (void)p_arrangeLayerVisibility:(id)arg1;	// IMP=0x00000000001af832
- (struct CGRect)p_strokeFrameForLayerFrame:(struct CGRect)arg1;	// IMP=0x00000000001af757
- (void)p_setupStrokeLayers:(_Bool)arg1 needsMaskLayer:(_Bool)arg2 isFrame:(_Bool)arg3;	// IMP=0x00000000001af507
- (void)p_checkAndsyncTilingLayerState:(_Bool)arg1;	// IMP=0x00000000001af478
- (void)p_setupPlayerStrokeLayers:(_Bool)arg1;	// IMP=0x00000000001af423
- (_Bool)p_needsTilingLayerForStroke:(id)arg1;	// IMP=0x00000000001af3fa
- (void)setShapeReflectionPlayerStrokeLayer:(id)arg1;	// IMP=0x00000000001af3e9
- (void)p_setupTilingReflectionPlayerStrokeLayer;	// IMP=0x00000000001af36e
- (void)p_setupShapeReflectionPlayerStrokeLayer;	// IMP=0x00000000001af303
- (id)reflectionPlayerStrokeLayer;	// IMP=0x00000000001af2f2
- (id)p_tilingLayerForReflectionStroke;	// IMP=0x00000000001af2c4
- (id)p_shapeLayerForReflectionStroke;	// IMP=0x00000000001af296
- (void)p_setupShapePlayerStrokeLayer;	// IMP=0x00000000001af22b
- (void)p_setupTilingPlayerStrokeLayer;	// IMP=0x00000000001af1b0
- (id)playerStrokeLayer;	// IMP=0x00000000001af19f
- (id)p_tilingLayerForPlayerStroke;	// IMP=0x00000000001af171
- (id)p_shapeLayerForPlayerStroke;	// IMP=0x00000000001af143
- (void)drawLayer:(id)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000001af0dc
- (void)p_setupPlayerLayerIfNecessary;	// IMP=0x00000000001aed3d
- (void)p_setupReflectionPlayerLayerIfNecessary;	// IMP=0x00000000001aeba1
- (void)createReflectionLayer;	// IMP=0x00000000001aea7d
- (void)disposeReflectionLayer;	// IMP=0x00000000001ae953
- (void)p_showReflectionLayer;	// IMP=0x00000000001ae8c3
- (void)p_hideReflectionLayer;	// IMP=0x00000000001ae66c
- (void)p_disposeReflectionStrokeLayers;	// IMP=0x00000000001ae59a
- (void)p_disposeMaskLayer;	// IMP=0x00000000001ae530
- (void)p_disposeStrokeLayer;	// IMP=0x00000000001ae4cf
- (void)p_createReflectionPlayerStrokeMaskLayer;	// IMP=0x00000000001ae3a4
- (void)p_createMaskLayerForLayer:(id)arg1;	// IMP=0x00000000001ae319
- (_Bool)directlyManagesLayerContent;	// IMP=0x00000000001ae311
- (void)dealloc;	// IMP=0x00000000001ae21c
- (id)movieLayout;	// IMP=0x00000000001ae1e4
@property(readonly, nonatomic) TSDMovieInfo *movieInfo;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;	// IMP=0x00000000001ae150

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

