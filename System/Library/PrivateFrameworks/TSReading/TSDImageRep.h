//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSReading/CALayerDelegate-Protocol.h>
#import <TSReading/TSDMagicMoveMatching-Protocol.h>

@class CALayer, CAShapeLayer, NSCache, NSMutableArray, NSObject, NSRecursiveLock, NSString, TSDImageRepSizingState, TSDInstantAlphaTracker, TSDLayoutGeometry;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface TSDImageRep <CALayerDelegate, TSDMagicMoveMatching>
{
    TSDLayoutGeometry *mLastImageGeometryInRoot;	// 416 = 0x1a0
    TSDLayoutGeometry *mLastMaskGeometryInRoot;	// 424 = 0x1a8
    struct CGAffineTransform mLastLayoutToImageTransform;	// 432 = 0x1b0
    struct CGRect mFrameInUnscaledCanvasRelativeToSuper;	// 480 = 0x1e0
    _Bool mFrameInUnscaledCanvasIsValid;	// 512 = 0x200
    CALayer *mContentsLayer;	// 520 = 0x208
    CAShapeLayer *mMaskPathLayer;	// 528 = 0x210
    CAShapeLayer *mIAMaskLayer;	// 536 = 0x218
    CAShapeLayer *mMaskSublayer;	// 544 = 0x220
    struct CGAffineTransform mLastPictureFrameLayerTransform;	// 552 = 0x228
    _Bool mDirectlyManagesLayerContent;	// 600 = 0x258
    _Bool mShowImageHighlight;	// 601 = 0x259
    _Bool mInInstantAlphaMode;	// 602 = 0x25a
    TSDInstantAlphaTracker *mInstantAlphaTracker;	// 608 = 0x260
    struct CGImage *mInstantAlphaImage;	// 616 = 0x268
    struct CGAffineTransform mBaseMaskLayoutTransform;	// 624 = 0x270
    NSRecursiveLock *mLayerUpdateAndSizingStateLock;	// 672 = 0x2a0
    TSDImageRepSizingState *mSizingState;	// 680 = 0x2a8
    _Bool mSizingStateReady;	// 688 = 0x2b0
    NSObject<OS_dispatch_queue> *mSizedImageAccessQueue;	// 696 = 0x2b8
    struct CGImage *mSizedImage;	// 704 = 0x2c0
    struct CGSize mSizedImageSize;	// 712 = 0x2c8
    long long mSizedImageOrientation;	// 728 = 0x2d8
    _Bool mSizedImageHasMaskBakedIn;	// 736 = 0x2e0
    _Bool mSizedImageHasAdjustmentsBakedIn;	// 737 = 0x2e1
    struct CGPath *mSizedImageMaskPath;	// 744 = 0x2e8
    struct CGImage *mCachedSizedImage;	// 752 = 0x2f0
    struct CGSize mCachedSizedImageSize;	// 760 = 0x2f8
    long long mCachedSizedImageOrientation;	// 776 = 0x308
    NSCache *mHitTestCache;	// 784 = 0x310
    long long mHitTestCacheOnce;	// 792 = 0x318
    NSMutableArray *mUpdateFromLayoutBlocks;	// 800 = 0x320
    NSObject<OS_dispatch_semaphore> *mUpdateFromLayoutBlocksLock;	// 808 = 0x328
    unsigned long long mImageSizingDisabledCount;	// 816 = 0x330
}

+ (struct CGPath *)p_newPathToBakeIntoSizedImageForSize:(struct CGSize)arg1 withImageLayout:(id)arg2 orientation:(long long)arg3;	// IMP=0x000000000012f9cb
+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2;	// IMP=0x000000000012e926
- (void)p_popoverViewPresented:(id)arg1;	// IMP=0x0000000000131ddf
- (void)p_hitCacheSetCachedValue:(_Bool)arg1 forPoint:(struct CGPoint)arg2;	// IMP=0x0000000000131ce9
- (_Bool)p_hitCacheGetCachedValue:(_Bool *)arg1 forPoint:(struct CGPoint)arg2;	// IMP=0x0000000000131c7d
- (void)p_invalidateHitTestCache;	// IMP=0x0000000000131c60
- (_Bool)shouldShowMediaReplaceUI;	// IMP=0x0000000000131c05
- (double)additionalRotationForKnobOrientation;	// IMP=0x0000000000131b07
- (void)addKnobsToArray:(id)arg1;	// IMP=0x00000000001318f2
- (void)updatePositionsOfKnobs:(id)arg1;	// IMP=0x00000000001315f4
- (_Bool)shouldCreateSelectionKnobs;	// IMP=0x0000000000131599
- (_Bool)shouldShowSmartMaskKnobs;	// IMP=0x0000000000131437
- (void)generateSizedImageOnBackgroundThread;	// IMP=0x00000000001310f5
- (void)useCachedSizedImage:(id)arg1;	// IMP=0x0000000000130f80
- (id)newCachedSizedImageWithNaturalSize;	// IMP=0x0000000000130ee4
- (id)newCachedSizedImage;	// IMP=0x0000000000130daa
- (void)cacheImageAtCurrentSize;	// IMP=0x0000000000130d4b
- (void)p_takeSizedImageFromCache;	// IMP=0x0000000000130cec
- (_Bool)p_shouldRenderWithMaskToBounds;	// IMP=0x0000000000130c3b
- (_Bool)p_shouldBakeMaskIntoSizedImage;	// IMP=0x0000000000130a5d
- (void)p_invalidateSizedImageFromQueue;	// IMP=0x00000000001309e6
- (void)p_invalidateSizedImage;	// IMP=0x000000000013097e
- (void)p_takeSizedImageFromState;	// IMP=0x00000000001308aa
- (_Bool)p_takeSizedImageFromState:(id)arg1;	// IMP=0x000000000013039a
- (void)p_takeSizedImageFromStateIfReady;	// IMP=0x000000000013032f
- (void)i_willEnterForeground;	// IMP=0x00000000001302bb
- (void)p_generateSizedImage:(id)arg1;	// IMP=0x0000000000130250
- (void)p_startSizing;	// IMP=0x000000000012ffef
- (void)wideGamutValueDidChange;	// IMP=0x000000000012ff8f
- (void)p_generateSizedImageIfNecessary;	// IMP=0x000000000012f6eb
- (void)popDisableImageSizing;	// IMP=0x000000000012f6a0
- (void)pushDisableImageSizing;	// IMP=0x000000000012f68f
- (_Bool)p_okayToGenerateSizedImage;	// IMP=0x000000000012f625
- (struct CGSize)p_desiredSizedImageSize;	// IMP=0x000000000012f4c9
- (_Bool)shouldShowShadow;	// IMP=0x000000000012f469
- (_Bool)canDrawShadowInOneStepWithChildren:(_Bool)arg1;	// IMP=0x000000000012f457
- (_Bool)p_drawsInOneStep;	// IMP=0x000000000012f27e
- (void)p_updateMaskSublayersForMaskEditMode;	// IMP=0x000000000012ef2a
- (void)p_createMaskLayerForLayer:(id)arg1;	// IMP=0x000000000012ee9f
- (void)p_disposeMaskLayer;	// IMP=0x000000000012ed9e
- (void)p_disposeStrokeLayer;	// IMP=0x000000000012ecba
- (id)p_validatedThumbnailImageProvider;	// IMP=0x000000000012ecb2
- (id)p_validatedBitmapImageProvider;	// IMP=0x000000000012ec7a
- (id)p_validatedImageProvider;	// IMP=0x000000000012ec24
- (id)p_imageProvider;	// IMP=0x000000000012ebd1
- (id)p_imageData;	// IMP=0x000000000012eb04
- (id)textureForContext:(id)arg1;	// IMP=0x000000000012e8c1
- (void)viewScaleDidChange;	// IMP=0x000000000012e809
- (id)additionalLayersOverLayer;	// IMP=0x000000000012e599
- (void)p_updateStrokeLayerForStroke:(id)arg1 repLayer:(id)arg2;	// IMP=0x000000000012d7c4
- (void)p_updateMaskLayer:(id)arg1 forRepLayer:(id)arg2 shouldIncludeMask:(_Bool)arg3 shouldIncludeInstantAlpha:(_Bool)arg4;	// IMP=0x000000000012ce41
- (_Bool)p_shouldMaskWithFrameLayers;	// IMP=0x000000000012cd9e
- (void)didUpdateLayer:(id)arg1;	// IMP=0x000000000012b4ed
- (void)willUpdateLayer:(id)arg1;	// IMP=0x000000000012aff6
- (void)updateLayerGeometryFromLayout:(id)arg1;	// IMP=0x000000000012adca
- (void)p_getAliasedValuesForMaskToBoundsDirectLayerFrame:(out struct CGRect *)arg1 transform:(out struct CGAffineTransform *)arg2;	// IMP=0x000000000012aadc
- (struct CGRect)frameInUnscaledCanvas;	// IMP=0x000000000012a848
- (struct CGImage *)p_newImageByApplyingAdjustmentsToImage:(struct CGImage *)arg1 alreadyEnhanced:(_Bool)arg2;	// IMP=0x000000000012a701
- (_Bool)p_directlyManagesContentForLayer:(id)arg1;	// IMP=0x000000000012a5f1
- (long long)p_orientationForDirectlyManagedLayer;	// IMP=0x000000000012a425
- (struct CGImage *)p_imageForDirectlyManagedLayer:(id)arg1;	// IMP=0x000000000012a0b1
- (void)p_updateDirectlyManagesLayerContentForLayer:(id)arg1;	// IMP=0x0000000000129fef
- (_Bool)directlyManagesLayerContent;	// IMP=0x0000000000129fdf
- (void)didCreateLayer:(id)arg1;	// IMP=0x0000000000129f8c
- (void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x0000000000129f2f
- (void)p_drawInContext:(struct CGContext *)arg1 withContent:(_Bool)arg2 withStroke:(_Bool)arg3 withOpacity:(double)arg4 withMask:(_Bool)arg5 withIAMask:(_Bool)arg6 forLayer:(_Bool)arg7 forShadow:(_Bool)arg8 forHitTest:(_Bool)arg9;	// IMP=0x0000000000128a56
- (_Bool)canDrawInParallel;	// IMP=0x0000000000128a4e
- (id)imageOfStroke:(struct CGRect *)arg1;	// IMP=0x0000000000128817
- (void)drawInContextWithoutEffects:(struct CGContext *)arg1 withContent:(_Bool)arg2 withStroke:(_Bool)arg3 withOpacity:(_Bool)arg4 forAlphaOnly:(_Bool)arg5 drawChildren:(_Bool)arg6;	// IMP=0x000000000012879c
- (void)drawInLayerContext:(struct CGContext *)arg1;	// IMP=0x000000000012875e
- (id)contentsLayer;	// IMP=0x0000000000128718
- (struct CGPoint)centerForRotation;	// IMP=0x000000000012868f
- (_Bool)shouldShowDragHUD;	// IMP=0x0000000000128664
- (_Bool)isDraggable;	// IMP=0x000000000012865c
- (_Bool)shouldAllowReplacementFromPaste;	// IMP=0x0000000000128601
- (struct CGAffineTransform)transformForHighlightLayer;	// IMP=0x000000000012855e
- (struct CGRect)boundsForHighlightLayer;	// IMP=0x00000000001284e3
- (struct CGPoint)positionOfStandardKnob:(id)arg1 forBounds:(struct CGRect)arg2;	// IMP=0x000000000012839d
- (struct CGRect)boundsForStandardKnobs;	// IMP=0x0000000000128301
- (struct CGRect)targetRectForEditMenu;	// IMP=0x00000000001282ce
- (_Bool)wantsToDistortWithImagerContext;	// IMP=0x000000000012827d
- (id)hitRepChrome:(struct CGPoint)arg1;	// IMP=0x000000000012815c
- (id)overlayLayers;	// IMP=0x0000000000127ed0
- (void)willBeginReadMode;	// IMP=0x0000000000127eca
- (void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(_Bool)arg3;	// IMP=0x0000000000127e82
- (void)updateFromLayout;	// IMP=0x0000000000127a9e
- (void)processChangedProperty:(int)arg1;	// IMP=0x000000000012733f
- (void)processChanges:(id)arg1;	// IMP=0x0000000000127310
- (id)pathSourceForSelectionHighlightBehavior;	// IMP=0x00000000001272d9
- (_Bool)shouldShowSelectionHighlight;	// IMP=0x000000000012727e
- (_Bool)shouldIgnoreEditMenuTapAtPoint:(struct CGPoint)arg1 withRecognizer:(id)arg2;	// IMP=0x000000000012726c
- (_Bool)handleDoubleTapAtPoint:(struct CGPoint)arg1;	// IMP=0x0000000000127264
- (int)dragTypeAtCanvasPoint:(struct CGPoint)arg1;	// IMP=0x0000000000126f1c
- (_Bool)containsPoint:(struct CGPoint)arg1;	// IMP=0x0000000000126b6c
- (void)becameNotSelected;	// IMP=0x0000000000126b3d
- (void)willBeRemoved;	// IMP=0x0000000000126a92
- (void)p_canvasSelectionDidChange:(id)arg1;	// IMP=0x0000000000126a8c
- (void)unhighlightImage;	// IMP=0x0000000000126a56
- (void)highlightImage;	// IMP=0x0000000000126a20
- (id)maskLayout;	// IMP=0x00000000001269f5
- (id)maskInfo;	// IMP=0x00000000001269ca
- (id)imageLayout;	// IMP=0x0000000000126992
- (id)imageInfo;	// IMP=0x000000000012695a
@property(readonly, nonatomic) struct CGImage *imageRef;
- (void)dealloc;	// IMP=0x00000000001267ea
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;	// IMP=0x00000000001266c2

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

