//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TSReading/TSDMixing-Protocol.h>
#import <TSReading/TSDSmartPathSource-Protocol.h>

@interface TSDPointPathSource <TSDMixing, TSDSmartPathSource>
{
    int mType;	// 12 = 0xc
    struct CGPoint mPoint;	// 16 = 0x10
    struct CGSize mNaturalSize;	// 32 = 0x20
}

+ (id)pathSourceWithType:(int)arg1 point:(struct CGPoint)arg2 naturalSize:(struct CGSize)arg3;	// IMP=0x000000000011230f
+ (id)plusWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00000000001122f5
+ (id)starWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00000000001122db
+ (id)doubleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00000000001122c1
+ (id)leftSingleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x00000000001122aa
+ (id)rightSingleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x0000000000112290
@property struct CGSize naturalSize; // @synthesize naturalSize=mNaturalSize;
@property struct CGPoint point; // @synthesize point=mPoint;
@property int type; // @synthesize type=mType;
- (_Bool)p_isFlippedDoubleArrow;	// IMP=0x000000000011430a
- (_Bool)p_isRightFacingArrow;	// IMP=0x00000000001142e4
- (struct CGPoint)p_getControlKnobPointForPlus;	// IMP=0x00000000001142a3
- (void)p_setControlKnobPointForPlus:(struct CGPoint)arg1;	// IMP=0x0000000000114205
- (struct CGPoint)p_getControlKnobPointForStarInnerRadius;	// IMP=0x00000000001140ef
- (void)p_setControlKnobPointForStarInnerRadius:(struct CGPoint)arg1;	// IMP=0x000000000011400d
- (struct CGPoint)p_getControlKnobPointForStarPoints;	// IMP=0x0000000000113ef0
- (void)p_setControlKnobPointForStarPoints:(struct CGPoint)arg1;	// IMP=0x0000000000113d84
- (struct CGPoint)p_getControlKnobPointForArrow;	// IMP=0x0000000000113ce4
- (void)p_setControlKnobPointForArrow:(struct CGPoint)arg1;	// IMP=0x0000000000113c2c
- (struct CGPath *)p_newPlusPath;	// IMP=0x0000000000113a70
- (struct CGPath *)p_newStarPath;	// IMP=0x000000000011386e
- (struct CGPath *)p_newArrowPath;	// IMP=0x00000000001133c2
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;	// IMP=0x0000000000113260
- (long long)mixingTypeWithObject:(id)arg1;	// IMP=0x0000000000113047
- (struct CGSize)scaleFactorForInscribedRectangle;	// IMP=0x0000000000112cef
- (_Bool)isCircular;	// IMP=0x0000000000112ce7
- (_Bool)isRectangular;	// IMP=0x0000000000112cd2
- (id)bezierPathWithoutFlips;	// IMP=0x0000000000112c4a
- (id)valueForSetSelector:(SEL)arg1;	// IMP=0x0000000000112bdd
- (struct CGPath *)newFeedbackPathForKnob:(unsigned long long)arg1;	// IMP=0x0000000000112aa7
- (id)getFeedbackStringForKnob:(unsigned long long)arg1;	// IMP=0x00000000001129cd
- (void)setControlKnobPosition:(unsigned long long)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x000000000011293b
- (struct CGPoint)getControlKnobPosition:(unsigned long long)arg1;	// IMP=0x00000000001128be
@property(readonly) unsigned long long numberOfControlKnobs;
- (void)setPointValue:(id)arg1;	// IMP=0x000000000011286c
- (void)scaleToNaturalSize:(struct CGSize)arg1;	// IMP=0x00000000001127e5
- (struct CGPoint)maxPointValue;	// IMP=0x0000000000112712
- (struct CGPoint)minPointValue;	// IMP=0x00000000001126cd
- (id)description;	// IMP=0x00000000001125fb
- (unsigned long long)hash;	// IMP=0x00000000001125d9
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000001124ca
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000112434
- (id)init;	// IMP=0x0000000000112407
- (id)initWithType:(int)arg1 point:(struct CGPoint)arg2 naturalSize:(struct CGSize)arg3;	// IMP=0x0000000000112367

@end

