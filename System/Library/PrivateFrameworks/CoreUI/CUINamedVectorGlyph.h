//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CUICatalog, CUINamedLookup, NSDictionary;

@interface CUINamedVectorGlyph
{
    double _pointSize;	// 56 = 0x38
    double _lookedupScaleFactor;	// 64 = 0x40
    struct CGImage *_cgImageRef;	// 72 = 0x48
    double _fontMatchingScaleFactor;	// 80 = 0x50
    CUICatalog *_catalog;	// 88 = 0x58
    long long _layoutDirection;	// 96 = 0x60
    unsigned int _generatedImage:1;	// 104 = 0x68
    unsigned int _flippable:1;	// 104 = 0x68
    unsigned int _canUsePathConcatenation:1;	// 104 = 0x68
    long long _glyphSize;	// 112 = 0x70
    long long _glyphWeight;	// 120 = 0x78
    CUINamedLookup *_ultralightInterpolationSource;	// 128 = 0x80
    CUINamedLookup *_blackInterpolationSource;	// 136 = 0x88
    struct CGPath *_templatePath;	// 144 = 0x90
    NSDictionary *_multicolorPaths;	// 152 = 0x98
    NSDictionary *_hierarchicalPaths;	// 160 = 0xa0
}

+ (id)_layerHierarchyStyleNames;	// IMP=0x000000000000a8b8
+ (id)_knockoutStyleNames;	// IMP=0x000000000000a89f
+ (id)_colorStyleNames;	// IMP=0x000000000000a859
- (void).cxx_destruct;	// IMP=0x000000000000ae44
- (id)debugDescription;	// IMP=0x000000000000ac28
- (id)colorNameForRenderingStyle:(id)arg1;	// IMP=0x000000000000abc0
- (id)_layersForRenderingMode:(int)arg1 inRendition:(id)arg2;	// IMP=0x000000000000a934
- (id)_stylePrefixForRenderingMode:(int)arg1;	// IMP=0x000000000000a8fe
- (id)_referencePathsForHierarchicalMode;	// IMP=0x000000000000a135
- (id)_referencePathsForMulticolorMode;	// IMP=0x0000000000009804
- (struct CGPath *)_referencePathForTemplateMode;	// IMP=0x000000000000951a
- (void)_drawHierarchicalLayersInContext:(struct CGContext *)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize)arg3 colorResolver:(CDUnknownBlockType)arg4;	// IMP=0x000000000000907d
- (void)_drawHierarchicalLayerNamed:(id)arg1 inContext:(struct CGContext *)arg2 colorResolver:(CDUnknownBlockType)arg3;	// IMP=0x0000000000008d39
- (void)_drawMulticolorLayersInContext:(struct CGContext *)arg1 scaleFactor:(double)arg2 targetSize:(struct CGSize)arg3 colorResolver:(CDUnknownBlockType)arg4;	// IMP=0x0000000000008aa1
- (void)_drawMulticolorLayerNamed:(id)arg1 inContext:(struct CGContext *)arg2 colorResolver:(CDUnknownBlockType)arg3;	// IMP=0x00000000000086b2
- (void)drawInContext:(struct CGContext *)arg1 withPaletteColors:(id)arg2;	// IMP=0x0000000000007bb9
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withPaletteColors:(id)arg3;	// IMP=0x0000000000007919
- (struct CGImage *)imageWithPaletteColors:(id)arg1;	// IMP=0x000000000000763d
- (void)drawHierarchyLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext *)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x0000000000007449
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withHierarchyColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x0000000000007312
- (struct CGImage *)imageWithHierarchyColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x00000000000072b4
- (id)hierarchyLayers;	// IMP=0x0000000000007003
- (unsigned long long)numberOfHierarchyLayers;	// IMP=0x0000000000006ecd
- (id)multicolorColorNames;	// IMP=0x0000000000006c1a
- (_Bool)containsNamedColorStyle:(id)arg1;	// IMP=0x00000000000068f1
- (_Bool)containsNamedColorStyles;	// IMP=0x00000000000067cd
- (void)drawMulticolorLayerAtIndex:(unsigned long long)arg1 inContext:(struct CGContext *)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x000000000000657c
- (id)makeLayerWithColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x0000000000006492
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2 withColorResolver:(CDUnknownBlockType)arg3;	// IMP=0x00000000000062de
- (struct CGImage *)imageWithColorResolver:(CDUnknownBlockType)arg1;	// IMP=0x000000000000625c
- (unsigned long long)numberOfMulticolorLayers;	// IMP=0x000000000000613d
- (const struct CGPath *)CGPath;	// IMP=0x0000000000005ffc
- (void)drawInContext:(struct CGContext *)arg1;	// IMP=0x0000000000005eca
- (struct CGImage *)rasterizeImageUsingScaleFactor:(double)arg1 forTargetSize:(struct CGSize)arg2;	// IMP=0x00000000000059da
- (struct CGImage *)image;	// IMP=0x00000000000058c1
- (_Bool)generatedImage;	// IMP=0x00000000000058af
@property(readonly, nonatomic) float templateVersion;
@property(nonatomic) double fontMatchingScaleFactor;
@property(readonly, nonatomic) struct CGRect contentBounds;
@property(readonly, nonatomic) struct CGRect contentBoundsUnrounded;
@property(readonly, nonatomic) struct CGRect alignmentRect;
@property(readonly, nonatomic) struct CGRect alignmentRectUnrounded;
- (long long)layoutDirection;	// IMP=0x00000000000049ff
- (id)knownAvailableVectorSizes;	// IMP=0x00000000000049d4
@property(readonly, nonatomic) _Bool isFlippable;
- (struct CGSize)referenceCanvasSize;	// IMP=0x0000000000004890
- (double)referencePointSize;	// IMP=0x0000000000004865
@property(readonly, nonatomic) double capHeight;
@property(readonly, nonatomic) double capHeightUnrounded;
@property(readonly, nonatomic) double baselineOffset;
@property(readonly, nonatomic) double baselineOffsetUnrounded;
- (double)_requestedPointSizeRatio;	// IMP=0x00000000000042e1
- (double)pointSize;	// IMP=0x00000000000042cf
- (long long)glyphWeight;	// IMP=0x00000000000042be
- (long long)glyphSize;	// IMP=0x00000000000042ad
- (double)scale;	// IMP=0x000000000000429b
- (struct CGSVGDocument *)referenceGlyph;	// IMP=0x0000000000004129
- (void)setRepresentsOnDemandContent:(_Bool)arg1;	// IMP=0x00000000000040b7
- (void)dealloc;	// IMP=0x0000000000004023
- (void)_lookupCatalogImageForIdiom:(long long)arg1;	// IMP=0x0000000000003db1
- (id)initWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 fromCatalog:(id)arg5 usingRenditionKey:(id)arg6 fromTheme:(unsigned long long)arg7;	// IMP=0x0000000000003c04
- (id)intWithName:(id)arg1 scaleFactor:(double)arg2 deviceIdiom:(long long)arg3 pointSize:(double)arg4 weight:(long long)arg5 glyphSize:(long long)arg6 interpolatedFromRegular:(id)arg7 ultralight:(id)arg8 black:(id)arg9 fromCatalog:(id)arg10 themeRef:(unsigned long long)arg11;	// IMP=0x0000000000003988
- (CDStruct_3c058996)_interpolatedAlignmentRectInsetsWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(CDStruct_3c058996)arg3 regular:(CDStruct_3c058996)arg4 black:(CDStruct_3c058996)arg5;	// IMP=0x0000000000078885
- (struct CGSize)_interpolatedCanvasSizeWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(struct CGSize)arg3 regular:(struct CGSize)arg4 black:(struct CGSize)arg5;	// IMP=0x00000000000787b8
- (double)_interpolatedCapHeightWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;	// IMP=0x000000000007875c
- (double)_interpolatedBaselineOffsetWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralight:(double)arg3 regular:(double)arg4 black:(double)arg5;	// IMP=0x00000000000786a3
- (struct CGPath *)_interpolatedPathWithWeight:(long long)arg1 glyphSize:(long long)arg2 fromUltralightSmall:(struct CGPath *)arg3 regularSmall:(struct CGPath *)arg4 blackSmall:(struct CGPath *)arg5;	// IMP=0x00000000000785bb

@end

