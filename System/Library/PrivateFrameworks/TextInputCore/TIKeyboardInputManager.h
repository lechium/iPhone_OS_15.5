//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <TextInputCore/TILanguageSelectionControllerDelegate-Protocol.h>
#import <TextInputCore/TIRevisionHistoryDelegate-Protocol.h>

@class NSArray, NSCharacterSet, NSMutableDictionary, NSMutableSet, NSMutableString, NSString, TIAutocorrectionList, TIAutoshiftRegularExpressionLoader, TICharacterSetDescription, TICounterChangeCache, TIEmojiCandidateGenerator, TIFilterParameterLoader, TIInputContextHistory, TIKeyboardCandidate, TIKeyboardFeatureSpecialization, TIKeyboardInputManagerConfig, TIKeyboardInputManagerState, TIKeyboardLayout, TIKeyboardLayoutState, TIKeyboardState, TILRUDictionary, TILanguageSelectionController, TIRevisionHistory, TISmartPunctuationOptions, TISmartSelector, TISupplementalLexiconController, TITextCheckerExemptions, TITypingSessionMonitor;
@protocol TICandidateHandler;

@interface TIKeyboardInputManager <TIRevisionHistoryDelegate, TILanguageSelectionControllerDelegate>
{
    void *m_impl;	// 16 = 0x10
    NSMutableString *m_composedText;	// 24 = 0x18
    unsigned long long m_initialSelectedIndex;	// 32 = 0x20
    TIKeyboardLayout *_keyLayout;	// 40 = 0x28
    TIKeyboardLayoutState *_layoutState;	// 48 = 0x30
    TIKeyboardInputManagerState *_currentState;	// 56 = 0x38
    TIKeyboardFeatureSpecialization *_keyboardFeatureSpecialization;	// 64 = 0x40
    NSCharacterSet *_allowPredictionCharacterSet;	// 72 = 0x48
    NSMutableDictionary *_cachedLayoutTags;	// 80 = 0x50
    struct shared_ptr<KB::TypologyLogger> m_typology_recorder;	// 88 = 0x58
    shared_ptr_e9f752ce m_lightweight_language_model;	// 104 = 0x68
    TILanguageSelectionController *_languageSelectionController;	// 120 = 0x78
    TIEmojiCandidateGenerator *_emojiCandidateGenerator;	// 128 = 0x80
    TIInputContextHistory *_synchronizedInputContextHistory;	// 136 = 0x88
    TICharacterSetDescription *_wordCharacters;	// 144 = 0x90
    TICharacterSetDescription *_closingQuotes;	// 152 = 0x98
    TICharacterSetDescription *_openingQuotes;	// 160 = 0xa0
    TISmartPunctuationOptions *_smartOptions;	// 168 = 0xa8
    int _lastHitTestKeycode;	// 176 = 0xb0
    _Bool _didInitialSync;	// 180 = 0xb4
    _Bool _wordLearningEnabled;	// 181 = 0xb5
    _Bool _isEditingWordPrefix;	// 182 = 0xb6
    unsigned short _supplementalPrefix;	// 184 = 0xb8
    TIKeyboardState *_keyboardState;	// 192 = 0xc0
    TISupplementalLexiconController *_currentCandidateGenerationContextSupplementalLexicons;	// 200 = 0xc8
    TIKeyboardInputManagerConfig *_config;	// 208 = 0xd0
    TIRevisionHistory *_revisionHistory;	// 216 = 0xd8
    TILRUDictionary *_autocorrectionHistory;	// 224 = 0xe0
    TILRUDictionary *_recentAutocorrections;	// 232 = 0xe8
    TILRUDictionary *_recentPredictiveInputSelections;	// 240 = 0xf0
    TILRUDictionary *_rejectedAutocorrections;	// 248 = 0xf8
    TILRUDictionary *_autocorrectionForCurrentStem;	// 256 = 0x100
    TILRUDictionary *_rejectedAutocorrectionsDisplayedOrInserted;	// 264 = 0x108
    TILRUDictionary *_autocorrectionListsSuggestedForCurrentInput;	// 272 = 0x110
    TILRUDictionary *_autocorrectionListsForWordsInDocument;	// 280 = 0x118
    TIAutoshiftRegularExpressionLoader *_autoshiftRegexLoader;	// 288 = 0x120
    TITextCheckerExemptions *_textCheckerExemptions;	// 296 = 0x128
    unsigned long long _linguisticResourceStatus;	// 304 = 0x130
    long long _deleteKeyCount;	// 312 = 0x138
    TIKeyboardCandidate *_hitTestCorrectedInputMatchingCandidate;	// 320 = 0x140
    TIKeyboardCandidate *_lastAcceptedText;	// 328 = 0x148
    NSMutableSet *_rejectedConversionsForCurrentContinuousPath;	// 336 = 0x150
    TITypingSessionMonitor *_typingSessionMonitor;	// 344 = 0x158
    TICounterChangeCache *_counterChangeCache;	// 352 = 0x160
    TISmartSelector *_smartSelector;	// 360 = 0x168
    CDUnknownBlockType _proactiveSuggestionsGenerationBlock;	// 368 = 0x170
    TIAutocorrectionList *_lastContinuousPathAutocorrection;	// 376 = 0x178
    id <TICandidateHandler> _candidateHandlerForOpenRequest;	// 384 = 0x180
    unsigned long long _lastNumCandidatesRequest;	// 392 = 0x188
    TIFilterParameterLoader *_filterParameterLoader;	// 400 = 0x190
    CDUnknownBlockType _candidateGenerationCompletionHandler;	// 408 = 0x198
    long long _userInterfaceIdiom;	// 416 = 0x1a0
    struct _NSRange _candidateRange;	// 424 = 0x1a8
}

+ (id)offlineLearningHandleForInputMode:(id)arg1;	// IMP=0x000000000010bea2
+ (int)shiftContextForShiftState:(int)arg1 autocapitalizationType:(unsigned long long)arg2;	// IMP=0x000000000010be68
+ (void)clearRecentsFileForIdentifier:(id)arg1;	// IMP=0x00000000001119f2
+ (id)recentsFilePathForIdentifier:(id)arg1;	// IMP=0x000000000011192a
+ (void)removeAllDynamicDictionaries;	// IMP=0x0000000000111694
+ (void)removeDynamicDictionaryForInputMode:(id)arg1;	// IMP=0x000000000011160d
+ (id)dynamicDictionaryFilePathForInputMode:(id)arg1;	// IMP=0x0000000000111505
+ (id)userDictionaryWordKeyPairsFilePath;	// IMP=0x00000000001114ae
+ (id)keyboardUserDirectory;	// IMP=0x0000000000111460
+ (void)resetResponseKit;	// IMP=0x000000000011141c
- (id).cxx_construct;	// IMP=0x0000000000108c0f
- (void).cxx_destruct;	// IMP=0x000000000010894d
@property(nonatomic) long long userInterfaceIdiom; // @synthesize userInterfaceIdiom=_userInterfaceIdiom;
@property(copy, nonatomic) CDUnknownBlockType candidateGenerationCompletionHandler; // @synthesize candidateGenerationCompletionHandler=_candidateGenerationCompletionHandler;
@property(readonly, nonatomic) TIFilterParameterLoader *filterParameterLoader; // @synthesize filterParameterLoader=_filterParameterLoader;
@property(nonatomic) unsigned long long lastNumCandidatesRequest; // @synthesize lastNumCandidatesRequest=_lastNumCandidatesRequest;
@property(retain, nonatomic) id <TICandidateHandler> candidateHandlerForOpenRequest; // @synthesize candidateHandlerForOpenRequest=_candidateHandlerForOpenRequest;
@property(retain, nonatomic) TIAutocorrectionList *lastContinuousPathAutocorrection; // @synthesize lastContinuousPathAutocorrection=_lastContinuousPathAutocorrection;
@property(copy, nonatomic) CDUnknownBlockType proactiveSuggestionsGenerationBlock; // @synthesize proactiveSuggestionsGenerationBlock=_proactiveSuggestionsGenerationBlock;
@property(retain, nonatomic) TISmartSelector *smartSelector; // @synthesize smartSelector=_smartSelector;
@property(retain, nonatomic) TICounterChangeCache *counterChangeCache; // @synthesize counterChangeCache=_counterChangeCache;
@property(retain, nonatomic) TITypingSessionMonitor *typingSessionMonitor; // @synthesize typingSessionMonitor=_typingSessionMonitor;
@property(retain, nonatomic) NSMutableSet *rejectedConversionsForCurrentContinuousPath; // @synthesize rejectedConversionsForCurrentContinuousPath=_rejectedConversionsForCurrentContinuousPath;
@property(copy, nonatomic) TIKeyboardCandidate *lastAcceptedText; // @synthesize lastAcceptedText=_lastAcceptedText;
@property(retain, nonatomic) TIKeyboardCandidate *hitTestCorrectedInputMatchingCandidate; // @synthesize hitTestCorrectedInputMatchingCandidate=_hitTestCorrectedInputMatchingCandidate;
@property(nonatomic) long long deleteKeyCount; // @synthesize deleteKeyCount=_deleteKeyCount;
@property(readonly, nonatomic) unsigned long long linguisticResourceStatus; // @synthesize linguisticResourceStatus=_linguisticResourceStatus;
@property(readonly, nonatomic) TITextCheckerExemptions *textCheckerExemptions; // @synthesize textCheckerExemptions=_textCheckerExemptions;
@property(retain, nonatomic) TIAutoshiftRegularExpressionLoader *autoshiftRegexLoader; // @synthesize autoshiftRegexLoader=_autoshiftRegexLoader;
@property(nonatomic) _Bool isEditingWordPrefix; // @synthesize isEditingWordPrefix=_isEditingWordPrefix;
@property(readonly, nonatomic) TILRUDictionary *autocorrectionListsForWordsInDocument; // @synthesize autocorrectionListsForWordsInDocument=_autocorrectionListsForWordsInDocument;
@property(readonly, nonatomic) TILRUDictionary *autocorrectionListsSuggestedForCurrentInput; // @synthesize autocorrectionListsSuggestedForCurrentInput=_autocorrectionListsSuggestedForCurrentInput;
@property(retain, nonatomic) TILRUDictionary *rejectedAutocorrectionsDisplayedOrInserted; // @synthesize rejectedAutocorrectionsDisplayedOrInserted=_rejectedAutocorrectionsDisplayedOrInserted;
@property(retain, nonatomic) TILRUDictionary *autocorrectionForCurrentStem; // @synthesize autocorrectionForCurrentStem=_autocorrectionForCurrentStem;
@property(readonly, nonatomic) TILRUDictionary *rejectedAutocorrections; // @synthesize rejectedAutocorrections=_rejectedAutocorrections;
@property(readonly, nonatomic) TILRUDictionary *recentPredictiveInputSelections; // @synthesize recentPredictiveInputSelections=_recentPredictiveInputSelections;
@property(readonly, nonatomic) TILRUDictionary *recentAutocorrections; // @synthesize recentAutocorrections=_recentAutocorrections;
@property(readonly, nonatomic) TILRUDictionary *autocorrectionHistory; // @synthesize autocorrectionHistory=_autocorrectionHistory;
@property(readonly, nonatomic) TIRevisionHistory *revisionHistory; // @synthesize revisionHistory=_revisionHistory;
@property(nonatomic) struct _NSRange candidateRange; // @synthesize candidateRange=_candidateRange;
@property(nonatomic, getter=isWordLearningEnabled) _Bool wordLearningEnabled; // @synthesize wordLearningEnabled=_wordLearningEnabled;
@property(readonly, nonatomic) TIKeyboardInputManagerConfig *config; // @synthesize config=_config;
@property(readonly, nonatomic) unsigned short supplementalPrefix; // @synthesize supplementalPrefix=_supplementalPrefix;
@property(readonly, nonatomic) __weak TISupplementalLexiconController *currentCandidateGenerationContextSupplementalLexicons; // @synthesize currentCandidateGenerationContextSupplementalLexicons=_currentCandidateGenerationContextSupplementalLexicons;
@property(retain, nonatomic) TIKeyboardState *keyboardState; // @synthesize keyboardState=_keyboardState;
@property(readonly, nonatomic) TIEmojiCandidateGenerator *emojiCandidateGenerator;
- (void)didUpdateInputModeProbabilities:(id)arg1;	// IMP=0x000000000010851d
- (void)didUpdateInputModes:(id)arg1;	// IMP=0x00000000001084ab
- (id)primaryInputMode;	// IMP=0x0000000000108499
@property(readonly, nonatomic) TILanguageSelectionController *languageSelectionController;
- (id)resourceInputModes;	// IMP=0x00000000001083ac
- (void)installTypologyTraceLogger;	// IMP=0x0000000000108199
- (_Bool)acceptsRange:(struct _NSRange)arg1 inString:(id)arg2;	// IMP=0x0000000000108104
- (_Bool)acceptsCharacter:(unsigned int)arg1;	// IMP=0x00000000001080b1
- (id)candidateResultSet;	// IMP=0x0000000000108052
- (_Bool)doesSelectedTextGenerateEmojiCandidates;	// IMP=0x0000000000107f3f
- (id)typedStringForEmptyAutocorrection;	// IMP=0x0000000000107cd0
- (_Bool)shouldGeneratePredictionsForCurrentContext;	// IMP=0x0000000000107a99
@property(readonly, nonatomic) NSCharacterSet *allowPredictionCharacterSet;
- (void)reconcileConversions:(id)arg1;	// IMP=0x000000000010728a
- (id)extendedAutocorrection:(id)arg1 spanningInputsForCandidates:(id)arg2 emojis:(id)arg3;	// IMP=0x0000000000106b8a
- (id)completionCandidates:(unsigned long long)arg1;	// IMP=0x0000000000106900
- (int)shiftContext;	// IMP=0x0000000000106858
- (id)autocorrectionListForEmptyInputWithDesiredCandidateCount:(unsigned long long)arg1;	// IMP=0x00000000001062c0
- (id)indexesOfDuplicatesInCandidates:(id)arg1;	// IMP=0x00000000001061e1
- (id)continuousPathCandidates:(unsigned long long)arg1;	// IMP=0x0000000000104dac
- (id)predictionCandidates:(unsigned long long)arg1 predictionType:(int)arg2;	// IMP=0x00000000001048c5
- (_Bool)shouldInsertSpaceBeforePredictions;	// IMP=0x00000000001046b9
- (_Bool)stringEndsWithClosingQuote:(id)arg1;	// IMP=0x0000000000104459
- (struct _NSRange)rangeOfUnclosedQuoteMatchingQuote:(id)arg1 inString:(id)arg2 range:(struct _NSRange)arg3;	// IMP=0x0000000000103fa0
- (_Bool)shouldAutocapitalizePredictionAfterSpace;	// IMP=0x0000000000103ee2
- (_Bool)shouldGenerateSuggestionsForSelectedText;	// IMP=0x0000000000103de7
- (void)reconcileCandidates:(void *)arg1 forTypedString:(struct String *)arg2 withPhraseCandidate:(void *)arg3 replacing:(const struct String *)arg4;	// IMP=0x0000000000103c2a
- (id)autocorrectionListForSelectedText;	// IMP=0x0000000000103741
- (void)generateCannedResponseCandidatesAsyncForString:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000001035ca
- (id)cannedResponseCandidatesForString:(id)arg1;	// IMP=0x00000000001033d1
- (void)updateResponseModelForKeyboardState:(id)arg1;	// IMP=0x0000000000103355
- (_Bool)shouldAllowContextTokenID:(struct TITokenID)arg1;	// IMP=0x00000000001032ca
- (_Bool)shouldDropInputStem;	// IMP=0x00000000001031b5
- (_Bool)suggestionBlacklistMatchesStrings:(id)arg1;	// IMP=0x0000000000102fae
- (_Bool)usesRetrocorrection;	// IMP=0x0000000000102f3a
- (id)shortcutConversionForInput:(id)arg1 andExistingString:(id)arg2 existingStringStartsInMiddleOfWord:(_Bool)arg3;	// IMP=0x0000000000102e5e
- (id)shortcutConversionForString:(id)arg1 stringStartsInMiddleOfWord:(_Bool)arg2;	// IMP=0x0000000000102cba
- (struct _NSRange)shortcutSearchRangeForString:(id)arg1;	// IMP=0x0000000000102bf0
- (_Bool)shouldSkipShortcutConversionForDocumentState:(id)arg1;	// IMP=0x0000000000102ac3
- (void)enumerateWordSuffixesOfString:(id)arg1 inRange:(struct _NSRange)arg2 usingBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000000102893
- (_Bool)supportsShortcutConversion;	// IMP=0x000000000010288b
- (id)autocorrectionCandidateForInput:(id)arg1 withCandidate:(const void *)arg2 insertingSpace:(_Bool)arg3 sharedPrefixLength:(unsigned long long)arg4;	// IMP=0x0000000000101d6d
- (id)autocorrectionCandidateForInput:(id)arg1 withCandidate:(const void *)arg2;	// IMP=0x0000000000101d4e
- (_Bool)isEditingExistingWord;	// IMP=0x0000000000101be4
- (id)phraseCandidateCompletedByWord:(const struct String *)arg1 allowNoSuggest:(_Bool)arg2 forAutocorrection:(_Bool)arg3 shiftContext:(int)arg4;	// IMP=0x0000000000101674
- (unsigned long long)prefixLengthOfInput:(id)arg1 sharedWithCandidate:(const void *)arg2;	// IMP=0x0000000000101384
- (void)checkAutocorrectionDictionaries;	// IMP=0x0000000000101311
- (void)setAutoshiftFromInputContext;	// IMP=0x0000000000101230
- (_Bool)canStartSentenceAfterString:(id)arg1;	// IMP=0x000000000010106f
- (_Bool)_canStartSentenceAfterString:(id)arg1 maxRecursionDepth:(unsigned long long)arg2;	// IMP=0x0000000000100dd8
- (_Bool)spaceAndNextInputWouldStartSentence;	// IMP=0x0000000000100d85
- (_Bool)nextInputWouldStartSentenceAfterInput:(id)arg1;	// IMP=0x0000000000100b95
- (id)sentenceTrailingCharacters;	// IMP=0x0000000000100b45
- (id)sentenceDelimitingCharacters;	// IMP=0x0000000000100af5
- (id)sentencePrefixingCharacters;	// IMP=0x0000000000100aa5
- (id)wordCharacters;	// IMP=0x0000000000100a2a
- (const struct USet *)precomposedCharacterSet;	// IMP=0x00000000001009e6
- (id)nonstopPunctuationCharacters;	// IMP=0x000000000010092e
- (void)updateForRevisitedString:(id)arg1;	// IMP=0x00000000001006f5
- (id)autocorrectionRecordForWord:(id)arg1;	// IMP=0x0000000000100635
- (void)recordRejectedAutocorrectionForAcceptedText:(id)arg1 fromPredictiveInputBar:(_Bool)arg2;	// IMP=0x0000000000100010
- (void)recordAcceptedAutocorrection:(id)arg1 fromPredictiveInputBar:(_Bool)arg2;	// IMP=0x00000000000ffc47
- (id)revisionListFromAutocorrectionList:(id)arg1 afterAcceptingCandidate:(id)arg2;	// IMP=0x00000000000ff1a0
- (id)originatingAutocorrectionListForCandidate:(id)arg1;	// IMP=0x00000000000fef29
- (_Bool)isContinuousPathCandidate:(id)arg1 replacementForOriginalConversion:(id)arg2;	// IMP=0x00000000000fee11
- (void)recordSuggestedAutocorrectionList:(id)arg1;	// IMP=0x00000000000fec94
- (void)candidateRejected:(id)arg1;	// IMP=0x00000000000fea60
- (struct TITokenID)tokenIDForWordSeparator:(unsigned short)arg1;	// IMP=0x00000000000fea2c
- (struct TITokenID)addWord:(id)arg1 context:(const struct TITokenID *)arg2 contextLength:(unsigned long long)arg3 surfaceFormPtr:(id *)arg4 contextStringTokens:(id)arg5;	// IMP=0x00000000000fe285
- (struct TITokenID)findTokenIDForWord:(id)arg1 context:(const struct TITokenID *)arg2 contextLength:(unsigned long long)arg3 tokenLookupMode:(unsigned int)arg4 contextStringTokens:(id)arg5;	// IMP=0x00000000000fe24a
- (struct TITokenID)findTokenIDForWord:(id)arg1 context:(const struct TITokenID *)arg2 contextLength:(unsigned long long)arg3 tokenLookupMode:(unsigned int)arg4 surfaceFormPtr:(id *)arg5 hasCaseInsensitiveStaticVariant:(_Bool *)arg6 contextStringTokens:(id)arg7;	// IMP=0x00000000000fdcfb
- (void)learnRecentMessageUserIsRespondingTo;	// IMP=0x00000000000fdab7
- (void)synchronizeConversationHistoryWithInputContextHistory:(id)arg1;	// IMP=0x00000000000fd8d7
- (void)resetConversationHistory;	// IMP=0x00000000000fd853
- (void)addItemToConversationHistoryWithText:(id)arg1 timestamp:(id)arg2 senderID:(id)arg3;	// IMP=0x00000000000fd3a4
- (void)registerNegativeEvidence:(id)arg1 tokenID:(struct TITokenID)arg2 context:(const struct TITokenID *)arg3 contextLength:(unsigned long long)arg4 intendedTokenID:(struct TITokenID *)arg5 hint:(int)arg6 contextStringTokens:(id)arg7;	// IMP=0x00000000000fd041
- (void)decrementLanguageModelCount:(id)arg1 tokenID:(struct TITokenID)arg2 context:(const struct TITokenID *)arg3 contextLength:(unsigned long long)arg4 contextStringTokens:(id)arg5;	// IMP=0x00000000000fcc44
- (void)incrementLanguageModelCount:(id)arg1 tokenID:(struct TITokenID)arg2 context:(const struct TITokenID *)arg3 contextLength:(unsigned long long)arg4 contextStringTokens:(id)arg5 saveToDifferentialPrivacy:(int)arg6;	// IMP=0x00000000000fc758
- (_Bool)isStringBasedModel;	// IMP=0x00000000000fc732
- (_Bool)shouldLearnWord:(id)arg1;	// IMP=0x00000000000fc679
- (_Bool)shouldSuppressLanguageSelectionEvidence;	// IMP=0x00000000000fc606
- (_Bool)shouldSuppressLearning;	// IMP=0x00000000000fc536
- (_Bool)shouldSuppressTokenIDLookups;	// IMP=0x00000000000fc482
- (_Bool)shouldAllowCorrectionOfAcceptedCandidate:(id)arg1;	// IMP=0x00000000000fc33b
- (void)displayedCandidateRejected;	// IMP=0x00000000000fc29e
- (void)setOriginalInput:(id)arg1;	// IMP=0x00000000000fc1bc
- (id)currentWordStem;	// IMP=0x00000000000fc112
- (id)inputStem;	// IMP=0x00000000000fc055
- (id)inputString;	// IMP=0x00000000000fbf96
- (unsigned int)inputCount;	// IMP=0x00000000000fbf5e
- (unsigned int)inputIndex;	// IMP=0x00000000000fbf35
- (void)setInputIndex:(unsigned int)arg1;	// IMP=0x00000000000fbea9
- (void)updateInputContext;	// IMP=0x00000000000fbc2a
- (id)internalInputContext;	// IMP=0x00000000000fbc0d
- (id)inputContext;	// IMP=0x00000000000fbbb0
- (void)acceptInput;	// IMP=0x00000000000fbaa9
- (void)clearInput;	// IMP=0x00000000000fb931
- (id)deleteFromInput:(unsigned long long *)arg1;	// IMP=0x00000000000fb526
- (void)setInput:(id)arg1 withIndex:(unsigned int)arg2;	// IMP=0x00000000000fb4e9
- (void)setInput:(id)arg1;	// IMP=0x00000000000fb394
- (void)didDropInputStem;	// IMP=0x00000000000fb38e
- (void)willDropInputStem;	// IMP=0x00000000000fb262
- (void)dropInput;	// IMP=0x00000000000fb1fe
- (void)dropInputPrefix:(unsigned int)arg1;	// IMP=0x00000000000fb19e
- (void)trimInputAfterLathamConversion;	// IMP=0x00000000000fb049
- (id)trimmedInputStemAfterLathamConversion;	// IMP=0x00000000000fae86
- (void)trimInput;	// IMP=0x00000000000fad06
- (_Bool)canRetrocorrectInputAtIndex:(unsigned int)arg1;	// IMP=0x00000000000fabe6
- (_Bool)canTrimInputAtIndex:(unsigned int)arg1;	// IMP=0x00000000000faac0
- (unsigned long long)internalIndexOfInputStemSuffix:(id)arg1;	// IMP=0x00000000000fa8ae
- (unsigned long long)countOfWordsIninputStem:(id)arg1;	// IMP=0x00000000000fa74c
- (id)trimmedInputStem;	// IMP=0x00000000000fa570
- (unsigned long long)maxPriorWordTokensAfterTrimming;	// IMP=0x00000000000fa52c
- (struct LanguageModelContext)sentenceContextForInputStem:(id)arg1;	// IMP=0x00000000000f9eb0
- (_Bool)canComputeSentenceContextForInputStem:(id)arg1;	// IMP=0x00000000000f9cf5
- (void)setInputStringFromDocumentState:(id)arg1 isDeleteEvent:(_Bool)arg2;	// IMP=0x00000000000f98ca
- (struct _NSRange)inputStringRangeFromRevisionHistory;	// IMP=0x00000000000f969a
- (struct _NSRange)acceptableRangeFromRange:(struct _NSRange)arg1 inText:(id)arg2 withSelectionLocation:(unsigned long long)arg3;	// IMP=0x00000000000f94b1
- (struct _NSRange)legacyInputRangeForTokenRange:(struct _NSRange)arg1;	// IMP=0x00000000000f9377
- (unsigned int)simulateAutoshiftIfNecessaryForFlags:(unsigned int)arg1;	// IMP=0x00000000000f9221
- (_Bool)hasLegacyInputString;	// IMP=0x00000000000f91a5
- (_Bool)hasLegacyInputStem;	// IMP=0x00000000000f914f
- (id)addInput:(id)arg1 flags:(unsigned int)arg2 point:(struct CGPoint)arg3 firstDelete:(unsigned long long *)arg4;	// IMP=0x00000000000f8913
- (void)mobileAssetsChanged:(id)arg1;	// IMP=0x00000000000f8827
- (void)setLinguisticResourceStatus:(unsigned long long)arg1 reason:(id)arg2;	// IMP=0x00000000000f86a3
- (shared_ptr_e9f752ce)loadedLightweightLanguageModel;	// IMP=0x00000000000f8380
- (void)loadFavoniusTypingModel;	// IMP=0x00000000000f821d
- (_Bool)updateLanguageModelForKeyboardState;	// IMP=0x00000000000f7abd
- (id)dynamicResourcePath;	// IMP=0x00000000000f7a6d
- (id)pathToDynamicDictionary;	// IMP=0x00000000000f79ed
- (void)mergeLanguageModelParameters:(id)arg1 toTestingParameters:(id)arg2 withLexiconID:(id)arg3 andSuffix:(id)arg4;	// IMP=0x00000000000f789d
- (id)testingParameters;	// IMP=0x00000000000f7748
- (void)logTestingParametersToTypology;	// IMP=0x00000000000f76b3
@property(readonly, nonatomic) NSArray *languageModelAssets;
- (id)languageModelAssetsForInputMode:(id)arg1;	// IMP=0x00000000000f73c9
- (id)dynamicDictionaryPathForInputMode:(id)arg1;	// IMP=0x00000000000f7316
- (id)pathToPhraseDictionary;	// IMP=0x00000000000f72b7
- (id)phraseDictionaryPathForInputMode:(id)arg1;	// IMP=0x00000000000f7069
- (id)pathToDeltaStaticDictionary;	// IMP=0x00000000000f700a
- (id)deltaDictionaryPathForInputMode:(id)arg1;	// IMP=0x00000000000f6def
- (id)pathToStaticDictionary;	// IMP=0x00000000000f6ca4
- (id)staticDictionaryPathForInputMode:(id)arg1;	// IMP=0x00000000000f68ce
- (id)dictionaryPathForContentType:(id)arg1 inputMode:(id)arg2 filePrefix:(id)arg3;	// IMP=0x00000000000f6412
- (void)loadDictionaries;	// IMP=0x00000000000f5f04
- (CDStruct_69b8fb94)lexiconInformation;	// IMP=0x00000000000f5c71
- (id)dictionaryInputMode;	// IMP=0x00000000000f5bd8
- (void *)initImplementation;	// IMP=0x00000000000f5b0e
- (id)externalStringForDictionaryString:(id)arg1;	// IMP=0x00000000000f5aa6
- (id)dictionaryStringForExternalString:(id)arg1;	// IMP=0x00000000000f5a16
- (_Bool)dictionaryUsesExternalEncoding;	// IMP=0x00000000000f59d2
- (unsigned int)externalIndexToInternal:(unsigned int)arg1;	// IMP=0x00000000000f58c4
- (unsigned int)internalIndexToExternal:(unsigned int)arg1;	// IMP=0x00000000000f57d1
- (id)internalStringToExternal:(id)arg1;	// IMP=0x00000000000f574e
- (id)externalStringToInternal:(id)arg1;	// IMP=0x00000000000f56cb
- (void)updateComposedText;	// IMP=0x00000000000f55d0
- (_Bool)deletesComposedTextByComposedCharacterSequence;	// IMP=0x00000000000f55c8
- (_Bool)acceptInputString:(id)arg1;	// IMP=0x00000000000f55c0
- (_Bool)stringEndsWord:(id)arg1;	// IMP=0x00000000000f5549
- (id)remainingInput;	// IMP=0x00000000000f5541
- (id)didAcceptCandidate:(id)arg1;	// IMP=0x00000000000f5539
- (void)clearInputContext;	// IMP=0x00000000000f5533
- (_Bool)removeSuffixOfInputContext:(id)arg1;	// IMP=0x00000000000f552b
- (void)appendToInputContext:(id)arg1;	// IMP=0x00000000000f5525
- (void)inputLocationChanged;	// IMP=0x00000000000f551f
- (id)deletedSuffixOfInputContext:(id)arg1 whenDeletingFromInputString:(id)arg2 withInputIndex:(unsigned long long)arg3 deletionCount:(unsigned long long)arg4;	// IMP=0x00000000000f53db
- (id)suffixOfDesiredString:(id)arg1 toAppendToInputString:(id)arg2 withInputIndex:(unsigned long long)arg3 afterDeletionCount:(unsigned long long *)arg4;	// IMP=0x00000000000f528c
- (_Bool)shouldInsertSpaceBeforeInput:(id)arg1;	// IMP=0x00000000000f4f5e
- (void)textAccepted:(id)arg1 fromPredictiveInputBar:(_Bool)arg2 withInput:(id)arg3;	// IMP=0x00000000000f408c
- (void)adjustPhraseBoundaryInForwardDirection:(_Bool)arg1 granularity:(int)arg2;	// IMP=0x00000000000f3f66
- (void)adjustPhraseBoundaryInForwardDirection:(_Bool)arg1;	// IMP=0x00000000000f3f52
- (struct _NSRange)smartSelectionRangeForTextInDocument:(id)arg1 inRange:(struct _NSRange)arg2 language:(id)arg3 tokenizedRanges:(id)arg4 options:(unsigned long long)arg5;	// IMP=0x00000000000f3f35
- (void)skipHitTestForTouchEvent:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000f3eae
- (long long)performHitTestForTouchEvent:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000f3e1f
@property(retain, nonatomic) TIKeyboardLayout *keyLayout;
- (id)generateReplacementsForString:(id)arg1 keyLayout:(id)arg2;	// IMP=0x00000000000f3b9c
- (id)handleAcceptedCandidate:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000f3864
- (void)candidatesOfferedFeedback:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000f37dd
- (void)generateCandidatesWithKeyboardState:(id)arg1 candidateRange:(struct _NSRange)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f3527
- (void)generateAutocorrectionsWithKeyboardState:(id)arg1 candidateRange:(struct _NSRange)arg2 candidateHandler:(id)arg3;	// IMP=0x00000000000f24db
- (id)generateOneTimeCodeCandidatesWithKeyboardState:(id)arg1;	// IMP=0x00000000000f23cb
- (id)generateAutofillFormWithKeyboardState:(id)arg1;	// IMP=0x00000000000f225f
- (void)trackProactiveMetrics:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000f2138
- (void)deleteFromInputWithContext:(id)arg1;	// IMP=0x00000000000f168c
- (void)continuousPathCandidateRejected:(id)arg1;	// IMP=0x00000000000f153f
- (void)addInput:(id)arg1 withContext:(id)arg2;	// IMP=0x00000000000f0af3
- (id)handleKeyboardInput:(id)arg1;	// IMP=0x00000000000f06a1
- (id)keyboardConfiguration;	// IMP=0x00000000000f04d3
- (_Bool)syncToKeyboardState:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f04cb
- (void)logDiscoverabilityEvent:(int)arg1 userInfo:(id)arg2;	// IMP=0x00000000000f03eb
- (void)syncToKeyboardState:(id)arg1;	// IMP=0x00000000000f01d7
- (void)_recalcSupplementalPrefix;	// IMP=0x00000000000efdfa
- (void)resume;	// IMP=0x00000000000efc63
- (void)releaseMRLBuffers;	// IMP=0x00000000000efc59
- (void)runMaintenanceTask;	// IMP=0x00000000000efbfa
- (void)analyzeTypingSession:(id)arg1;	// IMP=0x00000000000efaf3
- (void)suspend;	// IMP=0x00000000000ef541
- (id)currentInputModeIdentifier;	// IMP=0x00000000000ef4f1
- (void)acceptCurrentCandidateIfSelectedWithContext:(id)arg1;	// IMP=0x00000000000ef3c6
- (void)acceptCurrentCandidateWithContext:(id)arg1;	// IMP=0x00000000000ef2b3
- (id)candidateResultSetFromCandidates:(id)arg1 proactiveTriggers:(id)arg2;	// IMP=0x00000000000eedf3
- (id)candidateResultSetFromCandidates:(id)arg1;	// IMP=0x00000000000eeddf
- (id)sortMethodsShowExtensionCandidates;	// IMP=0x00000000000eeb68
- (id)sortMethodIndexes;	// IMP=0x00000000000ee915
- (id)sortMethodsGroupsForCandidates:(id)arg1;	// IMP=0x00000000000ee67d
- (id)sortMethodTitles;	// IMP=0x00000000000ee47d
- (_Bool)shouldSkipCandidateSelection;	// IMP=0x00000000000ee439
- (id)markedText;	// IMP=0x00000000000ee375
- (void)setMarkedText;	// IMP=0x00000000000ee1d8
- (_Bool)shouldOmitEmojiCandidates;	// IMP=0x00000000000ee158
- (_Bool)shouldDelayUpdateComposedText;	// IMP=0x00000000000ee150
- (_Bool)shouldClearInputOnMarkedTextOutOfSync;	// IMP=0x00000000000ee148
- (_Bool)isProgressivelyPathing;	// IMP=0x00000000000ee140
- (id)contextBeforeWithDesiredLength:(unsigned long long)arg1;	// IMP=0x00000000000ee064
- (id)inputStringFromDocumentState:(id)arg1;	// IMP=0x00000000000ee003
- (id)inputsToReject;	// IMP=0x00000000000edffb
- (_Bool)shouldAddModifierSymbolsToWordCharacters;	// IMP=0x00000000000edfb7
- (id)keyboardBehaviors;	// IMP=0x00000000000edf67
- (id)rawInputString;	// IMP=0x00000000000edf55
- (_Bool)shouldCommitInputString;	// IMP=0x00000000000edf4d
- (_Bool)keyboardConfigurationAssertDefaultKeyPlane;	// IMP=0x00000000000edf45
- (id)keyboardConfigurationAccentKeyString;	// IMP=0x00000000000edf3d
- (id)keyboardConfigurationLayoutTag;	// IMP=0x00000000000edb57
- (id)layoutTagsForLayout:(id)arg1;	// IMP=0x00000000000ed759
- (void)syncToKeyboardState:(id)arg1 from:(id)arg2 afterContextChange:(_Bool)arg3;	// IMP=0x00000000000ed0e4
- (_Bool)updateAdaptationContextToKeyboardState:(id)arg1 from:(id)arg2;	// IMP=0x00000000000ecfb8
- (void)willChangeToKeyboardState:(id)arg1 afterContextChange:(_Bool)arg2;	// IMP=0x00000000000ecc60
- (void)syncInputStringToKeyboardState:(id)arg1 afterContextChange:(_Bool)arg2;	// IMP=0x00000000000ecbab
- (void)syncMarkedTextForKeyboardState:(id)arg1 afterContextChange:(_Bool)arg2;	// IMP=0x00000000000ec8d0
- (void)syncToLayoutState:(id)arg1;	// IMP=0x00000000000ec7c4
- (void)incrementUsageTrackingKeysForDeleteFromInput;	// IMP=0x00000000000ec4b1
- (void)incrementUsageTrackingKeyForAppWithIsSentence:(_Bool)arg1;	// IMP=0x00000000000ec2df
- (void)incrementUsageTrackingKey:(id)arg1;	// IMP=0x00000000000ec2aa
- (void)incrementUsageTrackingKeyForAutocorrectionStatistic:(id)arg1 autocorrectionTypes:(unsigned int)arg2;	// IMP=0x00000000000ec1fb
- (id)usageTrackingKeyForStatistic:(id)arg1;	// IMP=0x00000000000ec13f
- (_Bool)closeCandidateGenerationContextWithResults:(id)arg1;	// IMP=0x00000000000ebf79
- (void)openCandidateGenerationContextWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000ebec8
- (_Bool)shouldUpdateLanguageModel;	// IMP=0x00000000000ebe05
- (_Bool)shouldUpdateDictionary;	// IMP=0x00000000000ebc6b
- (void)updateDictionaryAndLanguageModel;	// IMP=0x00000000000ebbda
- (_Bool)isLinguisticResourceUpdateScheduled;	// IMP=0x00000000000ebb9d
- (void)scheduleLinguisticResourceUpdateWithReason:(id)arg1;	// IMP=0x00000000000ebb4e
- (void)scheduleLinguisticResourceUpdate;	// IMP=0x00000000000ebb35
- (void)refreshInputManagerState;	// IMP=0x00000000000eb41c
@property(readonly, nonatomic) TISmartPunctuationOptions *smartOptions;
@property(readonly, nonatomic) TIKeyboardInputManagerState *currentState;
- (id)newInputManagerState;	// IMP=0x00000000000eaf81
@property(readonly, nonatomic) TIKeyboardFeatureSpecialization *keyboardFeatureSpecialization;
- (void)dealloc;	// IMP=0x00000000000eac50
- (id)initWithConfig:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000e9d76
- (id)initWithInputMode:(id)arg1 keyboardState:(id)arg2;	// IMP=0x00000000000e9cf0
- (_Bool)usesPunctuationKeysForRowNavigation;	// IMP=0x000000000010fe0a
- (_Bool)supportsNumberKeySelection;	// IMP=0x000000000010fe02
- (id)indexTitlesForGroupTitles:(id)arg1 sortingMethod:(id)arg2;	// IMP=0x000000000010fdec
- (void)groupedCandidatesFromCandidates:(id)arg1 usingSortingMethod:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000010fde6
- (id)groupedCandidatesFromCandidates:(id)arg1 usingSortingMethod:(id)arg2;	// IMP=0x000000000010fcc1
- (_Bool)alwaysShowExtensionCandidatesForSortingMethod:(id)arg1;	// IMP=0x000000000010fcb9
- (id)titleForSortingMethod:(id)arg1;	// IMP=0x000000000010fc38
- (id)sortingMethods;	// IMP=0x000000000010fbe7
- (id)openingQuotes;	// IMP=0x000000000010fabe
- (id)closingQuotes;	// IMP=0x000000000010f995
- (id)terminatorsPrecedingAutospace;	// IMP=0x000000000010f965
- (id)terminatorsDeletingAutospace;	// IMP=0x000000000010f915
- (id)terminatorsPreventingAutocorrection;	// IMP=0x000000000010f8e5
- (_Bool)nextInputWouldStartSentence;	// IMP=0x000000000010f862
- (id)wordSeparator;	// IMP=0x000000000010f812
- (id)replacementForDoubleSpace;	// IMP=0x000000000010f7c2
- (_Bool)suppressCompletionsForFieldEditor;	// IMP=0x000000000010f7ba
- (_Bool)suppliesCompletions;	// IMP=0x000000000010f7b2
- (id)searchStringForMarkedText;	// IMP=0x000000000010f7a5
- (id)shadowTyping;	// IMP=0x000000000010f6ee
- (unsigned long long)initialCandidateBatchCount;	// IMP=0x000000000010f6e3
- (unsigned long long)initialSelectedIndex;	// IMP=0x000000000010f6d2
- (id)defaultCandidate;	// IMP=0x000000000010f669
- (_Bool)suppressPlaceholderCandidate;	// IMP=0x000000000010f661
- (unsigned long long)autoquoteType;	// IMP=0x000000000010f656
- (_Bool)usesAutoDeleteWord;	// IMP=0x000000000010f64e
- (_Bool)newInputAcceptsUserSelectedCandidate;	// IMP=0x000000000010f59c
- (_Bool)commitsAcceptedCandidate;	// IMP=0x000000000010f594
- (_Bool)delayedCandidateList;	// IMP=0x000000000010f58c
- (_Bool)usesLiveConversion;	// IMP=0x000000000010f584
- (_Bool)acceptAutocorrectionCommitsInline;	// IMP=0x000000000010f57c
- (_Bool)shouldFixupIncompleteRomaji;	// IMP=0x000000000010f574
- (double)continuousPathLanguageWeight;	// IMP=0x000000000010f524
- (_Bool)usesMLTapTyping;	// IMP=0x000000000010f448
- (_Bool)usesContinuousPath;	// IMP=0x000000000010f3e9
- (_Bool)usesCandidateSelection;	// IMP=0x000000000010f3e1
- (_Bool)supportsSetPhraseBoundary;	// IMP=0x000000000010f3d9
- (unsigned long long)phraseBoundary;	// IMP=0x000000000010f3c9
- (void)setPhraseBoundaryIfNecessary;	// IMP=0x000000000010f2ea
- (void)setPhraseBoundary:(unsigned long long)arg1;	// IMP=0x000000000010f2e4
- (id)candidatesForString:(id)arg1;	// IMP=0x000000000010f011
- (id)candidates;	// IMP=0x000000000010ee25
- (id)autocorrectionListWithCandidateCount:(unsigned long long)arg1;	// IMP=0x000000000010df7e
- (id)autocorrectionList;	// IMP=0x000000000010df67
- (void)transferErrorCorrectionFlagsToInputCandidate:(void *)arg1;	// IMP=0x000000000010dedb
- (id)autocorrection;	// IMP=0x000000000010d4b2
- (id)supplementalAutocorrection;	// IMP=0x000000000010d326
- (id)_supplementalCompletionCandidates:(unsigned long long)arg1;	// IMP=0x000000000010d1d6
- (void)setLearnsCorrection:(_Bool)arg1;	// IMP=0x00000000001112cb
- (void)setInSplitKeyboardMode:(_Bool)arg1;	// IMP=0x00000000001112c5
- (_Bool)inHardwareKeyboardMode;	// IMP=0x00000000001112a1
- (void)setInHardwareKeyboardMode:(_Bool)arg1;	// IMP=0x0000000000111285
- (void)setKeyboardEventsLagging:(_Bool)arg1;	// IMP=0x000000000011126e
- (void)setAutocapitalizationType:(unsigned long long)arg1;	// IMP=0x0000000000111268
- (void)setAutocapitalizationEnabled:(_Bool)arg1;	// IMP=0x0000000000111262
- (void)setAutoCorrects:(_Bool)arg1;	// IMP=0x000000000011125c
- (_Bool)ignoresDeadKeys;	// IMP=0x0000000000111254
- (_Bool)supportsLearning;	// IMP=0x0000000000111210
- (_Bool)shouldExtendPriorWord;	// IMP=0x00000000001111cc
- (_Bool)doesComposeText;	// IMP=0x0000000000111188
- (void)dynamicDictionariesRemoved:(id)arg1;	// IMP=0x00000000001113ee
- (void)releaseDynamicLanguageModel;	// IMP=0x00000000001112e3
- (void)clearDynamicDictionary;	// IMP=0x00000000001112dd
- (id)keyEventMap;	// IMP=0x0000000000111180
- (long long)addTouch:(id)arg1 shouldHitTest:(_Bool)arg2;	// IMP=0x000000000010c079
- (_Bool)canHandleKeyHitTest;	// IMP=0x000000000010bf93
- (id)shortcutConversionForDocumentState:(id)arg1;	// IMP=0x000000000010d01b
- (id)shortcutCompletionsForDocumentState:(id)arg1;	// IMP=0x000000000010ce72
- (unsigned long long)maximumShortcutLengthAllowed;	// IMP=0x000000000010ce40
- (void)addSynthesizedTouchToInput:(id)arg1;	// IMP=0x000000000010c9c7
- (_Bool)isHardwareKeyboardAutocorrectionEnabled;	// IMP=0x000000000010c936
- (id)generateAndRenderProactiveSuggestionsWithTriggers:(id)arg1 withAdditionalPredictions:(id)arg2 withInput:(id)arg3;	// IMP=0x0000000000111032
- (void)generateAndRenderProactiveSuggestionsWithTriggers:(id)arg1 withAdditionalPredictions:(id)arg2 withInput:(id)arg3 async:(_Bool)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x00000000001103d7
- (_Bool)enablesProactiveQuickType;	// IMP=0x0000000000110303
- (void)fetchAssetAvailabilityStatusForInputMode:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000010c4f8
- (void)fetchTypingSessionParams:(CDUnknownBlockType)arg1;	// IMP=0x000000000010c374
- (void)tearDown;	// IMP=0x000000000010c36e
- (id)getTestingStateObject;	// IMP=0x000000000010c366
- (unsigned long long)userFrequencyOfWord:(id)arg1 lexiconID:(unsigned int)arg2;	// IMP=0x000000000010c2b0
- (unsigned long long)userFrequencyOfWord:(id)arg1;	// IMP=0x000000000010c299
- (RefPtr_9bddf3b2)getDictionary;	// IMP=0x000000000010c911
- (_Bool)dictionaryContainsWord:(id)arg1;	// IMP=0x000000000010c801
- (id)configurationPropertyList;	// IMP=0x000000000010c7b1
- (void)logToTypologyRecorderWithString:(id)arg1;	// IMP=0x000000000010c76d
- (_Bool)isTypologyEnabled;	// IMP=0x000000000010c71d
- (void)storeLanguageModelDynamicDataIncludingCache;	// IMP=0x000000000010c6aa
- (void)clearHumanReadableTrace;	// IMP=0x000000000010c68e
- (id)humanReadableTrace;	// IMP=0x000000000010c663

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

