//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CRConstrainedTextLineDetectionImpl {
    float _field1;
    int _field2;
    int _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    int _field9;
    int _field10;
    float _field11;
    float _field12;
    _Bool _field13;
};

struct CRCtcCandidate {
    int symbol;
    float prob;
};

struct CRImageBuffer;

struct CRTextDetectorQuad {
    struct CGPoint _field1[4];
    struct CGPoint _field2;
    double _field3;
    double _field4;
    _Bool _field5;
    _Bool _field6;
};

struct CTLDRegion {
    int _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    struct CGPoint _field6;
    struct CGPoint _field7;
    struct CGPoint _field8;
    struct CGPoint _field9;
    float _field10;
    struct vector<CRTextRecognition::CRCTLD::CTLDRegion, std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>> _field11;
    float _field12;
};

struct CVNLPTextDecodingPruningPolicy {
    long long _field1;
    _Bool _field2;
    float _field3;
    unsigned int _field4;
};

struct Mat {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6[32];
    int _field7[32];
    struct SmartPtr _field8;
    int _field9;
    int _field10;
    int _field11[32];
    int _field12[32];
    unsigned long long _field13;
};

struct PyramidNMS<unsigned short, double, unsigned char> {
    CDUnknownFunctionPointerType *_vptr$PyramidNMS;
    struct deque<bool, std::allocator<bool>> fullySpecifiedForests;
    struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> masksValid;
    struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> masksInvalid;
    struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> masksPendingInvalid;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsWordCoincide;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsWordCoincide;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsWordContain;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsWordContain;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsWordConstitute;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsWordConstitute;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsWordOverlap;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsWordOverlap;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsLineCoincide;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsLineCoincide;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsLineContain;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsLineContain;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsLineConstitute;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsLineConstitute;
    struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> histsLineOverlap;
    struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> idxsLineOverlap;
    void *pForests;
    struct PyramidNMSConfig config;
};

struct PyramidNMSConfig {
    CDUnknownFunctionPointerType *_vptr$PyramidNMSConfig;
    unsigned long long methodType;
    unsigned long long scoreType;
    double scoreMinThreshold;
    unsigned char scoreMapMinThreshold;
    _Bool scoreUseScaleIndex;
    _Bool scoreUseArea;
    double scoreAggregationScalingFactor;
    _Bool scoreUseNumSubDatums;
    unsigned long long scoreNumSubDatumsUpperClip;
    unsigned long long scoreNumSubDatumsLowerClip;
    _Bool ignoreOrphansInFullTile;
    double heightRatioMinThresholdForContainment;
    _Bool computeIntrascaleGeometricRelationships;
    unsigned long long intersectionNumSamples;
    double iouMinThresholdToAcceptContainedDatum;
    double normalizedAreaMinThresholdToAcceptContainedDatum;
    _Bool pendingInvalidRejectCompetingDatums;
    _Bool computeAndFilterByIndividualScores;
    _Bool processCoincidence;
    _Bool processContainment;
    _Bool processOverlap;
    _Bool processPendingInvalid;
    unsigned long long favorSubDatumUndersegmentationInProcessingCoincidence;
    _Bool favorLargerAreaInProcessingCoincidence;
    _Bool favorFineScaleInProcessingCoincidence;
    double datumMinHeightRatioToUseFullTile;
    _Bool useOverlappingWordsInProcessingContainment;
    double minValidCosAngleInDistributionCheckInProcessingContainment;
    unsigned long long favorSubDatumUndersegmentationInProcessingContainment;
    _Bool favorLargerAreaInProcessingContainment;
    _Bool favorFullTileInProcessingContainment;
    double heightRatioFineToFullMinThresholdFavorFullTileInProcessingContainment;
    double heightRatioFineToFullMaxThresholdFavorFullTileInProcessingContainment;
    double widthRatioFineToFullMinThresholdFavorFullTileInProcessingContainment;
    double widthRatioFineToFullMaxThresholdFavorFullTileInProcessingContainment;
    double heightRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment;
    double heightRatioFineToFullMaxThresholdFavorFullTileInProcessingSingleConstituentContainment;
    double widthRatioFineToFullMinThresholdFavorFullTileInProcessingSingleConstituentContainment;
    double widthRatioFineToFullMaxThresholdFavorFullTileInProcessingSingleConstituentContainment;
    double favorFullTileInProcessingOverlap;
    double coincidenceIOUMinThreshold;
    double coincidenceIOMinMinThreshold;
    double containmentIOUMaxThreshold;
    double containmentIOMinMinThreshold;
    double constitutionIOUMaxThreshold;
    double constitutionIOMinMinThreshold;
    double overlapIOUMinThreshold;
    double overlapIOUMaxThreshold;
    double overlapIOMinMinThreshold;
    double overlapIOMinMaxThreshold;
};

struct SmartPtr {
    CDUnknownFunctionPointerType *_field1;
    void *_field2;
    int *_field3;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct deque<bool, std::allocator<bool>> {
    struct __split_buffer<bool *, std::allocator<bool *>> {
        _Bool **__first_;
        _Bool **__begin_;
        _Bool **__end_;
        struct __compressed_pair<bool **, std::allocator<bool *>> {
            _Bool **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<bool>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<nms::RectForest<unsigned short, double>, std::allocator<nms::RectForest<unsigned short, double>>> {
    struct __split_buffer<nms::RectForest<unsigned short, double>*, std::allocator<nms::RectForest<unsigned short, double>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<nms::RectForest<unsigned short, double>**, std::allocator<nms::RectForest<unsigned short, double>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<nms::RectForest<unsigned short, double>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::deque<std::deque<std::deque<unsigned short>>>, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> {
    struct __split_buffer<std::deque<std::deque<std::deque<unsigned short>>>*, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::deque<std::deque<std::deque<unsigned short>>>**, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::deque<std::deque<std::deque<unsigned short>>>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::valarray<bool>, std::allocator<std::valarray<bool>>> {
    struct __split_buffer<std::valarray<bool>*, std::allocator<std::valarray<bool>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::valarray<bool>**, std::allocator<std::valarray<bool>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::valarray<bool>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::valarray<unsigned char>, std::allocator<std::valarray<unsigned char>>> {
    struct __split_buffer<std::valarray<unsigned char>*, std::allocator<std::valarray<unsigned char>*>> {
        void **__first_;
        void **__begin_;
        void **__end_;
        struct __compressed_pair<std::valarray<unsigned char>**, std::allocator<std::valarray<unsigned char>*>> {
            void **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<std::valarray<unsigned char>>> {
        unsigned long long __value_;
    } __size_;
};

struct map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>> {
    struct __tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>> {
    struct __tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct unique_ptr<CRImageBuffer, std::default_delete<CRImageBuffer>> {
    struct __compressed_pair<CRImageBuffer *, std::default_delete<CRImageBuffer>> {
        struct CRImageBuffer *_field1;
    } _field1;
};

struct vImage_Buffer {
    void *data;
    unsigned long long height;
    unsigned long long width;
    unsigned long long rowBytes;
};

struct vector<CRTextRecognition::CRCTLD::CTLDRegion, std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>> {
    struct CTLDRegion *_field1;
    struct CTLDRegion *_field2;
    struct __compressed_pair<CRTextRecognition::CRCTLD::CTLDRegion *, std::allocator<CRTextRecognition::CRCTLD::CTLDRegion>> {
        struct CTLDRegion *_field1;
    } _field3;
};

struct vector<_NSRange, std::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
};

struct vector<const char *, std::allocator<const char *>> {
    char **__begin_;
    char **__end_;
    struct __compressed_pair<const char **, std::allocator<const char *>> {
        char **__value_;
    } __end_cap_;
};

struct vector<espresso_buffer_t, std::allocator<espresso_buffer_t>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<espresso_buffer_t *, std::allocator<espresso_buffer_t>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<float *, std::allocator<float *>> {
    float **_field1;
    float **_field2;
    struct __compressed_pair<float **, std::allocator<float *>> {
        float **_field1;
    } _field3;
};

struct vector<long, std::allocator<long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long *, std::allocator<long>> {
        long long *_field1;
    } _field3;
};

struct vector<std::unique_ptr<CRImageBuffer>, std::allocator<std::unique_ptr<CRImageBuffer>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::unique_ptr<CRImageBuffer>*, std::allocator<std::unique_ptr<CRImageBuffer>>> {
        void *_field1;
    } _field3;
};

struct vector<std::vector<std::vector<float>>, std::allocator<std::vector<std::vector<float>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<std::vector<float>>*, std::allocator<std::vector<std::vector<float>>>> {
        void *_field1;
    } _field3;
};

struct vector<unsigned int, std::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    void *data;
    void *reserved;
    unsigned long long dim[4];
    unsigned long long stride[4];
    unsigned long long width;
    unsigned long long height;
    unsigned long long channels;
    unsigned long long batch_number;
    unsigned long long sequence_length;
    unsigned long long stride_width;
    unsigned long long stride_height;
    unsigned long long stride_channels;
    unsigned long long stride_batch_number;
    unsigned long long stride_sequence_length;
    int storage_type;
} CDStruct_0a65202a;

typedef struct {
    void *plan;
    int network_index;
} CDStruct_2bc666a5;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct CDStruct_183601bc;

// Template types
typedef struct map<unsigned int, int, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, int>>> {
    struct __tree<std::__value_type<unsigned int, int>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, int>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_3815c996;

typedef struct map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>> {
    struct __tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_aaf15588;

typedef struct unique_ptr<CRImageBuffer, std::default_delete<CRImageBuffer>> {
    struct __compressed_pair<CRImageBuffer *, std::default_delete<CRImageBuffer>> {
        struct CRImageBuffer *_field1;
    } _field1;
} unique_ptr_e6e70e7e;

typedef struct vector<const char *, std::allocator<const char *>> {
    char **__begin_;
    char **__end_;
    struct __compressed_pair<const char **, std::allocator<const char *>> {
        char **__value_;
    } __end_cap_;
} vector_67869b74;

typedef struct vector<espresso_buffer_t, std::allocator<espresso_buffer_t>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<espresso_buffer_t *, std::allocator<espresso_buffer_t>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_93d217ea;

typedef struct vector<float *, std::allocator<float *>> {
    float **_field1;
    float **_field2;
    struct __compressed_pair<float **, std::allocator<float *>> {
        float **_field1;
    } _field3;
} vector_1c901d52;

typedef struct vector<long, std::allocator<long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long *, std::allocator<long>> {
        long long *_field1;
    } _field3;
} vector_7697e86b;

typedef struct vector<std::unique_ptr<CRImageBuffer>, std::allocator<std::unique_ptr<CRImageBuffer>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::unique_ptr<CRImageBuffer>*, std::allocator<std::unique_ptr<CRImageBuffer>>> {
        void *_field1;
    } _field3;
} vector_1f6c974b;

typedef struct vector<std::vector<std::vector<float>>, std::allocator<std::vector<std::vector<float>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<std::vector<float>>*, std::allocator<std::vector<std::vector<float>>>> {
        void *_field1;
    } _field3;
} vector_39e320a3;

