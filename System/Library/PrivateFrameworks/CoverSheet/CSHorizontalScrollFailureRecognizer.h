//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <UIKit/UIGestureRecognizer.h>

#import <CoverSheet/PTSettingsKeyObserver-Protocol.h>

@class NSArray, NSMutableSet, NSString, UIEvent;

@interface CSHorizontalScrollFailureRecognizer : UIGestureRecognizer <PTSettingsKeyObserver>
{
    struct CGPoint _startingLocation;	// 8 = 0x8
    unsigned long long _maxAllowableVerticalOffset;	// 24 = 0x18
    double _maxAllowedTopAngle;	// 32 = 0x20
    double _minAllowedTopAngle;	// 40 = 0x28
    double _effectiveTopAngle;	// 48 = 0x30
    double _minAllowedBottomAngle;	// 56 = 0x38
    double _maxAllowedBottomAngle;	// 64 = 0x40
    double _effectiveBottomAngle;	// 72 = 0x48
    NSMutableSet *_touches;	// 80 = 0x50
    _Bool _tracking;	// 88 = 0x58
    _Bool _allowMultiTouch;	// 89 = 0x59
    _Bool _viewDebugArea;	// 90 = 0x5a
    NSArray *_debugViews;	// 96 = 0x60
    _Bool _armed;	// 104 = 0x68
    _Bool _externallyEnabled;	// 105 = 0x69
    UIEvent *_triggeredEvent;	// 112 = 0x70
}

- (void).cxx_destruct;	// IMP=0x0000000000110d74
@property(readonly, nonatomic) UIEvent *triggeredEvent; // @synthesize triggeredEvent=_triggeredEvent;
@property(nonatomic) _Bool viewDebugArea; // @synthesize viewDebugArea=_viewDebugArea;
@property(nonatomic) double minAllowedBottomAngle; // @synthesize minAllowedBottomAngle=_minAllowedBottomAngle;
@property(nonatomic) double maxAllowedBottomAngle; // @synthesize maxAllowedBottomAngle=_maxAllowedBottomAngle;
@property(nonatomic) double minAllowedTopAngle; // @synthesize minAllowedTopAngle=_minAllowedTopAngle;
@property(nonatomic) double maxAllowedTopAngle; // @synthesize maxAllowedTopAngle=_maxAllowedTopAngle;
@property(nonatomic) unsigned long long maxAllowableVerticalOffset; // @synthesize maxAllowableVerticalOffset=_maxAllowableVerticalOffset;
@property(nonatomic) _Bool allowMultiTouch; // @synthesize allowMultiTouch=_allowMultiTouch;
- (void)_setDebugViewsColor:(id)arg1;	// IMP=0x0000000000110ae2
- (void)_setDebugViewsVisible:(_Bool)arg1;	// IMP=0x0000000000110541
- (_Bool)canBePreventedByGestureRecognizer:(id)arg1;	// IMP=0x0000000000110539
- (_Bool)_isLocationOutOfBounds:(struct CGPoint)arg1;	// IMP=0x0000000000110500
- (_Bool)_isOutOfBounds:(struct CGPoint)arg1 forAngle:(double)arg2;	// IMP=0x000000000011044d
- (double)_maxAllowableVerticalOffsetForPoint:(struct CGPoint)arg1;	// IMP=0x00000000001102db
- (_Bool)_isOutOfBoundsVertically:(struct CGPoint)arg1;	// IMP=0x0000000000110275
- (double)_computeEffectiveAngleFromMin:(double)arg1 max:(double)arg2;	// IMP=0x00000000001101b1
- (struct CGPoint)_averagePointFromTouches;	// IMP=0x000000000010ff73
- (long long)_activeTouchCountForEvent:(id)arg1;	// IMP=0x000000000010fe2f
- (void)_loadFromSettings:(id)arg1;	// IMP=0x000000000010fd29
- (id)_touchesFromEvent:(id)arg1;	// IMP=0x000000000010fd0e
- (struct CGPoint)_locationOfTouch:(id)arg1 inView:(id)arg2;	// IMP=0x000000000010fb20
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;	// IMP=0x000000000010fb0e
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;	// IMP=0x000000000010f938
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;	// IMP=0x000000000010f73f
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;	// IMP=0x000000000010f535
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;	// IMP=0x000000000010f2b0
- (_Bool)_recognizeForMultiTouchIfNecessary:(id)arg1;	// IMP=0x000000000010ee22
- (void)reset;	// IMP=0x000000000010ed7b
- (void)setState:(long long)arg1;	// IMP=0x000000000010eccd
- (void)_setArmed:(_Bool)arg1;	// IMP=0x000000000010ecaa
- (void)_updateEnabled;	// IMP=0x000000000010ec69
- (_Bool)_effectivelyEnabled;	// IMP=0x000000000010ec44
- (double)_effectiveBottomAngle;	// IMP=0x000000000010ec32
- (double)_effectiveTopAngle;	// IMP=0x000000000010ec20
- (void)setEnabled:(_Bool)arg1;	// IMP=0x000000000010ebfd
- (_Bool)isEnabled;	// IMP=0x000000000010ebed
- (void)dealloc;	// IMP=0x000000000010ebad
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;	// IMP=0x000000000010ea72

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

