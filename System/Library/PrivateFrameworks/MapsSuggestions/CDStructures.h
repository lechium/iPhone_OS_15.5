//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NSDate, NSObject, NSString;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGSize {
    double _field1;
    double _field2;
};

struct CLLocationCoordinate2D {
    double _field1;
    double _field2;
};

struct Duration {
    struct duration<long long, std::ratio<1, 1000000000>> _field1;
};

struct Notification {
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> darwinNotification;
    int token;
    unsigned long long state;
};

struct NotificationReceiver;

struct NotificationSender;

struct Queue {
    NSObject *_innerQueue;
    NSString *_name;
};

struct SignalPack {
    struct unordered_map<MapsSuggestionsSignalType, MSg::Signal, std::hash<MapsSuggestionsSignalType>, std::equal_to<MapsSuggestionsSignalType>, std::allocator<std::pair<const MapsSuggestionsSignalType, MSg::Signal>>> dict_;
};

struct Timer {
    struct Queue _queue;
    NSString *_name;
    NSObject *_timer;
    struct {
        NSDate *firesAt;
    } _state;
};

struct _RollingWindowBudgetRule;

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct duration<long long, std::ratio<1, 1000000000>> {
    long long _field1;
};

struct unique_ptr<MSg::NotificationReceiver, std::default_delete<MSg::NotificationReceiver>> {
    struct __compressed_pair<MSg::NotificationReceiver *, std::default_delete<MSg::NotificationReceiver>> {
        struct NotificationReceiver *__value_;
    } __ptr_;
};

struct unique_ptr<MSg::NotificationSender, std::default_delete<MSg::NotificationSender>> {
    struct __compressed_pair<MSg::NotificationSender *, std::default_delete<MSg::NotificationSender>> {
        struct NotificationSender *__value_;
    } __ptr_;
};

struct unique_ptr<MSg::Queue, std::default_delete<MSg::Queue>> {
    struct __compressed_pair<MSg::Queue *, std::default_delete<MSg::Queue>> {
        struct Queue *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<MapsSuggestionsSignalType, MSg::Signal, std::hash<MapsSuggestionsSignalType>, std::equal_to<MapsSuggestionsSignalType>, std::allocator<std::pair<const MapsSuggestionsSignalType, MSg::Signal>>> {
    struct __hash_table<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::__unordered_map_hasher<MapsSuggestionsSignalType, std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::hash<MapsSuggestionsSignalType>, std::equal_to<MapsSuggestionsSignalType>, true>, std::__unordered_map_equal<MapsSuggestionsSignalType, std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::equal_to<MapsSuggestionsSignalType>, std::hash<MapsSuggestionsSignalType>, true>, std::allocator<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<MapsSuggestionsSignalType, std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::hash<MapsSuggestionsSignalType>, std::equal_to<MapsSuggestionsSignalType>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<MapsSuggestionsSignalType, std::__hash_value_type<MapsSuggestionsSignalType, MSg::Signal>, std::equal_to<MapsSuggestionsSignalType>, std::hash<MapsSuggestionsSignalType>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<MSg::_RollingWindowBudgetRule, std::allocator<MSg::_RollingWindowBudgetRule>> {
    struct _RollingWindowBudgetRule *__begin_;
    struct _RollingWindowBudgetRule *__end_;
    struct __compressed_pair<MSg::_RollingWindowBudgetRule *, std::allocator<MSg::_RollingWindowBudgetRule>> {
        struct _RollingWindowBudgetRule *__value_;
    } __end_cap_;
};

struct vector<MapsSuggestionsEntryType, std::allocator<MapsSuggestionsEntryType>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<MapsSuggestionsEntryType *, std::allocator<MapsSuggestionsEntryType>> {
        long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

