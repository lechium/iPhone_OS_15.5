//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <UIKit/UIControl.h>

#import <CameraUI/CAMZoomButtonDelegate-Protocol.h>

@class CAMFeedbackController, CAMZoomButton, CAMZoomButtonPlatter, CAMZoomControlButtonMaskView, CAMZoomDial, NSArray, NSDate, NSSet, NSString, NSTimer, UIView;
@protocol CAMZoomControlDelegate;

@interface CAMZoomControl : UIControl <CAMZoomButtonDelegate>
{
    struct {
        _Bool respondsToDidChangeZoomFactor;
        _Bool respondsToCanToggleBetweenZoomFactors;
        _Bool respondsToToggleBetweenZoomFactors;
        _Bool respondsToCanPlayHaptics;
        _Bool respondsToDidChangeShowingZoomDial;
    } _delegateFlags;	// 8 = 0x8
    _Bool __zoomDialEnabled;	// 13 = 0xd
    _Bool __shouldShowZoomDial;	// 14 = 0xe
    _Bool __eligibleForSwipeDownToDismiss;	// 15 = 0xf
    _Bool __eligibleForZoomFactorLabelTaps;	// 16 = 0x10
    id <CAMZoomControlDelegate> _delegate;	// 24 = 0x18
    long long _layoutStyle;	// 32 = 0x20
    double _zoomFactor;	// 40 = 0x28
    double _minAvailableZoomFactor;	// 48 = 0x30
    double _maxAvailableZoomFactor;	// 56 = 0x38
    long long _orientation;	// 64 = 0x40
    CAMZoomButton *__zoomButton;	// 72 = 0x48
    CAMZoomDial *__zoomDial;	// 80 = 0x50
    UIView *__dialClippingView;	// 88 = 0x58
    CAMZoomControlButtonMaskView *__buttonMaskView;	// 96 = 0x60
    CAMZoomButtonPlatter *__buttonPlatter;	// 104 = 0x68
    long long __zoomControlMode;	// 112 = 0x70
    NSArray *__zoomFactors;	// 120 = 0x78
    NSArray *__displayZoomFactors;	// 128 = 0x80
    double __previousTouchTime;	// 136 = 0x88
    NSTimer *__zoomDialVisibilityTimer;	// 144 = 0x90
    NSDate *__startTimeForHideAnimationInProgress;	// 152 = 0x98
    double __hideAnimationInProgressDuration;	// 160 = 0xa0
    CAMZoomButton *__highlightedZoomButton;	// 168 = 0xa8
    CAMFeedbackController *__feedbackController;	// 176 = 0xb0
    NSArray *__significantHapticDisplayValues;	// 184 = 0xb8
    NSArray *__significantHapticDisplayValueEpsilons;	// 192 = 0xc0
    NSSet *__significantHapticDisplayValueSwitchOverIndexes;	// 200 = 0xc8
    long long __lastHapticZone;	// 208 = 0xd0
    double __snappedZoomFactor;	// 216 = 0xd8
    double __unsnappingProgress;	// 224 = 0xe0
    double _leftMargin;	// 232 = 0xe8
    double _zoomButtonMaxYWhenContracted;	// 240 = 0xf0
    double _zoomDialRadius;	// 248 = 0xf8
    struct CGPoint __startTouchLocation;	// 256 = 0x100
    struct CGPoint __previousTouchLocation;	// 272 = 0x110
    struct UIEdgeInsets _contentInsets;	// 288 = 0x120
}

- (void).cxx_destruct;	// IMP=0x00000000000ada44
@property(nonatomic) double zoomDialRadius; // @synthesize zoomDialRadius=_zoomDialRadius;
@property(nonatomic) double zoomButtonMaxYWhenContracted; // @synthesize zoomButtonMaxYWhenContracted=_zoomButtonMaxYWhenContracted;
@property(nonatomic) struct UIEdgeInsets contentInsets; // @synthesize contentInsets=_contentInsets;
@property(nonatomic) double leftMargin; // @synthesize leftMargin=_leftMargin;
@property(nonatomic, setter=_setUnsnappingProgress:) double _unsnappingProgress; // @synthesize _unsnappingProgress=__unsnappingProgress;
@property(nonatomic, setter=_setSnappedZoomFactor:) double _snappedZoomFactor; // @synthesize _snappedZoomFactor=__snappedZoomFactor;
@property(nonatomic) long long _lastHapticZone; // @synthesize _lastHapticZone=__lastHapticZone;
@property(retain, nonatomic, setter=_setSignificantHapticDisplayValueSwitchOverIndexes:) NSSet *_significantHapticDisplayValueSwitchOverIndexes; // @synthesize _significantHapticDisplayValueSwitchOverIndexes=__significantHapticDisplayValueSwitchOverIndexes;
@property(retain, nonatomic, setter=_setSignificantHapticDisplayValueEpsilons:) NSArray *_significantHapticDisplayValueEpsilons; // @synthesize _significantHapticDisplayValueEpsilons=__significantHapticDisplayValueEpsilons;
@property(retain, nonatomic, setter=_setSignificantHapticDisplayValues:) NSArray *_significantHapticDisplayValues; // @synthesize _significantHapticDisplayValues=__significantHapticDisplayValues;
@property(readonly, nonatomic) CAMFeedbackController *_feedbackController; // @synthesize _feedbackController=__feedbackController;
@property(retain, nonatomic, setter=_setHighlightedZoomButton:) CAMZoomButton *_highlightedZoomButton; // @synthesize _highlightedZoomButton=__highlightedZoomButton;
@property(nonatomic, setter=_setHideAnimationInProgressDuration:) double _hideAnimationInProgressDuration; // @synthesize _hideAnimationInProgressDuration=__hideAnimationInProgressDuration;
@property(retain, nonatomic, setter=_setStartTimeForHideAnimationInProgress:) NSDate *_startTimeForHideAnimationInProgress; // @synthesize _startTimeForHideAnimationInProgress=__startTimeForHideAnimationInProgress;
@property(retain, nonatomic, setter=_setZoomDialVisibilityTimer:) NSTimer *_zoomDialVisibilityTimer; // @synthesize _zoomDialVisibilityTimer=__zoomDialVisibilityTimer;
@property(nonatomic, getter=_isEligibleForZoomFactorLabelTaps, setter=_setEligibleForZoomFactorLabelTaps:) _Bool _eligibleForZoomFactorLabelTaps; // @synthesize _eligibleForZoomFactorLabelTaps=__eligibleForZoomFactorLabelTaps;
@property(nonatomic, getter=_isEligibleForSwipeDownToDismiss, setter=_setEligibleForSwipeDownToDismiss:) _Bool _eligibleForSwipeDownToDismiss; // @synthesize _eligibleForSwipeDownToDismiss=__eligibleForSwipeDownToDismiss;
@property(nonatomic, setter=_setPreviousTouchTime:) double _previousTouchTime; // @synthesize _previousTouchTime=__previousTouchTime;
@property(nonatomic, setter=_setPreviousTouchLocation:) struct CGPoint _previousTouchLocation; // @synthesize _previousTouchLocation=__previousTouchLocation;
@property(nonatomic, setter=_setStartTouchLocation:) struct CGPoint _startTouchLocation; // @synthesize _startTouchLocation=__startTouchLocation;
@property(nonatomic, setter=_setShouldShowZoomDial:) _Bool _shouldShowZoomDial; // @synthesize _shouldShowZoomDial=__shouldShowZoomDial;
@property(nonatomic, getter=_isZoomDialEnabled, setter=_setZoomDialEnabled:) _Bool _zoomDialEnabled; // @synthesize _zoomDialEnabled=__zoomDialEnabled;
@property(retain, nonatomic, setter=_setDisplayZoomFactors:) NSArray *_displayZoomFactors; // @synthesize _displayZoomFactors=__displayZoomFactors;
@property(retain, nonatomic, setter=_setZoomFactors:) NSArray *_zoomFactors; // @synthesize _zoomFactors=__zoomFactors;
@property(nonatomic, setter=_setZoomControlMode:) long long _zoomControlMode; // @synthesize _zoomControlMode=__zoomControlMode;
@property(readonly, nonatomic) CAMZoomButtonPlatter *_buttonPlatter; // @synthesize _buttonPlatter=__buttonPlatter;
@property(readonly, nonatomic) CAMZoomControlButtonMaskView *_buttonMaskView; // @synthesize _buttonMaskView=__buttonMaskView;
@property(readonly, nonatomic) UIView *_dialClippingView; // @synthesize _dialClippingView=__dialClippingView;
@property(readonly, nonatomic) CAMZoomDial *_zoomDial; // @synthesize _zoomDial=__zoomDial;
@property(readonly, nonatomic) CAMZoomButton *_zoomButton; // @synthesize _zoomButton=__zoomButton;
@property(nonatomic) long long orientation; // @synthesize orientation=_orientation;
@property(nonatomic) double maxAvailableZoomFactor; // @synthesize maxAvailableZoomFactor=_maxAvailableZoomFactor;
@property(nonatomic) double minAvailableZoomFactor; // @synthesize minAvailableZoomFactor=_minAvailableZoomFactor;
@property(nonatomic) double zoomFactor; // @synthesize zoomFactor=_zoomFactor;
@property(nonatomic) long long layoutStyle; // @synthesize layoutStyle=_layoutStyle;
@property(nonatomic) __weak id <CAMZoomControlDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_updateHaptics:(_Bool)arg1;	// IMP=0x00000000000ad516
- (long long)_hapticZoneForDisplayValue:(double)arg1;	// IMP=0x00000000000ad2b1
- (void)_updateHapticEpsilons;	// IMP=0x00000000000ad000
- (void)_updateSignificantValuesForHaptics;	// IMP=0x00000000000acc8e
- (void)zoomButtonDidLayout;	// IMP=0x00000000000acc7c
- (void)_handleButtonTappedForSingleCameraZoomPlusToggle;	// IMP=0x00000000000acac7
- (void)_handleButtonTappedForSelection:(id)arg1;	// IMP=0x00000000000ac928
- (void)_handleButtonTappedForContinuousModeWithPlatter:(id)arg1;	// IMP=0x00000000000ac79e
- (void)_handleButtonTappedForDualCameraMode;	// IMP=0x00000000000ac4d4
- (void)_handleButtonTapped:(id)arg1;	// IMP=0x00000000000ac3b8
- (_Bool)_isPointWithinButtonPlatter:(struct CGPoint)arg1;	// IMP=0x00000000000ac2e1
- (_Bool)_isTouchWithinButtonPlatter:(id)arg1;	// IMP=0x00000000000ac225
@property(readonly, nonatomic) _Bool _shouldShowButtonPlatter;
@property(readonly, nonatomic, getter=_isButtonPlatterSupportedForConfiguration) _Bool _buttonPlatterSupportedForConfiguration;
- (void)_cleanupForCancelTracking;	// IMP=0x00000000000ac054
- (void)cancelTrackingWithEvent:(id)arg1;	// IMP=0x00000000000abff0
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;	// IMP=0x00000000000ab9df
- (_Bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;	// IMP=0x00000000000ab018
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;	// IMP=0x00000000000aad43
- (void)_resetSnapping;	// IMP=0x00000000000aad0f
- (_Bool)_isWithinZoomButtonAccessoryAtLocationInZoomButton:(struct CGPoint)arg1;	// IMP=0x00000000000aab59
- (_Bool)_isWithinZoomButtonBoundsWithTouch:(id)arg1;	// IMP=0x00000000000aaa97
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000000aa915
- (_Bool)_shouldInterceptTouchesForHidingZoomDial;	// IMP=0x00000000000aa82a
- (double)_normalizeValue:(double)arg1 betweenMinimumValue:(double)arg2 maximumValue:(double)arg3;	// IMP=0x00000000000aa804
- (double)_additionalAccelerationForMovementFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 deltaX:(double)arg3;	// IMP=0x00000000000aa681
- (double)_accelerationForMovementFromPointFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 elapsedTime:(double)arg3;	// IMP=0x00000000000aa58e
- (double)_dampingFactorForMovementFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x00000000000aa521
- (double)_dampingFactorForPerpendicularityFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x00000000000aa3bc
- (double)_dampingFactorForDistanceFromDialForPoint:(struct CGPoint)arg1;	// IMP=0x00000000000aa37d
- (double)_distanceFromDialClippingViewToPoint:(struct CGPoint)arg1;	// IMP=0x00000000000aa1b1
- (void)setOrientation:(long long)arg1 animated:(_Bool)arg2;	// IMP=0x00000000000aa0bb
- (void)_updateMaskViewForZoomButtonHighlightingTransform;	// IMP=0x00000000000a9e21
- (void)layoutSubviews;	// IMP=0x00000000000a979a
- (struct UIEdgeInsets)alignmentRectInsets;	// IMP=0x00000000000a9771
- (void)_cancelDelayedZoomDialVisibilityChange;	// IMP=0x00000000000a972f
- (void)_handleZoomDialVisibilityTimerFiredWithUserInfo:(id)arg1;	// IMP=0x00000000000a9649
- (void)_setShouldShowZoomDial:(_Bool)arg1 animationDuration:(long long)arg2 afterDelay:(double)arg3;	// IMP=0x00000000000a946b
- (void)setShouldShowZoomDial:(_Bool)arg1 animationDuration:(long long)arg2;	// IMP=0x00000000000a9418
@property(readonly, nonatomic, getter=isShowingZoomDial) _Bool showingZoomDial;
@property(readonly, nonatomic) _Bool _shouldHideZoomButtonBackground;
- (void)_updateSubviewsAlphasWithDuration:(double)arg1 forConfigurationChange:(_Bool)arg2;	// IMP=0x00000000000a8e43
- (void)_setShouldShowZoomDial:(_Bool)arg1 animationDuration:(long long)arg2;	// IMP=0x00000000000a88f5
- (void)_setZoomDialEnabled:(_Bool)arg1 animationDuration:(long long)arg2;	// IMP=0x00000000000a88b8
@property(readonly, nonatomic) _Bool _shouldUseZoomDialMask;
- (void)traitCollectionDidChange:(id)arg1;	// IMP=0x00000000000a8709
- (void)_updateZoomButtonTappableEdgeInsets;	// IMP=0x00000000000a8640
@property(readonly, nonatomic) double zoomDialBorderWidth;
@property(nonatomic) double zoomDialContentMaskingHeight;
- (void)setLeftMargin:(double)arg1 animated:(_Bool)arg2;	// IMP=0x00000000000a834a
- (void)setZoomButtonAccessoryState:(long long)arg1 animated:(_Bool)arg2;	// IMP=0x00000000000a82e5
@property(nonatomic) long long zoomButtonAccessoryState;
- (void)setZoomButtonSymbol:(long long)arg1 animated:(_Bool)arg2;	// IMP=0x00000000000a8204
@property(readonly, nonatomic) long long zoomButtonSymbol;
@property(readonly, nonatomic) long long zoomButtonContentType;
- (void)_setZoomFactor:(double)arg1 interactionType:(long long)arg2 shouldNotifyDelegate:(_Bool)arg3;	// IMP=0x00000000000a7dad
- (double)_zoomFactorForDisplayZoomValue:(double)arg1;	// IMP=0x00000000000a7d03
- (double)_displayZoomValueForZoomFactor:(double)arg1;	// IMP=0x00000000000a7c6f
@property(readonly, nonatomic) double displayZoomValue;
- (void)_updateDisplayedValuesAnimated:(_Bool)arg1;	// IMP=0x00000000000a7b6b
@property(readonly, nonatomic) _Bool _shouldSnapDialToSwitchOverZoomFactors;
@property(readonly, nonatomic) NSArray *_switchOverZoomFactors;
@property(readonly, nonatomic) double _displayMaximumZoomFactor;
@property(readonly, nonatomic) double _displayMinimumZoomFactor;
@property(readonly, nonatomic) double maximumZoomFactor;
@property(readonly, nonatomic) double minimumZoomFactor;
- (void)configureForZoomSymbolToggle;	// IMP=0x00000000000a76e4
- (void)configureForSelectionOnlyWithDisplayZoomFactors:(id)arg1 selectedIndex:(unsigned long long)arg2 animated:(_Bool)arg3;	// IMP=0x00000000000a763e
- (void)configureForToggleOnlyWithZoomFactor:(double)arg1 displayZoomFactor:(double)arg2;	// IMP=0x00000000000a7513
- (void)configureForSingleCameraPlusToggleWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5;	// IMP=0x00000000000a737b
- (void)configureForDualDeviceWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5 dualCameraSwitchOverZoomFactor:(double)arg6 displayDualCameraSwitchOverZoomFactor:(double)arg7;	// IMP=0x00000000000a7178
- (void)configureForTripleDeviceWithZoomFactor:(double)arg1 minimumZoomFactor:(double)arg2 displayMinimumZoomFactor:(double)arg3 maximumZoomFactor:(double)arg4 displayMaximumZoomFactor:(double)arg5 switchOverZoomFactor1:(double)arg6 displaySwitchOverZoomFactor1:(double)arg7 switchOverZoomFactor2:(double)arg8 displaySwitchOverZoomFactor2:(double)arg9;	// IMP=0x00000000000a6efa
- (_Bool)configureForContinuousZoomWithZoomFactor:(double)arg1 zoomFactors:(id)arg2 displayZoomFactors:(id)arg3;	// IMP=0x00000000000a6d62
- (void)_configureForControlMode:(long long)arg1 zoomFactor:(double)arg2 zoomFactors:(id)arg3 displayZoomFactors:(id)arg4 zoomButtonContentType:(long long)arg5 animated:(_Bool)arg6;	// IMP=0x00000000000a6927
- (id)initWithLayoutStyle:(long long)arg1;	// IMP=0x00000000000a64dc

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

