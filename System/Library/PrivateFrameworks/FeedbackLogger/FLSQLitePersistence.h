//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class FLLoggingContext, NSDate, NSString;
@protocol OS_os_log;

@interface FLSQLitePersistence : NSObject
{
    _Atomic _Bool _configured;	// 8 = 0x8
    NSString *_databasePath;	// 16 = 0x10
    struct sqlite3 *_db;	// 24 = 0x18
    NSObject<OS_os_log> *_log;	// 32 = 0x20
    FLLoggingContext *_context;	// 40 = 0x28
    struct sqlite3_stmt *_insertRecordsStatement;	// 48 = 0x30
    struct sqlite3_stmt *_iteratePayloadStatement;	// 56 = 0x38
    NSString *_storeIdentifier;	// 64 = 0x40
    unsigned long long _maxBatchPayloadInBytes;	// 72 = 0x48
    unsigned long long _maxAllowedDatabaseSizeInBytes;	// 80 = 0x50
    NSString *_currentBatchIdentifier;	// 88 = 0x58
    NSDate *_currentBatchCreationDate;	// 96 = 0x60
    unsigned long long _currentBatchPayloadSize;	// 104 = 0x68
    double _batchMaximumDuration;	// 112 = 0x70
}

+ (id)uploadStatusDescription:(int)arg1;	// IMP=0x0000000000006e59
+ (id)batchStatusDescription:(int)arg1;	// IMP=0x0000000000008cb7
- (void).cxx_destruct;	// IMP=0x000000000000b313
@property(nonatomic) double batchMaximumDuration; // @synthesize batchMaximumDuration=_batchMaximumDuration;
@property(nonatomic) unsigned long long currentBatchPayloadSize; // @synthesize currentBatchPayloadSize=_currentBatchPayloadSize;
@property(copy, nonatomic) NSDate *currentBatchCreationDate; // @synthesize currentBatchCreationDate=_currentBatchCreationDate;
@property(copy, nonatomic) NSString *currentBatchIdentifier; // @synthesize currentBatchIdentifier=_currentBatchIdentifier;
@property(nonatomic) unsigned long long maxAllowedDatabaseSizeInBytes; // @synthesize maxAllowedDatabaseSizeInBytes=_maxAllowedDatabaseSizeInBytes;
@property(nonatomic) unsigned long long maxBatchPayloadInBytes; // @synthesize maxBatchPayloadInBytes=_maxBatchPayloadInBytes;
@property(nonatomic) _Atomic _Bool configured; // @synthesize configured=_configured;
@property(readonly, copy, nonatomic) NSString *storeIdentifier; // @synthesize storeIdentifier=_storeIdentifier;
@property(nonatomic) struct sqlite3_stmt *iteratePayloadStatement; // @synthesize iteratePayloadStatement=_iteratePayloadStatement;
@property(nonatomic) struct sqlite3_stmt *insertRecordsStatement; // @synthesize insertRecordsStatement=_insertRecordsStatement;
@property(retain, nonatomic) FLLoggingContext *context; // @synthesize context=_context;
@property(retain, nonatomic) NSObject<OS_os_log> *log; // @synthesize log=_log;
@property(nonatomic) struct sqlite3 *db; // @synthesize db=_db;
@property(readonly, copy, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
- (_Bool)deleteDatabase;	// IMP=0x000000000000ae49
- (_Bool)createDatabase;	// IMP=0x000000000000ae07
- (_Bool)getIntValueForPragma:(id)arg1 into:(inout int *)arg2;	// IMP=0x000000000000ac7c
- (_Bool)iteratePayloadForBatch:(id)arg1 codeblock:(CDUnknownBlockType)arg2;	// IMP=0x000000000000aa14
- (_Bool)executeInTransactionMultipleSQLStatements:(id)arg1;	// IMP=0x000000000000a8f6
- (_Bool)executeSQLStatement:(const char *)arg1;	// IMP=0x000000000000a8df
- (_Bool)executeSQLStatement:(const char *)arg1 usingTransaction:(_Bool)arg2;	// IMP=0x000000000000a75b
- (_Bool)tryPrepare:(const char *)arg1 preparedStatement:(inout struct sqlite3_stmt **)arg2;	// IMP=0x000000000000a683
- (_Bool)tryRolloverBatchIfNecessary:(unsigned long long)arg1;	// IMP=0x000000000000a331
- (_Bool)open;	// IMP=0x000000000000a11e
- (id)persist:(id)arg1;	// IMP=0x0000000000009ac8
- (_Bool)initializeConnectionForUseBy:(int)arg1;	// IMP=0x0000000000009820
- (void)dealloc;	// IMP=0x00000000000097a7
- (id)initWithStoreId:(id)arg1 loggingContext:(id)arg2;	// IMP=0x0000000000009594
- (_Bool)deleteAllUploads;	// IMP=0x0000000000006db2
- (_Bool)__deleteStatementHelper:(const char *)arg1 forUploadId:(id)arg2;	// IMP=0x0000000000006bc5
- (_Bool)deleteUploadWithIdentifier:(id)arg1;	// IMP=0x0000000000006a74
- (_Bool)iterateUploadsWithCodeblock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000006564
- (id)getUploadRecordWithId:(id)arg1;	// IMP=0x0000000000006077
- (id)persistUploadPayload:(id)arg1;	// IMP=0x0000000000005ae5
- (long long)cleanupPurgableUploads;	// IMP=0x0000000000005a9a
- (_Bool)markUploadsForPurge;	// IMP=0x0000000000005a81
- (long long)doUploadHousekeeping;	// IMP=0x00000000000055b8
- (_Bool)recoverOrphanedProcessingUploads;	// IMP=0x000000000000559f
- (_Bool)updateStatusForUpload:(id)arg1 toStatus:(int)arg2;	// IMP=0x00000000000054de
- (_Bool)_updateMetadataHelperForUpload:(id)arg1 query:(const char *)arg2;	// IMP=0x0000000000005381
- (_Bool)_updateStatusHelperForUpload:(id)arg1 toStatus:(int)arg2;	// IMP=0x0000000000005211
- (id)getUploadsRangeStart:(long long)arg1 end:(long long)arg2;	// IMP=0x0000000000004e65
- (id)_getUploadIdsHelper:(struct sqlite3_stmt *)arg1;	// IMP=0x0000000000004d72
- (id)getPurgableUploadIds;	// IMP=0x0000000000004c43
- (id)getUploadIdsWithAllStatuses;	// IMP=0x0000000000004b14
- (id)getUploadIdsWithStatus:(int)arg1;	// IMP=0x00000000000049c9
- (_Bool)purgeAllBatches;	// IMP=0x0000000000008c10
- (_Bool)__purgeStatementHelper:(const char *)arg1 forBatchId:(id)arg2;	// IMP=0x0000000000008a23
- (_Bool)purgeBatch:(id)arg1;	// IMP=0x0000000000008810
- (long long)doBatchesHousekeeping;	// IMP=0x00000000000087c5
- (_Bool)markBatchesforPurge;	// IMP=0x00000000000087ac
- (_Bool)recoverOrphanedProcessingBatches;	// IMP=0x0000000000008793
- (_Bool)closeOpenBatch;	// IMP=0x00000000000085b8
- (_Bool)forceCloseOpenBatches;	// IMP=0x000000000000852d
- (_Bool)closeAllBatches;	// IMP=0x000000000000851b
- (_Bool)closeOrphanedBatches;	// IMP=0x0000000000008360
- (_Bool)initializeNewBatch;	// IMP=0x0000000000007f60
- (int)getDataVersion;	// IMP=0x0000000000007ec6
- (_Bool)updateStatusForBatch:(id)arg1 toStatus:(int)arg2;	// IMP=0x0000000000007e05
- (_Bool)_updateMetadataHelperForBatch:(id)arg1 query:(const char *)arg2;	// IMP=0x0000000000007cd8
- (_Bool)_updateStatusHelperForBatch:(id)arg1 toStatus:(int)arg2;	// IMP=0x0000000000007b69
- (_Bool)getBatchMetadata:(id)arg1 batchMetadata:(inout id *)arg2;	// IMP=0x000000000000770c
- (id)getRecordsRangeStart:(long long)arg1 end:(long long)arg2;	// IMP=0x0000000000007360
- (id)_getBatchIdsHelper:(struct sqlite3_stmt *)arg1;	// IMP=0x000000000000726d
- (id)getPurgableBatchIds;	// IMP=0x000000000000713e
- (id)getBatchIdsWithAllStatuses;	// IMP=0x000000000000700f
- (id)getBatchIdsWithStatus:(int)arg1;	// IMP=0x0000000000006ec4
- (_Bool)setDatabaseSizeLimit;	// IMP=0x000000000000934b
- (unsigned long long)getCurrentDatabaseSize;	// IMP=0x00000000000092e0
- (int)getSchemaVersion;	// IMP=0x0000000000009246
- (_Bool)updateSchema;	// IMP=0x0000000000008d82
- (_Bool)isSchemaReady;	// IMP=0x0000000000008d69
- (_Bool)prepareSchema;	// IMP=0x0000000000008d30
- (void)observeInsertionAtRow:(long long)arg1 observer:(CDUnknownBlockType)arg2;	// IMP=0x000000000000c20e
- (id)registerInsertionObserver:(CDUnknownBlockType)arg1;	// IMP=0x000000000000bf9d
- (long long)maxRowId;	// IMP=0x000000000000be7a

@end

