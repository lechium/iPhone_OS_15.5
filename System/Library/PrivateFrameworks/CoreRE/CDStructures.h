//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class AVAudioFormat, MISSING_TYPE, NSData, NSObject;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AABB {
    struct Vector3<float> _field1;
    struct Vector3<float> _field2;
};

struct Address {
    struct DynamicString _field1;
};

struct Allocator {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
};

struct AssetService {
    CDUnknownFunctionPointerType *_field1;
};

struct AttributeTable {
    unsigned long long _field1;
    struct FixedArray<re::BufferSlice> _field2;
    struct FixedArray<re::VertexBufferFormat> _field3;
    struct FixedArray<re::StringID> _field4;
    struct HashBrown<re::WeakStringID, unsigned char, re::Hash<re::WeakStringID>, re::EqualTo<re::WeakStringID>, re::Hash<uint8_t>, false> _field5;
};

struct AudioBuffer {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
};

struct AudioBufferList {
    unsigned int _field1;
    struct AudioBuffer _field2[1];
};

struct AudioComponentDescription {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
};

struct AudioFileAssetReader {
    char *data;
    unsigned long long size;
    NSData *backing;
    struct OpaqueAudioFileID *audioFile;
    struct OpaqueExtAudioFile *audioFileRef;
    long long fileLength;
    AVAudioFormat *format;
};

struct BlendShapeModelBuilder {
    struct Device _field1;
    struct DeformationModelData *_field2;
};

struct Buffer {
    id _field1;
};

struct BufferSlice;

struct CGSize {
    double _field1;
    double _field2;
};

struct Config {
    struct ServiceLocator *serviceLocator;
    struct queue dispatchQueue;
    struct DynamicString serviceID;
};

struct Connection {
    id _field1;
};

struct DataArrayHandle<re::MeshModel> {
    struct ElementPointer _field1;
    unsigned int :24;
    unsigned int :8;
};

struct DeformationModelData {
    struct unique_ptr<void, std::function<void (void *)>> _field1[17];
};

struct Device {
    id _field1;
};

struct DiscoveryInvite;

struct DiscoveryView;

struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity>>::Subscription> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    struct Subscription *m_data;
};

struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity>>::SubscriptionLegacy> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    struct SubscriptionLegacy *m_data;
};

struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>>::Subscription> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    struct Subscription *m_data;
};

struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>>::SubscriptionLegacy> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    struct SubscriptionLegacy *m_data;
};

struct DynamicArray<re::IDSDiscoveryView *> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    struct IDSDiscoveryView **m_data;
};

struct DynamicArray<re::IDSInvite *> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    struct IDSInvite **m_data;
};

struct DynamicArray<re::SharedPtr<(anonymous namespace)::MCProtocolHandle>> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    void *m_data;
};

struct DynamicArray<unsigned char> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    char *m_data;
};

struct DynamicString {
    struct Allocator *m_allocator;
    char *m_buffer;
    unsigned long long m_capacity;
    unsigned long long m_length;
};

struct ElementPointer {
    unsigned short _field1;
    unsigned short _field2;
};

struct Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity>> {
    struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity>>::Subscription> m_subscriptions;
    struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>, re::SharedPtr<re::DiscoveryIdentity>>::SubscriptionLegacy> m_subscriptionsLegacy;
};

struct Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>> {
    struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>>::Subscription> m_subscriptions;
    struct DynamicArray<re::Event<re::IDSSessionService, re::SharedPtr<re::DiscoveryInvite>>::SubscriptionLegacy> m_subscriptionsLegacy;
};

struct FadeState {
    unsigned int uniqueID;
    _Bool shouldFade;
};

struct FixedArray<int> {
    struct Allocator *_field1;
    unsigned long long _field2;
    int *_field3;
};

struct FixedArray<re::BufferSlice> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct BufferSlice *_field3;
};

struct FixedArray<re::MeshLodLevelInfo> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct MeshLodLevelInfo *_field3;
};

struct FixedArray<re::MeshPart> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct MeshPart *_field3;
};

struct FixedArray<re::StringID> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct StringID *_field3;
};

struct FixedArray<re::VertexBufferFormat> {
    struct Allocator *_field1;
    unsigned long long _field2;
    struct VertexBufferFormat *_field3;
};

struct FixedInlineArray<unsigned char, 24UL> {
    unsigned char _field1[24];
};

struct HashBrown<re::WeakStringID, unsigned char, re::Hash<re::WeakStringID>, re::EqualTo<re::WeakStringID>, re::Hash<uint8_t>, false> {
    void *_field1;
    void *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct Allocator *_field8;
};

struct IDSDiscoveryIdentity;

struct IDSDiscoveryView;

struct IDSInvite;

struct IDSSessionService {
    CDUnknownFunctionPointerType *_field1;
};

struct Matrix4x4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
            float _field5;
            float _field6;
            float _field7;
            float _field8;
            float _field9;
            float _field10;
            float _field11;
            float _field12;
            float _field13;
            float _field14;
            float _field15;
            float _field16;
        } _field1;
        struct float4x4 _field2;
        struct {
            struct Vector4<float> _field1;
            struct Vector4<float> _field2;
            struct Vector4<float> _field3;
            struct Vector4<float> _field4;
        } _field3;
        struct Vector4<float> _field4[4];
        float _field5[4][4];
        float _field6[16];
    } _field1;
};

struct MeshInstance {
    struct StringID _field1;
    struct DataArrayHandle<re::MeshModel> _field2;
    struct MeshLodSelectOptions _field3;
    struct Matrix4x4<float> _field4;
    struct FixedArray<int> _field5;
};

struct MeshLodLevelInfo {
    float _field1;
    float _field2;
    unsigned int _field3;
};

struct MeshLodSelectOptions {
    int strategy;
    _Bool crossFade;
    float crossFadeInterval;
    float bias;
    float throttleBias;
};

struct MeshModel {
    struct StringID _field1;
    struct AABB _field2;
    struct FixedArray<re::MeshPart> _field3;
    struct FixedArray<re::MeshLodLevelInfo> _field4;
    struct DeformationModelData _field5;
};

struct MeshModelContext {
    id _field1;
    struct Buffer _field2;
};

struct MeshPart {
    struct AttributeTable _field1;
    struct Matrix4x4<float> _field2;
    struct AABB _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned char _field6;
    unsigned short _field7;
    struct FixedInlineArray<unsigned char, 24UL> _field8;
    struct StringID _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned char _field12;
    int _field13;
    struct RenderFlags _field14;
};

struct OpaqueAudioFileID;

struct OpaqueExtAudioFile;

struct REMeshLodSelectOptions {
    struct MeshLodSelectOptions options;
};

struct RenderFlags {
    unsigned char _field1;
};

struct ServiceLocator;

struct SharedPtr<re::DiscoveryInvite> {
    struct DiscoveryInvite *_field1;
};

struct SharedPtr<re::DiscoveryView> {
    struct DiscoveryView *_field1;
};

struct SharedPtr<re::IDSDiscoveryIdentity> {
    struct IDSDiscoveryIdentity *_field1;
};

struct SharedPtr<re::IDSDiscoveryView> {
    struct IDSDiscoveryView *_field1;
};

struct SkinningModelBuilder {
    struct Device *_field1;
    struct DeformationModelData *_field2;
    unsigned long long _field3;
    _Bool _field4;
};

struct Slice<re::DynamicString> {
    struct DynamicString *_field1;
    unsigned long long _field2;
};

struct StreamWriter;

struct StringID {
    struct {
        unsigned int :1;
        unsigned int :63;
    } _field1;
    char *_field2;
};

struct Subscription;

struct SubscriptionLegacy;

struct Vector3<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
        } _field1;
        float _field2[3];
    } _field1;
};

struct Vector4<float> {
    union {
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
        } _field1;
        float _field2[4];
    } _field1;
};

struct VertexAttributeDescriptor {
    char *_field1;
    unsigned char _field2;
    unsigned char _field3;
};

struct VertexBufferFormat;

struct array<std::vector<float>, 2UL> {
    struct vector<float, std::allocator<float>> __elems_[2];
};

struct atomic<FadeState> {
    struct __cxx_atomic_impl<FadeState, std::__cxx_atomic_base_impl<FadeState>> {
        _Atomic struct FadeState __a_value;
    } __a_;
};

struct atomic<REAudioPlaybackState> {
    struct __cxx_atomic_impl<REAudioPlaybackState, std::__cxx_atomic_base_impl<REAudioPlaybackState>> {
        _Atomic unsigned long long __a_value;
    } __a_;
};

struct atomic<bool> {
    struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> {
        _Atomic _Bool __a_value;
    } __a_;
};

struct atomic<float> {
    struct __cxx_atomic_impl<float, std::__cxx_atomic_base_impl<float>> {
        _Atomic float __a_value;
    } __a_;
};

struct atomic<int> {
    struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> {
        _Atomic int __a_value;
    } __a_;
};

struct atomic<unsigned int> {
    struct __cxx_atomic_impl<unsigned int, std::__cxx_atomic_base_impl<unsigned int>> {
        _Atomic unsigned int __a_value;
    } __a_;
};

struct float4x4 {
    MISSING_TYPE *_field1[4];
};

struct function<void (void *)> {
    struct __value_func<void (void *)> {
        struct type _field1;
        void *_field2;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct object {
    NSObject *fObj;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct queue {
    struct object fObj;
};

struct shared_ptr<AudioStreamRecordingManager::StreamWriter> {
    struct StreamWriter *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[32];
};

struct unique_ptr<re::audio::FixedSpscAudioQueue<GainRampCommand>, std::default_delete<re::audio::FixedSpscAudioQueue<GainRampCommand>>> {
    struct __compressed_pair<re::audio::FixedSpscAudioQueue<GainRampCommand>*, std::default_delete<re::audio::FixedSpscAudioQueue<GainRampCommand>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<void, std::function<void (void *)>> {
    struct __compressed_pair<void *, std::function<void (void *)>> {
        void *_field1;
        struct function<void (void *)> _field2;
    } _field1;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

// Template types
typedef struct DynamicArray<unsigned char> {
    struct Allocator *m_allocator;
    unsigned long long m_capacity;
    unsigned long long m_size;
    unsigned int m_version;
    char *m_data;
} DynamicArray_8f05e591;

typedef struct SharedPtr<re::DiscoveryInvite> {
    struct DiscoveryInvite *_field1;
} SharedPtr_d68dfbcb;

typedef struct SharedPtr<re::DiscoveryView> {
    struct DiscoveryView *_field1;
} SharedPtr_c2d37bbb;

typedef struct SharedPtr<re::IDSDiscoveryIdentity> {
    struct IDSDiscoveryIdentity *_field1;
} SharedPtr_601ce9e9;

typedef struct SharedPtr<re::IDSDiscoveryView> {
    struct IDSDiscoveryView *_field1;
} SharedPtr_24b37889;

typedef struct Slice<re::DynamicString> {
    struct DynamicString *_field1;
    unsigned long long _field2;
} Slice_554aef03;

