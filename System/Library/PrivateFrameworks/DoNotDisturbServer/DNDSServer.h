//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <DoNotDisturbServer/DNDSAppForegroundTriggerManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSAssertionSyncManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSAssertionSyncManagerDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSDrivingTriggerManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSEventBehaviorResolverDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSGamingTriggerManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSGlobalConfigurationManagerDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSLegacyAssertionSyncManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSLifetimeMonitorDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSLifetimeMonitorDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSLocationLifetimeMonitorDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSMeDeviceServiceListener-Protocol.h>
#import <DoNotDisturbServer/DNDSMindfulnessTriggerManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSModeConfigurationManagerDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSPairedDeviceStateMonitorDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSReachabilityDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSRemoteAvailabilityServiceProviderDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSRemoteServiceProviderDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSScheduleLifetimeMonitorDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSScheduleManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSSettingsManagerDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSSettingsSyncManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSSettingsSyncManagerDelegate-Protocol.h>
#import <DoNotDisturbServer/DNDSSleepingTriggerManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSSmartTriggerManagerDataSource-Protocol.h>
#import <DoNotDisturbServer/DNDSWorkoutTriggerManagerDataSource-Protocol.h>

@class DNDSAppForegroundTriggerManager, DNDSAppInfoCache, DNDSAuxiliaryStateMonitor, DNDSBiomeDonationManager, DNDSCalendarEventLifetimeMonitor, DNDSClientDetailsProvider, DNDSContactMonitor, DNDSDrivingTriggerManager, DNDSEventBehaviorResolver, DNDSGamingTriggerManager, DNDSGlobalConfigurationManager, DNDSGlobalConfigurationStore, DNDSIDSSyncEngine, DNDSLocationLifetimeMonitor, DNDSMeDeviceService, DNDSMetricsManager, DNDSMindfulnessTriggerManager, DNDSModeAssertionManager, DNDSModeConfigurationManager, DNDSModeConfigurationsStore, DNDSPairedDeviceStateMonitor, DNDSPlaceholderModeManager, DNDSReachability, DNDSRemoteAvailabilityServiceProvider, DNDSRemoteServiceProvider, DNDSScheduleLifetimeMonitor, DNDSScheduleManager, DNDSSettingsManager, DNDSSleepingTriggerManager, DNDSSmartTriggerManager, DNDSStateProvider, DNDSSyncEngine, DNDSUserAvailabilityCoordinator, DNDSWorkoutTriggerManager, DNDSXPCEventStream, FBSDisplayLayoutMonitor, IDSService, NSArray, NSString, STFocusStatusDomainPublisher;
@protocol DNDSAssertionSyncManager, DNDSKeybagStateProviding, DNDSSettingsSyncManager, OS_dispatch_queue;

@interface DNDSServer : NSObject <DNDSAppForegroundTriggerManagerDataSource, DNDSDrivingTriggerManagerDataSource, DNDSGamingTriggerManagerDataSource, DNDSMindfulnessTriggerManagerDataSource, DNDSSleepingTriggerManagerDataSource, DNDSSmartTriggerManagerDataSource, DNDSWorkoutTriggerManagerDataSource, DNDSGlobalConfigurationManagerDelegate, DNDSEventBehaviorResolverDataSource, DNDSLifetimeMonitorDataSource, DNDSLocationLifetimeMonitorDataSource, DNDSScheduleLifetimeMonitorDataSource, DNDSLifetimeMonitorDelegate, DNDSRemoteServiceProviderDelegate, DNDSRemoteAvailabilityServiceProviderDelegate, DNDSAssertionSyncManagerDataSource, DNDSAssertionSyncManagerDelegate, DNDSLegacyAssertionSyncManagerDataSource, DNDSSettingsSyncManagerDataSource, DNDSSettingsSyncManagerDelegate, DNDSScheduleManagerDataSource, DNDSSettingsManagerDelegate, DNDSPairedDeviceStateMonitorDelegate, DNDSModeConfigurationManagerDelegate, DNDSReachabilityDelegate, DNDSMeDeviceServiceListener>
{
    NSObject<OS_dispatch_queue> *_queue;	// 8 = 0x8
    DNDSCalendarEventLifetimeMonitor *_calendarEventLifetimeMonitor;	// 16 = 0x10
    DNDSScheduleLifetimeMonitor *_scheduleLifetimeMonitor;	// 24 = 0x18
    DNDSLocationLifetimeMonitor *_locationLifetimeMonitor;	// 32 = 0x20
    NSArray *_lifetimeMonitors;	// 40 = 0x28
    DNDSScheduleManager *_scheduleManager;	// 48 = 0x30
    DNDSAppForegroundTriggerManager *_appForegroundTriggerManager;	// 56 = 0x38
    DNDSAuxiliaryStateMonitor *_auxiliaryStateMonitor;	// 64 = 0x40
    DNDSBiomeDonationManager *_biomeDonationManager;	// 72 = 0x48
    DNDSDrivingTriggerManager *_drivingTriggerManager;	// 80 = 0x50
    DNDSGamingTriggerManager *_gamingTriggerManager;	// 88 = 0x58
    DNDSMindfulnessTriggerManager *_mindfulnessTriggerManager;	// 96 = 0x60
    DNDSSleepingTriggerManager *_sleepingTriggerManager;	// 104 = 0x68
    DNDSSmartTriggerManager *_smartTriggerManager;	// 112 = 0x70
    DNDSWorkoutTriggerManager *_workoutTriggerManager;	// 120 = 0x78
    DNDSMeDeviceService *_meDeviceService;	// 128 = 0x80
    DNDSStateProvider *_stateProvider;	// 136 = 0x88
    DNDSEventBehaviorResolver *_eventBehaviorResolver;	// 144 = 0x90
    DNDSRemoteServiceProvider *_serviceProvider;	// 152 = 0x98
    DNDSRemoteAvailabilityServiceProvider *_availabilityServiceProvider;	// 160 = 0xa0
    id <DNDSAssertionSyncManager> _assertionSyncManager;	// 168 = 0xa8
    id <DNDSAssertionSyncManager> _legacyAssertionSyncManager;	// 176 = 0xb0
    id <DNDSSettingsSyncManager> _settingsSyncManager;	// 184 = 0xb8
    DNDSSettingsManager *_settingsManager;	// 192 = 0xc0
    IDSService *_idsLocalService;	// 200 = 0xc8
    IDSService *_idsCloudService;	// 208 = 0xd0
    DNDSPairedDeviceStateMonitor *_pairedDeviceStateMonitor;	// 216 = 0xd8
    DNDSSyncEngine *_syncEngine;	// 224 = 0xe0
    DNDSIDSSyncEngine *_idsSyncEngine;	// 232 = 0xe8
    DNDSReachability *_reachability;	// 240 = 0xf0
    id <DNDSKeybagStateProviding> _keybag;	// 248 = 0xf8
    DNDSXPCEventStream *_eventStream;	// 256 = 0x100
    FBSDisplayLayoutMonitor *_layoutMonitor;	// 264 = 0x108
    DNDSGlobalConfigurationStore *_globalConfigurationStore;	// 272 = 0x110
    DNDSGlobalConfigurationManager *_globalConfigurationManager;	// 280 = 0x118
    DNDSModeConfigurationsStore *_modeConfigurationsStore;	// 288 = 0x120
    DNDSPlaceholderModeManager *_placeholderModeManager;	// 296 = 0x128
    DNDSContactMonitor *_contactMonitor;	// 304 = 0x130
    DNDSAppInfoCache *_appInfoCache;	// 312 = 0x138
    DNDSUserAvailabilityCoordinator *_userAvailabilityCoordinator;	// 320 = 0x140
    STFocusStatusDomainPublisher *_focusStatusDomainPublisher;	// 328 = 0x148
    DNDSClientDetailsProvider *_clientDetailsProvider;	// 336 = 0x150
    DNDSModeAssertionManager *_modeAssertionManager;	// 344 = 0x158
    DNDSModeConfigurationManager *_modeConfigurationManager;	// 352 = 0x160
    DNDSMetricsManager *_metricsManager;	// 360 = 0x168
    unsigned long long _lockState;	// 368 = 0x170
    unsigned long long _lostModeState;	// 376 = 0x178
}

- (void).cxx_destruct;	// IMP=0x00000000000b37cd
@property unsigned long long lostModeState; // @synthesize lostModeState=_lostModeState;
@property unsigned long long lockState; // @synthesize lockState=_lockState;
- (_Bool)layoutIsLocked:(id)arg1;	// IMP=0x00000000000b35f5
- (void)_queue_handlePairedDeviceAndSyncSettingsChange;	// IMP=0x00000000000b3011
- (id)_allModes;	// IMP=0x00000000000b2c62
- (id)_updateModeAssertionManagerAndRefreshLifetimesAndStateWithHandler:(CDUnknownBlockType)arg1 error:(id *)arg2;	// IMP=0x00000000000b20cd
- (void)_forceConfigurationSyncIfNeededWithUpdateResult:(id)arg1;	// IMP=0x00000000000b1954
- (id)_activeDateIntervalForModeAssertion:(id)arg1 currentlyActive:(_Bool)arg2;	// IMP=0x00000000000b1640
- (id)_stateSystemSnapshot;	// IMP=0x00000000000b0882
- (id)_scheduleTriggerMatchingSettings:(id)arg1;	// IMP=0x00000000000b07c2
- (id)_scheduleSettingsMatchingTrigger:(id)arg1;	// IMP=0x00000000000b06fd
- (id)_scheduleSettingsFromDefaultScheduleTrigger;	// IMP=0x00000000000b0679
- (id)_scheduleSettingsForModeConfigurations;	// IMP=0x00000000000b0422
- (_Bool)_setDefaultScheduleTriggerWithScheduleSettings:(id)arg1;	// IMP=0x00000000000b0377
- (_Bool)_setScheduleTrigger:(id)arg1 forModeConfigurationWithIdentifier:(id)arg2;	// IMP=0x00000000000b0198
- (_Bool)_setDimsLockScreenSetting:(unsigned long long)arg1 forModeConfigurationWithIdentifier:(id)arg2;	// IMP=0x00000000000b00f4
- (id)_createDefaultModeForWorkoutTriggerIfNecessary;	// IMP=0x00000000000afc49
- (void)_migrateDefaultDoNotDisturbModeIfNeeded;	// IMP=0x00000000000af862
- (void)_migrateBypassSettingsIfNeeded;	// IMP=0x00000000000af2aa
- (void)_queue_validateIDSSyncEngine;	// IMP=0x00000000000af291
- (void)_queue_updateScheduleManagerLifetimeMonitorsAndStateForReason:(unsigned long long)arg1 source:(long long)arg2;	// IMP=0x00000000000ae8f2
- (void)_queue_resume;	// IMP=0x00000000000ae877
- (void)reachabilityChangedTo:(_Bool)arg1;	// IMP=0x00000000000ae64b
- (void)meDeviceService:(id)arg1 didReceiveMeDeviceStateUpdate:(id)arg2;	// IMP=0x00000000000ae62f
- (id)remoteServiceProvider:(id)arg1 currentMeDeviceStateWithError:(id *)arg2;	// IMP=0x00000000000ae616
- (id)remoteServiceProvider:(id)arg1 getAppInfoForBundleIdentifiers:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae588
- (id)remoteServiceProvider:(id)arg1 getAppInfoForBundleIdentifier:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae56c
- (_Bool)remoteAvailabilityServiceProvider:(id)arg1 isLocalUserAvailableForApplicationIdentifier:(id)arg2 withError:(out id *)arg3;	// IMP=0x00000000000ae54d
- (id)remoteServiceProvider:(id)arg1 publishStatusKitAvailabilityReturningError:(id *)arg2;	// IMP=0x00000000000ae4f3
- (_Bool)remoteServiceProvider:(id)arg1 userAvailabilityInActiveModeForContactHandle:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae4d4
- (id)remoteServiceProvider:(id)arg1 allowedModesForContactHandle:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae4b5
- (_Bool)remoteServiceProvider:(id)arg1 syncModeConfigurationsReturningError:(id *)arg2;	// IMP=0x00000000000ae3a0
- (id)remoteServiceProvider:(id)arg1 availableModesReturningError:(id *)arg2;	// IMP=0x00000000000ae2b0
- (id)remoteServiceProvider:(id)arg1 allModesReturningError:(id *)arg2;	// IMP=0x00000000000ae1c1
- (_Bool)remoteServiceProvider:(id)arg1 setModeConfiguration:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae1a2
- (_Bool)remoteServiceProvider:(id)arg1 removeModeConfigurationWithModeIdentifier:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae183
- (id)remoteServiceProvider:(id)arg1 modeConfigurationsWithError:(id *)arg2;	// IMP=0x00000000000ae167
- (id)remoteServiceProvider:(id)arg1 modeConfigurationForModeIdentifier:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae148
- (void)remoteServiceProvider:(id)arg1 didChangeFocusStatusSharingSettingForApplicationIdentifier:(id)arg2;	// IMP=0x00000000000ae0a5
- (_Bool)remoteServiceProvider:(id)arg1 setPairSyncPreferenceEnabled:(_Bool)arg2 withError:(id *)arg3;	// IMP=0x00000000000ae087
- (unsigned long long)remoteServiceProvider:(id)arg1 getPairSyncStateReturningError:(id *)arg2;	// IMP=0x00000000000ae06e
- (_Bool)remoteServiceProvider:(id)arg1 setCloudSyncPreferenceEnabled:(_Bool)arg2 withError:(id *)arg3;	// IMP=0x00000000000adbab
- (unsigned long long)remoteServiceProvider:(id)arg1 getCloudSyncStateReturningError:(id *)arg2;	// IMP=0x00000000000adb92
- (_Bool)remoteServiceProvider:(id)arg1 getPreventAutoReplyReturningError:(id *)arg2;	// IMP=0x00000000000adb76
- (_Bool)remoteServiceProvider:(id)arg1 setPreventAutoReply:(_Bool)arg2 withError:(id *)arg3;	// IMP=0x00000000000adb58
- (void)pairedDeviceStateMonitor:(id)arg1 cloudPairingChangedFromDevices:(id)arg2 toDevices:(id)arg3;	// IMP=0x00000000000ad896
- (void)pairedDeviceStateMonitor:(id)arg1 pairingChangedFromDevice:(id)arg2 toDevice:(id)arg3;	// IMP=0x00000000000ad6b9
- (void)modeConfigurationManager:(id)arg1 didModifyExceptionsForContacts:(id)arg2 forModeConfiguration:(id)arg3;	// IMP=0x00000000000ad664
- (void)modeConfigurationManager:(id)arg1 didUpdateAvailableModes:(id)arg2;	// IMP=0x00000000000acee6
- (void)settingsManager:(id)arg1 didReceiveUpdatedSyncSettings:(id)arg2;	// IMP=0x00000000000acd4c
- (void)settingsManager:(id)arg1 didReceiveUpdatedScheduleSettings:(id)arg2;	// IMP=0x00000000000acc06
- (void)settingsManager:(id)arg1 didReceiveUpdatedPhoneCallBypassSettings:(id)arg2;	// IMP=0x00000000000acb1d
- (void)settingsManager:(id)arg1 didReceiveUpdatedBehaviorSettings:(id)arg2;	// IMP=0x00000000000ac9eb
- (id)scheduleSettingsByModeIdentifierForScheduleManager:(id)arg1;	// IMP=0x00000000000ac9d9
- (void)syncManager:(id)arg1 didReceiveUpdatedScheduleSettings:(id)arg2;	// IMP=0x00000000000ac907
- (void)syncManager:(id)arg1 didReceiveUpdatedPhoneCallBypassSettings:(id)arg2;	// IMP=0x00000000000ac660
- (id)scheduleSettingsForSyncManager:(id)arg1;	// IMP=0x00000000000ac5bc
- (id)phoneCallBypassSettingsForSyncManager:(id)arg1;	// IMP=0x00000000000ac478
- (id)currentStateForLegacyAssertionSyncManager:(id)arg1;	// IMP=0x00000000000ac42e
- (void)syncManager:(id)arg1 prepareForSyncToDevices:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000ac335
- (void)syncManager:(id)arg1 performModeAssertionUpdatesWithHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ac1bf
- (_Bool)isCloudSyncDisabledForSyncManager:(id)arg1;	// IMP=0x00000000000ac173
- (id)syncManager:(id)arg1 scheduleSettingsForModeIdentifier:(id)arg2;	// IMP=0x00000000000ac0d1
- (id)syncManager:(id)arg1 updateOutboundModeAssertion:(id)arg2;	// IMP=0x00000000000abd29
- (id)syncManager:(id)arg1 deviceForDeviceIdentifier:(id)arg2;	// IMP=0x00000000000abc59
- (id)pairedDevicesForSyncManager:(id)arg1;	// IMP=0x00000000000abad6
- (id)currentlyActivePairedDeviceForSyncManager:(id)arg1;	// IMP=0x00000000000ababd
- (_Bool)remoteServiceProvider:(id)arg1 setScheduleSettings:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000aba14
- (id)remoteServiceProvider:(id)arg1 scheduleSettingsWithError:(id *)arg2;	// IMP=0x00000000000ab98d
- (_Bool)remoteServiceProvider:(id)arg1 setBehaviorSettings:(id)arg2 withError:(id *)arg3;	// IMP=0x00000000000ab96e
- (id)remoteServiceProvider:(id)arg1 behaviorSettingsWithError:(id *)arg2;	// IMP=0x00000000000ab896
- (_Bool)remoteServiceProvider:(id)arg1 setScreenIsShared:(_Bool)arg2 screenIsMirrored:(_Bool)arg3 withError:(id *)arg4;	// IMP=0x00000000000ab851
- (id)remoteServiceProvider:(id)arg1 currentStateWithError:(id *)arg2;	// IMP=0x00000000000ab6d7
- (id)remoteServiceProvider:(id)arg1 allActiveModeAssertionsWithError:(id *)arg2;	// IMP=0x00000000000ab576
- (id)remoteServiceProvider:(id)arg1 invalidateAllModeAssertionsTakenBeforeDate:(id)arg2 forReason:(unsigned long long)arg3 clientIdentifier:(id)arg4 error:(id *)arg5;	// IMP=0x00000000000ab395
- (id)remoteServiceProvider:(id)arg1 latestInvalidationWithClientIdentifer:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000ab2b6
- (id)_invalidateModeAssertionForClientIdentifier:(id)arg1 reason:(unsigned long long)arg2 reasonOverride:(unsigned long long)arg3 details:(id)arg4 error:(id *)arg5;	// IMP=0x00000000000ab013
- (id)remoteServiceProvider:(id)arg1 invalidateModeAssertionForClientIdentifier:(id)arg2 reason:(unsigned long long)arg3 reasonOverride:(unsigned long long)arg4 details:(id)arg5 error:(id *)arg6;	// IMP=0x00000000000aafe0
- (id)remoteServiceProvider:(id)arg1 invalidateModeAssertionWithUUID:(id)arg2 reason:(unsigned long long)arg3 reasonOverride:(unsigned long long)arg4 clientIdentifier:(id)arg5 error:(id *)arg6;	// IMP=0x00000000000aab38
- (id)remoteServiceProvider:(id)arg1 takeModeAssertionWithDetails:(id)arg2 clientIdentifier:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000aa6dc
- (id)remoteServiceProvider:(id)arg1 assertionWithClientIdentifer:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000aa5fd
- (id)remoteServiceProvider:(id)arg1 activeAssertionWithClientIdentifer:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000aa182
- (id)remoteServiceProvider:(id)arg1 resolveBehaviorForEventDetails:(id)arg2 clientDetails:(id)arg3 date:(id)arg4 error:(id *)arg5;	// IMP=0x00000000000a9fca
- (void)lifetimeMonitor:(id)arg1 registerTimerHandlerWithServiceIdentifier:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000a9fab
- (void)lifetimeMonitor:(id)arg1 setTimer:(id)arg2;	// IMP=0x00000000000a9f8f
- (void)lifetimeMonitor:(id)arg1 lifetimeDidExpireForAssertionUUIDs:(id)arg2 expirationDate:(id)arg3;	// IMP=0x00000000000a9c95
- (id)lifetimeMonitor:(id)arg1 takeModeAssertionWithDetails:(id)arg2 clientIdentifier:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000a9a24
- (void)activeAssertionsDidChangeForLifetimeMonitor:(id)arg1;	// IMP=0x00000000000a98c9
- (id)scheduleSettingsByModeIdentifierForScheduleLifetimeMonitor:(id)arg1;	// IMP=0x00000000000a98b7
- (id)locationTriggerConfigurationForLifetimeMonitor:(id)arg1;	// IMP=0x00000000000a95c1
- (id)lifetimeMonitor:(id)arg1 modeAssertionsWithLifetimeClass:(Class)arg2;	// IMP=0x00000000000a9554
- (void)keybagDidUnlockForTheFirstTime:(id)arg1;	// IMP=0x00000000000a9542
- (_Bool)eventBehaviorResolver:(id)arg1 isAvailabilityActiveForBundleIdentifier:(id)arg2;	// IMP=0x00000000000a94d0
- (id)eventBehaviorResolver:(id)arg1 configurationForModeIdentifier:(id)arg2;	// IMP=0x00000000000a941a
- (id)eventBehaviorResolver:(id)arg1 bypassSettingsForClientIdentifier:(id)arg2;	// IMP=0x00000000000a935b
- (unsigned long long)currentUILockStateForEventBehaviorResolver:(id)arg1;	// IMP=0x00000000000a9349
- (id)currentStateForEventBehaviorResolver:(id)arg1;	// IMP=0x00000000000a92ff
- (_Bool)_setLostModeState:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x00000000000a9283
- (_Bool)setUILockState:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x00000000000a926e
- (void)_handleSignificantTimeChange;	// IMP=0x00000000000a91a0
- (void)resume;	// IMP=0x00000000000a913f
- (id)init;	// IMP=0x00000000000a7fa8
- (id)triggerManager:(id)arg1 latestInvalidationWithClientIdentifer:(id)arg2 error:(id *)arg3;	// IMP=0x000000000000e9be
- (id)triggerManager:(id)arg1 invalidateModeAssertionWithUUID:(id)arg2 reason:(unsigned long long)arg3 reasonOverride:(unsigned long long)arg4 clientIdentifier:(id)arg5 error:(id *)arg6;	// IMP=0x000000000000e711
- (id)triggerManager:(id)arg1 takeModeAssertionWithDetails:(id)arg2 clientIdentifier:(id)arg3 error:(id *)arg4;	// IMP=0x000000000000e48c
- (id)triggerManager:(id)arg1 assertionsWithClientIdentifer:(id)arg2 error:(id *)arg3;	// IMP=0x000000000000e3b9
- (id)triggerManager:(id)arg1 performModeAssertionUpdatesWithHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000000e3a2
- (id)appForegroundTriggerConfigurationForAppForegroundTriggerManager:(id)arg1;	// IMP=0x0000000000084f75
- (id)drivingModeForDrivingTriggerManager:(id)arg1;	// IMP=0x0000000000085234
- (id)gamingModeForGamingTriggerManager:(id)arg1;	// IMP=0x000000000008555c
- (id)mindfulnessModeForMindfulnessTriggerManager:(id)arg1;	// IMP=0x000000000008585f
- (id)sleepingModeForSleepingTriggerManager:(id)arg1;	// IMP=0x0000000000085b62
- (id)modesSupportingSmartEntryForSmartTriggerManager:(id)arg1;	// IMP=0x0000000000085e65
- (void)setWorkoutTriggerEnabled:(_Bool)arg1 forWorkoutTriggerManager:(id)arg2;	// IMP=0x0000000000086427
- (id)createWorkoutModeForWorkoutTriggerManager:(id)arg1;	// IMP=0x0000000000086415
- (id)workoutModeForWorkoutTriggerManager:(id)arg1;	// IMP=0x0000000000086159
- (void)globalConfigurationManager:(id)arg1 didUpdatePreventAutoReplySetting:(_Bool)arg2;	// IMP=0x00000000000a7f8d
- (void)globalConfigurationManager:(id)arg1 didUpdatePhoneCallBypassSettings:(id)arg2;	// IMP=0x00000000000a7ea4

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

