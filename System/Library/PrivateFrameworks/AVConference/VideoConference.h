//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <AVConference/GKNATObserverDelegate-Protocol.h>
#import <AVConference/VCAudioIODelegate-Protocol.h>
#import <AVConference/VCAudioIOSink-Protocol.h>
#import <AVConference/VCAudioIOSource-Protocol.h>
#import <AVConference/VCAudioPowerLevelMonitorDelegate-Protocol.h>
#import <AVConference/VCCallSessionDelegate-Protocol.h>
#import <AVConference/VCMomentTransportDelegate-Protocol.h>
#import <AVConference/VCVideoCaptureClient-Protocol.h>
#import <AVConference/VCVideoSink-Protocol.h>

@class GKNATObserver, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSObject, NSString, VCAudioIO, VCAudioPowerLevelMonitor, VCAudioPowerSpectrumSource, VCCallSession, VCMoments, VCVideoRule, VideoConferenceManager;
@protocol OS_dispatch_queue, VideoConferenceChannelQualityDelegate, VideoConferenceDelegate, VideoConferenceSpeakingDelegate;

@interface VideoConference <VCCallSessionDelegate, VCVideoSink, VCVideoCaptureClient, GKNATObserverDelegate, VCAudioIOSource, VCAudioIOSink, VCAudioIODelegate, VCAudioPowerLevelMonitorDelegate, VCMomentTransportDelegate>
{
    int _clientPid;	// 16 = 0x10
    id delegate;	// 24 = 0x18
    id _captionsDelegate;	// 32 = 0x20
    VCAudioIO *_audioIO;	// 40 = 0x28
    struct opaqueVCAudioBufferList *_sourceBuffer;	// 48 = 0x30
    struct opaqueVCAudioBufferList *_sinkBuffer;	// 56 = 0x38
    struct opaqueVCAudioBufferList *_sinkBufferMix;	// 64 = 0x40
    VideoConferenceManager *manager;	// 72 = 0x48
    struct _opaque_pthread_rwlock_t stateLock;	// 80 = 0x50
    NSMutableDictionary *_sessionDict;	// 280 = 0x118
    NSArray *_sessionArray;	// 288 = 0x120
    NSMutableArray *_startedSessions;	// 296 = 0x128
    _Bool outputMeteringEnabled;	// 304 = 0x130
    _Bool inputMeteringEnabled;	// 305 = 0x131
    _Bool inputFrequencyMeteringEnabled;	// 306 = 0x132
    _Bool outputFrequencyMeteringEnabled;	// 307 = 0x133
    struct opaqueVCFFTMeter *_inputFFTMeter;	// 312 = 0x138
    struct opaqueVCFFTMeter *_outputFFTMeter;	// 320 = 0x140
    float outputMeterLevel;	// 328 = 0x148
    float inputMeterLevel;	// 332 = 0x14c
    long long _inputAudioPowerSpectrumToken;	// 336 = 0x150
    long long _outputAudioPowerSpectrumToken;	// 344 = 0x158
    VCAudioPowerSpectrumSource *_inputAudioPowerSpectrumSource;	// 352 = 0x160
    VCAudioPowerSpectrumSource *_outputAudioPowerSpectrumSource;	// 360 = 0x168
    _Bool microphoneMuted;	// 368 = 0x170
    double dAudioHostTime;	// 376 = 0x178
    struct _opaque_pthread_mutex_t xRemoteLayer;	// 384 = 0x180
    struct _opaque_pthread_mutex_t xAudioTS;	// 448 = 0x1c0
    unsigned int dwAudioTS;	// 512 = 0x200
    _Bool forceNoICE;	// 516 = 0x204
    _Bool useViceroyBlobFormat;	// 517 = 0x205
    int chatMode;	// 520 = 0x208
    _Bool isFocus;	// 524 = 0x20c
    NSString *currentFocus;	// 528 = 0x210
    VCCallSession *currentFocusSession;	// 536 = 0x218
    _Bool hasMic;	// 544 = 0x220
    float conferenceVolume;	// 548 = 0x224
    NSArray *mutedPeers;	// 552 = 0x228
    NSArray *connectedPeers;	// 560 = 0x230
    unsigned int talkingPeersLimit;	// 568 = 0x238
    unsigned char speakingArray[16];	// 572 = 0x23c
    NSObject<VideoConferenceSpeakingDelegate> *speakingDelegate;	// 592 = 0x250
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;	// 600 = 0x258
    float longTerm;	// 608 = 0x260
    float shortTerm;	// 612 = 0x264
    _Bool isTalking;	// 616 = 0x268
    unsigned int talkTime;	// 620 = 0x26c
    int packetsPerBundle;	// 624 = 0x270
    CDStruct_1b6d18a9 recvRTPTimeStamp;	// 628 = 0x274
    _Bool disableVAD;	// 652 = 0x28c
    _Bool requiresWifi;	// 653 = 0x28d
    unsigned int preferredCodec;	// 656 = 0x290
    int upstreamBandwidth;	// 660 = 0x294
    int downstreamBandwidth;	// 664 = 0x298
    _Bool useRateControl;	// 668 = 0x29c
    _Bool isGKVoiceChat;	// 669 = 0x29d
    _Bool isUsingSuppression;	// 670 = 0x29e
    _Bool shouldTimeoutPackets;	// 671 = 0x29f
    unsigned char requestedCameraType;	// 672 = 0x2a0
    _Bool useCompressedConnectionData;	// 673 = 0x2a1
    NSDictionary *natTypeDictionary;	// 680 = 0x2a8
    struct _opaque_pthread_mutex_t natMutex;	// 688 = 0x2b0
    unsigned int lastSentAudioSampleTime;	// 752 = 0x2f0
    VCAudioPowerLevelMonitor *_remoteAudioPowerLevelMonitor;	// 760 = 0x2f8
    GKNATObserver *natObserver;	// 768 = 0x300
    unsigned int mostRecentStartedCall;	// 776 = 0x308
    unsigned int lastActiveCall;	// 780 = 0x30c
    _Bool _isWarmedUp;	// 784 = 0x310
    _Bool bweOperatingModeInitialized;	// 785 = 0x311
    _Bool useNewBWEMode;	// 786 = 0x312
    _Bool useActiveProbingSenderLog;	// 787 = 0x313
    _Bool useFakeLargeFrameMode;	// 788 = 0x314
    _Bool shouldPrioritizeParticipantIDForSIPInvite;	// 789 = 0x315
    _Bool shouldResumeAudio;	// 790 = 0x316
    _Bool shouldResumeVideo;	// 791 = 0x317
    unsigned int timeStampUpdateCounter;	// 792 = 0x318
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;	// 800 = 0x320
    unsigned int _transportType;	// 808 = 0x328
    int conferenceOperatingMode;	// 812 = 0x32c
    int _deviceRole;	// 816 = 0x330
    _Bool isValid;	// 820 = 0x334
    VCMoments *_vcMoments;	// 824 = 0x338
    void *_spatialMetadataEntry;	// 832 = 0x340
    unsigned int _audioChannelIndex;	// 840 = 0x348
    void *_spatialMetadata;	// 848 = 0x350
    int localFrameWidth;	// 856 = 0x358
    int localFrameHeight;	// 860 = 0x35c
    VCVideoRule *conferenceCaptureRule;	// 864 = 0x360
}

@property(retain, nonatomic) NSMutableDictionary *sessionDict; // @synthesize sessionDict=_sessionDict;
@property(readonly, nonatomic) VCMoments *vcMoments; // @synthesize vcMoments=_vcMoments;
@property(readonly, nonatomic) long long outputAudioPowerSpectrumToken; // @synthesize outputAudioPowerSpectrumToken=_outputAudioPowerSpectrumToken;
@property(readonly, nonatomic) long long inputAudioPowerSpectrumToken; // @synthesize inputAudioPowerSpectrumToken=_inputAudioPowerSpectrumToken;
@property(nonatomic) unsigned int transportType; // @synthesize transportType=_transportType;
@property(readonly) int deviceRole; // @synthesize deviceRole=_deviceRole;
@property _Bool isValid; // @synthesize isValid;
@property unsigned int lastActiveCall; // @synthesize lastActiveCall;
@property(readonly, nonatomic) VCVideoRule *conferenceCaptureRule; // @synthesize conferenceCaptureRule;
@property(nonatomic) _Bool shouldPrioritizeParticipantIDForSIPInvite; // @synthesize shouldPrioritizeParticipantIDForSIPInvite;
@property(readonly) int localFrameHeight; // @synthesize localFrameHeight;
@property(readonly) int localFrameWidth; // @synthesize localFrameWidth;
@property _Bool disableVAD; // @synthesize disableVAD;
@property unsigned int talkingPeersLimit; // @synthesize talkingPeersLimit;
@property(nonatomic) _Bool requiresWifi; // @synthesize requiresWifi;
@property(nonatomic) _Bool isGKVoiceChat; // @synthesize isGKVoiceChat;
@property(nonatomic) _Bool useCompressedConnectionData; // @synthesize useCompressedConnectionData;
@property _Bool shouldTimeoutPackets; // @synthesize shouldTimeoutPackets;
@property(nonatomic) _Bool isUsingSuppression; // @synthesize isUsingSuppression;
@property(nonatomic) _Bool useViceroyBlobFormat; // @synthesize useViceroyBlobFormat;
@property NSObject<VideoConferenceSpeakingDelegate> *speakingDelegate; // @synthesize speakingDelegate;
@property int downstreamBandwidth; // @synthesize downstreamBandwidth;
@property int upstreamBandwidth; // @synthesize upstreamBandwidth;
@property(nonatomic) unsigned int preferredCodec; // @synthesize preferredCodec;
@property(nonatomic) int packetsPerBundle; // @synthesize packetsPerBundle;
@property(copy, nonatomic) NSString *currentFocus; // @synthesize currentFocus;
@property(nonatomic) _Bool isFocus; // @synthesize isFocus;
@property(nonatomic) int chatMode; // @synthesize chatMode;
- (void)setCanProcessAudio:(_Bool)arg1;	// IMP=0x000000000019ef4b
- (_Bool)canProcessAudio;	// IMP=0x000000000019ef39
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x000000000019ec81
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x000000000019e985
- (void)didUpdateBasebandCodec:(const struct _VCRemoteCodecInfo *)arg1;	// IMP=0x000000000019e7ac
- (void)didResumeAudioIO:(id)arg1;	// IMP=0x000000000019e61d
- (void)didSuspendAudioIO:(id)arg1;	// IMP=0x000000000019e48e
- (float)powerIntToFloat:(unsigned char)arg1;	// IMP=0x000000000019e45c
- (unsigned char)powerFloatToInt:(float)arg1;	// IMP=0x000000000019e420
- (void)setPeerProtocolVersion:(unsigned int)arg1 forCallID:(unsigned int)arg2;	// IMP=0x000000000019e388
- (void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2;	// IMP=0x000000000019e1e3
- (void)processRelayUpdate:(unsigned int)arg1 updateDict:(id)arg2 didOriginateRequest:(_Bool)arg3;	// IMP=0x000000000019dfff
- (void)processRelayRequestResponse:(unsigned int)arg1 responseDict:(id)arg2 didOriginateRequest:(_Bool)arg3;	// IMP=0x000000000019de1b
@property(getter=isSpeakerPhoneEnabled) _Bool enableSpeakerPhone;
@property float conferenceVolume;
@property _Bool hasMic;
- (void)forceNoICE:(_Bool)arg1;	// IMP=0x000000000019da17
- (id)statsForCallID:(unsigned int)arg1;	// IMP=0x000000000019d52c
- (struct CGSize)remoteFrameSizeForCallID:(unsigned int)arg1;	// IMP=0x000000000019d477
- (double)roundTripTimeForCallID:(unsigned int)arg1;	// IMP=0x000000000019d3f1
- (double)localPacketLossRateForCallID:(unsigned int)arg1;	// IMP=0x000000000019d36b
- (double)remotePacketLossRateForCallID:(unsigned int)arg1;	// IMP=0x000000000019d2e1
- (double)remoteBitrateForCallID:(unsigned int)arg1;	// IMP=0x000000000019d24a
- (double)remoteFramerateForCallID:(unsigned int)arg1;	// IMP=0x000000000019d1b3
- (double)localBitrateForCallID:(unsigned int)arg1;	// IMP=0x000000000019d11c
- (double)localFramerateForCallID:(unsigned int)arg1;	// IMP=0x000000000019d085
@property(nonatomic, getter=isMicrophoneMuted) _Bool microphoneMuted;
- (void)setCallReportProtobuf:(unsigned int)arg1 withProtobufData:(id)arg2 forMetricID:(long long)arg3;	// IMP=0x000000000019d02c
- (void)setCallReport:(unsigned int)arg1 withReport:(id)arg2;	// IMP=0x000000000019cef7
- (void)remoteCancelledCallID:(unsigned int)arg1;	// IMP=0x000000000019ce27
- (void)cancelCallID:(unsigned int)arg1;	// IMP=0x000000000019cd5d
- (void)stopCallID:(unsigned int)arg1;	// IMP=0x000000000019cc90
- (void)stopAllCalls:(id)arg1;	// IMP=0x000000000019ca86
- (void)updatedConnectedPeers:(id)arg1;	// IMP=0x000000000019c8a2
- (void)updatedMutedPeers:(id)arg1 forParticipantID:(id)arg2;	// IMP=0x000000000019c6d1
@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
- (_Bool)setActive:(_Bool)arg1;	// IMP=0x000000000019c1f1
- (_Bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingInviteData:(id)arg3 isCaller:(_Bool)arg4 capabilities:(id)arg5 idsSocket:(int)arg6 destination:(id)arg7 error:(id *)arg8;	// IMP=0x000000000019bbe7
- (void)cleanupSpatialAudioForCallID:(unsigned int)arg1;	// IMP=0x000000000019bb39
- (int)setupSpatialAudioWithCallID:(unsigned int)arg1;	// IMP=0x000000000019b837
- (void)setUpAudioIO:(int)arg1 callID:(unsigned int)arg2;	// IMP=0x000000000019b500
- (_Bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingInviteData:(id)arg3 isCaller:(_Bool)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(_Bool)arg6 capabilities:(id)arg7 idsSocket:(int)arg8 destination:(id)arg9 error:(id *)arg10;	// IMP=0x000000000019b491
- (_Bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 oldCallID:(unsigned int)arg3 usingInviteData:(id)arg4 isCaller:(_Bool)arg5 relayResponseDict:(id)arg6 didOriginateRelayRequest:(_Bool)arg7 capabilities:(id)arg8 idsSocket:(int)arg9 destination:(id)arg10 error:(id *)arg11;	// IMP=0x000000000019b42a
- (int)conferenceOperatingMode;	// IMP=0x000000000019b3e6
- (void)setConferenceOperatingMode:(int)arg1;	// IMP=0x000000000019b140
- (_Bool)shouldReinitializeCallWithDuration:(double)arg1 forCallID:(unsigned int)arg2;	// IMP=0x000000000019b0cc
- (void)updateCapabilities:(id)arg1 forCallID:(unsigned int)arg2;	// IMP=0x000000000019ae81
- (void)updateCapabilities:(id)arg1 forSession:(id)arg2;	// IMP=0x000000000019abb5
- (void)setPeerReportingID:(id)arg1 sessionID:(id)arg2 callID:(unsigned int)arg3;	// IMP=0x000000000019a97c
- (void)setSessionID:(id)arg1 callID:(unsigned int)arg2;	// IMP=0x000000000019a7a8
- (void)setPeerCN:(id)arg1 callID:(unsigned int)arg2;	// IMP=0x000000000019a5df
- (_Bool)setPauseVideo:(_Bool)arg1 callID:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000019a5d7
- (_Bool)setPauseAudio:(_Bool)arg1 callID:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000019a3c0
- (void)setSendAudio:(_Bool)arg1 forCallID:(unsigned int)arg2;	// IMP=0x000000000019a32b
- (_Bool)shouldSendAudioForCallID:(unsigned int)arg1;	// IMP=0x000000000019a2a2
- (_Bool)getIsAudioPaused:(_Bool *)arg1 callID:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000019a18f
- (_Bool)getIsVideoPaused:(_Bool *)arg1 callID:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000019a187
- (void)didReceiveCaptions:(id)arg1 remoteClient:(unsigned int)arg2;	// IMP=0x000000000019a181
- (void)vcAudioPowerLevelMonitor:(id)arg1 isAudioBelowThreshold:(_Bool)arg2;	// IMP=0x000000000019a108
- (void)moments:(id)arg1 shouldProcessRequest:(id)arg2 recipientID:(id)arg3;	// IMP=0x0000000000199f6f
- (void)processRemoteIPChange:(id)arg1 callID:(unsigned int)arg2;	// IMP=0x0000000000199eb5
- (id)callMetadataForCallID:(unsigned int)arg1;	// IMP=0x0000000000199e2c
- (void)notifyDelegateOfLocalVariablesChange;	// IMP=0x0000000000199cba
- (int)natTypeForCallSessions:(const char *)arg1;	// IMP=0x0000000000199b17
- (id)inviteDataForParticipantID:(id)arg1 callID:(unsigned int *)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id *)arg5;	// IMP=0x00000000001993f0
- (id)connectionBlobForParticipantID:(id)arg1 callID:(unsigned int *)arg2 error:(id *)arg3;	// IMP=0x00000000001993b2
- (void)connectionBlobForParticipantID:(id)arg1 callID:(unsigned int)arg2 block:(CDUnknownBlockType)arg3 queue:(id)arg4 caller:(id)arg5;	// IMP=0x00000000001993ac
- (void)inviteDataForParticipantID:(id)arg1 callID:(unsigned int)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(unsigned long long)arg4 block:(CDUnknownBlockType)arg5 queue:(id)arg6 caller:(id)arg7;	// IMP=0x00000000001993a6
- (void)cleanupQueues;	// IMP=0x00000000001993a0
@property(readonly, nonatomic) float inputMeterLevel;
@property(readonly, nonatomic) float outputMeterLevel;
@property(nonatomic, getter=isInputMeteringEnabled) _Bool inputMeteringEnabled;
@property(nonatomic, getter=isOutputFrequencyMeteringEnabled) _Bool outputFrequencyMeteringEnabled;
@property(nonatomic, getter=isInputFrequencyMeteringEnabled) _Bool inputFrequencyMeteringEnabled;
@property(nonatomic, getter=isOutputMeteringEnabled) _Bool outputMeteringEnabled;
@property(nonatomic) NSObject<VideoConferenceDelegate> *delegate;
- (double)networkQualityForCallID:(unsigned int)arg1;	// IMP=0x0000000000198e3f
- (double)packetLossRateForCallID:(unsigned int)arg1;	// IMP=0x0000000000198db6
- (int)natType;	// IMP=0x0000000000198cb3
- (void)setupNATObserver;	// IMP=0x000000000019897b
- (void)warmupForCall;	// IMP=0x0000000000198795
- (void)sendData:(id)arg1 toCallID:(unsigned int)arg2 encrypted:(_Bool)arg3;	// IMP=0x00000000001986f0
- (void)sendARPLData:(id)arg1 toCallID:(unsigned int)arg2;	// IMP=0x0000000000198511
- (void)cleanupManager;	// IMP=0x00000000001984f1
- (id)newSessionWithDeviceRole:(int)arg1 reportingHierarchyToken:(id)arg2;	// IMP=0x0000000000198159
- (unsigned int)initializeNewCallWithDeviceRole:(int)arg1 reportingHierarchyToken:(id)arg2;	// IMP=0x0000000000198075
- (unsigned int)initializeNewCallWithDeviceRole:(int)arg1;	// IMP=0x0000000000198061
- (void)dealloc;	// IMP=0x0000000000197b8e
- (id)initWithClientPid:(int)arg1;	// IMP=0x00000000001974b7
- (int)pullDecodedMeshMode:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000001a13a1
- (int)pullDecodedAsFocusClient:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000001a124f
- (int)pullDecodedAsFocus:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000001a0e8e
- (_Bool)recvSamplesForSession:(id)arg1 sampleBuffer:(struct opaqueVCAudioBufferList *)arg2;	// IMP=0x00000000001a0c14
- (void)updateMeters:(unsigned short)arg1;	// IMP=0x00000000001a0b6d
- (void)updateMeter:(unsigned char)arg1 forParticipant:(id)arg2 atIndex:(unsigned int)arg3;	// IMP=0x00000000001a0b08
- (void)captureMeshMode:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000001a082f
- (void)updateAudioTimestampsForSession:(id)arg1 withNewSampleTime:(unsigned int)arg2 hostTime:(double)arg3 numSamples:(int)arg4;	// IMP=0x00000000001a0507
- (void)captureAsFocusClient:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x00000000001a03ba
- (void)captureAsFocus:(struct opaqueVCAudioBufferList *)arg1;	// IMP=0x000000000019fc5d
- (void)calculateMixingArrays:(unsigned int *)arg1 talkingMask:(unsigned int)arg2;	// IMP=0x000000000019f7fd
- (unsigned int)calculateTalkingMaskAtTimeStamp:(unsigned int)arg1;	// IMP=0x000000000019f399
- (unsigned int)pruneQuietestPeers:(unsigned int)arg1 talking:(unsigned int)arg2 mask:(unsigned int)arg3 meters:(char *)arg4;	// IMP=0x000000000019f33f
- (_Bool)updateSpeaking:(unsigned int)arg1 timeStamp:(unsigned int)arg2;	// IMP=0x000000000019f1fc
- (int)sipCallbackNotification:(int)arg1 callID:(unsigned int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void *)arg5 confIndex:(int *)arg6;	// IMP=0x00000000001a176a
- (int)stateForCallID:(unsigned int)arg1;	// IMP=0x00000000001a296d
- (id)sessionForIncomingParticipantID:(id)arg1;	// IMP=0x00000000001a26de
- (id)loopbackSessionWaitingForSIPInvite;	// IMP=0x00000000001a2546
- (_Bool)hasSessionWaitingForSIPInvite;	// IMP=0x00000000001a24fa
- (id)sessionForSourceDestinationInfo:(struct tagVCSourceDestinationInfo *)arg1;	// IMP=0x00000000001a2263
- (_Bool)conferenceMatchesSourceDestinationInfo:(struct tagVCSourceDestinationInfo *)arg1;	// IMP=0x00000000001a2053
- (id)sessionForParticipantID:(id)arg1;	// IMP=0x00000000001a1ef6
- (_Bool)matchesParticipantID:(id)arg1;	// IMP=0x00000000001a1ea4
- (id)openSessionForParticipant:(id)arg1;	// IMP=0x00000000001a1ced
- (unsigned int)callIDForOpenSessionWithParticipantID:(id)arg1;	// IMP=0x00000000001a1c6d
- (_Bool)matchesOpenSessionForParticipantID:(id)arg1;	// IMP=0x00000000001a1c1b
- (_Bool)matchesCallID:(unsigned int)arg1;	// IMP=0x00000000001a1baa
- (void)markUnfinishedSessions;	// IMP=0x00000000001a3b30
- (_Bool)setPauseVideo:(_Bool)arg1;	// IMP=0x00000000001a3962
- (_Bool)setPauseAudio:(_Bool)arg1;	// IMP=0x00000000001a3570
- (void)cleanupSession:(id)arg1 didRemoteCancel:(_Bool)arg2;	// IMP=0x00000000001a31ec
- (void)threadSafeCleanupSession:(id)arg1;	// IMP=0x00000000001a306b
- (void)defaultCleanupSession:(id)arg1;	// IMP=0x00000000001a2f8d
- (void)cleanupProc:(id)arg1;	// IMP=0x00000000001a2efc
- (void)cleanupSession:(id)arg1 withDelay:(unsigned long long)arg2;	// IMP=0x00000000001a2e22
- (void)cancelCallID:(unsigned int)arg1 error:(id)arg2;	// IMP=0x00000000001a2c52
- (void)stopCallID:(unsigned int)arg1 didRemoteCancel:(_Bool)arg2 error:(id)arg3;	// IMP=0x00000000001a2a3e
- (void)unlock;	// IMP=0x00000000001a2a2d
- (void)rdlock;	// IMP=0x00000000001a2a1c
- (int)tryrdlock;	// IMP=0x00000000001a2a0b
- (void)wrlock;	// IMP=0x00000000001a29fa
- (void)session:(id)arg1 didReceiveMomentsRequest:(id)arg2;	// IMP=0x00000000001a6b1f
- (unsigned int)momentsCapabilitiesWithNegotiationBlobMomentsSettings_Capabilities:(int)arg1;	// IMP=0x00000000001a6b01
- (void)session:(id)arg1 setMomentsCapabilities:(unsigned int)arg2 imageType:(int)arg3 videoCodec:(int)arg4;	// IMP=0x00000000001a6a9a
- (struct AudioStreamBasicDescription)audioIOFormat;	// IMP=0x00000000001a6a59
- (void)session:(id)arg1 setRemoteBasebandCodecType:(unsigned int)arg2 sampleRate:(double)arg3;	// IMP=0x00000000001a6a3a
- (void)session:(id)arg1 stopAudioWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000001a6847
- (void)session:(id)arg1 startAudioWithFarEndVersionInfo:(struct VoiceIOFarEndVersionInfo *)arg2 internalFrameFormat:(const struct tagVCAudioFrameFormat *)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000001a64ff
- (void)session:(id)arg1 changeVideoRulesToCaptureRule:(id)arg2 encodeRule:(id)arg3 featureListString:(id)arg4;	// IMP=0x00000000001a64f9
- (void)setBWEOptions:(_Bool)arg1 UseNewBWEMode:(_Bool)arg2 FakeLargeFrameMode:(_Bool)arg3 ProbingSenderLog:(_Bool)arg4;	// IMP=0x00000000001a64c9
- (void)session:(id)arg1 remoteCallingModeChanged:(unsigned int)arg2 withCallID:(unsigned int)arg3;	// IMP=0x00000000001a63dd
- (void)session:(id)arg1 localAudioEnabled:(_Bool)arg2 withCallID:(unsigned int)arg3 error:(id)arg4;	// IMP=0x00000000001a62e8
- (void)session:(id)arg1 remoteAudioEnabled:(_Bool)arg2 withCallID:(unsigned int)arg3;	// IMP=0x00000000001a61fb
- (void)didChangeLocalVariablesForSession:(id)arg1;	// IMP=0x00000000001a61e9
- (void)session:(id)arg1 didChangeRemoteScreenAttributes:(id)arg2;	// IMP=0x00000000001a60a8
- (void)session:(id)arg1 cancelRelayRequest:(id)arg2;	// IMP=0x00000000001a5fa3
- (void)session:(id)arg1 sendRelayResponse:(id)arg2;	// IMP=0x00000000001a5c26
- (void)session:(id)arg1 initiateRelayRequest:(id)arg2;	// IMP=0x00000000001a58a9
- (void)remoteVideoDidPause:(_Bool)arg1 callID:(unsigned int)arg2;	// IMP=0x00000000001a5793
- (void)remoteAudioDidPause:(_Bool)arg1 callID:(unsigned int)arg2;	// IMP=0x00000000001a567d
- (void)session:(id)arg1 didPauseVideo:(_Bool)arg2 error:(id)arg3;	// IMP=0x00000000001a5566
- (void)session:(id)arg1 didPauseAudio:(_Bool)arg2 error:(id)arg3;	// IMP=0x00000000001a5418
- (void)session:(id)arg1 isSendingAudio:(_Bool)arg2 error:(id)arg3;	// IMP=0x00000000001a5301
- (_Bool)session:(id)arg1 didStopVideoIO:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00000000001a52f9
- (_Bool)session:(id)arg1 stopVideoReceive:(id *)arg2 isPausing:(_Bool)arg3;	// IMP=0x00000000001a52f1
- (_Bool)deregisterForVideoFramesWithDeviceRole:(int)arg1;	// IMP=0x00000000001a52e9
- (_Bool)stopVideoSend:(_Bool)arg1 error:(id *)arg2;	// IMP=0x00000000001a52e1
- (_Bool)session:(id)arg1 startVideoReceive:(id *)arg2;	// IMP=0x00000000001a52d9
- (_Bool)registerForVideoFramesWithDeviceRole:(int)arg1 captureRule:(id)arg2 isUnpausing:(_Bool)arg3;	// IMP=0x00000000001a52d1
- (_Bool)session:(id)arg1 startVideoSend:(id *)arg2 captureRuleWifi:(id)arg3 captureRuleCell:(id)arg4 interface:(int)arg5 isUnpausing:(_Bool)arg6;	// IMP=0x00000000001a52c9
- (void)session:(id)arg1 didReceiveData:(id)arg2 messageType:(unsigned int)arg3 withCallID:(unsigned int)arg4;	// IMP=0x00000000001a514c
- (void)session:(id)arg1 didReceiveARPLData:(id)arg2 fromCallID:(unsigned int)arg3;	// IMP=0x00000000001a4f27
- (_Bool)session:(id)arg1 receivedRemoteFrame:(struct __CVBuffer *)arg2 atTime:(CDStruct_1b6d18a9)arg3 withScreenAttributes:(id)arg4 videoAttributes:(id)arg5 isFirstFrame:(_Bool)arg6 isVideoPaused:(_Bool)arg7;	// IMP=0x00000000001a4f1f
- (void)session:(id)arg1 didChangeVideoRule:(id)arg2;	// IMP=0x00000000001a4f19
- (void)session:(id)arg1 packMeters:(char *)arg2 withLength:(char *)arg3;	// IMP=0x00000000001a4e3c
- (void)session:(id)arg1 remoteMediaStalled:(_Bool)arg2;	// IMP=0x00000000001a4d26
- (void)session:(id)arg1 receivedNoPacketsForSeconds:(double)arg2;	// IMP=0x00000000001a4c0b
- (void)session:(id)arg1 didStopWithError:(id)arg2;	// IMP=0x00000000001a48e5
- (void)session:(id)arg1 cleanUpWithDelay:(long long)arg2 error:(id)arg3;	// IMP=0x00000000001a46ff
- (void)session:(id)arg1 didStart:(_Bool)arg2 connectionType:(unsigned int)arg3 localInterfaceType:(id)arg4 remoteInterfaceType:(id)arg5 error:(id)arg6;	// IMP=0x00000000001a3f6d
- (void)session:(id)arg1 connectionDidChangeWithLocalInterfaceType:(id)arg2 remoteInterfaceType:(id)arg3 callID:(unsigned int)arg4;	// IMP=0x00000000001a3f4b
- (void)session:(id)arg1 localIPChange:(id)arg2 withCallID:(unsigned int)arg3;	// IMP=0x00000000001a3e5d
- (void)session:(id)arg1 withCallID:(unsigned int)arg2 videoIsDegraded:(_Bool)arg3 isRemote:(_Bool)arg4;	// IMP=0x00000000001a3d67
- (void)session:(id)arg1 withCallID:(unsigned int)arg2 networkHint:(_Bool)arg3;	// IMP=0x00000000001a3c7a
- (void)sourceFrameRateDidChange:(unsigned int)arg1;	// IMP=0x00000000001a6f66
- (void)cameraAvailabilityDidChange:(_Bool)arg1;	// IMP=0x00000000001a6dfd
- (void)thermalLevelDidChange:(int)arg1;	// IMP=0x00000000001a6caa
- (void)setConferenceVisualRectangle:(struct CGRect)arg1 forCallID:(unsigned int)arg2;	// IMP=0x00000000001a6c1e
- (void)setConferenceState:(unsigned int)arg1 forCallID:(unsigned int)arg2;	// IMP=0x00000000001a6b83
- (void)shouldSendBlackFrame:(_Bool)arg1 callID:(id)arg2;	// IMP=0x00000000001a6b7d
- (void)avConferenceScreenCaptureError:(id)arg1;	// IMP=0x00000000001a6b77
- (void)avConferencePreviewError:(id)arg1;	// IMP=0x00000000001a6b71
- (_Bool)onVideoFrame:(struct opaqueCMSampleBuffer *)arg1 frameTime:(CDStruct_1b6d18a9)arg2 attribute:(CDStruct_51555cf6)arg3;	// IMP=0x00000000001a6b5d
- (_Bool)initiateResolutionChangeToWidth:(int)arg1 height:(int)arg2 rate:(int)arg3;	// IMP=0x00000000001a6b55
- (id)clientCaptureRule;	// IMP=0x00000000001a6b44
- (void)NATTypeDictionaryUpdated:(id)arg1;	// IMP=0x00000000001a714a
- (void)triggerInterfaceChange;	// IMP=0x00000000001a6f6c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

