//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <ScreenTimeCore/STSerializableMappedObject-Protocol.h>
#import <ScreenTimeCore/STUniquelySerializableManagedObject-Protocol.h>
#import <ScreenTimeCore/STVersionVectorable-Protocol.h>

@class NSData, NSDate, NSSet, NSString, STBlueprintSchedule, STBlueprintUsageLimit, STCoreDowntimeOverride, STCoreOrganization, STDowntimeConfiguration;

@interface STBlueprint <STSerializableMappedObject, STUniquelySerializableManagedObject, STVersionVectorable>
{
}

+ (id)scheduleTextWithLocale:(id)arg1 weekdayScheduleComparator:(CDUnknownBlockType)arg2 scheduleTimeGetter:(CDUnknownBlockType)arg3;	// IMP=0x0000000000013fe9
+ (id)serializableClassName;	// IMP=0x0000000000013fdc
+ (id)fetchOrCreateWithDictionaryRepresentation:(id)arg1 inContext:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000138f5
+ (id)_cemPredicateWithDowntimeOverride:(id)arg1 shouldUseGracePeriod:(_Bool)arg2 dateFormater:(id)arg3 calendar:(id)arg4;	// IMP=0x0000000000010a05
+ (_Bool)shouldUseGracePeriodForDowntimeOverride:(id)arg1 configuration:(id)arg2;	// IMP=0x0000000000010728
+ (id)_buildDeclarationsFromConfigurationsByDeclarationIdentifier:(id)arg1 predicate:(id)arg2 identifier:(id)arg3;	// IMP=0x0000000000010499
+ (id)_buildConfigurationsByDeclarationIdentifierFromBlueprint:(id)arg1 error:(id *)arg2;	// IMP=0x000000000001011a
+ (id)_buildPredicateForUnspecializedBlueprint:(id)arg1 usingDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000001002f
+ (void)_addCommonPredicatesForBlueprint:(id)arg1 toAllPredicates:(id)arg2 usingDateFormatter:(id)arg3 calendar:(id)arg4;	// IMP=0x000000000000ff06
+ (void)_addSchedulePredicatesForBlueprintScheudle:(id)arg1 toAllPredicates:(id)arg2 usingDateFormatter:(id)arg3 calendar:(id)arg4;	// IMP=0x000000000000f49a
+ (void)_addUserPredicateForBlueprint:(id)arg1 toAllPredicates:(id)arg2;	// IMP=0x000000000000f118
+ (void)_addMinimumInstallationDatePredicateForBlueprint:(id)arg1 toAllPredicates:(id)arg2 usingDateFormatter:(id)arg3;	// IMP=0x000000000000eff6
+ (void)_addExpirationPredicateForBlueprint:(id)arg1 toAllPredicates:(id)arg2 usingDateFormatter:(id)arg3;	// IMP=0x000000000000eec2
+ (id)_buildPredicateForDisablingBlueprint:(id)arg1;	// IMP=0x000000000000ed42
+ (id)_predicateForManagedUserBlueprint:(id)arg1 withDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000000ec28
+ (id)_predicateForRestrictionsBlueprint:(id)arg1 withDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000000eb0e
+ (id)_predicateForAlwaysAllowedAppsBlueprint:(id)arg1 withDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000000e9f4
+ (id)_predicateForUsageLimitOverrideBlueprint:(id)arg1 withDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000000e8da
+ (id)_predicateForUsageLimitBlueprint:(id)arg1 withDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000000daf0
+ (id)_predicateForDowntimeBlueprint:(id)arg1 withDateFormatter:(id)arg2 calendar:(id)arg3;	// IMP=0x000000000000d6b5
+ (id)blueprintIdentifierForUser:(id)arg1;	// IMP=0x000000000000d2c1
+ (id)createBlueprintWithType:(id)arg1 user:(id)arg2;	// IMP=0x000000000000d0e7
+ (id)fetchResultsRequestsForChangesToBlueprintsForUserWithDSID:(id)arg1;	// IMP=0x000000000000cdeb
+ (id)fetchResultsRequestsForChangesToBlueprints;	// IMP=0x000000000000cbd6
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)arg1 ofType:(id)arg2 withIdentifier:(id)arg3 fromOrganization:(id)arg4;	// IMP=0x000000000000caab
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)arg1 ofType:(id)arg2 fromOrganization:(id)arg3;	// IMP=0x000000000000c9a6
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)arg1 fromOrganization:(id)arg2;	// IMP=0x000000000000c8d5
+ (id)fetchRequestMatchingBlueprintsForUserWithDSID:(id)arg1 ofType:(id)arg2;	// IMP=0x000000000000c804
+ (id)_fetchRequestMatchingBlueprintsForUserWithDSID:(id)arg1;	// IMP=0x000000000000c756
+ (id)fetchRequestMatchingUnexpiredOneMoreMinuteBlueprints;	// IMP=0x000000000000c646
+ (id)fetchRequestMatchingOrphanedBlueprints;	// IMP=0x000000000000c5c9
+ (id)fetchRequestMatchingExpiredBlueprints;	// IMP=0x000000000000c4b4
+ (id)defaultAlwaysAllowBundleIDs;	// IMP=0x000000000001554e
+ (_Bool)saveAlwaysAllowListForUser:(id)arg1 withBundleIDs:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000014cf2
+ (id)simpleScheduleTimeRangeWithStartTimeComponents:(id)arg1 endTimeComponents:(id)arg2;	// IMP=0x000000000001995f
+ (id)customScheduleTimeRangeWithLocale:(id)arg1 startTimeComponents:(id)arg2 endTimeComponents:(id)arg3;	// IMP=0x0000000000019489
+ (id)keyPathsForValuesAffectingDowntimeScheduleText;	// IMP=0x0000000000018d65
+ (id)defaultEndTime;	// IMP=0x0000000000018895
+ (id)defaultStartTime;	// IMP=0x000000000001884b
+ (_Bool)_updateConfiguration:(id)arg1 withDeclaration:(id)arg2 context:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000018646
+ (id)_declarationForDowntime:(id)arg1 user:(id)arg2 configuration:(id)arg3 behaviorType:(unsigned long long)arg4 context:(id)arg5 error:(id *)arg6;	// IMP=0x00000000000183c7
+ (id)_configurationForDowntime:(id)arg1 context:(id)arg2;	// IMP=0x000000000001824c
+ (id)_declarationModeForBehaviorType:(unsigned long long)arg1;	// IMP=0x000000000001821b
+ (id)_updatedScheduleFromSchedule:(id)arg1 withStartTime:(id)arg2 endTime:(id)arg3 scheduleByWeekdayIndex:(id)arg4 context:(id)arg5;	// IMP=0x0000000000017f71
+ (id)_createDowntimeForUser:(id)arg1 organization:(id)arg2 context:(id)arg3;	// IMP=0x0000000000017d4f
+ (id)_userDSIDStringForUser:(id)arg1 context:(id)arg2;	// IMP=0x0000000000017c98
+ (id)_organizationIdentifierForUser:(id)arg1 context:(id)arg2;	// IMP=0x0000000000017c0f
+ (id)_updatedDowntimeForUser:(id)arg1 startTime:(id)arg2 endTime:(id)arg3 scheduleByWeekdayIndex:(id)arg4 enabled:(_Bool)arg5 behaviorType:(unsigned long long)arg6 error:(id *)arg7;	// IMP=0x0000000000017569
+ (_Bool)saveDowntimeForUser:(id)arg1 startTime:(id)arg2 endTime:(id)arg3 scheduleByWeekdayIndex:(id)arg4 enabled:(_Bool)arg5 behaviorType:(unsigned long long)arg6 error:(id *)arg7;	// IMP=0x00000000000171d4
+ (id)_userForUserID:(id)arg1 inContext:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000017041
+ (id)_fetchOrCreateDowntimeForUserID:(id)arg1 inContext:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000016ee0
+ (id)applyScheduleStateChange:(long long)arg1 forUserID:(id)arg2 context:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000016c5e
+ (id)applyAutomaticOnDemandDowntimeStateChange:(long long)arg1 forUserID:(id)arg2 context:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000016be0
+ (_Bool)removeFixedDurationOnDemandDowntimeForUserID:(id)arg1 context:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000016b20
+ (id)applyOnDemandDowntimeStateChange:(long long)arg1 withFixedDuration:(double)arg2 forUserID:(id)arg3 context:(id)arg4 error:(id *)arg5;	// IMP=0x0000000000016a98
+ (id)_downtimeForUser:(id)arg1 inContext:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000016434
+ (_Bool)_isStateChangeValid:(long long)arg1 forState:(long long)arg2;	// IMP=0x00000000000163f3
+ (id)downtimeConfigurationForUserID:(id)arg1 context:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000015961
+ (_Bool)disableManagedUserBlueprintForUser:(id)arg1 error:(id *)arg2;	// IMP=0x000000000001a790
+ (_Bool)deleteManagedUserBlueprintForUser:(id)arg1 error:(id *)arg2;	// IMP=0x000000000001a5e5
+ (id)createManagedUserBlueprintForUser:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000019caf
+ (_Bool)saveManagedUserBlueprintForUser:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000019b2a
+ (id)keyPathsForValuesAffectingLimitScheduleText;	// IMP=0x000000000001edba
+ (void)_createDisplayNameWithItemNames:(id)arg1 itemCount:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000001ebf4
+ (void)_addWebDomains:(id)arg1 toItemNames:(id)arg2 remainingItems:(unsigned long long)arg3 totalCount:(unsigned long long)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000001e9cc
+ (id)_getDisplayNameAndAddCategories:(id)arg1 toItemNames:(id)arg2 remainingItems:(unsigned long long *)arg3;	// IMP=0x000000000001e70b
+ (void)fetchDisplayNameForUsageLimitWithCategoryIdentifiers:(id)arg1 bundleIdentifiers:(id)arg2 webDomains:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000001e03c
+ (id)displayNameForUsageLimitWithCategoryIdentifiers:(id)arg1 bundleIdentifiers:(id)arg2 webDomains:(id)arg3;	// IMP=0x000000000001dabf
+ (id)keyPathsForValuesAffectingLimitDisplayName;	// IMP=0x000000000001d84f
+ (_Bool)deleteUsageLimitWithIdentifier:(id)arg1 user:(id)arg2 managedObjectContext:(id)arg3 error:(id *)arg4;	// IMP=0x000000000001d532
+ (_Bool)saveUsageLimitWithIdentifier:(id)arg1 user:(id)arg2 bundleIdentifiers:(id)arg3 webDomains:(id)arg4 categoryIdentifiers:(id)arg5 dailyBudgetLimit:(double)arg6 budgetLimitByWeekday:(id)arg7 enabled:(_Bool)arg8 behaviorType:(unsigned long long)arg9 error:(id *)arg10;	// IMP=0x000000000001b5e3
- (id)dictionaryRepresentation;	// IMP=0x0000000000013114
- (_Bool)updateWithDictionaryRepresentation:(id)arg1;	// IMP=0x0000000000011b5c
- (id)computeUniqueIdentifier;	// IMP=0x0000000000011ac1
- (void)didChangeValueForKey:(id)arg1;	// IMP=0x0000000000011a49
- (void)migrateToVersion2CategoriesIfNeeded;	// IMP=0x0000000000010f20
- (id)declarationsWithError:(id *)arg1;	// IMP=0x000000000000d3af
- (void)tombstone;	// IMP=0x000000000000c434
@property(readonly, copy) NSString *downtimeScheduleText;
- (id)_applyScheduleStateChange:(long long)arg1 atDate:(id)arg2 inCalendar:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000188df
- (void)_reportCoreAnalyticsEventForDowntimeOverride:(id)arg1 currentDate:(id)arg2;	// IMP=0x0000000000016cdc
- (id)applyScheduleStateChange:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000169f3
- (id)applyAutomaticOnDemandDowntimeStateChange:(long long)arg1 error:(id *)arg2;	// IMP=0x000000000001694e
- (_Bool)removeFixedDurationOnDemandDowntimeWithError:(id *)arg1;	// IMP=0x0000000000016847
- (id)applyOnDemandDowntimeStateChange:(long long)arg1 withFixedDuration:(double)arg2 error:(id *)arg3;	// IMP=0x0000000000016795
- (id)_applyAutomaticOnDemandDowntimeStateChange:(long long)arg1 atDate:(id)arg2 inCalendar:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000160d9
- (id)_applyOnDemandDowntimeStateChange:(long long)arg1 withFixedDuration:(double)arg2 atDate:(id)arg3 inCalendar:(id)arg4 error:(id *)arg5;	// IMP=0x0000000000015e84
- (id)activeOverride;	// IMP=0x0000000000015cd5
- (void)_updateActiveOverrideAfterScheduleChange;	// IMP=0x0000000000015c02
- (void)disableDowntimeForDay:(unsigned long long)arg1;	// IMP=0x0000000000015b8f
- (void)setStartTime:(id)arg1 endTime:(id)arg2 forDay:(unsigned long long)arg3;	// IMP=0x0000000000015adb
- (void)setStartTime:(id)arg1 endTime:(id)arg2;	// IMP=0x0000000000015a2a
@property(readonly, copy) STDowntimeConfiguration *downtimeConfiguration;
- (id)_downtimeConfigurationAtDate:(id)arg1 inCalendar:(id)arg2;	// IMP=0x00000000000155a1
@property(getter=isDowntimeEnabled) _Bool downtimeEnabled;
- (_Bool)permitWebFilterURL:(id)arg1 pageTitle:(id)arg2 error:(id *)arg3;	// IMP=0x000000000001ac25
- (id)_webFilterBlacklistStringsForURL:(id)arg1;	// IMP=0x000000000001aa96
@property(readonly, copy) NSString *limitScheduleText;
@property(readonly, copy) NSString *limitDisplayName;
@property(getter=isUsageLimitEnabled) _Bool usageLimitEnabled;

// Remaining properties
@property(retain, nonatomic) NSSet *configurations; // @dynamic configurations;
@property(copy, nonatomic) NSDate *creationDate; // @dynamic creationDate;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(nonatomic) _Bool enabled; // @dynamic enabled;
@property(copy, nonatomic) NSDate *expiration; // @dynamic expiration;
@property(readonly) unsigned long long hash;
@property(copy, nonatomic) NSString *identifier; // @dynamic identifier;
@property(nonatomic) _Bool invertUsageLimit; // @dynamic invertUsageLimit;
@property(nonatomic) _Bool isDirty; // @dynamic isDirty;
@property(nonatomic) _Bool isTombstoned; // @dynamic isTombstoned;
@property(nonatomic) _Bool limitEnabled; // @dynamic limitEnabled;
@property(copy, nonatomic) NSDate *minimumInstallationDate; // @dynamic minimumInstallationDate;
@property(retain, nonatomic) STCoreOrganization *organization; // @dynamic organization;
@property(retain) STCoreDowntimeOverride *override; // @dynamic override;
@property(retain, nonatomic) STBlueprintSchedule *schedule; // @dynamic schedule;
@property(readonly) Class superclass;
@property(copy, nonatomic) NSString *type; // @dynamic type;
@property(retain, nonatomic) STBlueprintUsageLimit *usageLimit; // @dynamic usageLimit;
@property(retain, nonatomic) NSSet *users; // @dynamic users;
@property(copy, nonatomic) NSData *versionVector; // @dynamic versionVector;

@end

