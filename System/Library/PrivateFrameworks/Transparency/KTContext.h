//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class KTAccountKeyServer, KTApplicationPublicKeyStore, KTContextStore, KTContextVerifier, KTLogClient, NSString, TransparencyManagedDataStore, TransparencyTranscript;

@interface KTContext : NSObject
{
    NSString *_applicationID;	// 8 = 0x8
    TransparencyTranscript *_transcript;	// 16 = 0x10
    KTApplicationPublicKeyStore *_applicationKeyStore;	// 24 = 0x18
    TransparencyManagedDataStore *_dataStore;	// 32 = 0x20
    KTContextVerifier *_verifier;	// 40 = 0x28
    KTLogClient *_logClient;	// 48 = 0x30
    KTAccountKeyServer *_accountKeyServer;	// 56 = 0x38
    KTContextStore *_contextStore;	// 64 = 0x40
}

+ (id)failedServerLoggableDatas:(id)arg1;	// IMP=0x00000000000670ca
+ (_Bool)ktCapable:(id)arg1;	// IMP=0x0000000000066f40
+ (_Bool)hasAccountMismatch:(id)arg1;	// IMP=0x0000000000066dc5
+ (id)validateEventName:(unsigned long long)arg1 application:(id)arg2;	// IMP=0x0000000000066874
- (void).cxx_destruct;	// IMP=0x0000000000093df7
@property __weak KTContextStore *contextStore; // @synthesize contextStore=_contextStore;
@property(retain) KTAccountKeyServer *accountKeyServer; // @synthesize accountKeyServer=_accountKeyServer;
@property(retain) KTLogClient *logClient; // @synthesize logClient=_logClient;
@property(retain) KTContextVerifier *verifier; // @synthesize verifier=_verifier;
@property(retain) TransparencyManagedDataStore *dataStore; // @synthesize dataStore=_dataStore;
@property(retain) KTApplicationPublicKeyStore *applicationKeyStore; // @synthesize applicationKeyStore=_applicationKeyStore;
@property(retain) TransparencyTranscript *transcript; // @synthesize transcript=_transcript;
@property(retain) NSString *applicationID; // @synthesize applicationID=_applicationID;
- (_Bool)contextShouldGossip;	// IMP=0x0000000000093c08
- (_Bool)runDutyCycleForActivity:(id)arg1;	// IMP=0x0000000000092eda
- (_Bool)checkDeferActivity:(id)arg1;	// IMP=0x0000000000092df5
- (void)handleGarbageCollection:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000092d22
- (id)copyState;	// IMP=0x0000000000092cde
- (void)clearState:(CDUnknownBlockType)arg1;	// IMP=0x0000000000092c6f
- (_Bool)ready:(id *)arg1;	// IMP=0x0000000000092b67
- (_Bool)unsupported:(id *)arg1;	// IMP=0x00000000000929f5
- (void)logFinishFailureEvent:(id)arg1 error:(id)arg2;	// IMP=0x0000000000092906
- (void)logFinishSuccessEvent:(id)arg1;	// IMP=0x000000000009283d
- (void)logStartEvent:(id)arg1;	// IMP=0x0000000000092774
- (id)initWithApplicationKeyStore:(id)arg1 dataStore:(id)arg2 logClient:(id)arg3 applicationID:(id)arg4 contextStore:(id)arg5;	// IMP=0x000000000009245c
- (void)processSTHsFromPeers:(id)arg1 verifier:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000005dcec
- (void)analyticsForTooNewLogBeginningMs:(unsigned long long)arg1 expectedLogBeginningMS:(unsigned long long)arg2 sth:(id)arg3;	// IMP=0x000000000005dbdd
- (void)analyticsForPredateLogBeginningMs:(unsigned long long)arg1 expectedLogBeginningMS:(unsigned long long)arg2 sth:(id)arg3;	// IMP=0x000000000005dacb
- (void)analyticsForParseFailure:(id)arg1;	// IMP=0x000000000005da17
- (void)analyticsForUnsupportedProtocol:(int)arg1 expected:(int)arg2 sth:(id)arg3;	// IMP=0x000000000005d906
- (void)analyticsForDecodeFailure:(id)arg1 error:(id)arg2;	// IMP=0x000000000005d852
- (id)parseSTHData:(id)arg1 error:(id *)arg2;	// IMP=0x000000000005d839
- (id)retrieveTLTSTH:(id *)arg1;	// IMP=0x000000000005d6f3
- (void)failHeadDownload:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3;	// IMP=0x000000000005d439
- (void)failHeadDownloadRecord:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3 error:(id *)arg4;	// IMP=0x000000000005c850
- (void)reportFailedRevisions:(id)arg1 failure:(id)arg2 downloadType:(unsigned long long)arg3 application:(id)arg4;	// IMP=0x000000000005c664
- (void)garbageCollectHeads:(id *)arg1;	// IMP=0x000000000005c57d
- (void)handlePendingMapHeadMMDs:(id *)arg1;	// IMP=0x000000000005c310
- (void)handlePendingHeadInclusionProofs:(id *)arg1;	// IMP=0x000000000005c294
- (void)handlePendingConsistencyProofs:(id *)arg1;	// IMP=0x000000000005c27a
- (void)handleDownloadOfType:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000005c263
- (void)handleDownloadOfType:(unsigned long long)arg1 retry:(_Bool)arg2 error:(id *)arg3;	// IMP=0x000000000005bb26
- (void)handleHeadsWithUnverifiedSignature:(id *)arg1;	// IMP=0x000000000005b89f
- (void)failExpiredSTHsForType:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000005add6
- (id)createChainOfErrorsFromSTHFailures:(id)arg1 type:(unsigned long long)arg2;	// IMP=0x000000000005ac09
- (id)createErrorFromSTHFailure:(id)arg1 underlyingError:(id)arg2;	// IMP=0x000000000005ab46
- (unsigned long long)verifyConsistencyProofDownloadRecord:(id)arg1 error:(id *)arg2;	// IMP=0x000000000005a67d
- (unsigned long long)verifyConsistencyProofDownload:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000059fcf
- (void)downloadConsistencyProof:(id *)arg1 retry:(_Bool)arg2;	// IMP=0x0000000000058ecb
- (_Bool)verifyInclusionProofDownloadRecord:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000058b49
- (_Bool)verifyInclusionProofDownload:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000584d2
- (void)downloadSTHInclusionProofs:(id *)arg1 retry:(_Bool)arg2;	// IMP=0x00000000000582ae
- (void)downloadSMHInclusionProofs:(id *)arg1 retry:(_Bool)arg2;	// IMP=0x0000000000058087
- (void)downloadInclusionProofsForRevisions:(id)arg1 downloadType:(unsigned long long)arg2 retry:(_Bool)arg3 error:(id *)arg4;	// IMP=0x00000000000575ee
- (void)failRequestDownload:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3;	// IMP=0x0000000000071a84
- (void)failRequestDownloadRecord:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3;	// IMP=0x00000000000717b1
- (void)saveRequestFailure:(id)arg1 failure:(id)arg2;	// IMP=0x00000000000716be
- (_Bool)verifyRequestDownload:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000712cd
- (void)verifyRequestDownloadRecord:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000070a7c
- (unsigned long long)downloadTypeForValidateType:(unsigned long long)arg1;	// IMP=0x0000000000070a65
- (void)handlePendingQueryRequests:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000070668
- (void)handleKTRequestDownload:(id)arg1;	// IMP=0x00000000000702d1
- (void)handleKTRequest:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 error:(id *)arg4;	// IMP=0x000000000006ff24
- (void)handleKTRequestDownload:(id)arg1 retry:(_Bool)arg2;	// IMP=0x000000000006fade
- (_Bool)failExpiredRequest:(id)arg1 error:(id)arg2;	// IMP=0x000000000006f6a5
- (id)createChainOfErrorsFromRequestFailures:(id)arg1;	// IMP=0x000000000006f522
- (id)createErrorFromRequestFailure:(id)arg1 underlyingError:(id)arg2;	// IMP=0x000000000006f45f
- (void)downloadQueryForKTRequest:(id)arg1 retry:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000006f0e9
- (unsigned long long)validateEnrollment:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id *)arg4 error:(id *)arg5;	// IMP=0x000000000006eaa6
- (unsigned long long)validateSelf:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id *)arg4 error:(id *)arg5;	// IMP=0x000000000006e463
- (unsigned long long)validatePeer:(id)arg1 queryRequest:(id)arg2 queryResponse:(id)arg3 transparentData:(id *)arg4 error:(id *)arg5;	// IMP=0x000000000006de21
- (unsigned long long)validateEnrollmentWithAnalytics:(id)arg1 transparentData:(id *)arg2 error:(id *)arg3;	// IMP=0x000000000006d7ee
- (unsigned long long)validateSelfWithAnalytics:(id)arg1 transparentData:(id *)arg2 error:(id *)arg3;	// IMP=0x000000000006d104
- (unsigned long long)validatePeerWithAnalytics:(id)arg1 transparentData:(id *)arg2 revalidate:(_Bool)arg3 error:(id *)arg4;	// IMP=0x000000000006c96f
- (unsigned long long)validatePeerWithAnalytics:(id)arg1 transparentData:(id *)arg2 error:(id *)arg3;	// IMP=0x000000000006c954
- (unsigned long long)validateEnrollment:(id)arg1 transparentData:(id *)arg2 error:(id *)arg3;	// IMP=0x000000000006be7c
- (unsigned long long)validateSelf:(id)arg1 transparentData:(id *)arg2 error:(id *)arg3;	// IMP=0x000000000006b691
- (unsigned long long)validatePeer:(id)arg1 transparentData:(id *)arg2 error:(id *)arg3;	// IMP=0x000000000006ad89
- (void)fetchQueryForKTRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000006a4df
- (id)queryRequestForKTRequest:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000069ef0
- (unsigned long long)handleVerifyInsertResponse:(id)arg1 request:(id)arg2 transparentData:(id *)arg3 error:(id *)arg4;	// IMP=0x0000000000069584
- (unsigned long long)handleVerifySelfResponse:(id)arg1 queryRequest:(id)arg2 request:(id)arg3 transparentData:(id *)arg4 error:(id *)arg5;	// IMP=0x0000000000069236
- (unsigned long long)handleVerifyPeerResponse:(id)arg1 queryRequest:(id)arg2 request:(id)arg3 transparentData:(id *)arg4 error:(id *)arg5;	// IMP=0x00000000000681e8
- (id)parseQueryRequestFromKTRequest:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000067ea1
- (id)analyticsForRequestValidation:(id)arg1 initialResult:(unsigned long long)arg2 result:(unsigned long long)arg3 failure:(id)arg4 transparentData:(id)arg5;	// IMP=0x000000000006730b
- (unsigned long long)writeResult:(unsigned long long)arg1 request:(id)arg2 proof:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000066bfa
- (void)checkInclusionProofEpoch:(id)arg1;	// IMP=0x00000000000668f4
- (void)failSMTDownload:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3;	// IMP=0x0000000000085986
- (void)failSMTDownloadRecord:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3 error:(id *)arg4;	// IMP=0x00000000000856b0
- (void)failSMTRequest:(id)arg1 failure:(id)arg2 retry:(_Bool)arg3 error:(id *)arg4;	// IMP=0x0000000000085171
- (_Bool)verifySMTDownload:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000084d5b
- (void)verifySMTDownloadRecord:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000084809
- (void)verifySMTQueryResponse:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000844d8
- (void)handleSMTsWithUnverifiedSignature:(id *)arg1;	// IMP=0x000000000008426b
- (void)handleURIsWithPendingSMTs:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000083cf5
- (void)handleSMTInclusionDownload:(id)arg1 request:(id)arg2;	// IMP=0x00000000000838f2
- (void)handleSMTInclusionDownload:(id)arg1 request:(id)arg2 retry:(_Bool)arg3;	// IMP=0x000000000008332a
- (void)downloadSMTQueryResponse:(id)arg1 retry:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000082f8a

@end

