//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <FileProviderDaemon/FPCancellable-Protocol.h>

@class FPDActionOperationQueue, FPDMoveOperation, FPDMoveWriter, FPMoveInfo, NSError, NSMutableSet;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface FPDMoveReader : NSObject <FPCancellable>
{
    FPDMoveOperation *_operation;	// 8 = 0x8
    FPMoveInfo *_info;	// 16 = 0x10
    FPDActionOperationQueue *_moveQueue;	// 24 = 0x18
    FPDMoveWriter *_writer;	// 32 = 0x20
    _Bool _startedPreflight;	// 40 = 0x28
    _Bool _finishedPreflight;	// 41 = 0x29
    _Bool _willMaterializeTargetFolder;	// 42 = 0x2a
    _Bool _isTargetFolderMaterialized;	// 43 = 0x2b
    unsigned long long _depth;	// 48 = 0x30
    NSMutableSet *_cancelledRoots;	// 56 = 0x38
    _Bool __cancelled;	// 64 = 0x40
    NSError *_error;	// 72 = 0x48
    NSObject<OS_dispatch_queue> *_queue;	// 80 = 0x50
    unsigned long long _logSection;	// 88 = 0x58
    NSObject<OS_dispatch_semaphore> *_clientUnblockSema;	// 96 = 0x60
    CDUnknownBlockType _rootPreflightCompletionBlock;	// 104 = 0x68
    CDUnknownBlockType _preflightCompletionBlock;	// 112 = 0x70
    CDUnknownBlockType _startDownloadBlock;	// 120 = 0x78
    CDUnknownBlockType _errorBlock;	// 128 = 0x80
}

+ (_Bool)_hasDiskWriterSupportForDomain:(id)arg1;	// IMP=0x0000000000045fc0
- (void).cxx_destruct;	// IMP=0x0000000000047d67
@property(copy, nonatomic) CDUnknownBlockType errorBlock; // @synthesize errorBlock=_errorBlock;
@property(copy, nonatomic) CDUnknownBlockType startDownloadBlock; // @synthesize startDownloadBlock=_startDownloadBlock;
@property(copy, nonatomic) CDUnknownBlockType preflightCompletionBlock; // @synthesize preflightCompletionBlock=_preflightCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType rootPreflightCompletionBlock; // @synthesize rootPreflightCompletionBlock=_rootPreflightCompletionBlock;
- (void)dumpStateTo:(id)arg1;	// IMP=0x0000000000047b8f
- (void)cancel;	// IMP=0x0000000000047a76
- (void)cancelRoot:(id)arg1;	// IMP=0x00000000000479fa
- (_Bool)_isRootCancelled:(id)arg1;	// IMP=0x000000000004797a
- (void)_t_unblock;	// IMP=0x00000000000478be
- (void)_t_waitForUnblock;	// IMP=0x0000000000047883
- (void)_run;	// IMP=0x00000000000472bf
- (void)_enqueueAtomsForRoot:(id)arg1;	// IMP=0x00000000000469c5
- (_Bool)_shouldUseDiskWriterToPerformMoveForItem:(id)arg1;	// IMP=0x00000000000460ad
- (_Bool)_isSinglePkgCopyForRoot:(id)arg1;	// IMP=0x0000000000045efc
- (_Bool)_isSingleMoveForRoot:(id)arg1;	// IMP=0x0000000000045a2b
- (void)_bailOutOfRoot:(id)arg1;	// IMP=0x00000000000458ae
- (_Bool)_enqueueItem:(id)arg1 forRoot:(id)arg2 atomically:(_Bool)arg3 useDiskWriter:(_Bool)arg4;	// IMP=0x00000000000455ba
- (id)_targetNameForSource:(id)arg1;	// IMP=0x00000000000454d9
- (id)_getTargetFolderFor:(id)arg1 root:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000453bb
- (_Bool)_shouldCheckFileSystemBitsForRoot:(id)arg1 targetFolderURL:(id)arg2;	// IMP=0x00000000000450e7
- (_Bool)_shouldCheckSpaceForRoot:(id)arg1 targetFolderURL:(id)arg2;	// IMP=0x0000000000044cfc
- (long long)_fileSizeBitsSupportAtPath:(id)arg1;	// IMP=0x0000000000044bfd
- (void)_getSpaceForWriteSize:(long long)arg1 atTargetPath:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000044517
- (void)_progressComputationPreflight:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000043550
- (void)_finishWithError:(id)arg1;	// IMP=0x000000000004347b
- (_Bool)_isCancelled;	// IMP=0x0000000000043446
- (void)start;	// IMP=0x00000000000431da
- (void)verifyTargetURL:(CDUnknownBlockType)arg1;	// IMP=0x0000000000042d26
- (id)initWithMoveWriter:(id)arg1 operation:(id)arg2 queue:(id)arg3;	// IMP=0x0000000000042b4c
- (id)init;	// IMP=0x0000000000042a8c

@end

