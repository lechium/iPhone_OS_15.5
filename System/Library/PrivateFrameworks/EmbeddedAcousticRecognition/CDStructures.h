//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AppLmArtifact;

struct AppLmData;

struct Artifact;

struct BasicTextSanitizer {
    CDUnknownFunctionPointerType *_vptr$TextSanitizer;
    struct shared_ptr<quasar::URegularExpressionWrapper> mUnicodeOutliers;
    struct shared_ptr<quasar::URegularExpressionWrapper> mSpecialChars;
    struct shared_ptr<quasar::URegularExpressionWrapper> mDupSpacePattern;
    struct shared_ptr<quasar::URegularExpressionWrapper> mCtrlCharsPattern;
    int state;
    struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> UTF8_MAP;
    struct unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>> unicode_map;
};

struct CommandTagger;

struct CommandTagging;

struct ContextualData;

struct ContinuousListeningConfig;

struct CustomLMBuilder;

struct CustomPronData;

struct DataFeed;

struct EARCSpeechRecognitionResultStream {
    void *ctx;
    CDUnknownFunctionPointerType DisposeContext;
    CDUnknownFunctionPointerType DidRecognizePartialResultTokens;
    CDUnknownFunctionPointerType DidFinishRecognitionWithError;
    CDUnknownFunctionPointerType DidRecognizeFinalResults;
    CDUnknownFunctionPointerType DidProcessAudioDuration;
};

struct EARContinuousListeningResultHelper;

struct G2P;

struct Geography;

struct HybridClientConfigs {
    struct map<int, std::map<std::string, double>, std::less<int>, std::allocator<std::pair<const int, std::map<std::string, double>>>> hybridEndpointerThresholds;
    struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> hybridEndpointerExtraDelayFrequency;
};

struct HybridEndpointer;

struct KeywordFinder;

struct LDContext {
    struct map<quasar::language_detector::Locale, double, std::less<quasar::language_detector::Locale>, std::allocator<std::pair<const quasar::language_detector::Locale, double>>> _field1;
    struct optional<std::set<quasar::language_detector::Locale>> _field2;
    struct optional<quasar::language_detector::Locale> _field3;
    struct optional<bool> _field4;
    struct optional<std::vector<quasar::language_detector::Locale>> _field5;
    struct optional<std::map<quasar::language_detector::Locale, double>> _field6;
    struct optional<std::map<quasar::language_detector::Locale, double>> _field7;
    struct optional<quasar::language_detector::Locale> _field8;
    struct optional<quasar::language_detector::Locale> _field9;
    struct optional<std::map<quasar::language_detector::Locale, double>> _field10;
};

struct LanguageDetector;

struct LmBuildConfig;

struct LmEvaluator;

struct LmHandle;

struct LmLoader2;

struct LmModel2;

struct LmeConfig;

struct LmeData;

struct LmeDataFactory;

struct Locale {
    basic_string_8e19b51d _field1;
    basic_string_8e19b51d _field2;
};

struct ModelLoader;

struct Munger;

struct NgramFstConfig;

struct NgramLmModel2;

struct PMBuilder;

struct PSRAudioProcessor;

struct PTree {
    int dataType;
    basic_string_8e19b51d dataValue;
    struct vector<std::pair<std::string, quasar::PTree>, std::allocator<std::pair<std::string, quasar::PTree>>> map;
    _Bool isALeaf;
};

struct Path {
    CDUnknownFunctionPointerType *_vptr$Path;
    basic_string_8e19b51d str;
};

struct PersonalizationRecipe;

struct PersonalizedLmData;

struct PhonesetMapping;

struct PronChoice;

struct RecogAudioBuffer;

struct RecogAudioBufferBase;

struct RecogResultStreamBase;

struct ResultCombiner;

struct ResultStreamWrapper;

struct SdapiTokenizer;

struct SilencePosteriorGenerator;

struct SpeakerCodeTraining;

struct SpeechITN;

struct SpeechModelInfo {
    basic_string_8e19b51d version;
    struct set<int, std::less<int>, std::allocator<int>> samplingRates;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> tasks;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> osTypes;
    basic_string_8e19b51d language;
    basic_string_8e19b51d phoneSetVersion;
    basic_string_8e19b51d acousticProfileVersion;
    struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> aceToQuasarTemplate;
    struct map<std::string, std::vector<std::string>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> quasarTemplateToAce;
    struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> quasarTemplateToEnumerationType;
    int g2pModelVersion;
    int hybridEndpointerVersion;
};

struct SpeechRecognizer;

struct SpeechRecognizerActiveConfiguration {
    struct optional<std::set<unsigned int>> _field1;
    struct optional<std::set<std::string>> _field2;
    struct optional<std::set<std::string>> _field3;
    struct optional<std::set<bool>> _field4;
    struct optional<std::set<std::string>> _field5;
};

struct SyncPSRAudioProcessor;

struct SyncSpeechRecognizer;

struct SystemConfig {
    CDUnknownFunctionPointerType *_vptr$OptionsItf;
    basic_string_8e19b51d jsonConfigFilePath;
    struct Version configFileVersion;
    struct Path configPath;
    basic_string_8e19b51d prefix;
    struct PTree pTree;
    struct SpeechModelInfo speechModelInfo;
    struct TranslationModelInfo translationModelInfo;
    struct shared_ptr<quasar::ModelLoader> modelLoader;
    struct HybridClientConfigs hybridClientConfigs;
    basic_string_8e19b51d mainModelVersion;
    struct map<std::string, bool *, std::less<std::string>, std::allocator<std::pair<const std::string, bool *>>> boolMap;
    struct map<std::string, int *, std::less<std::string>, std::allocator<std::pair<const std::string, int *>>> intMap;
    struct map<std::string, unsigned int *, std::less<std::string>, std::allocator<std::pair<const std::string, unsigned int *>>> uintMap;
    struct map<std::string, long long *, std::less<std::string>, std::allocator<std::pair<const std::string, long long *>>> int64Map;
    struct map<std::string, float *, std::less<std::string>, std::allocator<std::pair<const std::string, float *>>> floatMap;
    struct map<std::string, double *, std::less<std::string>, std::allocator<std::pair<const std::string, double *>>> doubleMap;
    struct map<std::string, std::string *, std::less<std::string>, std::allocator<std::pair<const std::string, std::string *>>> stringMap;
    struct map<std::string, std::vector<std::string>*, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>*>>> stringVecMap;
    struct map<std::string, std::vector<std::pair<std::string, std::string>>*, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::pair<std::string, std::string>>*>>> stringPairVecMap;
    struct map<std::string, std::unordered_set<std::string>*, std::less<std::string>, std::allocator<std::pair<const std::string, std::unordered_set<std::string>*>>> stringUnorderedSetMap;
    struct map<std::string, quasar::SystemConfig::Version, std::less<std::string>, std::allocator<std::pair<const std::string, quasar::SystemConfig::Version>>> paramMinVersionMap;
    struct map<std::string, quasar::SystemConfig::Version, std::less<std::string>, std::allocator<std::pair<const std::string, quasar::SystemConfig::Version>>> paramMaxVersionMap;
    struct map<std::string, std::set<std::string>, std::less<std::string>, std::allocator<std::pair<const std::string, std::set<std::string>>>> requiredParams;
    int state;
    int configType;
};

struct TextTokenizer {
    CDUnknownFunctionPointerType *_field1;
};

struct Token {
    basic_string_8e19b51d tokenName;
    unsigned int startMilliseconds;
    unsigned int endMilliseconds;
    unsigned int silStartMilliSeconds;
    float confidence;
    _Bool hasSpaceAfter;
    _Bool hasSpaceBefore;
    basic_string_8e19b51d phoneSeq;
    basic_string_8e19b51d ipaPhoneSeq;
    struct vector<std::pair<std::string, float>, std::allocator<std::pair<std::string, float>>> subwordConfidence;
    _Bool endsWithAutoPunctuation;
};

struct TokenProns {
    basic_string_8e19b51d _field1;
    struct vector<quasar::PronChoice, std::allocator<quasar::PronChoice>> _field2;
    struct vector<quasar::PronChoice, std::allocator<quasar::PronChoice>> _field3;
};

struct TranslationModelInfo {
    basic_string_8e19b51d version;
    struct set<std::string, std::less<std::string>, std::allocator<std::string>> tasks;
    struct vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string>>> languagePairs;
    struct unordered_map<std::string, std::vector<std::pair<std::string, std::string>>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::pair<std::string, std::string>>>>> taskSpecificLanguagePairs;
    struct unordered_map<std::string, quasar::TranslationPairSetting, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, quasar::TranslationPairSetting>>> pairSpecificSettings;
    struct unordered_map<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>>> taskLangPairSpecificSettings;
    struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> taskAlias;
};

struct Translator;

struct TranslatorFactory;

struct URegularExpressionWrapper;

struct Version {
    int versionMajor;
    int versionMinor;
};

struct WordPronCache;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct basic_string_view<char, std::char_traits<char>> {
    char *_field1;
    unsigned long long _field2;
};

struct map<int, std::map<std::string, double>, std::less<int>, std::allocator<std::pair<const int, std::map<std::string, double>>>> {
    struct __tree<std::__value_type<int, std::map<std::string, double>>, std::__map_value_compare<int, std::__value_type<int, std::map<std::string, double>>, std::less<int>, true>, std::allocator<std::__value_type<int, std::map<std::string, double>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<int, std::map<std::string, double>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<int, std::__value_type<int, std::map<std::string, double>>, std::less<int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<quasar::language_detector::Locale, double, std::less<quasar::language_detector::Locale>, std::allocator<std::pair<const quasar::language_detector::Locale, double>>> {
    struct __tree<std::__value_type<quasar::language_detector::Locale, double>, std::__map_value_compare<quasar::language_detector::Locale, std::__value_type<quasar::language_detector::Locale, double>, std::less<quasar::language_detector::Locale>, true>, std::allocator<std::__value_type<quasar::language_detector::Locale, double>>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<quasar::language_detector::Locale, double>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__map_value_compare<quasar::language_detector::Locale, std::__value_type<quasar::language_detector::Locale, double>, std::less<quasar::language_detector::Locale>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::string, bool *, std::less<std::string>, std::allocator<std::pair<const std::string, bool *>>> {
    struct __tree<std::__value_type<std::string, bool *>, std::__map_value_compare<std::string, std::__value_type<std::string, bool *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, bool *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, bool *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, bool *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, double *, std::less<std::string>, std::allocator<std::pair<const std::string, double *>>> {
    struct __tree<std::__value_type<std::string, double *>, std::__map_value_compare<std::string, std::__value_type<std::string, double *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, double *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, double *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, double *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, float *, std::less<std::string>, std::allocator<std::pair<const std::string, float *>>> {
    struct __tree<std::__value_type<std::string, float *>, std::__map_value_compare<std::string, std::__value_type<std::string, float *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, float *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, float *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, float *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, int *, std::less<std::string>, std::allocator<std::pair<const std::string, int *>>> {
    struct __tree<std::__value_type<std::string, int *>, std::__map_value_compare<std::string, std::__value_type<std::string, int *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, int *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> {
    struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, long long *, std::less<std::string>, std::allocator<std::pair<const std::string, long long *>>> {
    struct __tree<std::__value_type<std::string, long long *>, std::__map_value_compare<std::string, std::__value_type<std::string, long long *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, long long *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, long long *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, long long *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, quasar::SystemConfig::Version, std::less<std::string>, std::allocator<std::pair<const std::string, quasar::SystemConfig::Version>>> {
    struct __tree<std::__value_type<std::string, quasar::SystemConfig::Version>, std::__map_value_compare<std::string, std::__value_type<std::string, quasar::SystemConfig::Version>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, quasar::SystemConfig::Version>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, quasar::SystemConfig::Version>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, quasar::SystemConfig::Version>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::set<std::string>, std::less<std::string>, std::allocator<std::pair<const std::string, std::set<std::string>>>> {
    struct __tree<std::__value_type<std::string, std::set<std::string>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::set<std::string>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::set<std::string>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::set<std::string>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::set<std::string>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::string *, std::less<std::string>, std::allocator<std::pair<const std::string, std::string *>>> {
    struct __tree<std::__value_type<std::string, std::string *>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __tree<std::__value_type<std::string, std::string>, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::string>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::string>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::string>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::unordered_set<std::string>*, std::less<std::string>, std::allocator<std::pair<const std::string, std::unordered_set<std::string>*>>> {
    struct __tree<std::__value_type<std::string, std::unordered_set<std::string>*>, std::__map_value_compare<std::string, std::__value_type<std::string, std::unordered_set<std::string>*>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::unordered_set<std::string>*>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::unordered_set<std::string>*>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::unordered_set<std::string>*>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::vector<std::pair<std::string, std::string>>*, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::pair<std::string, std::string>>*>>> {
    struct __tree<std::__value_type<std::string, std::vector<std::pair<std::string, std::string>>*>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::pair<std::string, std::string>>*>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::vector<std::pair<std::string, std::string>>*>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::pair<std::string, std::string>>*>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::pair<std::string, std::string>>*>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::vector<std::string>*, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>*>>> {
    struct __tree<std::__value_type<std::string, std::vector<std::string>*>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::string>*>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::vector<std::string>*>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::string>*>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::string>*>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::vector<std::string>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> {
    struct __tree<std::__value_type<std::string, std::vector<std::string>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::string>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::vector<std::string>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::string>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::string>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>> {
    struct __tree<std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, unsigned int *, std::less<std::string>, std::allocator<std::pair<const std::string, unsigned int *>>> {
    struct __tree<std::__value_type<std::string, unsigned int *>, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned int *>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, unsigned int *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, unsigned int *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned int *>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mersenne_twister_engine<unsigned int, 32UL, 624UL, 397UL, 31UL, 2567483615U, 11UL, 4294967295U, 7UL, 2636928640U, 15UL, 4022730752U, 18UL, 1812433253U> {
    unsigned int __x_[624];
    unsigned long long __i_;
};

struct optional<bool> {
    union {
        char _field1;
        _Bool _field2;
    } _field1;
    _Bool _field2;
};

struct optional<quasar::language_detector::Locale> {
    union {
        char _field1;
        struct Locale _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::map<quasar::language_detector::Locale, double>> {
    union {
        char _field1;
        struct map<quasar::language_detector::Locale, double, std::less<quasar::language_detector::Locale>, std::allocator<std::pair<const quasar::language_detector::Locale, double>>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::set<bool>> {
    union {
        char _field1;
        struct set<bool, std::less<bool>, std::allocator<bool>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::set<quasar::language_detector::Locale>> {
    union {
        char _field1;
        struct set<quasar::language_detector::Locale, std::less<quasar::language_detector::Locale>, std::allocator<quasar::language_detector::Locale>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::set<std::string>> {
    union {
        char _field1;
        struct set<std::string, std::less<std::string>, std::allocator<std::string>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::set<unsigned int>> {
    union {
        char _field1;
        struct set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::vector<quasar::language_detector::Locale>> {
    union {
        char _field1;
        struct vector<quasar::language_detector::Locale, std::allocator<quasar::language_detector::Locale>> _field2;
    } _field1;
    _Bool _field2;
};

struct pair<std::vector<std::vector<unsigned int>>, std::vector<std::vector<std::vector<quasar::Token>>>> {
    struct vector<std::vector<unsigned int>, std::allocator<std::vector<unsigned int>>> _field1;
    struct vector<std::vector<std::vector<quasar::Token>>, std::allocator<std::vector<std::vector<quasar::Token>>>> _field2;
};

struct powerSummary {
    double total_energy;
    double ane_energy;
    double gpu_energy;
    double ecpu_energy;
    double pcpu_energy;
    double dram_energy;
    double other_energy;
    double total_power;
    double ane_power;
    double gpu_power;
    double ecpu_power;
    double pcpu_power;
    double dram_power;
    double other_power;
};

struct set<bool, std::less<bool>, std::allocator<bool>> {
    struct __tree<bool, std::less<bool>, std::allocator<bool>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<bool, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::less<bool>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<int, std::less<int>, std::allocator<int>> {
    struct __tree<int, std::less<int>, std::allocator<int>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<int>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<quasar::language_detector::Locale, std::less<quasar::language_detector::Locale>, std::allocator<quasar::language_detector::Locale>> {
    struct __tree<quasar::language_detector::Locale, std::less<quasar::language_detector::Locale>, std::allocator<quasar::language_detector::Locale>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<quasar::language_detector::Locale, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::less<quasar::language_detector::Locale>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::string, std::less<std::string>, std::allocator<std::string>> {
    struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::string, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::string>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int>> {
    struct __tree<unsigned int, std::less<unsigned int>, std::allocator<unsigned int>> {
        void *_field1;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<unsigned int, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::less<unsigned int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<EARContinuousListeningResultHelper> {
    struct EARContinuousListeningResultHelper *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const quasar::LDContext> {
    struct LDContext *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<kaldi::quasar::LmHandle> {
    struct LmHandle *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::AppLmData> {
    struct AppLmData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::ContextualData> {
    struct ContextualData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::ContinuousListeningConfig> {
    struct ContinuousListeningConfig *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<quasar::CustomPronData> {
    struct CustomPronData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::DataFeed> {
    struct DataFeed *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::LmBuildConfig> {
    struct LmBuildConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::LmEvaluator> {
    struct LmEvaluator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::LmLoader2> {
    struct LmLoader2 *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::LmModel2> {
    struct LmModel2 *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::LmeDataFactory> {
    struct LmeDataFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::ModelLoader> {
    struct ModelLoader *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::NgramFstConfig> {
    struct NgramFstConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::NgramLmModel2> {
    struct NgramLmModel2 *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::PMBuilder> {
    struct PMBuilder *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::PSRAudioProcessor> {
    struct PSRAudioProcessor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::PersonalizedLmData> {
    struct PersonalizedLmData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::PhonesetMapping> {
    struct PhonesetMapping *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::PronCache<std::string, std::vector<std::string>>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::RecogAudioBuffer> {
    struct RecogAudioBuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::RecogAudioBufferBase> {
    struct RecogAudioBufferBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::RecogResultStreamBase> {
    struct RecogResultStreamBase *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<quasar::SilencePosteriorGenerator> {
    struct SilencePosteriorGenerator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::SpeakerCodeTraining> {
    struct SpeakerCodeTraining *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::SpeechRecognizer> {
    struct SpeechRecognizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::SyncPSRAudioProcessor> {
    struct SyncPSRAudioProcessor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::SyncSpeechRecognizer> {
    struct SyncSpeechRecognizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::TextTokenizer> {
    struct TextTokenizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::Translator> {
    struct Translator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::TranslatorFactory> {
    struct TranslatorFactory *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::URegularExpressionWrapper> {
    struct URegularExpressionWrapper *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<quasar::artifact::AppLmArtifact> {
    struct AppLmArtifact *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<quasar::artifact::Artifact> {
    struct Artifact *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<SpeechITN, std::default_delete<SpeechITN>> {
    struct __compressed_pair<SpeechITN *, std::default_delete<SpeechITN>> {
        struct SpeechITN *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::CommandTagger, std::default_delete<quasar::CommandTagger>> {
    struct __compressed_pair<quasar::CommandTagger *, std::default_delete<quasar::CommandTagger>> {
        struct CommandTagger *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::CommandTagging, std::default_delete<quasar::CommandTagging>> {
    struct __compressed_pair<quasar::CommandTagging *, std::default_delete<quasar::CommandTagging>> {
        struct CommandTagging *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::CustomLMBuilder, std::default_delete<quasar::CustomLMBuilder>> {
    struct __compressed_pair<quasar::CustomLMBuilder *, std::default_delete<quasar::CustomLMBuilder>> {
        struct CustomLMBuilder *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::G2P, std::default_delete<quasar::G2P>> {
    struct __compressed_pair<quasar::G2P *, std::default_delete<quasar::G2P>> {
        struct G2P *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::Geography, std::default_delete<quasar::Geography>> {
    struct __compressed_pair<quasar::Geography *, std::default_delete<quasar::Geography>> {
        struct Geography *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::HybridEndpointer, std::default_delete<quasar::HybridEndpointer>> {
    struct __compressed_pair<quasar::HybridEndpointer *, std::default_delete<quasar::HybridEndpointer>> {
        struct HybridEndpointer *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::KeywordFinder, std::default_delete<quasar::KeywordFinder>> {
    struct __compressed_pair<quasar::KeywordFinder *, std::default_delete<quasar::KeywordFinder>> {
        struct KeywordFinder *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::LanguageDetector, std::default_delete<quasar::LanguageDetector>> {
    struct __compressed_pair<quasar::LanguageDetector *, std::default_delete<quasar::LanguageDetector>> {
        struct LanguageDetector *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::LmeConfig, std::default_delete<quasar::LmeConfig>> {
    struct __compressed_pair<quasar::LmeConfig *, std::default_delete<quasar::LmeConfig>> {
        struct LmeConfig *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::LmeData, std::default_delete<quasar::LmeData>> {
    struct __compressed_pair<quasar::LmeData *, std::default_delete<quasar::LmeData>> {
        struct LmeData *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::Munger, std::default_delete<quasar::Munger>> {
    struct __compressed_pair<quasar::Munger *, std::default_delete<quasar::Munger>> {
        struct Munger *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::PersonalizationRecipe, std::default_delete<quasar::PersonalizationRecipe>> {
    struct __compressed_pair<quasar::PersonalizationRecipe *, std::default_delete<quasar::PersonalizationRecipe>> {
        struct PersonalizationRecipe *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::ResultCombiner, std::default_delete<quasar::ResultCombiner>> {
    struct __compressed_pair<quasar::ResultCombiner *, std::default_delete<quasar::ResultCombiner>> {
        struct ResultCombiner *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> {
    struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> {
        struct TextTokenizer *__value_;
    } __ptr_;
};

struct unique_ptr<quasar::WordPronCache, std::default_delete<quasar::WordPronCache>> {
    struct __compressed_pair<quasar::WordPronCache *, std::default_delete<quasar::WordPronCache>> {
        struct WordPronCache *__value_;
    } __ptr_;
};

struct unique_ptr<sdapi::SdapiTokenizer, std::default_delete<sdapi::SdapiTokenizer>> {
    struct __compressed_pair<sdapi::SdapiTokenizer *, std::default_delete<sdapi::SdapiTokenizer>> {
        struct SdapiTokenizer *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> {
        void **_field1;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<char32_t, char32_t, std::hash<char32_t>, std::equal_to<char32_t>, std::allocator<std::pair<const char32_t, char32_t>>> {
    struct __hash_table<std::__hash_value_type<char32_t, char32_t>, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>, true>, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>, true>, std::allocator<std::__hash_value_type<char32_t, char32_t>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<char32_t, char32_t>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<char32_t, std::__hash_value_type<char32_t, char32_t>, std::hash<char32_t>, std::equal_to<char32_t>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<char32_t, std::__hash_value_type<char32_t, char32_t>, std::equal_to<char32_t>, std::hash<char32_t>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> {
    struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, double>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::string, int, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, int>>> {
    struct __hash_table<std::__hash_value_type<std::string, int>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, int>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, int>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, int>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, int>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, int>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, int>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, int>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, quasar::TranslationPairSetting, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, quasar::TranslationPairSetting>>> {
    struct __hash_table<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, quasar::TranslationPairSetting>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, quasar::TranslationPairSetting>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, quasar::TranslationPairSetting>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, quasar::TranslationPairSetting>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, quasar::TranslationPairSetting>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, quasar::TranslationPairSetting>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::string>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::unordered_map<std::string, quasar::TranslationPairSetting>>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, std::vector<std::pair<std::string, std::string>>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::pair<std::string, std::string>>>>> {
    struct __hash_table<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::pair<std::string, std::string>>>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::string, unsigned long, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, unsigned long>>> {
    struct __hash_table<std::__hash_value_type<std::string, unsigned long>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned long>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned long>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, unsigned long>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, unsigned long>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, unsigned long>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, unsigned long>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<quasar::PronChoice, std::allocator<quasar::PronChoice>> {
    struct PronChoice *_field1;
    struct PronChoice *_field2;
    struct __compressed_pair<quasar::PronChoice *, std::allocator<quasar::PronChoice>> {
        struct PronChoice *_field1;
    } _field3;
};

struct vector<quasar::SystemConfig, std::allocator<quasar::SystemConfig>> {
    struct SystemConfig *__begin_;
    struct SystemConfig *__end_;
    struct __compressed_pair<quasar::SystemConfig *, std::allocator<quasar::SystemConfig>> {
        struct SystemConfig *__value_;
    } __end_cap_;
};

struct vector<quasar::Token, std::allocator<quasar::Token>> {
    struct Token *__begin_;
    struct Token *__end_;
    struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> {
        struct Token *__value_;
    } __end_cap_;
};

struct vector<quasar::language_detector::Locale, std::allocator<quasar::language_detector::Locale>> {
    struct Locale *_field1;
    struct Locale *_field2;
    struct __compressed_pair<quasar::language_detector::Locale *, std::allocator<quasar::language_detector::Locale>> {
        struct Locale *_field1;
    } _field3;
};

struct vector<std::optional<quasar::language_detector::Locale>, std::allocator<std::optional<quasar::language_detector::Locale>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::optional<quasar::language_detector::Locale>*, std::allocator<std::optional<quasar::language_detector::Locale>>> {
        void *_field1;
    } _field3;
};

struct vector<std::pair<id<_EARLanguageModelDataSource>, float>, std::allocator<std::pair<id<_EARLanguageModelDataSource>, float>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<id<_EARLanguageModelDataSource>, float>*, std::allocator<std::pair<id<_EARLanguageModelDataSource>, float>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<std::string, float>, std::allocator<std::pair<std::string, float>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<std::string, float>*, std::allocator<std::pair<std::string, float>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<std::string, quasar::PTree>, std::allocator<std::pair<std::string, quasar::PTree>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<std::string, quasar::PTree>*, std::allocator<std::pair<std::string, quasar::PTree>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<std::string, std::string>*, std::allocator<std::pair<std::string, std::string>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::string, std::allocator<std::string>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *_field1;
    } _field3;
};

struct vector<std::vector<quasar::Token>, std::allocator<std::vector<quasar::Token>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<quasar::Token>*, std::allocator<std::vector<quasar::Token>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::vector<std::vector<quasar::Token>>, std::allocator<std::vector<std::vector<quasar::Token>>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<std::vector<quasar::Token>>*, std::allocator<std::vector<std::vector<quasar::Token>>>> {
        void *_field1;
    } _field3;
};

struct vector<std::vector<unsigned int>, std::allocator<std::vector<unsigned int>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::vector<unsigned int>*, std::allocator<std::vector<unsigned int>>> {
        void *_field1;
    } _field3;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

struct vector<void *, std::allocator<void *>> {
    void **__begin_;
    void **__end_;
    struct __compressed_pair<void **, std::allocator<void *>> {
        void **__value_;
    } __end_cap_;
};

struct weak_ptr<ResultStreamWrapper> {
    struct ResultStreamWrapper *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_8e19b51d;

typedef struct basic_string_view<char, std::char_traits<char>> {
    char *_field1;
    unsigned long long _field2;
} basic_string_view_1993c9b6;

typedef struct map<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>, std::less<std::string>, std::allocator<std::pair<const std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>> {
    struct __tree<std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_03a1181d;

typedef struct pair<std::vector<std::vector<unsigned int>>, std::vector<std::vector<std::vector<quasar::Token>>>> {
    struct vector<std::vector<unsigned int>, std::allocator<std::vector<unsigned int>>> _field1;
    struct vector<std::vector<std::vector<quasar::Token>>, std::allocator<std::vector<std::vector<quasar::Token>>>> _field2;
} pair_a9e0fe82;

typedef struct shared_ptr<EARContinuousListeningResultHelper> {
    struct EARContinuousListeningResultHelper *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_9d440e49;

typedef struct shared_ptr<const quasar::LDContext> {
    struct LDContext *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_9fadee34;

typedef struct shared_ptr<kaldi::quasar::LmHandle> {
    struct LmHandle *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_fa7bd617;

typedef struct shared_ptr<quasar::AppLmData> {
    struct AppLmData *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f52c68bb;

typedef struct shared_ptr<quasar::ContinuousListeningConfig> {
    struct ContinuousListeningConfig *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_0d963592;

typedef struct shared_ptr<quasar::CustomPronData> {
    struct CustomPronData *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d15cec97;

typedef struct shared_ptr<quasar::DataFeed> {
    struct DataFeed *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_5cf7ddf4;

typedef struct shared_ptr<quasar::LmBuildConfig> {
    struct LmBuildConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6d392393;

typedef struct shared_ptr<quasar::LmModel2> {
    struct LmModel2 *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ae20c496;

typedef struct shared_ptr<quasar::NgramFstConfig> {
    struct NgramFstConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_638ae3ea;

typedef struct shared_ptr<quasar::NgramLmModel2> {
    struct NgramLmModel2 *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_33ae5576;

typedef struct shared_ptr<quasar::PMBuilder> {
    struct PMBuilder *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_67f74a86;

typedef struct shared_ptr<quasar::PersonalizedLmData> {
    struct PersonalizedLmData *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3024e64e;

typedef struct shared_ptr<quasar::RecogAudioBufferBase> {
    struct RecogAudioBufferBase *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_809f9c31;

typedef struct shared_ptr<quasar::RecogResultStreamBase> {
    struct RecogResultStreamBase *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_5cb47a18;

typedef struct shared_ptr<quasar::SpeechRecognizer> {
    struct SpeechRecognizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_22b796d4;

typedef struct shared_ptr<quasar::TextTokenizer> {
    struct TextTokenizer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dcd14800;

typedef struct shared_ptr<quasar::artifact::AppLmArtifact> {
    struct AppLmArtifact *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_12953206;

typedef struct unique_ptr<quasar::TextTokenizer, std::default_delete<quasar::TextTokenizer>> {
    struct __compressed_pair<quasar::TextTokenizer *, std::default_delete<quasar::TextTokenizer>> {
        struct TextTokenizer *__value_;
    } __ptr_;
} unique_ptr_69213b6f;

typedef struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> {
    struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, double>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *>*> {
                void *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_2a96e01d;

typedef struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_0e047154;

typedef struct vector<quasar::Token, std::allocator<quasar::Token>> {
    struct Token *__begin_;
    struct Token *__end_;
    struct __compressed_pair<quasar::Token *, std::allocator<quasar::Token>> {
        struct Token *__value_;
    } __end_cap_;
} vector_b9be07b7;

typedef struct vector<std::optional<quasar::language_detector::Locale>, std::allocator<std::optional<quasar::language_detector::Locale>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::optional<quasar::language_detector::Locale>*, std::allocator<std::optional<quasar::language_detector::Locale>>> {
        void *_field1;
    } _field3;
} vector_442db92a;

typedef struct vector<std::string, std::allocator<std::string>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *_field1;
    } _field3;
} vector_74824a0a;

typedef struct vector<std::vector<quasar::Token>, std::allocator<std::vector<quasar::Token>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<quasar::Token>*, std::allocator<std::vector<quasar::Token>>> {
        void *__value_;
    } __end_cap_;
} vector_daa4424d;

