//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <PencilKit/PKDrawingPaletteViewDelegate-Protocol.h>
#import <PencilKit/PKPaletteViewInteractionDelegate-Protocol.h>
#import <PencilKit/PKToolPickerPopoverPresentationConfiguring-Protocol.h>
#import <PencilKit/PKToolPickerSelectionContext-Protocol.h>

@class NSArray, NSHashTable, NSMutableArray, NSString, PKDrawingPaletteView, PKPaletteHostView, PKPaletteViewInteraction, PKTool, UIViewController;
@protocol PKPaletteViewAnnotationDelegate, PKToolPickerPopoverPresentationConfiguring, PKToolPickerPrivateDelegate, PKToolPickerSelectionContext;

@interface PKToolPicker : NSObject <PKDrawingPaletteViewDelegate, PKPaletteViewInteractionDelegate, PKToolPickerPopoverPresentationConfiguring, PKToolPickerSelectionContext>
{
    NSMutableArray *_mutableTools;	// 8 = 0x8
    _Bool __showsHandwritingTool;	// 16 = 0x10
    _Bool _wasVisibleBeforeResponderChanges;	// 17 = 0x11
    _Bool _didCalculateVisibleBeforeResponderChanges;	// 18 = 0x12
    _Bool _rulerActive;	// 19 = 0x13
    _Bool _showsDrawingPolicyControls;	// 20 = 0x14
    _Bool __paletteWasCompact;	// 21 = 0x15
    _Bool __pencilInteractionEnabledWhenNotVisible;	// 22 = 0x16
    _Bool __inputViewVisible;	// 23 = 0x17
    _Bool __toolPickerVisible;	// 24 = 0x18
    _Bool __animatingToVisible;	// 25 = 0x19
    _Bool __showsPlusButton;	// 26 = 0x1a
    _Bool __wantsClearBackgroundColorInCompactSize;	// 27 = 0x1b
    _Bool __wantsUndoRedoButtonsVisibleInCompactSize;	// 28 = 0x1c
    _Bool __canShowEllipsisButtonInCompactSize;	// 29 = 0x1d
    _Bool __wantsEllipsisButtonVisibleInCompactSize;	// 30 = 0x1e
    _Bool __wantsBottomLineDividerVisibleInCompactSize;	// 31 = 0x1f
    _Bool __ignoresSafeAreaInsetsInCompactSize;	// 32 = 0x20
    _Bool __useEqualSpacingLayoutInCompactSize;	// 33 = 0x21
    _Bool __showsRuler;	// 34 = 0x22
    unsigned long long _selectionMask;	// 40 = 0x28
    PKTool *_selectedTool;	// 48 = 0x30
    NSString *_stateAutosaveName;	// 56 = 0x38
    long long _overrideUserInterfaceStyle;	// 64 = 0x40
    long long _colorUserInterfaceStyle;	// 72 = 0x48
    NSHashTable *__observers;	// 80 = 0x50
    NSHashTable *__firstRespondersForVisibleUI;	// 88 = 0x58
    PKPaletteViewInteraction *__interaction;	// 96 = 0x60
    UIViewController *__presentationController;	// 104 = 0x68
    id <PKPaletteViewAnnotationDelegate> __annotationDelegate;	// 112 = 0x70
    id <PKToolPickerPrivateDelegate> __delegate;	// 120 = 0x78
    double __interItemToolsSpacingInCompactSize;	// 128 = 0x80
    double __interItemUndoRedoButtonsSpacingInCompactSize;	// 136 = 0x88
    struct NSDirectionalEdgeInsets __edgeInsetsInCompactSize;	// 144 = 0x90
}

+ (_Bool)_canShowHandwritingTool;	// IMP=0x00000000001957e0
+ (_Bool)_textInputWantsToolPickerVisible:(id)arg1 forFirstResponder:(id)arg2;	// IMP=0x0000000000195378
+ (_Bool)_internalClassWantsToolPicker:(id)arg1 visibleForResponder:(id)arg2;	// IMP=0x0000000000194fa2
+ (id)sharedToolPickerForWindow:(id)arg1;	// IMP=0x0000000000192a55
+ (_Bool)isActiveToolPickerVisibleForWindow:(id)arg1;	// IMP=0x00000000001929fa
+ (id)activeToolPickerForWindow:(id)arg1;	// IMP=0x0000000000192806
+ (id)_windowForToolPicker:(id)arg1;	// IMP=0x000000000018f27e
+ (id)_windowSceneForToolPicker:(id)arg1;	// IMP=0x000000000018f18e
+ (id)_toolPickerForWindow:(id)arg1;	// IMP=0x000000000018ef3f
+ (void)_setPrefersPencilOnlyDrawingForiWork:(_Bool)arg1;	// IMP=0x0000000000196946
- (void).cxx_destruct;	// IMP=0x00000000001968d7
@property(nonatomic, setter=_setShowsRuler:) _Bool _showsRuler; // @synthesize _showsRuler=__showsRuler;
@property(nonatomic, setter=_setUseEqualSpacingLayoutInCompactSize:) _Bool _useEqualSpacingLayoutInCompactSize; // @synthesize _useEqualSpacingLayoutInCompactSize=__useEqualSpacingLayoutInCompactSize;
@property(nonatomic, setter=_setInterItemUndoRedoButtonsSpacingInCompactSize:) double _interItemUndoRedoButtonsSpacingInCompactSize; // @synthesize _interItemUndoRedoButtonsSpacingInCompactSize=__interItemUndoRedoButtonsSpacingInCompactSize;
@property(nonatomic, setter=_setInterItemToolsSpacingInCompactSize:) double _interItemToolsSpacingInCompactSize; // @synthesize _interItemToolsSpacingInCompactSize=__interItemToolsSpacingInCompactSize;
@property(nonatomic, setter=_setEdgeInsetsInCompactSize:) struct NSDirectionalEdgeInsets _edgeInsetsInCompactSize; // @synthesize _edgeInsetsInCompactSize=__edgeInsetsInCompactSize;
@property(nonatomic, setter=_setIgnoresSafeAreaInsetsInCompactSize:) _Bool _ignoresSafeAreaInsetsInCompactSize; // @synthesize _ignoresSafeAreaInsetsInCompactSize=__ignoresSafeAreaInsetsInCompactSize;
@property(nonatomic, setter=_setWantsBottomLineDividerVisibleInCompactSize:) _Bool _wantsBottomLineDividerVisibleInCompactSize; // @synthesize _wantsBottomLineDividerVisibleInCompactSize=__wantsBottomLineDividerVisibleInCompactSize;
@property(nonatomic, setter=_setWantsEllipsisButtonVisibleInCompactSize:) _Bool _wantsEllipsisButtonVisibleInCompactSize; // @synthesize _wantsEllipsisButtonVisibleInCompactSize=__wantsEllipsisButtonVisibleInCompactSize;
@property(readonly, nonatomic) _Bool _canShowEllipsisButtonInCompactSize; // @synthesize _canShowEllipsisButtonInCompactSize=__canShowEllipsisButtonInCompactSize;
@property(nonatomic, setter=_setWantsUndoRedoButtonsVisibleInCompactSize:) _Bool _wantsUndoRedoButtonsVisibleInCompactSize; // @synthesize _wantsUndoRedoButtonsVisibleInCompactSize=__wantsUndoRedoButtonsVisibleInCompactSize;
@property(nonatomic, setter=_setWantsClearBackgroundColorInCompactSize:) _Bool _wantsClearBackgroundColorInCompactSize; // @synthesize _wantsClearBackgroundColorInCompactSize=__wantsClearBackgroundColorInCompactSize;
@property(nonatomic, setter=_setShowsPlusButton:) _Bool _showsPlusButton; // @synthesize _showsPlusButton=__showsPlusButton;
@property(readonly, nonatomic, getter=_isAnimatingToVisible) _Bool _animatingToVisible; // @synthesize _animatingToVisible=__animatingToVisible;
@property(nonatomic) __weak id <PKToolPickerPrivateDelegate> _delegate; // @synthesize _delegate=__delegate;
@property(nonatomic, setter=_setAnnotationDelegate:) __weak id <PKPaletteViewAnnotationDelegate> _annotationDelegate; // @synthesize _annotationDelegate=__annotationDelegate;
@property(nonatomic, setter=_setPresentationController:) __weak UIViewController *_presentationController; // @synthesize _presentationController=__presentationController;
@property(nonatomic) _Bool _toolPickerVisible; // @synthesize _toolPickerVisible=__toolPickerVisible;
@property(nonatomic, getter=_isInputViewVisible, setter=_setInputViewVisible:) _Bool _inputViewVisible; // @synthesize _inputViewVisible=__inputViewVisible;
@property(nonatomic, getter=_isPencilInteractionEnabledWhenNotVisible) _Bool _pencilInteractionEnabledWhenNotVisible; // @synthesize _pencilInteractionEnabledWhenNotVisible=__pencilInteractionEnabledWhenNotVisible;
@property(nonatomic) _Bool _paletteWasCompact; // @synthesize _paletteWasCompact=__paletteWasCompact;
@property(retain, nonatomic, setter=_setInteraction:) PKPaletteViewInteraction *_interaction; // @synthesize _interaction=__interaction;
@property(retain, nonatomic) NSHashTable *_firstRespondersForVisibleUI; // @synthesize _firstRespondersForVisibleUI=__firstRespondersForVisibleUI;
@property(retain, nonatomic) NSHashTable *_observers; // @synthesize _observers=__observers;
@property(nonatomic) _Bool showsDrawingPolicyControls; // @synthesize showsDrawingPolicyControls=_showsDrawingPolicyControls;
@property(nonatomic) long long colorUserInterfaceStyle; // @synthesize colorUserInterfaceStyle=_colorUserInterfaceStyle;
@property(nonatomic) long long overrideUserInterfaceStyle; // @synthesize overrideUserInterfaceStyle=_overrideUserInterfaceStyle;
@property(copy, nonatomic) NSString *stateAutosaveName; // @synthesize stateAutosaveName=_stateAutosaveName;
@property(nonatomic, getter=isRulerActive) _Bool rulerActive; // @synthesize rulerActive=_rulerActive;
@property(retain, nonatomic) PKTool *selectedTool; // @synthesize selectedTool=_selectedTool;
@property(nonatomic) unsigned long long selectionMask; // @synthesize selectionMask=_selectionMask;
@property(nonatomic) _Bool _didCalculateVisibleBeforeResponderChanges; // @synthesize _didCalculateVisibleBeforeResponderChanges;
@property(nonatomic) _Bool _wasVisibleBeforeResponderChanges; // @synthesize _wasVisibleBeforeResponderChanges;
@property(nonatomic, setter=_setShowsHandwritingTool:) _Bool _showsHandwritingTool; // @synthesize _showsHandwritingTool=__showsHandwritingTool;
@property(readonly, nonatomic) id <PKToolPickerSelectionContext> _selectionContext;
- (void)_performPencilPreferredActionShowColorPalette;	// IMP=0x000000000019669c
- (void)_performPencilPreferredActionSwitchPrevious;	// IMP=0x000000000019665f
- (void)_performPencilPreferredActionSwitchEraser;	// IMP=0x0000000000196622
- (_Bool)_canResetToolsFrom:(id)arg1;	// IMP=0x0000000000196606
- (void)_resetTools:(id)arg1 selectedTool:(id)arg2;	// IMP=0x00000000001960aa
- (_Bool)_canRemoveTool:(id)arg1;	// IMP=0x000000000019603d
- (void)_removeTool:(id)arg1 updateUI:(_Bool)arg2;	// IMP=0x0000000000195f32
- (void)_removeTool:(id)arg1;	// IMP=0x0000000000195f1b
- (_Bool)_canInsertTool:(id)arg1;	// IMP=0x0000000000195df1
- (void)_insertTool:(id)arg1 atIndex:(unsigned long long)arg2 updateUI:(_Bool)arg3;	// IMP=0x0000000000195cf5
- (void)_insertTool:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000195cdd
- (void)_addTool:(id)arg1 updateUI:(_Bool)arg2;	// IMP=0x0000000000195c78
- (void)_addTool:(id)arg1;	// IMP=0x0000000000195c16
@property(readonly, nonatomic) NSArray *_tools;
@property(readonly, nonatomic, getter=_isHandwritingToolSelected) _Bool _handwritingToolSelected;
- (id)_handwritingTool;	// IMP=0x0000000000195b0b
@property(readonly, nonatomic) struct UIEdgeInsets layoutSceneMargins;
@property(readonly, nonatomic) unsigned long long permittedArrowDirections;
@property(readonly, nonatomic) NSArray *passthroughViews;
@property(readonly, nonatomic) __weak id <PKToolPickerPopoverPresentationConfiguring> _popoverPresentationConfiguration;
- (void)_tellDelegateToHideToolPicker;	// IMP=0x0000000000195623
- (_Bool)_internalClassesAcceptingFirstResponderContainsObject:(id)arg1;	// IMP=0x0000000000194f46
- (void)_updatePaletteUserInterfaceStyle:(long long)arg1;	// IMP=0x0000000000194f30
- (void)_updatePaletteTraitCollection:(id)arg1;	// IMP=0x0000000000194efc
@property(readonly, nonatomic) PKPaletteHostView *_paletteHostView;
- (void)_hasSeenPencilPairingUIDidChange:(id)arg1;	// IMP=0x0000000000194ed4
- (void)_recognitionLocaleIdentifierDidChange:(id)arg1;	// IMP=0x0000000000194ec2
- (void)paletteViewInteractionWillEnterForeground:(id)arg1;	// IMP=0x0000000000194eb0
- (void)paletteViewInteractionDidActivate:(id)arg1;	// IMP=0x0000000000194e7d
- (void)keyboardSceneDelegate:(id)arg1 inputViewSetVisibilityDidChange:(_Bool)arg2 includedReset:(_Bool)arg3;	// IMP=0x0000000000194d5f
- (_Bool)shouldHandlePencilInteractionWhenNotVisible:(id)arg1;	// IMP=0x0000000000194d4d
- (id)paletteViewColorPickerPopoverPresentationSourceView:(id)arg1;	// IMP=0x0000000000194c84
- (struct CGRect)paletteViewColorPickerPopoverPresentationSourceRect:(id)arg1;	// IMP=0x0000000000194bc4
- (void)paletteView:(id)arg1 didChangeColor:(id)arg2;	// IMP=0x0000000000194a22
- (void)paletteViewDidChangePosition:(id)arg1;	// IMP=0x000000000019474a
- (void)paletteViewDidToggleRuler:(id)arg1;	// IMP=0x00000000001946a6
- (void)paletteViewToolsDidChange:(id)arg1;	// IMP=0x00000000001945f8
- (void)paletteView:(id)arg1 didSelectTool:(id)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x00000000001945a1
- (_Bool)paletteView:(id)arg1 shouldChangeSelectedToolColor:(id)arg2;	// IMP=0x00000000001944f2
- (id)paletteViewUndoManager:(id)arg1;	// IMP=0x000000000019441b
- (void)paletteViewFirstResponderDidUpdate:(id)arg1;	// IMP=0x000000000019432c
- (id)paletteViewCurrentFirstResponder:(id)arg1;	// IMP=0x000000000019431a
- (id)_toolsState;	// IMP=0x0000000000194033
- (void)_saveToolPickerState;	// IMP=0x0000000000193dfb
- (_Bool)_canRestoreToolWithIdentifier:(id)arg1;	// IMP=0x0000000000193d07
- (void)_restoreToolPickerState;	// IMP=0x0000000000193673
@property(readonly, nonatomic) NSString *_paletteViewStateRestorationDefaultsKey;
- (void)dealloc;	// IMP=0x000000000019354b
- (id)init;	// IMP=0x0000000000192ce5
- (void)_enableTapInteractionForWindow:(id)arg1;	// IMP=0x0000000000192795
- (struct CGRect)frameObscuredInView:(id)arg1;	// IMP=0x0000000000192612
@property(readonly, nonatomic) long long _palettePosition;
- (_Bool)_hasToolPassingTest:(CDUnknownBlockType)arg1;	// IMP=0x000000000019224c
- (_Bool)_hasLassoTool;	// IMP=0x00000000001921ec
- (_Bool)_hasEraserTool;	// IMP=0x000000000019218c
- (_Bool)_hasHandwritingTool;	// IMP=0x000000000019212c
- (id)_paletteAccessibilityIdentifier;	// IMP=0x00000000001920da
- (void)_updateUI;	// IMP=0x00000000001915ea
- (id)_configuredPaletteViewInteractionForWindow:(id)arg1;	// IMP=0x000000000019145f
- (void)_notifyVisibilityDidChangeIsAnimationFinished:(_Bool)arg1;	// IMP=0x00000000001912a7
- (void)_setVisibleInWindow:(id)arg1 animated:(_Bool)arg2 notify:(_Bool)arg3;	// IMP=0x00000000001908ef
- (void)_setVisibleInWindow:(id)arg1;	// IMP=0x00000000001908d2
- (void)_updateToolPickerVisibility;	// IMP=0x0000000000190813
@property(readonly, nonatomic) _Bool isVisible;
@property(readonly, nonatomic) _Bool _interactionIsValid;
- (void)calculateIsVisibleBeforeResponderChangesForCurrentRunLoopIfNecessary;	// IMP=0x0000000000190357
- (_Bool)_canSelectTool:(id)arg1;	// IMP=0x0000000000190310
- (void)_notifySelectedToolDidChange;	// IMP=0x0000000000190143
- (void)_setSelectedTool:(id)arg1 saveState:(_Bool)arg2 updateUI:(_Bool)arg3;	// IMP=0x000000000018fccf
@property(readonly, nonatomic) PKDrawingPaletteView *_paletteView;
- (void)_updateVisibilityForFirstResponder:(id)arg1;	// IMP=0x000000000018fa48
- (void)setVisible:(_Bool)arg1 forFirstResponder:(id)arg2;	// IMP=0x000000000018f8bb
- (void)_saveStateIfNecessary;	// IMP=0x000000000018f87e
- (void)removeObserver:(id)arg1;	// IMP=0x000000000018f80c
- (void)addObserver:(id)arg1;	// IMP=0x000000000018f719
- (id)_currentFirstResponder;	// IMP=0x000000000018eec5

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

