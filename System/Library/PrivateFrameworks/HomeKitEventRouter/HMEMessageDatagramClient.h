//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class HMEPendingTopicsCombiner, NSObject, NSUUID;
@protocol HMEMessageDatagramClientDataSource, HMEMessageDatagramClientDelegate, HMETimer, HMETimerIntervalProvider, HMETimerProvider, OS_os_log;

@interface HMEMessageDatagramClient
{
    NSObject<OS_os_log> *_logger;	// 8 = 0x8
    _Bool _isConnected;	// 16 = 0x10
    _Bool _hasPendingRequest;	// 17 = 0x11
    _Bool _hasPendingServerChangeRequest;	// 18 = 0x12
    _Bool _dormantFetchConditionsMet;	// 19 = 0x13
    _Bool _isWaitingForFetchConditionsWhenDormant;	// 20 = 0x14
    id <HMEMessageDatagramClientDataSource> _dataSource;	// 24 = 0x18
    id <HMETimerIntervalProvider> _connectionRetryIntervalProvider;	// 32 = 0x20
    id <HMETimerProvider> _timerProvider;	// 40 = 0x28
    HMEPendingTopicsCombiner *_pendingTopicsCombiner;	// 48 = 0x30
    double _keepAliveInterval;	// 56 = 0x38
    id <HMETimer> _keepAliveTimer;	// 64 = 0x40
    id <HMETimer> _connectionRetryTimer;	// 72 = 0x48
    NSUUID *_connectedServerIdentifier;	// 80 = 0x50
    long long _connectionMode;	// 88 = 0x58
    double _dormatFetchTimerInterval;	// 96 = 0x60
    id <HMETimer> _dormantFetchTimer;	// 104 = 0x68
}

- (void).cxx_destruct;	// IMP=0x000000000000c80e
@property(nonatomic) _Bool isWaitingForFetchConditionsWhenDormant; // @synthesize isWaitingForFetchConditionsWhenDormant=_isWaitingForFetchConditionsWhenDormant;
@property(nonatomic) _Bool dormantFetchConditionsMet; // @synthesize dormantFetchConditionsMet=_dormantFetchConditionsMet;
@property(retain, nonatomic) id <HMETimer> dormantFetchTimer; // @synthesize dormantFetchTimer=_dormantFetchTimer;
@property(readonly) double dormatFetchTimerInterval; // @synthesize dormatFetchTimerInterval=_dormatFetchTimerInterval;
@property(nonatomic) long long connectionMode; // @synthesize connectionMode=_connectionMode;
@property(retain, nonatomic) NSUUID *connectedServerIdentifier; // @synthesize connectedServerIdentifier=_connectedServerIdentifier;
@property(retain, nonatomic) id <HMETimer> connectionRetryTimer; // @synthesize connectionRetryTimer=_connectionRetryTimer;
@property(retain, nonatomic) id <HMETimer> keepAliveTimer; // @synthesize keepAliveTimer=_keepAliveTimer;
@property(readonly) double keepAliveInterval; // @synthesize keepAliveInterval=_keepAliveInterval;
@property(nonatomic) _Bool hasPendingServerChangeRequest; // @synthesize hasPendingServerChangeRequest=_hasPendingServerChangeRequest;
@property(nonatomic) _Bool hasPendingRequest; // @synthesize hasPendingRequest=_hasPendingRequest;
@property(nonatomic) _Bool isConnected; // @synthesize isConnected=_isConnected;
@property(readonly) HMEPendingTopicsCombiner *pendingTopicsCombiner; // @synthesize pendingTopicsCombiner=_pendingTopicsCombiner;
@property(readonly) id <HMETimerProvider> timerProvider; // @synthesize timerProvider=_timerProvider;
@property(readonly) id <HMETimerIntervalProvider> connectionRetryIntervalProvider; // @synthesize connectionRetryIntervalProvider=_connectionRetryIntervalProvider;
@property(nonatomic) __weak id <HMEMessageDatagramClientDataSource> dataSource; // @synthesize dataSource=_dataSource;
- (_Bool)handleChangeRegistrationsWithTopicFilterAdditions:(id)arg1 removals:(id)arg2;	// IMP=0x000000000000c596
- (void)updateDormantFetchCondition:(long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000000c4df
- (void)updateConnectionMode:(long long)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000000c428
- (void)connectionCapabilityDidChange;	// IMP=0x000000000000c41e
- (void)serverDidChangeWithServerIdentifier:(id)arg1;	// IMP=0x000000000000c1db
- (void)didReceiveMessageWithEvents:(id)arg1 serverIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000000bef9
@property __weak id <HMEMessageDatagramClientDelegate> delegate;
- (id)initWithQueue:(id)arg1 timerProvider:(id)arg2 keepAliveInterval:(double)arg3 dormantFetchTimerInterval:(double)arg4 retryIntervalProvider:(id)arg5 storeReadHandle:(id)arg6 storeWriteHandle:(id)arg7 logCategory:(const char *)arg8;	// IMP=0x000000000000bcfc
- (id)initWithQueue:(id)arg1 timerProvider:(id)arg2 keepAliveInterval:(double)arg3 dormantFetchTimerInterval:(double)arg4 retryIntervalProvider:(id)arg5;	// IMP=0x000000000000bcd8

@end

