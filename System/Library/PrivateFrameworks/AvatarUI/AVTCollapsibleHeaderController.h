//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <AvatarUI/UIScrollViewDelegate-Protocol.h>

@class NSString, UIScrollView, UIView;
@protocol AVTCollapsibleHeaderControllerDelegate, UIScrollViewDelegate;

@interface AVTCollapsibleHeaderController : NSObject <UIScrollViewDelegate>
{
    _Bool _shouldResizeHeaderForScrolling;	// 8 = 0x8
    _Bool _shouldSnapToMinOrMax;	// 9 = 0x9
    _Bool _shouldOnlyExpandWhenScrollingAtEdge;	// 10 = 0xa
    _Bool _shouldPushContentOffsetOnExpandOrCollapse;	// 11 = 0xb
    _Bool _shouldCollapseOnBottomBounceScroll;	// 12 = 0xc
    UIScrollView *_scrollView;	// 16 = 0x10
    UIView *_headerView;	// 24 = 0x18
    id <AVTCollapsibleHeaderControllerDelegate> _delegate;	// 32 = 0x20
    double _minHeight;	// 40 = 0x28
    double _maxHeight;	// 48 = 0x30
    double _additionalTopContentInset;	// 56 = 0x38
    id <UIScrollViewDelegate> _scrollViewDelegate;	// 64 = 0x40
    double _scrollToCompressionMultiplier;	// 72 = 0x48
    double _expandMarginalScrollDistance;	// 80 = 0x50
    double _collapseMarginalScrollDistance;	// 88 = 0x58
    double _previousOffset;	// 96 = 0x60
    double _singleTouchOffset;	// 104 = 0x68
    unsigned long long _currentScrollDirection;	// 112 = 0x70
}

- (void).cxx_destruct;	// IMP=0x000000000001787d
@property(nonatomic) unsigned long long currentScrollDirection; // @synthesize currentScrollDirection=_currentScrollDirection;
@property(nonatomic) double singleTouchOffset; // @synthesize singleTouchOffset=_singleTouchOffset;
@property(nonatomic) double previousOffset; // @synthesize previousOffset=_previousOffset;
@property(nonatomic) _Bool shouldCollapseOnBottomBounceScroll; // @synthesize shouldCollapseOnBottomBounceScroll=_shouldCollapseOnBottomBounceScroll;
@property(nonatomic) _Bool shouldPushContentOffsetOnExpandOrCollapse; // @synthesize shouldPushContentOffsetOnExpandOrCollapse=_shouldPushContentOffsetOnExpandOrCollapse;
@property(nonatomic) double collapseMarginalScrollDistance; // @synthesize collapseMarginalScrollDistance=_collapseMarginalScrollDistance;
@property(nonatomic) double expandMarginalScrollDistance; // @synthesize expandMarginalScrollDistance=_expandMarginalScrollDistance;
@property(nonatomic) double scrollToCompressionMultiplier; // @synthesize scrollToCompressionMultiplier=_scrollToCompressionMultiplier;
@property(nonatomic) __weak id <UIScrollViewDelegate> scrollViewDelegate; // @synthesize scrollViewDelegate=_scrollViewDelegate;
@property(nonatomic) _Bool shouldOnlyExpandWhenScrollingAtEdge; // @synthesize shouldOnlyExpandWhenScrollingAtEdge=_shouldOnlyExpandWhenScrollingAtEdge;
@property(nonatomic) _Bool shouldSnapToMinOrMax; // @synthesize shouldSnapToMinOrMax=_shouldSnapToMinOrMax;
@property(nonatomic) _Bool shouldResizeHeaderForScrolling; // @synthesize shouldResizeHeaderForScrolling=_shouldResizeHeaderForScrolling;
@property(nonatomic) double additionalTopContentInset; // @synthesize additionalTopContentInset=_additionalTopContentInset;
@property(nonatomic) double maxHeight; // @synthesize maxHeight=_maxHeight;
@property(nonatomic) double minHeight; // @synthesize minHeight=_minHeight;
@property(nonatomic) id <AVTCollapsibleHeaderControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) UIView *headerView; // @synthesize headerView=_headerView;
@property(readonly, nonatomic) UIScrollView *scrollView; // @synthesize scrollView=_scrollView;
- (void)scrollViewDidEndDecelerating:(id)arg1;	// IMP=0x000000000001763c
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(_Bool)arg2;	// IMP=0x0000000000017550
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;	// IMP=0x0000000000017262
- (void)scrollViewDidScroll:(id)arg1;	// IMP=0x000000000001700c
- (id)forwardingTargetForSelector:(SEL)arg1;	// IMP=0x0000000000016f68
- (id)methodSignatureForSelector:(SEL)arg1;	// IMP=0x0000000000016ed1
- (_Bool)respondsToSelector:(SEL)arg1;	// IMP=0x0000000000016e59
- (void)updateInsetsIfNeeded;	// IMP=0x0000000000016c2c
- (struct UIEdgeInsets)updatedScrollViewInsetsFromExistingInsets:(struct UIEdgeInsets)arg1;	// IMP=0x0000000000016987
@property(readonly, nonatomic) double currentHeightForHeader;
- (void)updateHeaderSizeForGlobalHeaderHeight:(double)arg1;	// IMP=0x000000000001683e
- (double)headerHeightForContentOffset:(double)arg1 contentInset:(struct UIEdgeInsets)arg2;	// IMP=0x00000000000162cc
- (void)updateHeaderHeightToMatchScrollViewStateForScrollDirection:(unsigned long long)arg1 animated:(_Bool)arg2;	// IMP=0x00000000000160b9
- (_Bool)shouldResizeGivenScrollDirection:(unsigned long long)arg1 currentHeaderHeight:(double)arg2 targetHeaderHeight:(double)arg3;	// IMP=0x0000000000016095
- (_Bool)shouldResizeGivenMarginalScrollDistancesForScrollDirection:(unsigned long long)arg1;	// IMP=0x0000000000015fbf
- (void)scrollToTopAnimated:(_Bool)arg1;	// IMP=0x0000000000015ed9
- (struct CGPoint)topContentOffsetWithHeaderHeight:(double)arg1;	// IMP=0x0000000000015dfc
- (void)scrollToTopPreservingHeaderHeight:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000015ce2
- (void)animationDidUpdateWithDisplayLink:(id)arg1;	// IMP=0x0000000000015baa
- (void)updateHeaderForHeight:(double)arg1 withOffset:(struct CGPoint)arg2 animated:(_Bool)arg3;	// IMP=0x00000000000157dc
- (void)snapToMinMaxIfNeededAnimated:(_Bool)arg1;	// IMP=0x000000000001567e
- (void)collapseAnimated:(_Bool)arg1;	// IMP=0x0000000000015557
- (void)expandAnimated:(_Bool)arg1 withFocusRect:(struct CGRect)arg2 standardItemHeight:(double)arg3;	// IMP=0x0000000000014fe0
- (void)expandAnimated:(_Bool)arg1;	// IMP=0x0000000000014ec7
- (void)updateMinHeight:(double)arg1 maxHeight:(double)arg2 animated:(_Bool)arg3;	// IMP=0x0000000000014e3a
- (id)initWithScrollView:(id)arg1 headerView:(id)arg2 minHeight:(double)arg3 maxHeight:(double)arg4;	// IMP=0x0000000000014b22

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

