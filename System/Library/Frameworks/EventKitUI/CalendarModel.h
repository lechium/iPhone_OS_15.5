//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <EventKitUI/CalendarEventLoaderDelegate-Protocol.h>

@class CalendarEventLoader, CalendarModelSceneState, EKCalendarDate, EKEvent, EKEventStore, EKSource, NSArray, NSCalendar, NSLock, NSMutableDictionary, NSSet, NSString, _EKNotificationMonitor;
@protocol OccurrenceCacheDataSourceProtocol;

@interface CalendarModel : NSObject <CalendarEventLoaderDelegate>
{
    _Bool _modelLocked;	// 8 = 0x8
    _Bool _notificationMonitorSetUp;	// 9 = 0x9
    EKEventStore *_eventStore;	// 16 = 0x10
    CalendarEventLoader *_eventLoader;	// 24 = 0x18
    NSLock *_filterLock;	// 32 = 0x20
    NSArray *_visibleCalendars;	// 40 = 0x28
    long long _readWriteCalendarCount;	// 48 = 0x30
    NSArray *_delegateSources;	// 56 = 0x38
    long long _invitationBearingStoresExist;	// 64 = 0x40
    _EKNotificationMonitor *_notificationMonitor;	// 72 = 0x48
    id <OccurrenceCacheDataSourceProtocol> _occurrenceCacheDataSource;	// 80 = 0x50
    id <OccurrenceCacheDataSourceProtocol> _occurrenceCacheFilteredDataSource;	// 88 = 0x58
    long long _cachedFakeTodayIndex;	// 96 = 0x60
    NSMutableDictionary *_displayableAccountErrorCounts;	// 104 = 0x68
    long long _initialAccountSyncCount;	// 112 = 0x70
    _Bool _suspendSelectedDateChanges;	// 120 = 0x78
    EKCalendarDate *_suspendedSelectedDate;	// 128 = 0x80
    CalendarModelSceneState *_persistedSceneState;	// 136 = 0x88
    _Bool _autoStartNotificationMonitor;	// 144 = 0x90
    NSSet *_selectedCalendars;	// 152 = 0x98
    NSString *_searchString;	// 160 = 0xa0
    NSCalendar *_calendar;	// 168 = 0xa8
    EKCalendarDate *_selectedDate;	// 176 = 0xb0
    unsigned long long _firstVisibleSecond;	// 184 = 0xb8
    EKEvent *_selectedOccurrence;	// 192 = 0xc0
    EKSource *_sourceForSelectedIdentity;	// 200 = 0xc8
    NSArray *_sortedEnabledDelegates;	// 208 = 0xd0
    NSString *_sceneIdentifier;	// 216 = 0xd8
}

+ (unsigned long long)errorForSubscribedCalendarChildrenOfSource:(id)arg1;	// IMP=0x0000000000172c32
+ (unsigned long long)errorForSource:(id)arg1;	// IMP=0x0000000000172ada
+ (void)temporarilyIgnoreInsecureConnectionErrorsForCalendars:(id)arg1;	// IMP=0x0000000000172703
+ (void)temporarilyIgnoreInvalidCredentialsErrorForSource:(id)arg1;	// IMP=0x0000000000172543
+ (id)sortedEnabledDelegateSourcesFromStore:(id)arg1;	// IMP=0x0000000000170076
+ (id)calendarModelWithEventStore:(id)arg1;	// IMP=0x000000000016cfc2
+ (id)calendarModelWithDataPath:(id)arg1;	// IMP=0x000000000016cf75
- (void).cxx_destruct;	// IMP=0x000000000017301d
@property(nonatomic) _Bool autoStartNotificationMonitor; // @synthesize autoStartNotificationMonitor=_autoStartNotificationMonitor;
@property(copy, nonatomic) NSString *sceneIdentifier; // @synthesize sceneIdentifier=_sceneIdentifier;
@property(retain, nonatomic) NSArray *sortedEnabledDelegates; // @synthesize sortedEnabledDelegates=_sortedEnabledDelegates;
@property(readonly, retain, nonatomic) EKSource *sourceForSelectedIdentity; // @synthesize sourceForSelectedIdentity=_sourceForSelectedIdentity;
@property(retain, nonatomic) EKEvent *selectedOccurrence; // @synthesize selectedOccurrence=_selectedOccurrence;
@property(nonatomic) unsigned long long firstVisibleSecond; // @synthesize firstVisibleSecond=_firstVisibleSecond;
@property(copy, nonatomic) EKCalendarDate *selectedDate; // @synthesize selectedDate=_selectedDate;
@property(copy, nonatomic) NSCalendar *calendar; // @synthesize calendar=_calendar;
@property(readonly, nonatomic) EKEventStore *eventStore; // @synthesize eventStore=_eventStore;
- (void)addRespondedNotificationObjectID:(id)arg1;	// IMP=0x0000000000172a6f
- (_Bool)searchingOccurrences;	// IMP=0x0000000000172510
- (id)eventNotificationReferencesForIdentity:(id)arg1;	// IMP=0x000000000017231e
- (id)eventNotificationReferencesForCurrentIdentity;	// IMP=0x0000000000172305
- (unsigned long long)eventNotificationsForCurrentIdentityCount;	// IMP=0x0000000000172265
- (id)allEventNotificationReferences;	// IMP=0x0000000000172215
- (unsigned long long)allEventNotificationsCount;	// IMP=0x00000000001721d1
- (void)_notificationCountExpired:(id)arg1;	// IMP=0x0000000000172177
- (void)_notificationsExpired:(id)arg1;	// IMP=0x000000000017211d
- (_Bool)invitationBearingStoresExistForEvents;	// IMP=0x0000000000171d6c
- (id)_notificationMonitor;	// IMP=0x0000000000171d5e
- (void)startNotificationMonitor;	// IMP=0x0000000000171bdb
- (_Bool)removeEvent:(id)arg1 withSpan:(long long)arg2 error:(id *)arg3;	// IMP=0x0000000000171b1b
- (id)persistedSceneState;	// IMP=0x0000000000171abe
@property(nonatomic) _Bool showMonthAsDivided;
@property(nonatomic) _Bool showDayAsList;
- (void)_systemWake;	// IMP=0x000000000017166f
- (void)_timeZoneChanged:(id)arg1;	// IMP=0x000000000017157a
- (void)_localeChanged:(id)arg1;	// IMP=0x0000000000171504
- (void)_sceneEnteredForeground:(id)arg1;	// IMP=0x0000000000171414
- (void)_sceneEnteredBackground:(id)arg1;	// IMP=0x0000000000171366
- (void)_significantTimeChange:(id)arg1;	// IMP=0x00000000001712db
- (void)_tzSupportTodayRolledOver;	// IMP=0x00000000001711fa
- (void)_reloadIfTodayDetermined;	// IMP=0x00000000001711d2
- (void)prepareForAppSuspend;	// IMP=0x00000000001711bc
- (void)updateAfterAppResume;	// IMP=0x00000000001710ae
- (void)_occurrenceCacheChanged;	// IMP=0x000000000017108f
- (void)_ignoredErrorsChanged;	// IMP=0x0000000000171019
- (void)_eventStoreChanged:(id)arg1;	// IMP=0x0000000000170d5c
- (void)_notificationBlacklisted;	// IMP=0x0000000000170d1a
- (void)calendarEventLoader:(id)arg1 occurrencesDidUpdateBetweenStart:(double)arg2 end:(double)arg3 generation:(int)arg4 wasEmptyLoad:(_Bool)arg5;	// IMP=0x00000000001709e3
- (void)_finishedFirstLoad;	// IMP=0x000000000017096e
- (void)simulateFirstLoadFinished;	// IMP=0x0000000000170933
- (long long)countAccountsInInitialSync;	// IMP=0x0000000000170788
@property(readonly, nonatomic) long long accountsInInitialSyncCount;
- (_Bool)countSourcesWithErrors;	// IMP=0x000000000017027e
- (long long)displayableAccountErrorsForSource:(id)arg1;	// IMP=0x00000000001701c9
- (void)_checkSources;	// IMP=0x000000000016ff6b
- (void)_processReloadForCacheOnly:(_Bool)arg1 includingCalendars:(_Bool)arg2 checkCalendarsValid:(_Bool)arg3 checkSources:(_Bool)arg4;	// IMP=0x000000000016fb05
- (void)_invalidateOccurrenceCacheDataSources;	// IMP=0x000000000016faca
- (void)_invalidateCachedOccurrences;	// IMP=0x000000000016fa88
- (void)_createOccurrenceCacheDataSources;	// IMP=0x000000000016f94d
- (void)_recreateOccurrenceCacheDataSources;	// IMP=0x000000000016f91f
- (void)_searchResultsAvailable:(id)arg1;	// IMP=0x000000000016f87c
- (void)fetchCachedDaysInBackgroundStartingFromSection:(long long)arg1 usingFilter:(_Bool)arg2;	// IMP=0x000000000016f82e
- (void)fetchCachedDaysInBackgroundStartingFromSection:(long long)arg1;	// IMP=0x000000000016f81a
- (long long)cachedFakeTodayIndex;	// IMP=0x000000000016f810
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1 usingFilter:(_Bool)arg2;	// IMP=0x000000000016f7f9
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1;	// IMP=0x000000000016f7e5
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1 sectionExistsForDay:(_Bool *)arg2 usingFilter:(_Bool)arg3;	// IMP=0x000000000016f652
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1 sectionExistsForDay:(_Bool *)arg2;	// IMP=0x000000000016f63d
- (id)cachedOccurrenceAtIndexPath:(id)arg1 usingFilter:(_Bool)arg2;	// IMP=0x000000000016f535
- (id)cachedOccurrenceAtIndexPath:(id)arg1;	// IMP=0x000000000016f521
- (id)dateForCachedOccurrencesInSection:(long long)arg1 usingFilter:(_Bool)arg2;	// IMP=0x000000000016f492
- (id)dateForCachedOccurrencesInSection:(long long)arg1;	// IMP=0x000000000016f47e
- (long long)numberOfCachedOccurrencesInSection:(long long)arg1 usingFilter:(_Bool)arg2;	// IMP=0x000000000016f402
- (long long)numberOfCachedOccurrencesInSection:(long long)arg1;	// IMP=0x000000000016f3ee
- (long long)numberOfDaysWithCachedOccurrencesUsingFilter:(_Bool)arg1;	// IMP=0x000000000016f2a4
- (id)_dataSourceUsingFilter:(_Bool)arg1;	// IMP=0x000000000016f293
- (long long)numberOfDaysWithCachedOccurrences;	// IMP=0x000000000016f27f
- (_Bool)cachedOccurrencesAreLoaded;	// IMP=0x000000000016f245
- (_Bool)cachedOccurrencesAreBeingGenerated;	// IMP=0x000000000016f20b
@property(readonly, nonatomic) _Bool currentlyLocked;
- (void)setPreferredReloadStartDate:(id)arg1 endDate:(id)arg2;	// IMP=0x000000000016f1ec
- (void)setComponentForExpandingPadding:(unsigned long long)arg1;	// IMP=0x000000000016f1d6
- (void)setComponentForExpandingRequests:(unsigned long long)arg1;	// IMP=0x000000000016f1c0
- (void)setMaxCachedDays:(unsigned int)arg1;	// IMP=0x000000000016f11d
- (void)setDesiredPaddingDays:(unsigned int)arg1;	// IMP=0x000000000016f107
- (id)closestOccurrenceToTomorrowForEventUID:(int)arg1;	// IMP=0x000000000016f0c4
- (double)_tomorrow;	// IMP=0x000000000016efb6
- (id)selectedDateOccurrences:(_Bool)arg1 loadIsComplete:(_Bool *)arg2;	// IMP=0x000000000016eeff
- (id)occurrencesForDay:(id)arg1 waitForLoad:(_Bool)arg2;	// IMP=0x000000000016ee11
- (void)addOccurrenceAwaitingDeletion:(id)arg1;	// IMP=0x000000000016edfb
- (id)occurrencesForStartDate:(id)arg1 endDate:(id)arg2 preSorted:(_Bool)arg3 waitForLoad:(_Bool)arg4;	// IMP=0x000000000016ede5
- (id)occurrencesForStartDay:(id)arg1 endDay:(id)arg2 preSorted:(_Bool)arg3 waitForLoad:(_Bool)arg4;	// IMP=0x000000000016ec93
- (void)addOccurrenceAwaitingRefresh:(id)arg1;	// IMP=0x000000000016ec7d
- (void)updateSelectedDateTimeZone;	// IMP=0x000000000016eb5f
@property(readonly, nonatomic) EKCalendarDate *selectedDay;
- (void)setSelectedDateChangesDelayedUntilAfterTransition:(_Bool)arg1;	// IMP=0x000000000016eaf0
- (id)refreshCalendarDataIfNeeded:(_Bool)arg1;	// IMP=0x000000000016e97c
- (id)refreshAccountListIfNeeded:(_Bool)arg1;	// IMP=0x000000000016e966
- (id)defaultCalendarForNewEvents;	// IMP=0x000000000016e86a
- (_Bool)isCalendarVisibleWithID:(id)arg1;	// IMP=0x000000000016e7f2
- (void)ensureCalendarVisibleWithId:(id)arg1;	// IMP=0x000000000016e6fa
@property(readonly, nonatomic) long long readWriteCalendarCount;
- (void)_loadVisibleCalendarsIfNeeded;	// IMP=0x000000000016e66e
- (void)locationPrecisionDeterminedNotification:(id)arg1;	// IMP=0x000000000016e53a
- (void)checkLocationAuthorizationAndAllowEventLocationPrediction;	// IMP=0x000000000016e3dd
@property(nonatomic) _Bool allowEventLocationPrediction;
@property(readonly, nonatomic) _Bool containsDelegateSources;
- (void)setSourceForSelectedIdentity:(id)arg1;	// IMP=0x000000000016e270
- (_Bool)selectedOccurrenceIsSearchMatch;	// IMP=0x000000000016e23d
@property(retain, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
- (void)updateSourceForSelectedIdentity:(id)arg1 selectedCalendars:(id)arg2;	// IMP=0x000000000016dfe1
- (_Bool)_eventBelongsToCurrentIdentity:(id)arg1;	// IMP=0x000000000016debc
- (void)setSelectedCalendarsAndRequestPreferenceSave:(id)arg1;	// IMP=0x000000000016de58
- (void)postSelectedCalendarsChanged;	// IMP=0x000000000016dd3f
- (_Bool)_setSelectedCalendars:(id)arg1;	// IMP=0x000000000016dc6a
@property(retain, nonatomic) NSSet *selectedCalendars; // @synthesize selectedCalendars=_selectedCalendars;
- (id)calendarsForCurrentIdentityFromCalendars:(id)arg1;	// IMP=0x000000000016dbbe
- (id)_calendarsForCurrentIdentityFromCalendars:(id)arg1 lock:(_Bool)arg2;	// IMP=0x000000000016d940
@property(copy, nonatomic) NSSet *unselectedCalendars;
- (void)dealloc;	// IMP=0x000000000016d634
- (void)_performCommonInitialization;	// IMP=0x000000000016d197
- (id)initWithDataPath:(id)arg1;	// IMP=0x000000000016d0a3
- (id)initWithEventStore:(id)arg1;	// IMP=0x000000000016d023
- (id)init;	// IMP=0x000000000016d00f

@end

