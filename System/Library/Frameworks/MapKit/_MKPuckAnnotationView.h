//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <MapKit/VKPuckAnimatorTarget-Protocol.h>

@class CAGradientLayer, CALayer, CLLocation, NSArray, NSString, UIColor, UIImage, VKNavigationPuck, _MKPuckAccuracyLayer;
@protocol MKUserLocationHeadingIndicator;

@interface _MKPuckAnnotationView <VKPuckAnimatorTarget>
{
    CALayer *_puckLayer;	// 256 = 0x100
    _Bool _shouldHidePuckWhenAccuracyVisible;	// 264 = 0x108
    _Bool _shouldInnerPulse;	// 265 = 0x109
    _Bool _shouldShowOuterRing;	// 266 = 0x10a
    _Bool _shouldShowDynamicLocationAnimations;	// 267 = 0x10b
    UIImage *_glyphImage;	// 272 = 0x110
    UIColor *_glyphTintColor;	// 280 = 0x118
    CALayer *_glyphLayer;	// 288 = 0x120
    UIImage *_innerImageMask;	// 296 = 0x128
    _Bool _rotateInnerImageToMatchCourse;	// 304 = 0x130
    CALayer *_puckContainerLayer;	// 312 = 0x138
    CALayer *_shadowLayer;	// 320 = 0x140
    CALayer *_baseLayer;	// 328 = 0x148
    double _accuracyRingAlpha;	// 336 = 0x150
    CALayer *_puckTransitionContainer;	// 344 = 0x158
    CALayer *_puckTransitionLayer;	// 352 = 0x160
    double _puckScale;	// 360 = 0x168
    _Bool _faux3DEnabled;	// 368 = 0x170
    CAGradientLayer *_faux3DFaceLayer;	// 376 = 0x178
    CAGradientLayer *_faux3DBaseBottomLayer;	// 384 = 0x180
    CALayer *_faux3DHighlightMask;	// 392 = 0x188
    NSArray *_faux3DHighlightMaskRings;	// 400 = 0x190
    CALayer *_innerCircleLayer;	// 408 = 0x198
    _Bool _isShowingStaleColor;	// 416 = 0x1a0
    _Bool _displaysPuckAsAccuracy;	// 417 = 0x1a1
    CALayer *_accuracyContainerLayer;	// 424 = 0x1a8
    CALayer *_headingContainerLayer;	// 432 = 0x1b0
    VKNavigationPuck *_navigationPuckMarker;	// 440 = 0x1b8
    long long _zoomDirection;	// 448 = 0x1c0
    CALayer *_pulseLayer;	// 456 = 0x1c8
    _MKPuckAccuracyLayer *_accuracyLayer;	// 464 = 0x1d0
    _Bool _allowsPulse;	// 472 = 0x1d8
    _Bool _shouldPulse;	// 473 = 0x1d9
    _Bool _canShowHeadingIndicator;	// 474 = 0x1da
    _Bool _shouldDisplayHeading;	// 475 = 0x1db
    _Bool _shouldDisplayInaccurateHeading;	// 476 = 0x1dc
    _Bool _forceHeadingUp;	// 477 = 0x1dd
    _Bool _hasValidHeading;	// 478 = 0x1de
    _Bool _useDarkAppearance;	// 479 = 0x1df
    double _mapRotation;	// 480 = 0x1e0
    double _heading;	// 488 = 0x1e8
    double _headingAccuracy;	// 496 = 0x1f0
    double _mapCameraDistance;	// 504 = 0x1f8
    CALayer<MKUserLocationHeadingIndicator> *_headingLayer;	// 512 = 0x200
    _Bool _headingLayerTracksAccuracy;	// 520 = 0x208
    _Bool _allowsAccuracyRing;	// 521 = 0x209
    _Bool _stale;	// 522 = 0x20a
    _Bool _effectsEnabled;	// 523 = 0x20b
    double _maxRadiusToShowAccuracyRing;	// 528 = 0x210
    double _accuracyRingStrokeOpacityThreshold;	// 536 = 0x218
    double _presentationCourse;	// 544 = 0x220
    double _locationAccuracy;	// 552 = 0x228
    CLLocation *_lastLocation;	// 560 = 0x230
    _Bool _hasExplicitCollisionMode;	// 568 = 0x238
    _Bool _animatingPresentationAccuracy;	// 569 = 0x239
    double _presentationAccuracy;	// 576 = 0x240
    id _minAccuracyConfigListener;	// 584 = 0x248
    id _newPuckConfigListener;	// 592 = 0x250
    id _faux3DPuckConfigListener;	// 600 = 0x258
    id _shelbyvilleConfigListener;	// 608 = 0x260
    double _minimumAccuracyRadius;	// 616 = 0x268
    id _minUncertaintyConfigListener;	// 624 = 0x270
    double _minimumAccuracyUncertainty;	// 632 = 0x278
    _Bool _overrideIsStale;	// 640 = 0x280
    _Bool _forcesConeIndicator;	// 641 = 0x281
    long long _headingIndicatorStyle;	// 648 = 0x288
}

+ (double)shadowBlur;	// IMP=0x00000000001bd87b
+ (double)outerRingWidth;	// IMP=0x00000000001bd872
+ (double)innerDiameter;	// IMP=0x00000000001bd864
+ (double)baseDiameter;	// IMP=0x00000000001bd856
+ (struct CGPoint)_calloutOffset;	// IMP=0x00000000001b8daa
- (void).cxx_destruct;	// IMP=0x00000000001c4c58
@property(nonatomic, getter=_displaysPuckAsAccuracy, setter=_setDisplaysPuckAsAccuracy:) _Bool displaysPuckAsAccuracy; // @synthesize displaysPuckAsAccuracy=_displaysPuckAsAccuracy;
@property(nonatomic, getter=isAnimatingPresentationAccuracy) _Bool animatingPresentationAccuracy; // @synthesize animatingPresentationAccuracy=_animatingPresentationAccuracy;
@property(nonatomic, getter=_shouldHidePuckWhenAccuracyVisible, setter=_setShouldHidePuckWhenAccuracyVisible:) _Bool shouldHidePuckWhenAccuracyVisible; // @synthesize shouldHidePuckWhenAccuracyVisible=_shouldHidePuckWhenAccuracyVisible;
@property(nonatomic, getter=_forceHeadingUp, setter=_setForceHeadingUp:) _Bool forceHeadingUp; // @synthesize forceHeadingUp=_forceHeadingUp;
@property(nonatomic) _Bool rotateInnerImageToMatchCourse; // @synthesize rotateInnerImageToMatchCourse=_rotateInnerImageToMatchCourse;
@property(retain, nonatomic) UIImage *innerImageMask; // @synthesize innerImageMask=_innerImageMask;
@property(copy, nonatomic) UIColor *glyphTintColor; // @synthesize glyphTintColor=_glyphTintColor;
@property(retain, nonatomic) UIImage *glyphImage; // @synthesize glyphImage=_glyphImage;
@property(nonatomic) _Bool shouldShowOuterRing; // @synthesize shouldShowOuterRing=_shouldShowOuterRing;
@property(nonatomic) _Bool shouldInnerPulse; // @synthesize shouldInnerPulse=_shouldInnerPulse;
@property(nonatomic) _Bool forcesConeIndicator; // @synthesize forcesConeIndicator=_forcesConeIndicator;
@property(nonatomic) long long headingIndicatorStyle; // @synthesize headingIndicatorStyle=_headingIndicatorStyle;
@property(nonatomic, getter=_shouldShowDynamicLocationAnimations, setter=_setShouldShowDynamicLocationAnimations:) _Bool shouldShowDynamicLocationAnimations; // @synthesize shouldShowDynamicLocationAnimations=_shouldShowDynamicLocationAnimations;
@property(nonatomic, getter=_minimumAccuracyRadius, setter=_setMinimumAccuracyRadius:) double minimumAccuracyRadius; // @synthesize minimumAccuracyRadius=_minimumAccuracyRadius;
@property(nonatomic) double accuracyRingAlpha; // @synthesize accuracyRingAlpha=_accuracyRingAlpha;
@property(readonly, nonatomic) CLLocation *lastLocation; // @synthesize lastLocation=_lastLocation;
@property(readonly, nonatomic) double locationAccuracy; // @synthesize locationAccuracy=_locationAccuracy;
@property(nonatomic) double presentationCourse; // @synthesize presentationCourse=_presentationCourse;
@property(nonatomic, getter=isEffectsEnabled) _Bool effectsEnabled; // @synthesize effectsEnabled=_effectsEnabled;
@property(nonatomic, getter=isOverrideStale) _Bool overrideIsStale; // @synthesize overrideIsStale=_overrideIsStale;
@property(nonatomic, getter=isStale, setter=setStale:) _Bool stale; // @synthesize stale=_stale;
@property(nonatomic, getter=_accuracyRingStrokeOpacityThreshold, setter=_setAccuracyRingStrokeOpacityThreshold:) double accuracyRingStrokeOpacityThreshold; // @synthesize accuracyRingStrokeOpacityThreshold=_accuracyRingStrokeOpacityThreshold;
@property(nonatomic) double maxRadiusToShowAccuracyRing; // @synthesize maxRadiusToShowAccuracyRing=_maxRadiusToShowAccuracyRing;
@property(nonatomic) _Bool allowsAccuracyRing; // @synthesize allowsAccuracyRing=_allowsAccuracyRing;
@property(nonatomic) double headingAccuracy; // @synthesize headingAccuracy=_headingAccuracy;
@property(nonatomic) double heading; // @synthesize heading=_heading;
@property(nonatomic) _Bool shouldDisplayInaccurateHeading; // @synthesize shouldDisplayInaccurateHeading=_shouldDisplayInaccurateHeading;
@property(nonatomic) _Bool shouldDisplayHeading; // @synthesize shouldDisplayHeading=_shouldDisplayHeading;
@property(nonatomic) _Bool canShowHeadingIndicator; // @synthesize canShowHeadingIndicator=_canShowHeadingIndicator;
@property(nonatomic) _Bool allowsPulse; // @synthesize allowsPulse=_allowsPulse;
@property(nonatomic) long long zoomDirection; // @synthesize zoomDirection=_zoomDirection;
- (void)_updateLegacyConfiguration;	// IMP=0x00000000001c49d2
@property(readonly, nonatomic) struct CGSize collisionSize;
- (void)_setPresentationCourse:(double)arg1;	// IMP=0x00000000001c48e0
- (void)_setAnimatingToCoordinate:(_Bool)arg1;	// IMP=0x00000000001c488d
- (void)setAnimatingToCoordinate:(_Bool)arg1;	// IMP=0x00000000001c4848
- (void)_setPresentationCoordinate:(struct CLLocationCoordinate2D)arg1;	// IMP=0x00000000001c4793
- (void)setPresentationCoordinate:(CDStruct_c3b9c2ee)arg1;	// IMP=0x00000000001c4781
- (_Bool)_tracking;	// IMP=0x00000000001c4752
- (void)_setTracking:(_Bool)arg1;	// IMP=0x00000000001c46ff
- (id)_vkNavigationPuckMarker;	// IMP=0x00000000001c46ea
- (void)_setVKNavigationPuckMarker:(id)arg1;	// IMP=0x00000000001c45c6
- (void)_setHeadingLayerHidden:(_Bool)arg1;	// IMP=0x00000000001c45a9
- (void)_updateHeadingIndicators;	// IMP=0x00000000001c4469
- (void)_updateShowHeadingLayer:(_Bool)arg1 animatedIfPossible:(_Bool)arg2;	// IMP=0x00000000001c409f
- (void)_updateShowHeadingLayerAnimatedIfPossible:(_Bool)arg1;	// IMP=0x00000000001c403a
- (void)_updateShowHeadingLayer;	// IMP=0x00000000001c4026
- (void)_updateHeadingLayerForStyleChange:(_Bool)arg1;	// IMP=0x00000000001c3fec
- (long long)_enforcedHeadingIndicatorStyle;	// IMP=0x00000000001c3fbc
- (_Bool)_shouldPulseForLocation:(id)arg1;	// IMP=0x00000000001c3e15
- (void)_updatePulse;	// IMP=0x00000000001c3d92
- (void)_removePulse;	// IMP=0x00000000001c3b28
- (void)_pausePulse;	// IMP=0x00000000001c3a71
- (void)_resumePulse;	// IMP=0x00000000001c372d
- (id)_pulseAnimation;	// IMP=0x00000000001c3544
- (id)_animationToSynchronizePulse:(id *)arg1;	// IMP=0x00000000001c34fa
- (id)_pulseLayer;	// IMP=0x00000000001c32f7
- (void)_updatePulseColor;	// IMP=0x00000000001c31e3
- (unsigned long long)_innerPulseFrameWhenDisabled:(unsigned long long)arg1;	// IMP=0x00000000001c31d3
- (void)_resetInnerPulseFrame;	// IMP=0x00000000001c3126
- (void)_updateAccuracyAnimation;	// IMP=0x00000000001c305f
- (void)_updatePulseAnimation;	// IMP=0x00000000001c2d36
- (id)_innerPulseAnimation;	// IMP=0x00000000001c2b2e
- (void)_updateToReflectLocationAccuracyWithDuration:(double)arg1 allowShowHideAnimation:(_Bool)arg2;	// IMP=0x00000000001c2553
- (struct CGPoint)calloutOffset;	// IMP=0x00000000001c2499
- (_Bool)_balloonCalloutShouldShowArrow;	// IMP=0x00000000001c2466
- (void)setLocationAccuracy:(double)arg1 duration:(double)arg2;	// IMP=0x00000000001c23ca
@property(nonatomic) double presentationAccuracy; // @synthesize presentationAccuracy=_presentationAccuracy;
@property(readonly, nonatomic, getter=_locationAccuracyInScreenPoints) double locationAccuracyInScreenPoints;
- (void)_resetLayerToMatchAccuracyRing;	// IMP=0x00000000001c1e43
- (id)_layerToMatchAccuracyRing;	// IMP=0x00000000001c1e2e
- (_Bool)_shouldShowAccuracyRing;	// IMP=0x00000000001c1bad
- (_Bool)_hideLargeAccuracyRing;	// IMP=0x00000000001c1b90
- (void)_updateAccuracyOpacityForRadius:(double)arg1 duration:(double)arg2;	// IMP=0x00000000001c1818
- (void)_updateFaux3DLayers;	// IMP=0x00000000001c0c7b
- (void)_createOrRemoveFaux3DRingsIfNecessary;	// IMP=0x00000000001c06c6
- (void)_updateFaux3DColors;	// IMP=0x00000000001c049f
- (void)_updateAccuracyColors;	// IMP=0x00000000001c044b
@property(nonatomic, getter=_minimumAccuracyUncertainty, setter=_setMinimumAccuracyUncertainty:) double minimumAccuracyUncertainty;
- (void)locationManagerFailedToUpdateLocation;	// IMP=0x00000000001c0381
- (void)updateStateFromLocation:(id)arg1 duration:(double)arg2;	// IMP=0x00000000001c0299
- (_Bool)_isLocationStale:(id)arg1;	// IMP=0x00000000001c026e
- (void)setZoomDirection:(long long)arg1 deltaScale:(double)arg2;	// IMP=0x00000000001c020c
- (void)_updateLayers;	// IMP=0x00000000001c019d
- (void)_updateGlyphImage;	// IMP=0x00000000001bfdc0
- (void)_updateInnerImage;	// IMP=0x00000000001bf7ff
- (id)_currentInnerColor;	// IMP=0x00000000001bf714
- (void)_updateBaseImage;	// IMP=0x00000000001bf227
- (void)_updateShadowImage;	// IMP=0x00000000001bede3
- (void)_updateInnerMaskLayer;	// IMP=0x00000000001bebea
- (id)_baseLayer;	// IMP=0x00000000001bebd5
- (void)_setupLayers;	// IMP=0x00000000001bd941
- (struct UIEdgeInsets)_defaultCollisionAlignmentRectInsets;	// IMP=0x00000000001bd889
- (void)setPuckScale:(double)arg1;	// IMP=0x00000000001bd07b
@property(nonatomic) double puckAlpha;
@property(nonatomic) float opacity;
- (struct CGRect)_mapkit_visibleRect;	// IMP=0x00000000001bce19
- (void)setSelected:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x00000000001bcdce
- (void)didMoveToWindow;	// IMP=0x00000000001bcd32
- (void)layoutSubviews;	// IMP=0x00000000001bcb72
- (void)tintColorDidChange;	// IMP=0x00000000001bcacf
- (void)traitCollectionDidChange:(id)arg1;	// IMP=0x00000000001bc997
- (id)_effectiveTintColor;	// IMP=0x00000000001bc92c
- (void)_updateInnerCourseRotation;	// IMP=0x00000000001bc6d6
- (void)_setMapRotationRadians:(double)arg1;	// IMP=0x00000000001bc5ea
- (void)_setMapPitchRadians:(double)arg1;	// IMP=0x00000000001bc2f4
- (void)_updateFromMap;	// IMP=0x00000000001bc152
- (void)_updatePuckVisibilityForRadius:(double)arg1 previousRadius:(double)arg2 duration:(double)arg3;	// IMP=0x00000000001b9f87
- (id)_createFakePuckLayer;	// IMP=0x00000000001b9b2b
- (void)_setMapDisplayStyle:(CDStruct_80aa614a)arg1;	// IMP=0x00000000001b9a97
- (void)_setMapType:(unsigned long long)arg1;	// IMP=0x00000000001b99f8
- (void)setDisplayPriority:(float)arg1;	// IMP=0x00000000001b9981
- (long long)collisionMode;	// IMP=0x00000000001b9928
- (void)setCollisionMode:(long long)arg1;	// IMP=0x00000000001b98ee
- (struct UIEdgeInsets)_annotationTrackingInsets;	// IMP=0x00000000001b97b1
- (struct CGRect)_significantBounds;	// IMP=0x00000000001b96a0
- (float)_selectionPriority;	// IMP=0x00000000001b9610
- (_Bool)_isSelectable;	// IMP=0x00000000001b9577
- (void)dealloc;	// IMP=0x00000000001b9506
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;	// IMP=0x00000000001b8dc3

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

