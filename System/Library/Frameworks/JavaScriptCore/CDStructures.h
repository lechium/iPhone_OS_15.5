//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Atomic<unsigned char> {
    struct atomic<unsigned char> value;
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CachedBytecode;

struct JSCell;

struct JSLock;

struct JSObject;

struct JSValue {
    union EncodedValueDescriptor u;
};

struct JSWeakValue {
    int m_tag;
    union WeakValueUnion m_value;
};

struct Lock {
    struct Atomic<unsigned char> m_byte;
};

struct MappedFileData {
    void *m_fileData;
    unsigned int m_fileSize;
};

struct NakedPtr<OpaqueJSClass> {
    struct OpaqueJSClass *m_ptr;
};

struct OpaqueJSClass;

struct OrdinalNumber {
    int _field1;
};

struct RefPtr<JSC::CachedBytecode, WTF::RawPtrTraits<JSC::CachedBytecode>, WTF::DefaultRefDerefTraits<JSC::CachedBytecode>> {
    struct CachedBytecode *m_ptr;
};

struct RefPtr<JSC::JSLock, WTF::RawPtrTraits<JSC::JSLock>, WTF::DefaultRefDerefTraits<JSC::JSLock>> {
    struct JSLock *m_ptr;
};

struct RefPtr<JSC::SourceProvider, WTF::RawPtrTraits<JSC::SourceProvider>, WTF::DefaultRefDerefTraits<JSC::SourceProvider>> {
    struct SourceProvider *_field1;
};

struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> {
    struct StringImpl *m_ptr;
};

struct RetainPtr<JSVirtualMachine> {
    void *m_ptr;
};

struct RetainPtr<NSMapTable> {
    void *m_ptr;
};

struct RetainPtr<NSMutableDictionary> {
    void *m_ptr;
};

struct RetainPtr<NSURL> {
    void *m_ptr;
};

struct SourceCode {
    struct RefPtr<JSC::SourceProvider, WTF::RawPtrTraits<JSC::SourceProvider>, WTF::DefaultRefDerefTraits<JSC::SourceProvider>> _field1;
    int _field2;
    int _field3;
    struct OrdinalNumber _field4;
    struct OrdinalNumber _field5;
};

struct SourceProvider;

struct String {
    struct RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>> m_impl;
};

struct StringImpl;

struct Strong<JSC::JSObject, JSC::ShouldStrongDestructorGrabLock::No> {
    struct JSValue *m_slot;
};

struct Weak<JSC::JSGlobalObject> {
    struct WeakImpl *m_impl;
};

struct Weak<JSC::JSObject> {
    struct WeakImpl *m_impl;
};

struct Weak<JSC::JSString> {
    struct WeakImpl *m_impl;
};

struct Weak<JSC::Structure> {
    struct WeakImpl *m_impl;
};

struct WeakImpl;

struct WeakObjCPtr<JSVirtualMachine> {
    id m_weakReference;
};

struct WeakObjCPtr<id<JSModuleLoaderDelegate>> {
    id m_weakReference;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct atomic<unsigned char> {
    struct __cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>> {
        _Atomic unsigned char __a_value;
    } __a_;
};

struct pair<JSC::JSObject *, JSC::JSObject *> {
    struct JSObject *_field1;
    struct JSObject *_field2;
};

struct unique_ptr<JSC::WeakGCMap<id, JSC::JSObject>, std::default_delete<JSC::WeakGCMap<id, JSC::JSObject>>> {
    struct __compressed_pair<JSC::WeakGCMap<id, JSC::JSObject>*, std::default_delete<JSC::WeakGCMap<id, JSC::JSObject>>> {
        void *__value_;
    } __ptr_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct RefPtr<JSC::CachedBytecode, WTF::RawPtrTraits<JSC::CachedBytecode>, WTF::DefaultRefDerefTraits<JSC::CachedBytecode>> {
    struct CachedBytecode *m_ptr;
} RefPtr_ba104a63;

typedef struct pair<JSC::JSObject *, JSC::JSObject *> {
    struct JSObject *_field1;
    struct JSObject *_field2;
} pair_bfa3637f;

#pragma mark Named Unions

union EncodedValueDescriptor {
    long long asInt64;
    struct JSCell *ptr;
    struct {
        int payload;
        int tag;
    } asBits;
};

union WeakValueUnion {
    struct JSValue primitive;
    struct Weak<JSC::JSObject> object;
    struct Weak<JSC::JSString> string;
};

