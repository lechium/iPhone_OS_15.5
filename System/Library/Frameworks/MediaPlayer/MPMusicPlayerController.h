//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MediaPlayer/MPArtworkDataSource-Protocol.h>
#import <MediaPlayer/MPMediaPlayback-Protocol.h>
#import <MediaPlayer/MPMusicPlayerControllerClient-Protocol.h>
#import <MediaPlayer/MPVolumeControllerDelegate-Protocol.h>

@class MPMediaItem, MPMusicPlayerControllerNowPlaying, MPMusicPlayerControllerNowPlayingTimeSnapshot, MPMusicPlayerQueueDescriptor, MPVolumeController, NSArray, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

@interface MPMusicPlayerController : NSObject <MPArtworkDataSource, MPVolumeControllerDelegate, MPMusicPlayerControllerClient, MPMediaPlayback>
{
    NSXPCConnection *_connection;	// 8 = 0x8
    struct os_unfair_lock_s _lock;	// 16 = 0x10
    _Bool _isPreparedToPlay;	// 20 = 0x14
    NSString *_clientIdentifier;	// 24 = 0x18
    MPMusicPlayerControllerNowPlaying *_serverNowPlaying;	// 32 = 0x20
    MPMusicPlayerControllerNowPlayingTimeSnapshot *_serverTimeSnapshot;	// 40 = 0x28
    MPMusicPlayerQueueDescriptor *_serverQueueDescriptor;	// 48 = 0x30
    MPMusicPlayerControllerNowPlayingTimeSnapshot *_lastServerTimeSnapshot;	// 56 = 0x38
    MPMusicPlayerControllerNowPlaying *_lastServerNowPlaying;	// 64 = 0x40
    NSArray *_lastContentItemIDs;	// 72 = 0x48
    MPMusicPlayerQueueDescriptor *_targetQueueDescriptor;	// 80 = 0x50
    long long _notificationsCounter;	// 88 = 0x58
    MPVolumeController *_volumeController;	// 96 = 0x60
    NSObject<OS_dispatch_queue> *_queue;	// 104 = 0x68
}

+ (void)setRunLoopForNotifications:(id)arg1;	// IMP=0x00000000000c8989
+ (id)iPodMusicPlayer;	// IMP=0x00000000000c8977
+ (id)alloc;	// IMP=0x00000000000c8923
+ (id)applicationMusicPlayer;	// IMP=0x00000000000c8911
+ (id)applicationQueuePlayer;	// IMP=0x00000000000c88e1
+ (id)systemMusicPlayer;	// IMP=0x00000000000c88b1
- (void).cxx_destruct;	// IMP=0x00000000000c6a8b
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, nonatomic) MPVolumeController *volumeController; // @synthesize volumeController=_volumeController;
@property(readonly, nonatomic) long long notificationsCounter; // @synthesize notificationsCounter=_notificationsCounter;
@property(readonly, nonatomic) MPMusicPlayerQueueDescriptor *targetQueueDescriptor; // @synthesize targetQueueDescriptor=_targetQueueDescriptor;
@property(readonly, nonatomic) NSArray *lastContentItemIDs; // @synthesize lastContentItemIDs=_lastContentItemIDs;
@property(readonly, nonatomic) MPMusicPlayerControllerNowPlaying *lastServerNowPlaying; // @synthesize lastServerNowPlaying=_lastServerNowPlaying;
@property(readonly, nonatomic) MPMusicPlayerControllerNowPlayingTimeSnapshot *lastServerTimeSnapshot; // @synthesize lastServerTimeSnapshot=_lastServerTimeSnapshot;
@property(readonly, nonatomic) MPMusicPlayerQueueDescriptor *serverQueueDescriptor; // @synthesize serverQueueDescriptor=_serverQueueDescriptor;
@property(readonly, nonatomic) MPMusicPlayerControllerNowPlayingTimeSnapshot *serverTimeSnapshot; // @synthesize serverTimeSnapshot=_serverTimeSnapshot;
@property(readonly, nonatomic) MPMusicPlayerControllerNowPlaying *serverNowPlaying; // @synthesize serverNowPlaying=_serverNowPlaying;
@property(readonly, copy, nonatomic) NSString *clientIdentifier; // @synthesize clientIdentifier=_clientIdentifier;
@property(readonly, nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(readonly, nonatomic) _Bool isPreparedToPlay; // @synthesize isPreparedToPlay=_isPreparedToPlay;
- (void)_postPrivateQueueDidChangeNotificationWithContentItemIDs:(id)arg1;	// IMP=0x00000000000c68b1
- (id)_mediaItemFromNowPlaying:(id)arg1;	// IMP=0x00000000000c6704
- (id)_snapshot;	// IMP=0x00000000000c64ce
- (id)_nowPlaying;	// IMP=0x00000000000c6298
- (id)_queueDescriptor;	// IMP=0x00000000000c6062
- (void)onServerAsync:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2 timeout:(double)arg3 retryEnabled:(_Bool)arg4;	// IMP=0x00000000000c5f28
- (void)onServerAsync:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c5f08
- (void)onServer:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c5e7f
- (void)_establishConnectionIfNeeded;	// IMP=0x00000000000c5d39
- (void)_clearConnection;	// IMP=0x00000000000c5cee
- (void)volumeController:(id)arg1 mutedStateDidChange:(_Bool)arg2;	// IMP=0x00000000000c5c7d
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;	// IMP=0x00000000000c5c0c
- (id)visualIdenticalityIdentifierForCatalog:(id)arg1;	// IMP=0x00000000000c5bb9
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c5a82
- (_Bool)isRepresentation:(id)arg1 bestRepresentationForArtworkCatalog:(id)arg2;	// IMP=0x00000000000c5a7a
- (id)existingRepresentationForArtworkCatalog:(id)arg1;	// IMP=0x00000000000c5a72
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)arg1;	// IMP=0x00000000000c5a6c
- (_Bool)areRepresentationsAvailableForCatalog:(id)arg1;	// IMP=0x00000000000c5a06
- (void)serverQueueDidEnd;	// IMP=0x00000000000c59ae
- (void)serverItemDidEnd;	// IMP=0x00000000000c5956
- (void)serverPlaybackModeDidChangeAffectingQueue:(_Bool)arg1;	// IMP=0x00000000000c58ec
- (void)setServerTimeSnapshot:(id)arg1;	// IMP=0x00000000000c5861
- (void)setServerNowPlaying:(id)arg1;	// IMP=0x00000000000c57d6
- (void)setServerQueueDescriptor:(id)arg1;	// IMP=0x00000000000c5739
- (void)_onQueue_applyServerStateUpdateRecord:(id)arg1;	// IMP=0x00000000000c50b8
- (void)applyServerStateUpdateRecord:(id)arg1;	// IMP=0x00000000000c502d
- (void)adjustLoadedQueueRangeToReverseCount:(long long)arg1 forwardCount:(long long)arg2;	// IMP=0x00000000000c5027
- (void)setQueueWithGeniusMixPlaylist:(id)arg1;	// IMP=0x00000000000c5021
- (_Bool)setQueueWithSeedItems:(id)arg1;	// IMP=0x00000000000c5019
- (_Bool)isGeniusAvailableForSeedItems:(id)arg1;	// IMP=0x00000000000c5011
- (_Bool)isGeniusAvailable;	// IMP=0x00000000000c5009
@property(nonatomic) unsigned long long currentChapterIndex;
@property(readonly, nonatomic) _Bool isNowPlayingItemFromGeniusMix;
@property(nonatomic) long long playbackSpeed;
- (void)setVolumePrivate:(float)arg1;	// IMP=0x00000000000c4fd3
@property(nonatomic) float volume;
- (void)endSeeking;	// IMP=0x00000000000c4d99
- (void)beginSeekingBackward;	// IMP=0x00000000000c4b8b
- (void)beginSeekingForward;	// IMP=0x00000000000c497d
@property(nonatomic) float currentPlaybackRate;
@property(nonatomic) double currentPlaybackTime;
- (void)stop;	// IMP=0x00000000000c437d
- (void)pause;	// IMP=0x00000000000c416f
- (void)play;	// IMP=0x00000000000c3f40
- (void)prepareToPlay;	// IMP=0x00000000000c3cd6
- (void)setUserQueueModificationsDisabled:(_Bool)arg1;	// IMP=0x00000000000c3cd0
- (_Bool)userQueueModificationsDisabled;	// IMP=0x00000000000c3cc8
- (unsigned long long)numberOfItems;	// IMP=0x00000000000c3c84
- (void)prepareQueueForPlayback;	// IMP=0x00000000000c3c72
- (void)skipToBeginningOrPreviousItem;	// IMP=0x00000000000c3a5b
- (void)pauseWithFadeoutDuration:(double)arg1;	// IMP=0x00000000000c37ed
- (void)shuffle;	// IMP=0x00000000000c35d6
- (id)nowPlayingItemAtIndex:(unsigned long long)arg1;	// IMP=0x00000000000c3577
- (id)nowPlayingAtIndex:(long long)arg1;	// IMP=0x00000000000c32a6
- (id)queueAsRadioStation;	// IMP=0x00000000000c319e
- (id)queueAsQuery;	// IMP=0x00000000000c312f
- (void)setQueueWithRadioStation:(id)arg1;	// IMP=0x00000000000c30b6
- (void)setQueueWithQuery:(id)arg1 firstItem:(id)arg2;	// IMP=0x00000000000c3010
- (void)endGeneratingPlaybackNotifications;	// IMP=0x00000000000c3006
- (void)beginGeneratingPlaybackNotifications;	// IMP=0x00000000000c2ffc
- (void)skipToPreviousItem;	// IMP=0x00000000000c2de5
- (void)skipToBeginning;	// IMP=0x00000000000c2bd7
- (void)skipToNextItem;	// IMP=0x00000000000c29c0
- (void)prepareToPlayWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c2661
- (void)appendQueueDescriptor:(id)arg1;	// IMP=0x00000000000c23da
- (void)prependQueueDescriptor:(id)arg1;	// IMP=0x00000000000c2153
- (void)setQueueWithDescriptor:(id)arg1;	// IMP=0x00000000000c1f1d
- (void)setQueueWithStoreIDs:(id)arg1;	// IMP=0x00000000000c1ea4
- (void)setQueueWithItemCollection:(id)arg1;	// IMP=0x00000000000c1e2b
- (void)setQueueWithQuery:(id)arg1;	// IMP=0x00000000000c1e17
@property(readonly, nonatomic) unsigned long long indexOfNowPlayingItem;
- (void)_setNowPlayingItemWithIdentifier:(id)arg1;	// IMP=0x00000000000c1dbc
- (void)_setNowPlayingItem:(id)arg1 itemIdentifier:(id)arg2;	// IMP=0x00000000000c1b13
@property(copy, nonatomic) MPMediaItem *nowPlayingItem;
@property(nonatomic) long long shuffleMode;
@property(nonatomic) long long repeatMode;
@property(readonly, nonatomic) long long playbackState;
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x00000000000c0f3b
- (id)initWithClientIdentifier:(id)arg1 queue:(id)arg2;	// IMP=0x00000000000c0d76
- (id)initWithClientIdentifier:(id)arg1;	// IMP=0x00000000000c0d62

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

