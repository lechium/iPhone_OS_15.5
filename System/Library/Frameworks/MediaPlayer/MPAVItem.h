//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAsset, AVPlayerItem, AVPlayerItemAccessLog, ICMusicSubscriptionLeaseStatus, MPMediaItem, MPMediaLibraryPrivacyContext, MPModelGenericObject, MPModelPlayEvent, MPNowPlayingContentItem, MPQueueFeeder, NSArray, NSDictionary, NSError, NSNumber, NSString;
@protocol MPAVItemObserver, OS_dispatch_queue;

@interface MPAVItem : NSObject
{
    AVAsset *_asset;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_assetQueue;	// 16 = 0x10
    AVPlayerItem *_avPlayerItem;	// 24 = 0x18
    _Bool _isAssetLoaded;	// 32 = 0x20
    MPQueueFeeder *_feeder;	// 40 = 0x28
    float _soundCheckVolumeNormalization;	// 48 = 0x30
    double _cachedDuration;	// 56 = 0x38
    double _cachedPlayableDuration;	// 64 = 0x40
    NSArray *_cachedSeekableTimeRanges;	// 72 = 0x48
    double _seekableTimeRangesCacheTime;	// 80 = 0x50
    long long _type;	// 88 = 0x58
    MPNowPlayingContentItem *_contentItem;	// 96 = 0x60
    float _defaultPlaybackRate;	// 104 = 0x68
    unsigned int _advancedDuringPlayback:1;	// 108 = 0x6c
    unsigned int _handledFinishTime:1;	// 108 = 0x6c
    unsigned int _hasPlayedThisSession:1;	// 108 = 0x6c
    unsigned int _wasCountedAsSkipped:1;	// 108 = 0x6c
    unsigned int _isStreamable:2;	// 108 = 0x6c
    unsigned int _watchingAttributes:1;	// 108 = 0x6c
    unsigned int _userChangedItemsDuringPlayback:1;	// 108 = 0x6c
    unsigned int _lyricsAvailable:1;	// 109 = 0x6d
    struct os_unfair_lock_s _lock;	// 112 = 0x70
    _Bool _hasLoadedHasProtectedContent;	// 116 = 0x74
    _Bool _hasLoadedPlaybackMode;	// 117 = 0x75
    _Bool _hasValidPlayerItemDuration;	// 118 = 0x76
    double _lastLoggedTotalDuration;	// 120 = 0x78
    long long _likedState;	// 128 = 0x80
    CDStruct_1b6d18a9 _playerItemDuration;	// 136 = 0x88
    long long _exportableArtworkRevision;	// 160 = 0xa0
    MPMediaLibraryPrivacyContext *_privacyContext;	// 168 = 0xa8
    _Bool _meetsPlaybackHistoryThreshold;	// 176 = 0xb0
    _Bool _assetLoaded;	// 177 = 0xb1
    _Bool _didAttemptToLoadAsset;	// 178 = 0xb2
    _Bool _canReusePlayerItem;	// 179 = 0xb3
    _Bool _useEmbeddedChapterData;	// 180 = 0xb4
    _Bool _likedStateEnabled;	// 181 = 0xb5
    _Bool _supportsLikedState;	// 182 = 0xb6
    _Bool _prefersSeekOverSkip;	// 183 = 0xb7
    _Bool _hasProtectedContent;	// 184 = 0xb8
    _Bool _tailPlaceholder;	// 185 = 0xb9
    _Bool _startItem;	// 186 = 0xba
    _Bool _shouldPreventPlayback;	// 187 = 0xbb
    _Bool _allowsAirPlayFromCloud;	// 188 = 0xbc
    _Bool _allowsExternalPlayback;	// 189 = 0xbd
    _Bool _requiresLoadedAssetForAirPlayProperties;	// 190 = 0xbe
    _Bool _hasFinishedDownloading;	// 191 = 0xbf
    _Bool _hasPerformedErrorResolution;	// 192 = 0xc0
    _Bool _activeItem;	// 193 = 0xc1
    _Bool _externalDisplay;	// 194 = 0xc2
    _Bool _didReachEnd;	// 195 = 0xc3
    _Bool _autoPlayItem;	// 196 = 0xc4
    _Bool _sharedListeningItem;	// 197 = 0xc5
    float _currentPlaybackRate;	// 200 = 0xc8
    float _loudnessInfoVolumeNormalization;	// 204 = 0xcc
    id _rtcReportingParentHierarchyToken;	// 208 = 0xd0
    id <MPAVItemObserver> _observer;	// 216 = 0xd8
    NSError *_itemError;	// 224 = 0xe0
    NSString *_queueIdentifier;	// 232 = 0xe8
    long long _playbackMode;	// 240 = 0xf0
    NSArray *_chapterTimeMarkers;	// 248 = 0xf8
    NSArray *_artworkTimeMarkers;	// 256 = 0x100
    NSArray *_urlTimeMarkers;	// 264 = 0x108
    NSArray *_closedCaptionTimeMarkers;	// 272 = 0x110
    long long _albumStoreID;	// 280 = 0x118
    NSString *_copyrightText;	// 288 = 0x120
    NSString *_externalContentIdentifier;	// 296 = 0x128
    long long _storeItemInt64ID;	// 304 = 0x130
    long long _storeSubscriptionAdamID;	// 312 = 0x138
    MPMediaItem *_mediaItem;	// 320 = 0x140
    NSString *_explicitBadge;	// 328 = 0x148
    long long _repeatIndex;	// 336 = 0x150
    long long _lastChangeDirection;	// 344 = 0x158
    MPModelGenericObject *_modelGenericObject;	// 352 = 0x160
    MPModelPlayEvent *_modelPlayEvent;	// 360 = 0x168
    NSNumber *_initialPlaybackStartTimeOverride;	// 368 = 0x170
    NSNumber *_lastMetadataChangeTime;	// 376 = 0x178
    NSString *_rtcReportingServiceIdentifier;	// 384 = 0x180
    NSDictionary *_playbackInfo;	// 392 = 0x188
    NSString *_storeFrontIdentifier;	// 400 = 0x190
    NSNumber *_storeAccountID;	// 408 = 0x198
    NSNumber *_useListeningHistory;	// 416 = 0x1a0
    long long _leasePlaybackPreventionState;	// 424 = 0x1a8
    ICMusicSubscriptionLeaseStatus *_leaseStatus;	// 432 = 0x1b0
    NSString *_contentItemID;	// 440 = 0x1b8
    NSString *_previousContentItemID;	// 448 = 0x1c0
    long long _explicitContentState;	// 456 = 0x1c8
}

+ (id)URLFromPath:(id)arg1;	// IMP=0x00000000000207a2
+ (_Bool)isPlaceholder;	// IMP=0x000000000002079a
- (void).cxx_destruct;	// IMP=0x000000000001f5eb
@property(nonatomic) long long explicitContentState; // @synthesize explicitContentState=_explicitContentState;
@property(nonatomic, getter=isSharedListeningItem) _Bool sharedListeningItem; // @synthesize sharedListeningItem=_sharedListeningItem;
@property(nonatomic, getter=isAutoPlayItem) _Bool autoPlayItem; // @synthesize autoPlayItem=_autoPlayItem;
@property(copy, nonatomic) NSString *previousContentItemID; // @synthesize previousContentItemID=_previousContentItemID;
@property(copy, nonatomic) NSString *contentItemID; // @synthesize contentItemID=_contentItemID;
@property(readonly, nonatomic) _Bool didReachEnd; // @synthesize didReachEnd=_didReachEnd;
@property(readonly, copy, nonatomic) ICMusicSubscriptionLeaseStatus *leaseStatus; // @synthesize leaseStatus=_leaseStatus;
@property(readonly, nonatomic) long long leasePlaybackPreventionState; // @synthesize leasePlaybackPreventionState=_leasePlaybackPreventionState;
@property(readonly, nonatomic) NSNumber *useListeningHistory; // @synthesize useListeningHistory=_useListeningHistory;
@property(readonly, nonatomic) NSNumber *storeAccountID; // @synthesize storeAccountID=_storeAccountID;
@property(nonatomic, getter=hasExternalDisplay) _Bool externalDisplay; // @synthesize externalDisplay=_externalDisplay;
@property(readonly, copy, nonatomic) NSString *storeFrontIdentifier; // @synthesize storeFrontIdentifier=_storeFrontIdentifier;
@property(nonatomic, getter=isActiveItem) _Bool activeItem; // @synthesize activeItem=_activeItem;
@property(copy, nonatomic) NSDictionary *playbackInfo; // @synthesize playbackInfo=_playbackInfo;
@property(nonatomic) _Bool hasPerformedErrorResolution; // @synthesize hasPerformedErrorResolution=_hasPerformedErrorResolution;
@property(readonly, nonatomic) _Bool hasFinishedDownloading; // @synthesize hasFinishedDownloading=_hasFinishedDownloading;
@property(readonly, nonatomic) _Bool requiresLoadedAssetForAirPlayProperties; // @synthesize requiresLoadedAssetForAirPlayProperties=_requiresLoadedAssetForAirPlayProperties;
@property(readonly, nonatomic) _Bool allowsExternalPlayback; // @synthesize allowsExternalPlayback=_allowsExternalPlayback;
@property(readonly, nonatomic) _Bool allowsAirPlayFromCloud; // @synthesize allowsAirPlayFromCloud=_allowsAirPlayFromCloud;
@property(readonly, copy, nonatomic) NSString *rtcReportingServiceIdentifier; // @synthesize rtcReportingServiceIdentifier=_rtcReportingServiceIdentifier;
@property(copy, nonatomic) NSNumber *lastMetadataChangeTime; // @synthesize lastMetadataChangeTime=_lastMetadataChangeTime;
@property(copy, nonatomic) NSNumber *initialPlaybackStartTimeOverride; // @synthesize initialPlaybackStartTimeOverride=_initialPlaybackStartTimeOverride;
@property(retain, nonatomic) MPModelPlayEvent *modelPlayEvent; // @synthesize modelPlayEvent=_modelPlayEvent;
@property(readonly, nonatomic) MPModelGenericObject *modelGenericObject; // @synthesize modelGenericObject=_modelGenericObject;
@property(readonly, nonatomic) _Bool shouldPreventPlayback; // @synthesize shouldPreventPlayback=_shouldPreventPlayback;
@property(nonatomic) long long lastChangeDirection; // @synthesize lastChangeDirection=_lastChangeDirection;
@property(nonatomic) long long repeatIndex; // @synthesize repeatIndex=_repeatIndex;
@property(nonatomic, getter=isStartItem) _Bool startItem; // @synthesize startItem=_startItem;
@property(readonly, nonatomic, getter=isTailPlaceholder) _Bool tailPlaceholder; // @synthesize tailPlaceholder=_tailPlaceholder;
@property(copy, nonatomic) NSString *explicitBadge; // @synthesize explicitBadge=_explicitBadge;
@property(readonly, nonatomic) _Bool hasProtectedContent; // @synthesize hasProtectedContent=_hasProtectedContent;
@property(readonly, nonatomic) _Bool prefersSeekOverSkip; // @synthesize prefersSeekOverSkip=_prefersSeekOverSkip;
@property(nonatomic) float loudnessInfoVolumeNormalization; // @synthesize loudnessInfoVolumeNormalization=_loudnessInfoVolumeNormalization;
@property(readonly, retain, nonatomic) MPMediaItem *mediaItem; // @synthesize mediaItem=_mediaItem;
@property(readonly, nonatomic) long long storeSubscriptionAdamID; // @synthesize storeSubscriptionAdamID=_storeSubscriptionAdamID;
@property(readonly, nonatomic) long long storeItemInt64ID; // @synthesize storeItemInt64ID=_storeItemInt64ID;
@property(readonly, nonatomic) _Bool supportsLikedState; // @synthesize supportsLikedState=_supportsLikedState;
@property(readonly, nonatomic, getter=isLikedStateEnabled) _Bool likedStateEnabled; // @synthesize likedStateEnabled=_likedStateEnabled;
@property(readonly, copy, nonatomic) NSString *externalContentIdentifier; // @synthesize externalContentIdentifier=_externalContentIdentifier;
@property(readonly, copy, nonatomic) NSString *copyrightText; // @synthesize copyrightText=_copyrightText;
@property(readonly, nonatomic) long long albumStoreID; // @synthesize albumStoreID=_albumStoreID;
@property(readonly, nonatomic) _Bool useEmbeddedChapterData; // @synthesize useEmbeddedChapterData=_useEmbeddedChapterData;
@property(retain, nonatomic) NSArray *closedCaptionTimeMarkers; // @synthesize closedCaptionTimeMarkers=_closedCaptionTimeMarkers;
@property(readonly, nonatomic) NSArray *urlTimeMarkers; // @synthesize urlTimeMarkers=_urlTimeMarkers;
@property(readonly, nonatomic) NSArray *artworkTimeMarkers; // @synthesize artworkTimeMarkers=_artworkTimeMarkers;
@property(readonly, nonatomic) NSArray *chapterTimeMarkers; // @synthesize chapterTimeMarkers=_chapterTimeMarkers;
@property(readonly, nonatomic) long long playbackMode; // @synthesize playbackMode=_playbackMode;
@property(retain, nonatomic) NSString *queueIdentifier; // @synthesize queueIdentifier=_queueIdentifier;
@property(retain, nonatomic) NSError *itemError; // @synthesize itemError=_itemError;
@property(readonly, nonatomic) _Bool canReusePlayerItem; // @synthesize canReusePlayerItem=_canReusePlayerItem;
@property(readonly, nonatomic) _Bool didAttemptToLoadAsset; // @synthesize didAttemptToLoadAsset=_didAttemptToLoadAsset;
@property(readonly, nonatomic, getter=isAssetLoaded) _Bool assetLoaded; // @synthesize assetLoaded=_assetLoaded;
@property(readonly, nonatomic) _Bool meetsPlaybackHistoryThreshold; // @synthesize meetsPlaybackHistoryThreshold=_meetsPlaybackHistoryThreshold;
@property(nonatomic) __weak id <MPAVItemObserver> observer; // @synthesize observer=_observer;
@property(retain, nonatomic) id rtcReportingParentHierarchyToken; // @synthesize rtcReportingParentHierarchyToken=_rtcReportingParentHierarchyToken;
@property(nonatomic) float soundCheckVolumeNormalization; // @synthesize soundCheckVolumeNormalization=_soundCheckVolumeNormalization;
@property(nonatomic) _Bool isAssetLoaded; // @synthesize isAssetLoaded=_isAssetLoaded;
@property(nonatomic) float defaultPlaybackRate; // @synthesize defaultPlaybackRate=_defaultPlaybackRate;
@property(nonatomic, getter=_currentPlaybackRate, setter=_setCurrentPlaybackRate:) float _currentPlaybackRate; // @synthesize _currentPlaybackRate;
- (void)resumeContentKeySession;	// IMP=0x000000000001f1e3
- (void)pauseContentKeySession;	// IMP=0x000000000001f1dd
- (id)analyticsFormatType;	// IMP=0x000000000001f1d0
- (id)analyticsContentType;	// IMP=0x000000000001f1c3
- (void)_didBecomeActivePlayerItem;	// IMP=0x000000000001f1bd
- (void)_didResignActivePlayerItem;	// IMP=0x000000000001f1b7
- (void)_willResignActivePlayerItem;	// IMP=0x000000000001f1aa
- (void)_willBecomeActivePlayerItem;	// IMP=0x000000000001f196
- (void)_updateHasFinishedDownloading;	// IMP=0x000000000001ecb1
- (void)resolvePlaybackError:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;	// IMP=0x000000000001eb6e
- (void)replacePlayerItemWithPlayerItem:(id)arg1;	// IMP=0x000000000001ea41
- (void)reevaluateType;	// IMP=0x000000000001e5c1
- (void)reevaluateHasProtectedContent;	// IMP=0x000000000001e539
- (void)invalidateContentItemAudioFormatInfo;	// IMP=0x000000000001e4e6
- (void)invalidateContentItemDeviceSpecificUserInfo;	// IMP=0x000000000001e493
- (void)invalidateContentItemUserInfo;	// IMP=0x000000000001e440
- (void)_setNeedsPersistedLikedStateUpdate;	// IMP=0x000000000001e385
- (long long)_persistedLikedState;	// IMP=0x000000000001e33f
- (void)_handleUpdatedLikedState:(long long)arg1 forUserIdentity:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000001e339
- (double)_expectedStopTimeWithPlaybackInfo:(id)arg1;	// IMP=0x000000000001e27c
- (double)_expectedStartTimeWithPlaybackInfo:(id)arg1;	// IMP=0x000000000001e220
- (void)_applyLoudnessInfo;	// IMP=0x000000000001e21a
- (void)_currentPlaybackRateDidChange:(float)arg1;	// IMP=0x000000000001e214
- (void)_updateDurationSnapshotWithElapsedTime:(double)arg1 playbackRate:(float)arg2;	// IMP=0x000000000001e1be
- (void)setupWithPlaybackInfo;	// IMP=0x000000000001d838
- (void)setupEQPresetWithDefaultPreset:(long long)arg1;	// IMP=0x000000000001d707
- (id)_contentItemDeviceSpecificUserInfo;	// IMP=0x000000000001c9d0
- (id)_contentItemUserInfo;	// IMP=0x000000000001c00f
- (void)_updateAudioFormatInfoForContentItem:(id)arg1;	// IMP=0x000000000001c009
- (void)_updateContentItem;	// IMP=0x000000000001b648
- (void)_onAssetQueueClearAsset;	// IMP=0x000000000001b607
- (void)_clearAssetNow;	// IMP=0x000000000001b5bc
- (void)_clearAsset;	// IMP=0x000000000001b571
- (void)_performContentItemUpdate:(CDUnknownBlockType)arg1;	// IMP=0x000000000001b4bf
- (_Bool)_shouldPublishArtworkURL;	// IMP=0x000000000001b46d
- (void)_updateSoundCheckVolumeNormalizationForPlayerItem;	// IMP=0x000000000001b2b4
- (void)_loadAssetProperties;	// IMP=0x000000000001b28e
- (double)_playableDurationForLoadedTimeRanges:(id)arg1;	// IMP=0x000000000001b17d
- (id)_seekableTimeRanges;	// IMP=0x000000000001b0be
- (id)_initialPlaybackStartTimeForPlaybackInfo:(id)arg1;	// IMP=0x000000000001afc5
- (void)_likedStateDidChange;	// IMP=0x000000000001af56
- (void)_removeObservationsForAVPlayerItem:(id)arg1;	// IMP=0x000000000001aecf
- (void)_addObservationsForAVPlayerItem:(id)arg1;	// IMP=0x000000000001ae36
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x000000000001abdb
- (void)_itemAttributeAvailableKey:(id)arg1;	// IMP=0x000000000001aa22
- (void)_internalLikedStateDidChangeNotification:(id)arg1;	// IMP=0x000000000001a9bd
@property(readonly, nonatomic) double timeOfSeekableEnd;
@property(readonly, nonatomic) double timeOfSeekableStart;
@property(readonly, nonatomic) struct OpaqueCMTimebase *timebase;
@property(readonly, nonatomic) CDStruct_1b6d18a9 _playerItemDurationIfAvailable;
@property(readonly, nonatomic) double playableDurationIfAvailable;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double durationIfAvailable;
- (double)_durationFromExternalMetadataIfAvailable;	// IMP=0x000000000001a3c0
@property(readonly, nonatomic) _Bool durationIsValid;
@property(readonly, nonatomic) double durationFromExternalMetadata;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
@property(readonly, nonatomic) _Bool shouldShowComposer;
@property(readonly, nonatomic) long long storePurchasedAdamID;
@property(readonly, nonatomic) unsigned long long composerPersistentID;
@property(readonly, nonatomic) unsigned long long genrePersistentID;
@property(readonly, nonatomic) unsigned long long artistPersistentID;
@property(readonly, nonatomic) unsigned long long albumArtistPersistentID;
@property(readonly, nonatomic) unsigned long long albumPersistentID;
@property(readonly, nonatomic) NSString *cloudAlbumID;
@property(readonly, nonatomic) NSString *cloudUniversalLibraryID;
@property(readonly, nonatomic) NSString *personID;
@property(readonly, nonatomic) unsigned long long cloudID;
@property(readonly, nonatomic) NSString *databaseID;
@property(readonly, nonatomic) unsigned long long persistentID;
@property(readonly, nonatomic) unsigned long long mediaType;
@property(readonly, nonatomic) float userRating;
@property(readonly, nonatomic) long long type;
- (id)_imageChapterTrackIDsForAsset:(id)arg1;	// IMP=0x000000000001a082
@property(readonly, nonatomic) long long stationProviderID;
@property(readonly, copy, nonatomic) NSString *stationStringID;
@property(readonly, copy, nonatomic) NSString *stationName;
@property(readonly, copy, nonatomic) NSString *stationHash;
@property(readonly, nonatomic) long long stationID;
@property(readonly, nonatomic) _Bool stationAllowsItemLiking;
@property(readonly, nonatomic, getter=isRadioItem) _Bool radioItem;
@property(readonly, nonatomic) MPNowPlayingContentItem *contentItem;
@property(readonly, nonatomic) NSArray *timedMetadataIfAvailable;
@property(readonly, nonatomic) _Bool supportsRating;
@property(readonly, nonatomic) NSString *storeItemID;
- (void)setLikedState:(long long)arg1 forUserIdentity:(id)arg2;	// IMP=0x0000000000019d19
@property(nonatomic) long long likedState;
@property(nonatomic) _Bool hasPlayedThisSession;
- (float)scanIntervalForLevel:(unsigned long long)arg1 paused:(_Bool)arg2;	// IMP=0x0000000000019c90
@property(nonatomic) __weak MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
@property(readonly, nonatomic) CDStruct_1b6d18a9 forwardPlaybackEndTime;
@property(readonly, nonatomic) struct CGSize presentationSize;
- (void)prepareForRate:(float)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000019b74
- (float)playbackRateForLevel:(unsigned long long)arg1 direction:(long long)arg2 paused:(_Bool)arg3;	// IMP=0x0000000000019ad8
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) NSString *mainTitle;
@property(readonly, nonatomic) _Bool allowsEQ;
@property(readonly, nonatomic) long long customAVEQPreset;
@property(readonly, nonatomic, getter=isStreamable) _Bool streamable;
@property(readonly, nonatomic, getter=isAlwaysLive) _Bool alwaysLive;
- (_Bool)isAd;	// IMP=0x00000000000198bc
@property(readonly, copy, nonatomic) NSString *containerUniqueID;
@property(readonly, nonatomic) _Bool hasTimeSyncedLyrics;
@property(readonly, nonatomic) _Bool hasStoreLyrics;
@property(readonly, nonatomic) NSString *libraryLyrics;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) NSString *displayableText;
@property(readonly, nonatomic) _Bool displayableTextLoaded;
@property(readonly, nonatomic) _Bool usesSubscriptionLease;
@property(readonly, nonatomic) double currentTimeDisplayOverride;
@property(readonly, nonatomic) NSString *genre;
@property(readonly, nonatomic, getter=isExplicitTrack) _Bool explicitTrack;
@property(readonly, nonatomic, getter=isAssetURLValid) _Bool assetURLValid;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;	// IMP=0x0000000000019692
@property(readonly, nonatomic) unsigned long long discCount;
@property(readonly, nonatomic) unsigned long long discNumber;
@property(readonly, nonatomic) NSString *composer;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(_Bool)arg1;	// IMP=0x0000000000019674
@property(readonly, nonatomic) unsigned long long albumTrackCount;
@property(readonly, nonatomic) unsigned long long albumTrackNumber;
@property(readonly, nonatomic) long long artistStoreID;
@property(readonly, nonatomic) NSString *albumArtist;
@property(readonly, nonatomic, getter=isArtistUploadedContent) _Bool artistUploadedContent;
@property(readonly, nonatomic) NSString *artist;
- (long long)albumYear;	// IMP=0x000000000001963c
@property(readonly, nonatomic) NSString *album;
@property(readonly, nonatomic) AVPlayerItemAccessLog *accessLog;
- (id)url;	// IMP=0x0000000000019544
- (id)path;	// IMP=0x000000000001947e
- (double)durationInSeconds;	// IMP=0x00000000000193df
@property(nonatomic) _Bool userChangedItemsDuringPlayback;
@property(nonatomic) _Bool userSkippedPlayback;
@property(nonatomic) _Bool userAdvancedDuringPlayback;
- (void)setSubtitleTrackID:(int)arg1;	// IMP=0x000000000001937e
- (int)subtitleTrackID;	// IMP=0x0000000000019376
- (void)setRating:(float)arg1;	// IMP=0x0000000000019370
- (void)setPlaybackFinishedTime:(double)arg1;	// IMP=0x0000000000019366
- (void)setPlaybackCheckpointCurrentTime:(double)arg1;	// IMP=0x0000000000019360
- (void)notePlaybackFinishedByHittingEnd;	// IMP=0x000000000001934f
- (void)setPlaybackStoppedTime:(double)arg1;	// IMP=0x0000000000019349
- (void)resetBookkeeping;	// IMP=0x000000000001933f
@property(readonly, copy, nonatomic) NSNumber *playbackInfoStartTime;
@property(readonly, copy, nonatomic) NSNumber *initialPlaybackStartTime;
@property(readonly, copy, nonatomic) NSNumber *bookmarkTime;
@property(readonly, copy, nonatomic) NSError *playbackError;
@property(readonly, nonatomic) long long status;
@property(retain, nonatomic) AVPlayerItem *playerItem;
@property(readonly, nonatomic) AVAsset *asset;
- (void)updatePlayerItemMetadata;	// IMP=0x0000000000018e68
- (void)_loadAssetAndPlayerItem;	// IMP=0x0000000000018d0a
- (void)loadAssetAndPlayerItem;	// IMP=0x0000000000018d04
- (void)disableItemReuse;	// IMP=0x0000000000018cf7
- (id)description;	// IMP=0x0000000000018c6f
@property(readonly, nonatomic) _Bool supportsRateChange;
@property(readonly, nonatomic) _Bool supportsRewind;
@property(readonly, nonatomic) _Bool supportsFastForward;
@property(readonly, nonatomic) _Bool canUseLoadedAsset;
- (void)dealloc;	// IMP=0x0000000000018adc
- (id)initWithPlayerItem:(id)arg1;	// IMP=0x00000000000188bc
- (id)initWithAsset:(id)arg1;	// IMP=0x0000000000018863
- (id)initWithURL:(id)arg1 options:(id)arg2;	// IMP=0x0000000000018809
- (id)initWithURL:(id)arg1;	// IMP=0x00000000000187ad
- (id)init;	// IMP=0x0000000000018799
- (_Bool)isSupportedDefaultPlaybackSpeed:(long long)arg1;	// IMP=0x000000000001878d
@property(readonly, nonatomic, getter=isPlaceholder) _Bool placeholder;
- (void)setMeetsPlaybackHistoryThresholdForElapsedTime:(double)arg1 startTime:(double)arg2;	// IMP=0x000000000001875a
- (CDUnknownBlockType)artworkCatalogBlock;	// IMP=0x000000000004b445
- (id)artworkCatalogForPlaybackTime:(double)arg1;	// IMP=0x000000000004b3e1

@end

