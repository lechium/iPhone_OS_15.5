//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MediaPlayer/AVAudioSessionDelegateMediaPlayerOnly-Protocol.h>
#import <MediaPlayer/MPAVQueueControllerDelegate-Protocol.h>
#import <MediaPlayer/MPAVRoutingControllerDelegate-Protocol.h>

@class MPAVItem, MPAVPolicyEnforcer, MPAVRoute, MPAVRoutingController, MPQueueFeeder, MPQueuePlayer, NSArray, NSMapTable, NSMutableArray, NSMutableSet, NSNotification, NSString;
@protocol MPAVQueueController, MPAVQueueCoordinating, OS_dispatch_source;

@interface MPAVController : NSObject <MPAVRoutingControllerDelegate, MPAVQueueControllerDelegate, AVAudioSessionDelegateMediaPlayerOnly>
{
    _Bool _didResolveError;	// 8 = 0x8
    _Bool _disableAirPlayMirroringDuringPlayback;	// 9 = 0x9
    _Bool _shouldPreventStateChangesForRateChange;	// 10 = 0xa
    unsigned long long _stallBackgroundTaskIdentifier;	// 16 = 0x10
    _Bool _usesAudioOnlyModeForExternalPlayback;	// 24 = 0x18
    long long _playbackMode;	// 32 = 0x20
    _Bool _valid;	// 40 = 0x28
    _Bool _allowsItemErrorResolution;	// 41 = 0x29
    MPAVRoutingController *_routingController;	// 48 = 0x30
    MPAVRoute *_pickedRoute;	// 56 = 0x38
    id _periodicTimeObserverToken;	// 64 = 0x40
    unsigned long long _tickTimerEnabled;	// 72 = 0x48
    struct __CFRunLoopTimer *_tickTimer;	// 80 = 0x50
    double _tickInterval;	// 88 = 0x58
    struct __CFRunLoopTimer *_currentItemBookkeepingTimer;	// 96 = 0x60
    long long _indexChangeDirection;	// 104 = 0x68
    NSString *_contentItemIDAtDeath;	// 112 = 0x70
    long long _lastDisconnectReason;	// 120 = 0x78
    double _lastKnownTimeBeforeDeath;	// 128 = 0x80
    double _lastPlaybackIndexChangeTime;	// 136 = 0x88
    double _lastSetTime;	// 144 = 0x90
    double _lastSetTimeChangeTime;	// 152 = 0x98
    unsigned int _hasDelayedCurrentTimeToSet:1;	// 160 = 0xa0
    unsigned int _forceDelayedCurrentTimeToSet:1;	// 160 = 0xa0
    double _delayedCurrentTimeToSet;	// 168 = 0xa8
    CDStruct_1b6d18a9 _pendingCurrentTime;	// 176 = 0xb0
    long long _delayedCurrentTimeOptions;	// 200 = 0xc8
    unsigned long long _lastSetTimeMarker;	// 208 = 0xd0
    double _temporaryChapterTime;	// 216 = 0xd8
    unsigned int _autoPlayWhenLikelyToKeepUp:1;	// 224 = 0xe0
    unsigned int _autoplayDisabledForCurrentItem:1;	// 224 = 0xe0
    _Bool _autoPlayBackgroundTaskAssertionEnabled;	// 225 = 0xe1
    long long _autoPlayBackgroundTaskCount;	// 232 = 0xe8
    _Bool _appHasBeenSuspended;	// 240 = 0xf0
    unsigned long long _deactivationReasons;	// 248 = 0xf8
    unsigned long long _autoPlayBackgroundTaskIdentifier;	// 256 = 0x100
    NSObject<OS_dispatch_source> *_autoPlayTimeoutSource;	// 264 = 0x108
    double _nextFadeOutDuration;	// 272 = 0x110
    _Bool _hasPendingRate;	// 280 = 0x118
    _Bool _hasSentTracePlaybackStartDidFinish;	// 281 = 0x119
    MPAVItem *_pendingRateItem;	// 288 = 0x120
    float _pendingRate;	// 296 = 0x128
    _Bool _pendingChangeForScanning;	// 300 = 0x12c
    id _boundaryTimeObserver;	// 304 = 0x130
    NSArray *_boundaryTimes;	// 312 = 0x138
    unsigned long long _boundaryTimeIndexLastPosted;	// 320 = 0x140
    NSMutableArray *_observerInfos;	// 328 = 0x148
    NSMapTable *_observerInfoToCoreMediaObserver;	// 336 = 0x150
    float _rateBeforeSeek;	// 344 = 0x158
    float _inflightSeekRate;	// 348 = 0x15c
    unsigned long long _scanLevel;	// 352 = 0x160
    long long _scanDirection;	// 360 = 0x168
    long long _resetRateAfterSeekingUpdateDisabled;	// 368 = 0x170
    long long _seeklessState;	// 376 = 0x178
    unsigned int _isSeekingOrScrubbing:1;	// 384 = 0x180
    unsigned int _resetRateAfterSeeking:1;	// 384 = 0x180
    unsigned int _activeRewindHoldingAtStart:1;	// 384 = 0x180
    double _lastSeekableEnd;	// 392 = 0x188
    double _whenSawSeekableEnd;	// 400 = 0x190
    double _maxSeekableFwd;	// 408 = 0x198
    double _seekFwdSlop;	// 416 = 0x1a0
    double _lastSeekableStart;	// 424 = 0x1a8
    double _whenSawSeekableStart;	// 432 = 0x1b0
    double _maxSeekableRev;	// 440 = 0x1b8
    double _seekRevSlop;	// 448 = 0x1c0
    unsigned int _canSeekRev:1;	// 456 = 0x1c8
    unsigned int _canSeekFwd:1;	// 456 = 0x1c8
    unsigned int _alwaysPlayWheneverPossible:1;	// 456 = 0x1c8
    unsigned int _stopAtEnd:1;	// 456 = 0x1c8
    unsigned int _didReachEnd:1;	// 456 = 0x1c8
    unsigned int _pausedDuringInterruption:1;	// 456 = 0x1c8
    unsigned int _resumePlaybackWhenActive:1;	// 456 = 0x1c8
    unsigned int _useApplicationAudioSession:1;	// 456 = 0x1c8
    unsigned int _playInBackgroundUserDefaultEnabled:1;	// 457 = 0x1c9
    unsigned int _canPlayFastForward:1;	// 457 = 0x1c9
    unsigned int _canPlayFastReverse:1;	// 457 = 0x1c9
    unsigned int _shouldAutoclearDisplayOverride:1;	// 457 = 0x1c9
    long long _state;	// 464 = 0x1d0
    long long _displayOverridePlaybackState;	// 472 = 0x1d8
    unsigned long long _bufferingState;	// 480 = 0x1e0
    NSNotification *_delayedPlaybackStateNotification;	// 488 = 0x1e8
    NSObject<OS_dispatch_source> *_stallTimerSource;	// 496 = 0x1f0
    _Bool _hasProvidedAudibleLikelyToKeepUp;	// 504 = 0x1f8
    _Bool _hasProvidedAudiblePlay;	// 505 = 0x1f9
    double _itemInitialBookmarkTime;	// 512 = 0x200
    float _rateBeforeResignActive;	// 520 = 0x208
    long long _ubiquitousBookkeepingDisabledCount;	// 528 = 0x210
    double _secondsSinceUbiquitousCheckpoint;	// 536 = 0x218
    Class _videoViewClass;	// 544 = 0x220
    double _lastInterruptionEnd;	// 552 = 0x228
    _Bool _shouldEnforceHDCP;	// 560 = 0x230
    NSMutableSet *_clientsWantingExternalPlayback;	// 568 = 0x238
    long long _currentItemRevisionID;	// 576 = 0x240
    _Bool _muted;	// 584 = 0x248
    _Bool _shouldPostCompatibilityNotifications;	// 585 = 0x249
    _Bool _isReloadingForPlaybackContextChange;	// 586 = 0x24a
    _Bool _canAttemptErrorResolution;	// 587 = 0x24b
    _Bool _useAirPlayMusicMode;	// 588 = 0x24c
    _Bool _managesAirPlayBehaviors;	// 589 = 0x24d
    long long _lastDirection;	// 592 = 0x250
    MPAVPolicyEnforcer *_policyEnforcer;	// 600 = 0x258
    long long _actionAfterQueueLoadOverride;	// 608 = 0x260
    MPQueuePlayer *_queuePlayer;	// 616 = 0x268
    id <MPAVQueueCoordinating> _queueCoordinator;	// 624 = 0x270
    id <MPAVQueueController> _queueController;	// 632 = 0x278
    NSString *_identifier;	// 640 = 0x280
    long long _stateBeforeInterruption;	// 648 = 0x288
}

+ (_Bool)automaticallyNotifiesObserversOfPlaylistManager;	// IMP=0x000000000004b353
+ (_Bool)prefersApplicationAudioSession;	// IMP=0x000000000004b34b
+ (id)_playerKeysToObserve;	// IMP=0x000000000004b33e
+ (id)_itemKeysToObserve;	// IMP=0x000000000004b30e
+ (_Bool)outputSupportsAC3;	// IMP=0x000000000004b12f
+ (id)keyPathsForValuesAffectingCurrentItem;	// IMP=0x000000000004b10f
+ (void)initialize;	// IMP=0x000000000004b0cd
- (void).cxx_destruct;	// IMP=0x0000000000049d69
@property(readonly, nonatomic) long long stateBeforeInterruption; // @synthesize stateBeforeInterruption=_stateBeforeInterruption;
@property(nonatomic) _Bool managesAirPlayBehaviors; // @synthesize managesAirPlayBehaviors=_managesAirPlayBehaviors;
@property(nonatomic) _Bool useAirPlayMusicMode; // @synthesize useAirPlayMusicMode=_useAirPlayMusicMode;
@property(readonly, copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly, nonatomic) _Bool canAttemptErrorResolution; // @synthesize canAttemptErrorResolution=_canAttemptErrorResolution;
@property(nonatomic) _Bool isReloadingForPlaybackContextChange; // @synthesize isReloadingForPlaybackContextChange=_isReloadingForPlaybackContextChange;
@property(nonatomic) _Bool shouldPostCompatibilityNotifications; // @synthesize shouldPostCompatibilityNotifications=_shouldPostCompatibilityNotifications;
@property(nonatomic) _Bool shouldEnforceHDCP; // @synthesize shouldEnforceHDCP=_shouldEnforceHDCP;
@property(nonatomic) double nextFadeOutDuration; // @synthesize nextFadeOutDuration=_nextFadeOutDuration;
@property(readonly, nonatomic) id <MPAVQueueController> queueController; // @synthesize queueController=_queueController;
@property(retain, nonatomic) id <MPAVQueueCoordinating> queueCoordinator; // @synthesize queueCoordinator=_queueCoordinator;
@property(retain, nonatomic) MPQueuePlayer *queuePlayer; // @synthesize queuePlayer=_queuePlayer;
@property(nonatomic) long long actionAfterQueueLoadOverride; // @synthesize actionAfterQueueLoadOverride=_actionAfterQueueLoadOverride;
@property(retain, nonatomic) MPAVPolicyEnforcer *policyEnforcer; // @synthesize policyEnforcer=_policyEnforcer;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(nonatomic) long long playbackMode; // @synthesize playbackMode=_playbackMode;
@property(readonly, nonatomic) unsigned long long bufferingState; // @synthesize bufferingState=_bufferingState;
@property(readonly, nonatomic) _Bool muted; // @synthesize muted=_muted;
@property(readonly, nonatomic) long long lastDirection; // @synthesize lastDirection=_lastDirection;
@property(nonatomic) long long displayOverridePlaybackState; // @synthesize displayOverridePlaybackState=_displayOverridePlaybackState;
- (void)removeTimeObserver:(id)arg1;	// IMP=0x0000000000049bf1
- (id)addPeriodicTimeObserverForInterval:(double)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000000049bd8
- (void)_enforcingPolicy:(_Bool)arg1;	// IMP=0x0000000000049bd2
- (void)_itemDidSignificantlyChangeElapsedTime:(double)arg1 rate:(float)arg2;	// IMP=0x0000000000049b79
- (void)_queueDidEndWithReason:(id)arg1 lastItem:(id)arg2;	// IMP=0x0000000000049abd
- (void)_updateDirectionForChangeDelta:(long long)arg1;	// IMP=0x0000000000049a8b
- (void)_updateCurrentItemDurationSnapshotWithPlayerTime:(CDStruct_1b6d18a9)arg1;	// IMP=0x000000000004993c
- (void)_resumePlaybackIfNecessary;	// IMP=0x0000000000049834
- (void)_pausePlaybackIfNecessaryIgnoringVideoLayerAttachment:(_Bool)arg1;	// IMP=0x000000000004956f
- (void)_pausePlaybackIfNecessary;	// IMP=0x000000000004955b
- (void)_handlePlaybackErrorResolutionType:(long long)arg1 forItem:(id)arg2 playbackError:(id)arg3 resolutionError:(id)arg4;	// IMP=0x0000000000049327
- (_Bool)_canPlayItem:(id)arg1;	// IMP=0x000000000004931f
- (void)handlePlaybackErrorWithUserInfo:(id)arg1;	// IMP=0x0000000000049319
- (void)playbackHasStartedForItem:(id)arg1;	// IMP=0x00000000000492ff
- (void)_playbackFailedWithError:(id)arg1 canResolve:(_Bool)arg2;	// IMP=0x0000000000048faf
- (id)_pickedRoute;	// IMP=0x0000000000048fa1
- (void)_resumeTickTimer;	// IMP=0x0000000000048f70
- (void)_pauseTickTimer;	// IMP=0x0000000000048f3f
- (id)_extractImageFromMetadata:(id)arg1;	// IMP=0x0000000000048ce2
- (void)_clearSeekingIntervalsForStreaming;	// IMP=0x0000000000048cbb
- (void)_updateSeekingIntervalsForStreaming;	// IMP=0x0000000000048b08
- (void)_delayedSetCurrentTime;	// IMP=0x0000000000048a4d
- (void)_updateTypeForItem:(id)arg1;	// IMP=0x00000000000489ce
- (void)_updateScanningRate;	// IMP=0x000000000004884e
- (void)_updateHasProtectedContentForItem:(id)arg1;	// IMP=0x0000000000048839
- (void)setRateForScanning:(float)arg1;	// IMP=0x0000000000048761
- (void)_updateProgress:(struct __CFRunLoopTimer *)arg1;	// IMP=0x0000000000048733
- (void)_unregisterForAVItemNotifications:(id)arg1;	// IMP=0x0000000000048253
- (void)_setValid:(_Bool)arg1;	// IMP=0x0000000000048245
- (void)_setState:(long long)arg1;	// IMP=0x0000000000047f50
- (void)_setAllowsItemErrorResolution:(_Bool)arg1;	// IMP=0x0000000000047f2d
- (void)_clearResetRateAfterSeeking;	// IMP=0x0000000000047f16
- (void)_configureUpdateCurrentItemBookkeepingTimer;	// IMP=0x0000000000047ed8
- (void)_cancelUpdateCurrentItemBookkeepingTimer;	// IMP=0x0000000000047ea9
- (void)_resumeBookkeepingTimer;	// IMP=0x0000000000047e78
- (void)_pauseBookkeepingTimer;	// IMP=0x0000000000047e47
- (void)_scheduleUpdateCurrentItemBookkeepingTimer;	// IMP=0x0000000000047dc9
@property(readonly, nonatomic) long long _displayPlaybackState;
- (void)setAutoclearingDisplayOverridePlaybackState:(long long)arg1;	// IMP=0x0000000000047ca7
- (void)autoclearDisplayOverride;	// IMP=0x0000000000047c8b
- (void)_postPlaybackStateChangedNotificationWithOriginalState:(long long)arg1 newState:(long long)arg2 delayable:(_Bool)arg3;	// IMP=0x0000000000047aae
- (void)_delayedPostPlaybackStateChangedNotification;	// IMP=0x0000000000047a27
- (void)_setActionAtEndAttributeForState:(long long)arg1;	// IMP=0x000000000004792a
- (void)_setBufferingState:(unsigned long long)arg1;	// IMP=0x0000000000047593
- (_Bool)_hasEnoughDataToPlay;	// IMP=0x0000000000047583
- (void)_attemptAutoPlay;	// IMP=0x00000000000472bf
- (void)_setAutoPlayBackgroundTaskAssertionEnabled:(_Bool)arg1;	// IMP=0x0000000000046f79
- (void)_resetInternalState;	// IMP=0x0000000000046f09
- (void)_registerForAVItemNotifications:(id)arg1;	// IMP=0x0000000000046a36
- (unsigned long long)_currentIndexInBoundaryCMTimes:(id)arg1;	// IMP=0x000000000004694f
- (void)_prepareToPlayItem:(id)arg1;	// IMP=0x0000000000046668
- (void)_endSeekAndChangeRate:(_Bool)arg1;	// IMP=0x00000000000463fc
- (void)_setQueueController:(id)arg1 deferItemLoading:(_Bool)arg2;	// IMP=0x0000000000046288
- (void)_unregisterForPlayer:(id)arg1;	// IMP=0x00000000000460aa
- (_Bool)_shouldProvideAudiblePlaybackPerformance;	// IMP=0x0000000000046058
- (double)_currentTimeWithPreloadedPlayerTime:(_Bool)arg1 value:(CDStruct_1b6d18a9)arg2;	// IMP=0x0000000000045f02
- (void)_cancelStallTimer;	// IMP=0x0000000000045e4d
@property(readonly, nonatomic) MPQueueFeeder *feeder;
- (void)_applyAirPlayMusicModeForItem:(id)arg1 shouldIgnorePlaybackQueueTransactions:(_Bool)arg2;	// IMP=0x000000000004532e
- (void)_applyAirPlayMusicMode;	// IMP=0x00000000000452e0
- (void)_verifyDisplayProtection;	// IMP=0x0000000000045137
- (void)_delayedUpdateScanningRate;	// IMP=0x000000000004511e
- (void)_delayedPlaybackIndexChange;	// IMP=0x000000000004504d
- (void)_itemPlayerItemDidChangeNotification:(id)arg1;	// IMP=0x0000000000044ece
- (void)_itemPlayerItemWillChangeNotification:(id)arg1;	// IMP=0x0000000000044d4f
- (void)_audioSessionMediaServicesWereResetNotification:(id)arg1;	// IMP=0x0000000000044c8b
- (void)_applicationWillEnterForegroundNotification:(id)arg1;	// IMP=0x0000000000044c5d
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;	// IMP=0x0000000000044c16
- (void)_applicationDidRemoveDeactivationReason:(id)arg1;	// IMP=0x0000000000044a63
- (void)_applicationWillAddDeactivationReason:(id)arg1;	// IMP=0x00000000000448a1
- (_Bool)_shouldPausePlaybackForDeactivationReasons:(unsigned long long)arg1;	// IMP=0x0000000000044892
- (void)_durationDidChange:(id)arg1;	// IMP=0x000000000004481a
- (void)_tracksDidChange:(id)arg1;	// IMP=0x00000000000447be
- (void)_canPlayFastReverseDidChange:(id)arg1;	// IMP=0x00000000000446c6
- (void)_canPlayFastForwardDidChange:(id)arg1;	// IMP=0x00000000000445d0
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000000043ae7
- (void)_contentsChanged;	// IMP=0x0000000000043aa5
- (void)_airPlayFailedUnsupportedVideoFormatForDeviceWithError:(id)arg1;	// IMP=0x0000000000043a3c
- (void)airPlayFailedRentalDownloadRequired;	// IMP=0x000000000004396d
- (void)airPlayVideoEnded;	// IMP=0x00000000000438bf
- (void)_timeHasJumpedNotification:(id)arg1;	// IMP=0x0000000000043860
- (void)_streamUnlikelyToKeepUp:(id)arg1;	// IMP=0x00000000000437df
- (void)_streamRanDry:(id)arg1;	// IMP=0x000000000004375e
- (void)_streamLikelyToKeepUp:(id)arg1;	// IMP=0x0000000000043643
- (void)_streamBufferFull:(id)arg1;	// IMP=0x00000000000435be
- (void)_serverConnectionDidDie:(id)arg1;	// IMP=0x00000000000432a6
- (void)_disconnectAVPlayerWithReason:(long long)arg1;	// IMP=0x0000000000042f0b
- (void)_connectAVPlayerDeferringItemLoading:(_Bool)arg1;	// IMP=0x000000000004284a
- (void)_connectAVPlayer;	// IMP=0x0000000000042836
- (void)_configureAudioSession;	// IMP=0x000000000004273d
- (void)_rateDidChange:(id)arg1;	// IMP=0x00000000000423f5
- (void)_updateCurrentItemBookkeepingForTimerCallback;	// IMP=0x0000000000042352
- (void)_updateCurrentItemBookkeepingMarkedAsCheckpoint:(_Bool)arg1;	// IMP=0x00000000000422de
@property(nonatomic) _Bool ubiquitousBookkeepingEnabled;
- (void)endInterruptionFromInterruptor:(id)arg1 category:(id)arg2 flags:(unsigned long long)arg3;	// IMP=0x0000000000041e1c
- (void)beginInterruption;	// IMP=0x0000000000041d90
- (void)_itemWillChange:(id)arg1;	// IMP=0x0000000000041526
- (void)_itemReadyToPlay:(id)arg1;	// IMP=0x00000000000413d9
- (void)_itemPlaybackDidEndNotification:(id)arg1;	// IMP=0x0000000000041199
- (void)_itemFailedToPlayToEnd:(id)arg1;	// IMP=0x0000000000040eff
- (void)_itemFailedToPlayToEndNotification:(id)arg1;	// IMP=0x0000000000040cf2
- (id)_playerFailedToQueueNotification:(id)arg1;	// IMP=0x0000000000040b94
- (void)_itemDidChange:(id)arg1;	// IMP=0x000000000004081a
- (void)_itemTypeAvailableNotification:(id)arg1;	// IMP=0x0000000000040808
- (void)_updateStateForPlaybackPrevention;	// IMP=0x0000000000040802
- (void)_itemBookmarkTimeDidChangeNotification:(id)arg1;	// IMP=0x0000000000040744
- (void)_itemAssetIsLoadedNotification:(id)arg1;	// IMP=0x0000000000040521
- (void)_isExternalPlaybackActiveDidChange:(id)arg1;	// IMP=0x0000000000040422
- (void)queueController:(id)arg1 didIncrementVersionForSegment:(id)arg2;	// IMP=0x000000000004041c
- (void)queueController:(id)arg1 didChangeActionAtQueueEnd:(long long)arg2;	// IMP=0x0000000000040416
- (void)queueController:(id)arg1 didChangeShuffleType:(long long)arg2;	// IMP=0x0000000000040410
- (void)queueController:(id)arg1 didChangeRepeatType:(long long)arg2;	// IMP=0x000000000004040a
- (void)queueController:(id)arg1 didChangeContentsWithReplacementPlaybackContext:(id)arg2;	// IMP=0x00000000000403f5
- (void)queueController:(id)arg1 failedToLoadItem:(id)arg2;	// IMP=0x00000000000402ee
- (void)queueControllerDidChangeContents:(id)arg1;	// IMP=0x00000000000402d1
- (void)routingControllerDidPauseFromActiveRouteChange:(id)arg1;	// IMP=0x00000000000401c8
- (void)routingControllerExternalScreenTypeDidChange:(id)arg1;	// IMP=0x00000000000401b6
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;	// IMP=0x0000000000040164
- (void)skipToSeekableEnd;	// IMP=0x00000000000400d7
- (void)skipToSeekableStart;	// IMP=0x000000000004008d
- (_Bool)canSkipToSeekableEnd;	// IMP=0x000000000004007f
- (_Bool)canPlayFastReverse;	// IMP=0x0000000000040065
- (_Bool)canSeekForwards;	// IMP=0x0000000000040043
- (_Bool)canSeekBackwards;	// IMP=0x0000000000040023
- (_Bool)isLiveStreaming;	// IMP=0x000000000003ffd5
- (double)timeOfSeekableEnd;	// IMP=0x000000000003ff85
- (double)timeOfSeekableStart;	// IMP=0x000000000003ff35
- (double)timeOfPlayableEnd;	// IMP=0x000000000003fdad
- (double)timeOfPlayableStart;	// IMP=0x000000000003fc5d
@property(readonly, nonatomic) double playableDurationOfCurrentItemIfAvailable;
@property(readonly, nonatomic) double durationOfCurrentItemIfAvailable;
@property(readonly, nonatomic) _Bool showPlaybackStateOverlaysOnTVOut;
- (_Bool)shouldHaveNoActionAtEndForState:(long long)arg1;	// IMP=0x000000000003fb96
- (void)finalizeBookkeepingNow;	// IMP=0x000000000003fae7
- (void)updateBookkeepingNow;	// IMP=0x000000000003fa88
- (void)loadSessionWithQueueController:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000003fa82
- (void)reloadWithPlaybackContext:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000003f66b
- (void)reloadWithPlaybackContext:(id)arg1;	// IMP=0x000000000003f657
- (void)_setLastSetTime:(double)arg1;	// IMP=0x000000000003f3e5
- (void)setUsesAudioOnlyModeForExternalPlayback:(_Bool)arg1 shouldIgnorePlaybackQueueTransactions:(_Bool)arg2;	// IMP=0x000000000003f374
- (void)setUsesAudioOnlyModeForExternalPlayback:(_Bool)arg1;	// IMP=0x000000000003f360
- (void)setCurrentTime:(double)arg1 options:(long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000003ec9d
- (void)setCurrentTime:(double)arg1 options:(long long)arg2;	// IMP=0x000000000003ec89
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity;
- (void)becomeActiveWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000003eb53
- (void)setActive:(_Bool)arg1;	// IMP=0x000000000003eb05
- (id)_playerAVAudioSession;	// IMP=0x000000000003eaec
@property(readonly, nonatomic) long long externalPlaybackType;
- (id)_expectedAssetTypesForPlaybackMode:(long long)arg1;	// IMP=0x000000000003eab2
@property(readonly, nonatomic) MPQueuePlayer *avPlayer;
- (void)enableAutoplayForCurrentItem;	// IMP=0x000000000003ea33
- (void)disableAutoplayForCurrentItem;	// IMP=0x000000000003e9b3
@property(readonly, nonatomic, getter=isCurrentItemReady) _Bool currentItemReady;
@property(nonatomic) _Bool useApplicationAudioSession;
@property(readonly, nonatomic) MPAVRoutingController *routingController;
@property(nonatomic) _Bool stopAtEnd;
@property(nonatomic) float volume;
@property(readonly, nonatomic) _Bool hasVolumeControl;
- (_Bool)_setRate:(float)arg1 forScanning:(_Bool)arg2 withItem:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000003e3ad
- (_Bool)setRate:(float)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000003e32a
- (_Bool)setRate:(float)arg1;	// IMP=0x000000000003e316
- (void)setDisableAirPlayMirroringDuringPlayback:(_Bool)arg1 shouldIgnorePlaybackQueueTransactions:(_Bool)arg2;	// IMP=0x000000000003e1a2
@property(nonatomic) _Bool disableAirPlayMirroringDuringPlayback;
- (void)_sendTracePlaybackStartDidFinishIfNeededForItem:(id)arg1;	// IMP=0x000000000003e173
@property(readonly, nonatomic) float rate;
@property(nonatomic) _Bool alwaysPlayWheneverPossible;
@property(readonly, nonatomic, getter=isValid) _Bool valid;
@property(readonly, nonatomic) _Bool shouldDisplayAsPlaying;
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
@property(readonly, nonatomic, getter=isExternalPlaybackActive) _Bool externalPlaybackActive;
- (long long)_seeklessStateForState:(long long)arg1;	// IMP=0x000000000003e01f
- (_Bool)_showsPlayingWhenInState:(long long)arg1;	// IMP=0x000000000003dfd8
@property(readonly, nonatomic) MPAVItem *currentItem;
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp;
- (void)setClient:(id)arg1 wantsToAllowExternalPlayback:(_Bool)arg2 shouldIgnorePlaybackQueueTransactions:(_Bool)arg3;	// IMP=0x000000000003dd6f
- (void)setClient:(id)arg1 wantsToAllowExternalPlayback:(_Bool)arg2;	// IMP=0x000000000003dd5a
- (_Bool)allowsExternalPlayback;	// IMP=0x000000000003dcac
- (_Bool)isTickTimerEnabled;	// IMP=0x000000000003dc9e
- (void)endTickTimer;	// IMP=0x000000000003dc5d
- (void)beginTickTimerWithInterval:(double)arg1;	// IMP=0x000000000003db79
- (_Bool)forceRestartPlaybackIfNecessary;	// IMP=0x000000000003db13
- (void)togglePlaybackWithOptions:(unsigned long long)arg1;	// IMP=0x000000000003da12
- (void)togglePlayback;	// IMP=0x000000000003d9fb
@property(nonatomic) double currentTime;
- (void)_playWithOptions:(unsigned long long)arg1 allowsEnablingAutoPlay:(_Bool)arg2;	// IMP=0x000000000003d5e6
- (void)playWithOptions:(unsigned long long)arg1;	// IMP=0x000000000003d5cf
- (void)play;	// IMP=0x000000000003d5b8
- (void)_pauseWithFadeout:(float)arg1 forScanning:(_Bool)arg2;	// IMP=0x000000000003d3d2
- (void)pause;	// IMP=0x000000000003d2e2
- (void)pauseWithFadeout:(float)arg1;	// IMP=0x000000000003d2ce
- (void)endPlayback;	// IMP=0x000000000003d1d5
- (double)currentTimeForBookmarking;	// IMP=0x000000000003d02f
- (_Bool)isSeekingOrScrubbing;	// IMP=0x000000000003d021
- (void)endSeek;	// IMP=0x000000000003d00a
- (_Bool)changePlaybackIndexBy:(long long)arg1 deltaType:(long long)arg2 ignoreElapsedTime:(_Bool)arg3 force:(_Bool)arg4 error:(id *)arg5;	// IMP=0x000000000003cadd
- (_Bool)changePlaybackIndexBy:(long long)arg1 deltaType:(long long)arg2 ignoreElapsedTime:(_Bool)arg3 error:(id *)arg4;	// IMP=0x000000000003cabb
- (_Bool)changePlaybackIndexBy:(long long)arg1 deltaType:(long long)arg2 ignoreElapsedTime:(_Bool)arg3;	// IMP=0x000000000003caa6
- (_Bool)changePlaybackIndexBy:(long long)arg1 deltaType:(long long)arg2;	// IMP=0x000000000003ca91
- (void)_updateLastSetTimeForCurrentItemIfNeeded;	// IMP=0x000000000003c9c2
- (_Bool)_hasValidPlayerTime;	// IMP=0x000000000003c968
- (void)_clearLastSetTimeIfPlayerTimeIsValid;	// IMP=0x000000000003c917
- (void)beginSeek:(int)arg1;	// IMP=0x000000000003c6cf
- (void)dealloc;	// IMP=0x000000000003c261
- (id)init;	// IMP=0x000000000003bfe4

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

