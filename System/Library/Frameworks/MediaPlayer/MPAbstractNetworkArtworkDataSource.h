//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MediaPlayer/AVAssetResourceLoaderDelegate-Protocol.h>
#import <MediaPlayer/MPArtworkDataSource-Protocol.h>
#import <MediaPlayer/NSURLSessionDataDelegate-Protocol.h>

@class NSCache, NSMapTable, NSMutableDictionary, NSString, NSURL, NSURLCache, NSURLSession, NSURLSessionConfiguration;
@protocol NSURLSessionDataDelegate, OS_dispatch_queue;

@interface MPAbstractNetworkArtworkDataSource : NSObject <NSURLSessionDataDelegate, AVAssetResourceLoaderDelegate, MPArtworkDataSource>
{
    _Bool _usesFallbackCache;	// 8 = 0x8
    NSURLSessionConfiguration *_URLSessionConfiguration;	// 16 = 0x10
    NSURL *_videoArtworkCacheURL;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_imageAccessQueue;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_videoAccessQueue;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *_callbackQueue;	// 48 = 0x30
    NSCache *_fallbackImageArtworkRepresentationCache;	// 56 = 0x38
    NSMutableDictionary *_pendingRequestURLToCompletionHandlers;	// 64 = 0x40
    NSMapTable *_catalogImageTaskMap;	// 72 = 0x48
    NSMapTable *_resourceLoaderStoragePolicyMap;	// 80 = 0x50
    NSMutableDictionary *_videoTaskToCacheStoragePolicy;	// 88 = 0x58
    NSMutableDictionary *_videoTaskToResourceLoadingRequest;	// 96 = 0x60
    NSMutableDictionary *_videoTaskToData;	// 104 = 0x68
    NSURLSession *_imageURLSession;	// 112 = 0x70
    NSURLSession *_videoURLSession;	// 120 = 0x78
    NSURLCache *_videoURLCache;	// 128 = 0x80
    id <NSURLSessionDataDelegate> _URLSessionDataDelegateProxy;	// 136 = 0x88
}

+ (void)_applyVideoCacheURL:(id)arg1 toConfiguration:(id)arg2;	// IMP=0x000000000012ffcc
+ (void)_applyImageURLCachePolicy:(unsigned long long)arg1 cacheDiskPath:(id)arg2 toConfiguration:(id)arg3;	// IMP=0x000000000012fef6
- (void).cxx_destruct;	// IMP=0x000000000012c700
@property(nonatomic) __weak id <NSURLSessionDataDelegate> URLSessionDataDelegateProxy; // @synthesize URLSessionDataDelegateProxy=_URLSessionDataDelegateProxy;
@property(nonatomic) __weak NSURLCache *videoURLCache; // @synthesize videoURLCache=_videoURLCache;
@property(retain, nonatomic) NSURLSession *videoURLSession; // @synthesize videoURLSession=_videoURLSession;
@property(retain, nonatomic) NSURLSession *imageURLSession; // @synthesize imageURLSession=_imageURLSession;
@property(retain, nonatomic) NSMutableDictionary *videoTaskToData; // @synthesize videoTaskToData=_videoTaskToData;
@property(retain, nonatomic) NSMutableDictionary *videoTaskToResourceLoadingRequest; // @synthesize videoTaskToResourceLoadingRequest=_videoTaskToResourceLoadingRequest;
@property(retain, nonatomic) NSMutableDictionary *videoTaskToCacheStoragePolicy; // @synthesize videoTaskToCacheStoragePolicy=_videoTaskToCacheStoragePolicy;
@property(retain, nonatomic) NSMapTable *resourceLoaderStoragePolicyMap; // @synthesize resourceLoaderStoragePolicyMap=_resourceLoaderStoragePolicyMap;
@property(retain, nonatomic) NSMapTable *catalogImageTaskMap; // @synthesize catalogImageTaskMap=_catalogImageTaskMap;
@property(retain, nonatomic) NSMutableDictionary *pendingRequestURLToCompletionHandlers; // @synthesize pendingRequestURLToCompletionHandlers=_pendingRequestURLToCompletionHandlers;
@property(retain, nonatomic) NSCache *fallbackImageArtworkRepresentationCache; // @synthesize fallbackImageArtworkRepresentationCache=_fallbackImageArtworkRepresentationCache;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *videoAccessQueue; // @synthesize videoAccessQueue=_videoAccessQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *imageAccessQueue; // @synthesize imageAccessQueue=_imageAccessQueue;
@property(retain, nonatomic) NSURL *videoArtworkCacheURL; // @synthesize videoArtworkCacheURL=_videoArtworkCacheURL;
@property(nonatomic) _Bool usesFallbackCache; // @synthesize usesFallbackCache=_usesFallbackCache;
@property(readonly, nonatomic) NSURLSessionConfiguration *URLSessionConfiguration; // @synthesize URLSessionConfiguration=_URLSessionConfiguration;
- (void)_didReceiveWillEnterForegroundNotification:(id)arg1;	// IMP=0x000000000012c49e
- (void)_didReceiveMemoryWarningNotification:(id)arg1;	// IMP=0x000000000012c3f3
- (_Bool)_subclassImplementsSelector:(SEL)arg1;	// IMP=0x000000000012c393
- (struct CGSize)_bestAvailableSizeForCatalog:(id)arg1 kind:(long long)arg2;	// IMP=0x000000000012c262
- (id)_cacheKeyForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize)arg3;	// IMP=0x000000000012c1ad
- (id)_bestVideoArtworkRepresentationForCatalog:(id)arg1;	// IMP=0x000000000012c101
- (void)_performSyncBlockOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000000012c08b
- (void)_performAsyncBarrierBlockOnQueue:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x000000000012c07b
- (id)_requestForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize)arg3;	// IMP=0x000000000012bf5a
- (id)_existingRepresentativeObjectForArtworkCatalog:(id)arg1 kind:(long long)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000000012bca5
- (_Bool)_isRepresentationSize:(struct CGSize)arg1 validForCatalog:(id)arg2;	// IMP=0x000000000012bc63
- (id)_existingRepresentationFromURLCacheForArtworkCatalog:(id)arg1 immediateImageDecompressionAllowed:(_Bool)arg2;	// IMP=0x000000000012bada
- (id)_artworkRepresentationWithImageFromData:(id)arg1 forURLResponse:(id)arg2 catalog:(id)arg3 size:(struct CGSize)arg4 immediateImageDecompressionAllowed:(_Bool)arg5;	// IMP=0x000000000012b939
- (void)resourceLoader:(id)arg1 didCancelLoadingRequest:(id)arg2;	// IMP=0x000000000012b6a3
- (_Bool)resourceLoader:(id)arg1 shouldWaitForLoadingOfRequestedResource:(id)arg2;	// IMP=0x000000000012b3f3
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;	// IMP=0x000000000012b2d1
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000012b1ab
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;	// IMP=0x000000000012b0bf
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000012af99
- (_Bool)respondsToSelector:(SEL)arg1;	// IMP=0x000000000012aef7
- (void)loadRepresentationOfKind:(long long)arg1 forArtworkCatalog:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000012a775
- (id)existingRepresentationOfKind:(long long)arg1 forArtworkCatalog:(id)arg2;	// IMP=0x000000000012a551
- (void)loadArtworkEffectResultForEffectType:(long long)arg1 catalog:(id)arg2 options:(id)arg3 systemEffectHandler:(CDUnknownBlockType)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000012a414
- (id)existingArtworkEffectResultForEffectType:(long long)arg1 catalog:(id)arg2 options:(id)arg3;	// IMP=0x00000000001294cc
- (id)visualIdenticalityIdentifierForCatalog:(id)arg1;	// IMP=0x00000000001292f9
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)arg1;	// IMP=0x000000000012925c
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000129242
- (id)existingRepresentationForArtworkCatalog:(id)arg1;	// IMP=0x000000000012922b
- (_Bool)isRepresentation:(id)arg1 bestRepresentationForArtworkCatalog:(id)arg2;	// IMP=0x000000000012914d
- (id)cacheKeyForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize)arg3;	// IMP=0x0000000000129145
- (struct CGSize)bestAvailableSizeForCatalog:(id)arg1;	// IMP=0x000000000012912f
- (id)requestForCatalog:(id)arg1 kind:(long long)arg2 size:(struct CGSize)arg3;	// IMP=0x0000000000129127
- (_Bool)areRepresentationsOfKind:(long long)arg1 availableForCatalog:(id)arg2;	// IMP=0x000000000012911f
- (_Bool)wantsBackgroundImageDecompression;	// IMP=0x0000000000129117
- (_Bool)shouldLookForLargerImageRepresentationsWhenBestRepresentationIsUnavailable;	// IMP=0x000000000012910f
- (id)sortedSupportedSizesForCatalog:(id)arg1;	// IMP=0x0000000000129107
- (id)cacheKeyForCatalog:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x0000000000129086
- (id)requestForCatalog:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x0000000000128ef6
- (id)supportedSizesForCatalog:(id)arg1;	// IMP=0x0000000000128de7
- (_Bool)areRepresentationsAvailableForCatalog:(id)arg1;	// IMP=0x0000000000128c77
- (void)updateURLSessionWithCachePolicy:(unsigned long long)arg1 cachePath:(id)arg2;	// IMP=0x000000000012874e
- (void)dealloc;	// IMP=0x0000000000128682
- (id)init;	// IMP=0x00000000001282ad

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

