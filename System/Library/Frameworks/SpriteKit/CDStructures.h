//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct MaxRectTexturePacker;

struct PKCAether;

struct PKPath;

struct SKCAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct SKCAnimateMesh {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    id _field20;
    id _field21;
    id _field22;
    _Bool _field23;
};

struct SKCColorize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    CDStruct_818bb265 _field20;
    float _field21;
    CDStruct_818bb265 _field22;
    float _field23;
    CDStruct_818bb265 _field24;
    float _field25;
    _Bool _field26;
};

struct SKCCustomAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    CDUnknownBlockType _field20;
};

struct SKCFade {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    _Bool _field23;
};

struct SKCFalloff {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCFollowPath {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    unsigned int _field21;
    struct PKPath *_field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
};

struct SKCHide {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    _Bool _field20;
};

struct SKCKeyframeSequence {
    int _field1;
    int _field2;
    long long _field3;
    long long _field4;
    float *_field5;
    float *_field6;
};

struct SKCMove {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCPlaySound {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    id _field20;
    _Bool _field21;
    _Bool _field22;
};

struct SKCReferencedAction {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct SKCAction *_field20;
};

struct SKCRepeat {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    struct SKCAction *_field20;
    unsigned long long _field21;
    unsigned long long _field22;
    _Bool _field23;
};

struct SKCResize {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    struct {
        float _field1;
        float _field2;
    } _field21;
    struct {
        float _field1;
        float _field2;
    } _field22;
    struct {
        float _field1;
        float _field2;
    } _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
};

struct SKCRotate {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    float _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    _Bool _field35;
};

struct SKCScale {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    float _field26;
    float _field27;
    float _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    struct CGSize _field34;
};

struct SKCSpeed {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCStats {
    CDUnknownFunctionPointerType *_vptr$SKCStats;
    double frameBeginTime;
    double frameDuration;
    double baseTime;
    double currentTime;
    int frameCount;
    CDStruct_febfcd7b clientUpdate;
    CDStruct_febfcd7b update;
    struct {
        double beginTime;
        double duration;
        int bodyCount;
    } physics;
    struct {
        double beginTime;
        double duration;
        int constraintCount;
    } constraints;
    struct {
        double beginTime;
        double duration;
        int opCount;
        int quadCount;
        int nodeTraversalCount;
        int sknodeTraversalCount;
        int nodeRenderCount;
        int drawCallCount;
        int passCount;
        int maxBatchElementCount;
    } render;
};

struct SKCStrength {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
    float _field24;
    _Bool _field25;
    _Bool _field26;
};

struct SKCWait {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    float _field3;
    CDUnknownBlockType _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    float _field9;
    float _field10;
    double _field11;
    _Bool _field12;
    _Bool _field13;
    CDUnknownBlockType _field14;
    long long _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
};

struct Token;

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct jet_command_buffer;

struct jet_fence;

struct jet_framebuffer;

struct jet_program;

struct jet_texture;

struct map<std::string, std::shared_ptr<jet_buffer_pool>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<jet_buffer_pool>>>> {
    struct __tree<std::__value_type<std::string, std::shared_ptr<jet_buffer_pool>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<jet_buffer_pool>>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, std::shared_ptr<jet_buffer_pool>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, std::shared_ptr<jet_buffer_pool>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<jet_buffer_pool>>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, double, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, double>>> {
    struct __tree<std::__value_type<unsigned int, double>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, double>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned int, double>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, double>, std::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, SKSpriteNode *, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, SKSpriteNode *>>> {
    struct __tree<std::__value_type<unsigned short, SKSpriteNode *>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, SKSpriteNode *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned short, SKSpriteNode *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, SKSpriteNode *>, std::less<unsigned short>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned short, double, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, double>>> {
    struct __tree<std::__value_type<unsigned short, double>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, double>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned short, double>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, double>, std::less<unsigned short>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<PKCAether> {
    struct PKCAether *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<jet_command_buffer> {
    struct jet_command_buffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<jet_fence> {
    struct jet_fence *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<jet_framebuffer> {
    struct jet_framebuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<jet_program> {
    struct jet_program *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<jet_texture> {
    struct jet_texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<std::string, SKTexture *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, SKTexture *>>> {
    struct __hash_table<std::__hash_value_type<std::string, SKTexture *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, SKTexture *>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, SKTexture *>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, SKTexture *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, SKTexture *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, SKTexture *>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, SKTexture *>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<Token, std::allocator<Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<Token *, std::allocator<Token>> {
        struct Token *_field1;
    } _field3;
};

struct vector<float __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<float * __attribute__((ext_vector_type(2))), std::allocator<float __attribute__((ext_vector_type(2)))>> {
        void *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    MISSING_TYPE *columns[2];
} CDStruct_1c3b5cc1;

typedef struct {
    MISSING_TYPE *columns[3];
} CDStruct_8e0628e6;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

typedef struct {
    double beginTime;
    double duration;
} CDStruct_febfcd7b;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

// Ambiguous groups
typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct shared_ptr<MaxRectTexturePacker> {
    struct MaxRectTexturePacker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_7747cbe3;

typedef struct shared_ptr<PKCAether> {
    struct PKCAether *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_11a7378b;

typedef struct shared_ptr<jet_command_buffer> {
    struct jet_command_buffer *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_d7c0f433;

typedef struct shared_ptr<jet_framebuffer> {
    struct jet_framebuffer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2ce53ef7;

typedef struct shared_ptr<jet_program> {
    struct jet_program *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_394c00aa;

typedef struct shared_ptr<jet_texture> {
    struct jet_texture *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_bb77cfd9;

typedef struct vector<Token, std::allocator<Token>> {
    struct Token *_field1;
    struct Token *_field2;
    struct __compressed_pair<Token *, std::allocator<Token>> {
        struct Token *_field1;
    } _field3;
} vector_c6b866d0;

#pragma mark Named Unions

union _GLKMatrix2 {
    CDStruct_818bb265 _field1;
    float _field2[2][2];
    float _field3[4];
};

union _GLKMatrix3 {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
    } _field1;
    float _field2[9];
};

union _GLKMatrix4 {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
        float _field8;
        float _field9;
        float _field10;
        float _field11;
        float _field12;
        float _field13;
        float _field14;
        float _field15;
        float _field16;
    } _field1;
    float _field2[16];
};

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

union _GLKVector3 {
    CDStruct_869f9c67 _field1;
    CDStruct_869f9c67 _field2;
    CDStruct_869f9c67 _field3;
    float _field4[3];
};

union _GLKVector4 {
    CDStruct_818bb265 _field1;
    CDStruct_818bb265 _field2;
    CDStruct_818bb265 _field3;
    float _field4[4];
};

