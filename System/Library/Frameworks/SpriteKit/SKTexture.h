//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <SpriteKit/NSCopying-Protocol.h>
#import <SpriteKit/NSSecureCoding-Protocol.h>

@class CIFilter, NSArray, NSString, SKTextureAtlas, SKTextureCache;
@protocol OS_dispatch_queue;

@interface SKTexture : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _shouldGenerateMipmaps;	// 8 = 0x8
    _Bool _didGenerateMipmaps;	// 9 = 0x9
    _Bool _needsExtrusionWorkaround;	// 10 = 0xa
    _Bool _isPath;	// 11 = 0xb
    _Bool _isData;	// 12 = 0xc
    NSString *_imgName;	// 16 = 0x10
    NSArray *_searchPaths;	// 24 = 0x18
    struct CGRect _textRect;	// 32 = 0x20
    struct CGRect _textCoords;	// 64 = 0x40
    _Bool _disableAlpha;	// 96 = 0x60
    _Bool _isRotated;	// 97 = 0x61
    _Bool _isFlipped;	// 98 = 0x62
    struct CGPoint _cropScale;	// 104 = 0x68
    struct CGPoint _cropOffset;	// 120 = 0x78
    int _alignment;	// 136 = 0x88
    int _rowLength;	// 140 = 0x8c
    CIFilter *_filter;	// 144 = 0x90
    SKTexture *_originalTexture;	// 152 = 0x98
    unsigned int _textureTarget;	// 160 = 0xa0
    NSString *_originalAtlasName;	// 168 = 0xa8
    NSString *_subTextureName;	// 176 = 0xb0
    SKTextureCache *_textureCache;	// 184 = 0xb8
    NSObject<OS_dispatch_queue> *_textureSyncQueue;	// 192 = 0xc0
    _Bool _performFullCapture;	// 200 = 0xc8
    _Bool _isRepeatable;	// 201 = 0xc9
    SKTextureAtlas *_rootAtlas;	// 208 = 0xd0
    unsigned int *_alphaMap;	// 216 = 0xd8
    struct CGSize _alphaMapSize;	// 224 = 0xe0
}

+ (id)_textureWithImageNamed:(id)arg1;	// IMP=0x00000000000429a7
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;	// IMP=0x0000000000041e1d
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2 flipped:(_Bool)arg3;	// IMP=0x0000000000041b97
+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x0000000000041983
+ (id)textureWithImage:(id)arg1;	// IMP=0x00000000000418f3
+ (id)textureWithCGImage:(struct CGImage *)arg1;	// IMP=0x00000000000418d1
+ (id)textureWithCGImage:(struct CGImage *)arg1 pointSize:(struct CGSize)arg2;	// IMP=0x000000000004186c
+ (id)textureNoiseWithSmoothness:(double)arg1 size:(struct CGSize)arg2 grayscale:(_Bool)arg3;	// IMP=0x0000000000041474
+ (id)textureVectorNoiseWithSmoothness:(double)arg1 size:(struct CGSize)arg2;	// IMP=0x00000000000410dc
+ (id)textureWithRect:(struct CGRect)arg1 inTexture:(id)arg2;	// IMP=0x0000000000040e33
+ (id)textureWithImageNamed:(id)arg1 rect:(struct CGRect)arg2;	// IMP=0x0000000000040c85
+ (id)textureWithImageNamed:(id)arg1;	// IMP=0x0000000000040c28
+ (void)preloadTextures:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000003ddad
+ (id)preloadQueue;	// IMP=0x000000000003dd51
+ (id)lookupTextureCacheForName:(id)arg1;	// IMP=0x000000000003cece
+ (void)registerTextureCache:(id)arg1 forName:(id)arg2;	// IMP=0x000000000003ceb4
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000003ceac
+ (id)textureWithMetalTexture:(id)arg1;	// IMP=0x0000000000044a56
+ (id)textureWithIOSurfaceID:(unsigned int)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3 format:(unsigned int)arg4;	// IMP=0x000000000004478f
+ (id)_textureWithGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2;	// IMP=0x0000000000044331
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;	// IMP=0x000000000004418e
+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2;	// IMP=0x0000000000044080
+ (id)textureWithImagePath:(id)arg1;	// IMP=0x0000000000044023
+ (id)compressedTextureWithData:(id)arg1 size:(struct CGSize)arg2 bitsPerPixel:(unsigned int)arg3 hasAlpha:(_Bool)arg4;	// IMP=0x0000000000043b3f
+ (id)compressedTextureWithData:(id)arg1;	// IMP=0x0000000000043986
+ (id)_cachedTextureNames;	// IMP=0x00000000000437f3
+ (void)_reloadTextureCacheForImageNamed:(id)arg1;	// IMP=0x0000000000043797
- (void).cxx_destruct;	// IMP=0x0000000000042b74
@property(nonatomic, getter=_needsExtrusionWorkaround) _Bool needsExtrusionWorkaround; // @synthesize needsExtrusionWorkaround=_needsExtrusionWorkaround;
@property(readonly, nonatomic) struct CGSize alphaMapSize; // @synthesize alphaMapSize=_alphaMapSize;
@property(readonly, nonatomic) unsigned int *alphaMap; // @synthesize alphaMap=_alphaMap;
@property(retain, nonatomic) SKTextureAtlas *rootAtlas; // @synthesize rootAtlas=_rootAtlas;
@property(readonly, nonatomic) _Bool isRepeatable; // @synthesize isRepeatable=_isRepeatable;
@property _Bool performFullCapture; // @synthesize performFullCapture=_performFullCapture;
@property(copy, nonatomic) NSString *subTextureName; // @synthesize subTextureName=_subTextureName;
@property(copy, nonatomic) NSString *originalAtlasName; // @synthesize originalAtlasName=_originalAtlasName;
@property(nonatomic) struct CGPoint cropOffset; // @synthesize cropOffset=_cropOffset;
@property(nonatomic) struct CGPoint cropScale; // @synthesize cropScale=_cropScale;
- (void)dealloc;	// IMP=0x0000000000042948
@property(nonatomic) long long filteringMode;
@property(nonatomic) int wrapMode;
- (void)_ensureImageData;	// IMP=0x00000000000427da
@property(nonatomic) _Bool usesMipmaps;
- (id)description;	// IMP=0x00000000000425fa
- (id)textureByApplyingCIFilter:(id)arg1;	// IMP=0x0000000000042199
- (struct CGSize)size;	// IMP=0x0000000000042082
- (struct CGRect)textureRect;	// IMP=0x000000000004206a
@property(readonly, nonatomic) _Bool hasAlpha;
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000040cf5
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000040801
- (_Bool)isEqualToTexture:(id)arg1;	// IMP=0x0000000000040448
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000003fb2c
- (id)initWithImagePath:(id)arg1;	// IMP=0x000000000003fa76
- (id)init;	// IMP=0x000000000003fa0c
- (id)initWithImageNamed:(id)arg1;	// IMP=0x000000000003f8d4
- (void)loadImageData;	// IMP=0x000000000003e250
- (void)initTextureCacheWithImageData;	// IMP=0x000000000003e168
- (void)preloadWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000003dc8a
- (void)loadImageDataFromCGImage:(struct CGImage *)arg1 pointsSize:(struct CGSize)arg2;	// IMP=0x000000000003d6a8
- (_Bool)loadImageDataFromPVRData:(id)arg1;	// IMP=0x000000000003d280
- (_Bool)loadImageDataFromPVRGZData:(id)arg1;	// IMP=0x000000000003d216
- (void)setTextureDimension:(const struct CGSize *)arg1 withPixelSize:(const struct CGSize *)arg2;	// IMP=0x000000000003d157
- (void)commonInit;	// IMP=0x000000000003cf59
- (id)textureByGeneratingNormalMapWithSmoothness:(double)arg1 contrast:(double)arg2;	// IMP=0x000000000003cf45
- (id)textureByGeneratingNormalMap;	// IMP=0x000000000003cf23
- (struct CGImage *)CGImage;	// IMP=0x000000000003cf11
- (id)_textureCache;	// IMP=0x000000000003cef7
- (id)imgName;	// IMP=0x000000000003ce9e
- (void)setIsData:(_Bool)arg1;	// IMP=0x0000000000043611
- (shared_ptr_bb77cfd9)_backingTexture;	// IMP=0x0000000000042ed8
- (id)initWithBackingTetxure:(shared_ptr_bb77cfd9)arg1 logicalWidth:(float)arg2 height:(float)arg3;	// IMP=0x0000000000042cd5
- (id)initWithBackingTetxure:(shared_ptr_bb77cfd9)arg1;	// IMP=0x0000000000042bfe
- (void)_savePngFromGLCache:(id)arg1;	// IMP=0x0000000000045bef
- (struct CGImage *)_newTextureFromGLCache;	// IMP=0x000000000004510c
- (int)_convert_jet_texture_format_to_ci_format:(unsigned int)arg1;	// IMP=0x00000000000450e6
- (struct CGImage *)_createCGImage;	// IMP=0x00000000000450d4
- (id)metalTexture;	// IMP=0x0000000000044e13
- (int)glTextureId;	// IMP=0x00000000000444e5
- (id)_initWithGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2;	// IMP=0x0000000000044375
@property(readonly, nonatomic) NSString *imageNameOrPath;
- (id)_generateNormalMap:(double)arg1 contrast:(double)arg2 multiPass:(unsigned long long)arg3;	// IMP=0x0000000000043d50
- (id)_copyImageData;	// IMP=0x00000000000438e8
@property(nonatomic) unsigned int textureTarget;
@property(nonatomic) _Bool isFlipped;
@property(nonatomic) _Bool isRotated;
@property(readonly, nonatomic) struct CGSize pixelSize;
- (void)_setImageName:(id)arg1;	// IMP=0x000000000004361a

@end

