//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ActionTree;

struct ActionTreeObject;

struct DataBundle;

struct DebugDirectionalMetadata {
    unsigned long long mNumDirectionalEvents;
    struct vector<Phase::Vector<float, 3>, std::allocator<Phase::Vector<float, 3>>> mDirections;
    struct vector<float, std::allocator<float>> mDelaysInSeconds;
    struct vector<std::vector<float>, std::allocator<std::vector<float>>> mSubbandGains;
    struct vector<unsigned char, std::allocator<unsigned char>> mInvertPolarity;
};

struct Handle64 {
    unsigned long long mData;
};

struct MdlMeshAsset {
    unsigned int mType;
    struct unique_ptr<Phase::details::MdlMeshAssetImplementation, std::default_delete<Phase::details::MdlMeshAssetImplementation>> mpImplementation;
};

struct MdlMeshAssetImplementation;

struct MetaParameter;

struct PHASEEngineImpl;

struct RuntimeDebugParameters {
    _Bool mTailcorrectionEnabled;
    unsigned long long mImageSourceOrder;
    float mRayTraceComputeTimeLimit;
    unsigned long long mRayTraceIntersectionHandleCountLimit;
    unsigned long long mRayTraceIntersectionHandleCounter;
    _Bool mEarlyScatteringEnabled;
    float mEarlyReflectionsAggregationCoef;
    float mEarlyScatteringAggregationCoef;
    float mLateReverbAggregationCoef;
};

struct SoundAssetInfo {
    CDUnknownFunctionPointerType *_field1;
    long long _field2;
    unsigned long long _field3;
    long long _field4;
    int _field5;
    unsigned int _field6;
};

struct StopWatch<std::chrono::steady_clock> {
    struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> mStart;
};

struct StreamRenderer;

struct UniqueObjectId {
    unsigned long long mStorage[2];
};

struct duration<long long, std::ratio<1, 1000000000>> {
    long long __rep_;
};

struct map<Class, Phase::Handle64, std::less<Class>, std::allocator<std::pair<const Class, Phase::Handle64>>> {
    struct __tree<std::__value_type<Class, Phase::Handle64>, std::__map_value_compare<Class, std::__value_type<Class, Phase::Handle64>, std::less<Class>, true>, std::allocator<std::__value_type<Class, Phase::Handle64>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<Class, Phase::Handle64>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<Class, std::__value_type<Class, Phase::Handle64>, std::less<Class>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<Phase::ActionTreeObject> {
    struct ActionTreeObject *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> {
    struct duration<long long, std::ratio<1, 1000000000>> __d_;
};

struct unique_ptr<PHASEEngineImpl, std::default_delete<PHASEEngineImpl>> {
    struct __compressed_pair<PHASEEngineImpl *, std::default_delete<PHASEEngineImpl>> {
        struct PHASEEngineImpl *__value_;
    } __ptr_;
};

struct unique_ptr<Phase::ActionTree, std::default_delete<Phase::ActionTree>> {
    struct __compressed_pair<Phase::ActionTree *, std::default_delete<Phase::ActionTree>> {
        struct ActionTree *__value_;
    } __ptr_;
};

struct unique_ptr<Phase::Controller::SoundAssetInfo, std::default_delete<Phase::Controller::SoundAssetInfo>> {
    struct __compressed_pair<Phase::Controller::SoundAssetInfo *, std::default_delete<Phase::Controller::SoundAssetInfo>> {
        struct SoundAssetInfo *__value_;
    } __ptr_;
};

struct unique_ptr<Phase::Controller::StreamRenderer, std::default_delete<Phase::Controller::StreamRenderer>> {
    struct __compressed_pair<Phase::Controller::StreamRenderer *, std::default_delete<Phase::Controller::StreamRenderer>> {
        struct StreamRenderer *_field1;
    } _field1;
};

struct unique_ptr<Phase::DataBundle, std::default_delete<Phase::DataBundle>> {
    struct __compressed_pair<Phase::DataBundle *, std::default_delete<Phase::DataBundle>> {
        struct DataBundle *__value_;
    } __ptr_;
};

struct unique_ptr<Phase::Envelope<double>, std::default_delete<Phase::Envelope<double>>> {
    struct __compressed_pair<Phase::Envelope<double>*, std::default_delete<Phase::Envelope<double>>> {
        void *__value_;
    } __ptr_;
};

struct unique_ptr<Phase::MetaParameter, std::default_delete<Phase::MetaParameter>> {
    struct __compressed_pair<Phase::MetaParameter *, std::default_delete<Phase::MetaParameter>> {
        struct MetaParameter *__value_;
    } __ptr_;
};

struct unique_ptr<Phase::details::MdlMeshAssetImplementation, std::default_delete<Phase::details::MdlMeshAssetImplementation>> {
    struct __compressed_pair<Phase::details::MdlMeshAssetImplementation *, std::default_delete<Phase::details::MdlMeshAssetImplementation>> {
        struct MdlMeshAssetImplementation *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<unsigned long long, PHASEAsset *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, PHASEAsset *>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, PHASEAsset *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PHASEAsset *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PHASEAsset *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, PHASEAsset *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, PHASEAsset *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, PHASEAsset *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, PHASEAsset *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::deque<int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::deque<int>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, std::deque<int>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::deque<int>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::deque<int>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::deque<int>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::deque<int>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::deque<int>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::deque<int>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::unique_ptr<Phase::StringPool>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unique_ptr<Phase::StringPool>>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unique_ptr<Phase::StringPool>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, void (^)(NSUUID *, NSUUID *, bool), std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, void (^)(NSUUID *, NSUUID *, bool)>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<Phase::UniqueObjectId, std::allocator<Phase::UniqueObjectId>> {
    struct UniqueObjectId *__begin_;
    struct UniqueObjectId *__end_;
    struct __compressed_pair<Phase::UniqueObjectId *, std::allocator<Phase::UniqueObjectId>> {
        struct UniqueObjectId *__value_;
    } __end_cap_;
};

struct vector<Phase::Vector<float, 3>, std::allocator<Phase::Vector<float, 3>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<Phase::Vector<float, 3>*, std::allocator<Phase::Vector<float, 3>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> {
        void *__value_;
    } __end_cap_;
};

struct vector<float __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<float * __attribute__((ext_vector_type(4))), std::allocator<float __attribute__((ext_vector_type(4)))>> {
        void *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<std::vector<float __attribute__((ext_vector_type(3)))>, std::allocator<std::vector<float __attribute__((ext_vector_type(3)))>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<float __attribute__((ext_vector_type(3)))>*, std::allocator<std::vector<float __attribute__((ext_vector_type(3)))>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::vector<float>, std::allocator<std::vector<float>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<float>*, std::allocator<std::vector<float>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

struct vector<unsigned short __attribute__((ext_vector_type(3))), std::allocator<unsigned short __attribute__((ext_vector_type(3)))>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<unsigned short * __attribute__((ext_vector_type(3))), std::allocator<unsigned short __attribute__((ext_vector_type(3)))>> {
        void *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    MISSING_TYPE *vector;
} CDStruct_0e8a9a91;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

// Template types
typedef struct unique_ptr<Phase::ActionTree, std::default_delete<Phase::ActionTree>> {
    struct __compressed_pair<Phase::ActionTree *, std::default_delete<Phase::ActionTree>> {
        struct ActionTree *__value_;
    } __ptr_;
} unique_ptr_38efa310;

typedef struct unique_ptr<Phase::Controller::SoundAssetInfo, std::default_delete<Phase::Controller::SoundAssetInfo>> {
    struct __compressed_pair<Phase::Controller::SoundAssetInfo *, std::default_delete<Phase::Controller::SoundAssetInfo>> {
        struct SoundAssetInfo *__value_;
    } __ptr_;
} unique_ptr_8688ee79;

typedef struct unique_ptr<Phase::Controller::StreamRenderer, std::default_delete<Phase::Controller::StreamRenderer>> {
    struct __compressed_pair<Phase::Controller::StreamRenderer *, std::default_delete<Phase::Controller::StreamRenderer>> {
        struct StreamRenderer *_field1;
    } _field1;
} unique_ptr_9eb0da1f;

typedef struct unique_ptr<Phase::DataBundle, std::default_delete<Phase::DataBundle>> {
    struct __compressed_pair<Phase::DataBundle *, std::default_delete<Phase::DataBundle>> {
        struct DataBundle *__value_;
    } __ptr_;
} unique_ptr_6b6b4f9f;

typedef struct unique_ptr<Phase::MetaParameter, std::default_delete<Phase::MetaParameter>> {
    struct __compressed_pair<Phase::MetaParameter *, std::default_delete<Phase::MetaParameter>> {
        struct MetaParameter *__value_;
    } __ptr_;
} unique_ptr_b4818b2f;

