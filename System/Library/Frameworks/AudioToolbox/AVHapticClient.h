//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <AudioToolbox/CHHapticClientInterface-Protocol.h>
#import <AudioToolbox/NSXPCListenerDelegate-Protocol.h>

@class NSArray, NSString, NSXPCConnection;
@protocol OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface AVHapticClient : NSObject <NSXPCListenerDelegate, CHHapticClientInterface>
{
    NSXPCConnection *_connection;	// 8 = 0x8
    struct HapticSharedMemory _sharedBuffer;	// 16 = 0x10
    unsigned long long _uniqueID;	// 72 = 0x48
    int _serverTimeout;	// 80 = 0x50
    CDUnknownBlockType _completionCallback;	// 88 = 0x58
    CDUnknownBlockType _connectionCallback;	// 96 = 0x60
    struct mutex _mapMutex;	// 104 = 0x68
    struct map<unsigned long, AVHapticSequenceEntry *, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, AVHapticSequenceEntry *>>> _sequenceEntryMap;	// 168 = 0xa8
    NSObject<OS_dispatch_queue> *_completionQueue;	// 192 = 0xc0
    int _state;	// 200 = 0xc8
    _Bool _disconnecting;	// 204 = 0xcc
    _Bool _prewarmed;	// 205 = 0xcd
    _Bool _connected;	// 206 = 0xce
    int _serverProcessID;	// 208 = 0xd0
    unsigned long long _clientID;	// 216 = 0xd8
    NSArray *_channelKeys;	// 224 = 0xe0
    CDUnknownBlockType _asyncStopCallback;	// 232 = 0xe8
}

- (id).cxx_construct;	// IMP=0x000000000001dc53
- (void).cxx_destruct;	// IMP=0x000000000001dbd8
@property(copy) CDUnknownBlockType asyncStopCallback; // @synthesize asyncStopCallback=_asyncStopCallback;
@property int serverProcessID; // @synthesize serverProcessID=_serverProcessID;
@property(readonly) _Bool disconnecting; // @synthesize disconnecting=_disconnecting;
@property(copy) CDUnknownBlockType connectionCallback; // @synthesize connectionCallback=_connectionCallback;
@property(copy) CDUnknownBlockType completionCallback; // @synthesize completionCallback=_completionCallback;
@property _Bool connected; // @synthesize connected=_connected;
@property(readonly) _Bool prewarmed; // @synthesize prewarmed=_prewarmed;
@property(readonly) NSArray *channelKeys; // @synthesize channelKeys=_channelKeys;
@property(readonly) unsigned long long clientID; // @synthesize clientID=_clientID;
- (void)clientDisconnectingForReason:(unsigned long long)arg1 error:(id)arg2;	// IMP=0x000000000001d99f
- (void)clientStoppedForReason:(unsigned long long)arg1 error:(id)arg2;	// IMP=0x000000000001d5de
- (void)clientCompletedWithError:(id)arg1;	// IMP=0x000000000001d304
- (void)sequenceFinished:(unsigned long long)arg1 error:(id)arg2;	// IMP=0x000000000001cd9d
- (void)destroySharedMemory;	// IMP=0x000000000001cd49
- (unsigned int)calculateHapticCommandParamCurveMemorySize:(unsigned int)arg1;	// IMP=0x000000000001cd2a
- (int)setupSharedMemory:(struct object)arg1 size:(unsigned int)arg2;	// IMP=0x000000000001ccb5
- (void)handleServerConnectionInvalidation;	// IMP=0x000000000001c9c7
- (void)handleServerConnectionInterruption;	// IMP=0x000000000001c511
- (_Bool)removeAssignedChannelID:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000001c217
- (_Bool)requestAssignedChannels:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000001bec7
- (void)clearAssignedChannels;	// IMP=0x000000000001bdc9
- (_Bool)setPlayerBehavior:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000001bad2
- (void)setChannelKeys:(id)arg1;	// IMP=0x000000000001ba61
- (void)disconnect;	// IMP=0x000000000001b8a7
- (id)getSyncDelegateForMethod:(SEL)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000001b797
- (id)getAsyncDelegateForMethod:(SEL)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000001b687
- (_Bool)setupConnectionWithOptions:(id)arg1 error:(id *)arg2;	// IMP=0x000000000001a9ad
- (void)doInit;	// IMP=0x000000000001a8ff
- (void)releaseResources;	// IMP=0x000000000001a719
- (void)detachHapticSequence:(unsigned long long)arg1;	// IMP=0x000000000001a53b
- (_Bool)clearSequenceEvents:(unsigned long long)arg1 atTime:(double)arg2;	// IMP=0x000000000001a38c
- (_Bool)setSequenceChannelParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 sequenceID:(unsigned long long)arg4 channel:(unsigned long long)arg5;	// IMP=0x000000000001a17d
- (_Bool)resetHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;	// IMP=0x0000000000019fa9
- (_Bool)seekHapticSequence:(unsigned long long)arg1 toTime:(double)arg2;	// IMP=0x0000000000019de9
- (_Bool)resumeHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;	// IMP=0x0000000000019c15
- (_Bool)pauseHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;	// IMP=0x0000000000019a41
- (_Bool)stopHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;	// IMP=0x000000000001986d
- (_Bool)startHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 withOffset:(double)arg3;	// IMP=0x0000000000019663
- (_Bool)setSequencePlaybackRate:(unsigned long long)arg1 rate:(float)arg2 error:(id *)arg3;	// IMP=0x0000000000019448
- (_Bool)setSequenceLoopLength:(unsigned long long)arg1 length:(float)arg2 error:(id *)arg3;	// IMP=0x000000000001922d
- (_Bool)enableSequenceLooping:(unsigned long long)arg1 enable:(_Bool)arg2 error:(id *)arg3;	// IMP=0x0000000000019028
- (_Bool)prepareHapticSequence:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000000018c2e
- (void)detachSequenceEntryforID:(unsigned long long)arg1;	// IMP=0x00000000000189e4
- (void)setRunStateForSequenceEntryWithID:(unsigned long long)arg1 running:(_Bool)arg2;	// IMP=0x0000000000018954
- (void)callSequenceFinishedHandlersWithError:(id)arg1;	// IMP=0x000000000001873d
- (CDUnknownBlockType)getSequenceFinishedHandlerForID:(unsigned long long)arg1;	// IMP=0x0000000000018689
- (void)setSequenceFinishedHandlerForID:(unsigned long long)arg1 finishedHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000183ff
- (_Bool)setSequenceEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 channel:(unsigned long long)arg3;	// IMP=0x0000000000017ff5
- (_Bool)loadAndPrepareHapticSequenceFromVibePattern:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000017af7
- (_Bool)loadAndPrepareHapticSequenceFromEvents:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000017566
- (_Bool)loadAndPrepareHapticSequenceFromData:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000016fc3
- (_Bool)scheduleParameterCurve:(unsigned long long)arg1 curve:(id)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 error:(id *)arg5;	// IMP=0x0000000000016d85
- (_Bool)setParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned long long)arg4;	// IMP=0x0000000000016b48
- (_Bool)clearEventsFromTime:(double)arg1 channel:(unsigned long long)arg2;	// IMP=0x0000000000016962
- (_Bool)stopEventWithToken:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3;	// IMP=0x0000000000016764
- (_Bool)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 outToken:(unsigned long long *)arg4 error:(id *)arg5;	// IMP=0x00000000000166a7
- (_Bool)doScheduleParamCurveWithMemoryReserve:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 memoryReserve:(struct AddressReserve *)arg4 paramCurve:(id)arg5 error:(id *)arg6;	// IMP=0x00000000000159a8
- (_Bool)doScheduleParamCurve:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 paramCurve:(id)arg4 error:(id *)arg5;	// IMP=0x0000000000015268
- (_Bool)doSendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 sorted:(_Bool)arg4 outToken:(unsigned long long *)arg5 error:(id *)arg6;	// IMP=0x0000000000012eda
- (_Bool)startEventAndReturnToken:(unsigned long long)arg1 type:(unsigned long long)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 eventToken:(unsigned long long *)arg5;	// IMP=0x0000000000012b7c
- (_Bool)resetChannel:(unsigned long long)arg1 atTime:(double)arg2;	// IMP=0x0000000000012995
- (_Bool)setChannelEventBehavior:(unsigned long long)arg1 channel:(unsigned long long)arg2;	// IMP=0x00000000000125b0
- (void)expectNotifyAfter:(double)arg1;	// IMP=0x00000000000125aa
- (_Bool)finish:(CDUnknownBlockType)arg1;	// IMP=0x0000000000011e60
- (void)stopRunning:(CDUnknownBlockType)arg1;	// IMP=0x0000000000011a8f
- (void)stopRunning;	// IMP=0x00000000000118eb
- (void)startRunning:(CDUnknownBlockType)arg1;	// IMP=0x0000000000011530
- (void)stopPrewarm;	// IMP=0x00000000000113ab
- (void)prewarm:(CDUnknownBlockType)arg1;	// IMP=0x0000000000011113
- (_Bool)releaseCustomAudioEvent:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000010dfb
- (_Bool)referenceCustomAudioEvent:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0000000000010ae3
- (_Bool)copyCustomAudioEvent:(unsigned long long)arg1 options:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000000001077e
- (_Bool)createCustomAudioEvent:(id)arg1 format:(id)arg2 frames:(unsigned long long)arg3 options:(id)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x00000000000103c4
- (_Bool)loadHapticEvent:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000000ff60
- (void)allocateResources:(CDUnknownBlockType)arg1;	// IMP=0x000000000000fc5c
@property(readonly) double hapticLatency;
- (void)queryServerCapabilities:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000000fa35
- (void)dealloc;	// IMP=0x000000000000f7f1
- (id)initWithOptions:(id)arg1 error:(id *)arg2;	// IMP=0x000000000000f4dd
@property(readonly) int state;
- (void)setState:(int)arg1;	// IMP=0x000000000000f246
@property(readonly) _Bool running;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

