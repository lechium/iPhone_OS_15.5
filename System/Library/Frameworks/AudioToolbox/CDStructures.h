//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE, NSObject;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AVHapticPlayerFixedParameter {
    unsigned long long type;
    float value;
};

struct AddressReserve {
    void *_field1;
    unsigned int _field2;
    void *_field3;
    unsigned int _field4;
    int _field5;
};

struct AggregateState;

struct HapticSharedMemory {
    CDUnknownFunctionPointerType *_vptr$SharableMemoryBase;
    _Bool mIsOwner;
    _Bool mWasMapped;
    unsigned long long mSize;
    void *mBuffer;
    unsigned int mPort;
    int mFileDesc;
    int mSerial;
    NSObject *mXPCObject;
};

struct Impl;

struct STSGlobalState {
    unsigned long long hostTime;
    CDStruct_14d5dc5e listenerTransform;
};

struct STSGlobalStorage {
    _Bool _field1;
    struct STSGlobalState _field2;
};

struct STSPerLabelState {
    CDStruct_14d5dc5e _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
};

struct STSPerLabelStorage {
    _Bool _field1;
    struct STSPerLabelState _field2;
};

struct STSSharedStorage {
    struct _opaque_pthread_mutex_t _field1;
    struct STSGlobalStorage _field2;
    struct STSPerLabelStorage _field3[1];
};

struct __hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>> {
    struct __hash_iterator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*> {
        void *_field1;
    } _field1;
};

struct __shared_weak_count;

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct deque<unsigned long, std::allocator<unsigned long>> {
    struct __split_buffer<unsigned long *, std::allocator<unsigned long *>> {
        unsigned long long **__first_;
        unsigned long long **__begin_;
        unsigned long long **__end_;
        struct __compressed_pair<unsigned long **, std::allocator<unsigned long *>> {
            unsigned long long **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::allocator<unsigned long>> {
        unsigned long long __value_;
    } __size_;
};

struct map<unsigned long, AVHapticSequenceEntry *, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, AVHapticSequenceEntry *>>> {
    struct __tree<std::__value_type<unsigned long, AVHapticSequenceEntry *>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, AVHapticSequenceEntry *>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, AVHapticSequenceEntry *>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, AVHapticSequenceEntry *>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, AVHapticSequenceEntry *>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct object {
    id _field1;
};

struct shared_ptr<caulk::reactor<DefaultDeviceAggregate>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const AT::IOBinding::Impl> {
    struct Impl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const AggregateState> {
    struct AggregateState *_field1;
    struct __shared_weak_count *_field2;
};

struct stack<unsigned long, std::deque<unsigned long>> {
    struct deque<unsigned long, std::allocator<unsigned long>> c;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<std::string, STSPerLabelControllerState, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, STSPerLabelControllerState>>> {
    struct __hash_table<std::__hash_value_type<std::string, STSPerLabelControllerState>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, STSPerLabelControllerState>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::hash<std::string>, std::equal_to<std::string>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, STSPerLabelControllerState>, std::equal_to<std::string>, std::hash<std::string>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

#pragma mark Typedef'd Structures

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

// Template types
typedef struct __hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*>> {
    struct __hash_iterator<std::__hash_node<std::__hash_value_type<std::string, STSPerLabelControllerState>, void *>*> {
        void *_field1;
    } _field1;
} __hash_map_iterator_45d56b6f;

typedef struct shared_ptr<caulk::reactor<DefaultDeviceAggregate>> {
    void *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_68c1e1c6;

typedef struct shared_ptr<const AT::IOBinding::Impl> {
    struct Impl *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7989b661;

typedef struct shared_ptr<const AggregateState> {
    struct AggregateState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4c923a7b;

