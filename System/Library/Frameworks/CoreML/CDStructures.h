//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BayesianProbitRegression;

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct FeatureValues;

struct MMappedFile;

struct Model;

struct MultiArrayBuffer;

struct Prediction {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
};

struct StorageManager;

struct _KDBoundingBox {
    struct vector<_KDInterval, std::allocator<_KDInterval>> _intervals;
    unsigned long long _numDimensions;
};

struct _KDInterval;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __map_iterator<std::__tree_iterator<std::__value_type<std::string, unsigned long>, std::__tree_node<std::__value_type<std::string, unsigned long>, void *>*, long>> {
    struct __tree_iterator<std::__value_type<std::string, unsigned long>, std::__tree_node<std::__value_type<std::string, unsigned long>, void *>*, long> {
        void *__ptr_;
    } __i_;
};

struct __map_iterator<std::__tree_iterator<std::__value_type<unsigned long, unsigned long>, std::__tree_node<std::__value_type<unsigned long, unsigned long>, void *>*, long>> {
    struct __tree_iterator<std::__value_type<unsigned long, unsigned long>, std::__tree_node<std::__value_type<unsigned long, unsigned long>, void *>*, long> {
        void *__ptr_;
    } __i_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct basic_string<char, std::char_traits<char>, std::allocator<char>> {
    struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct linear_congruential_engine<unsigned int, 48271U, 0U, 2147483647U> {
    unsigned int __x_;
};

struct map<std::string, MLOptionalNNInputType, std::less<std::string>, std::allocator<std::pair<const std::string, MLOptionalNNInputType>>> {
    struct __tree<std::__value_type<std::string, MLOptionalNNInputType>, std::__map_value_compare<std::string, std::__value_type<std::string, MLOptionalNNInputType>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, MLOptionalNNInputType>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, MLOptionalNNInputType>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, MLOptionalNNInputType>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, bool, std::less<std::string>, std::allocator<std::pair<const std::string, bool>>> {
    struct __tree<std::__value_type<std::string, bool>, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, bool>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, bool>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, bool>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, espresso_simple_image_preprocessing_params_t, std::less<std::string>, std::allocator<std::pair<const std::string, espresso_simple_image_preprocessing_params_t>>> {
    struct __tree<std::__value_type<std::string, espresso_simple_image_preprocessing_params_t>, std::__map_value_compare<std::string, std::__value_type<std::string, espresso_simple_image_preprocessing_params_t>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, espresso_simple_image_preprocessing_params_t>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, espresso_simple_image_preprocessing_params_t>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, espresso_simple_image_preprocessing_params_t>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, int, std::less<std::string>, std::allocator<std::pair<const std::string, int>>> {
    struct __tree<std::__value_type<std::string, int>, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, int>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, int>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, int>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<const std::string, unsigned long>>> {
    struct __tree<std::__value_type<std::string, unsigned long>, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned long>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, unsigned long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, unsigned long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned long>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long>>> {
    struct __tree<std::__value_type<unsigned long, unsigned long>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, unsigned long>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, unsigned long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, unsigned long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, unsigned long>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<std::string, std::less<std::string>, std::allocator<std::string>> {
    struct __tree<std::string, std::less<std::string>, std::allocator<std::string>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::string, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::less<std::string>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<Archiver::MMappedFile> {
    struct MMappedFile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CoreML::BayesianProbitRegression::BayesianProbitRegression> {
    struct BayesianProbitRegression *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CoreML::BayesianProbitRegression::FeatureValues> {
    struct FeatureValues *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CoreML::MultiArrayBuffer> {
    struct MultiArrayBuffer *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CoreML::Specification::Model> {
    struct Model *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct svm_model {
    struct svm_parameter _field1;
    int _field2;
    int _field3;
    struct svm_node **_field4;
    double **_field5;
    double *_field6;
    double *_field7;
    double *_field8;
    int *_field9;
    int *_field10;
    int *_field11;
    int _field12;
};

struct svm_node {
    int _field1;
    double _field2;
};

struct svm_parameter {
    int _field1;
    int _field2;
    int _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    int *_field10;
    double *_field11;
    double _field12;
    double _field13;
    int _field14;
    int _field15;
};

struct unique_ptr<StorageManager, std::default_delete<StorageManager>> {
    struct __compressed_pair<StorageManager *, std::default_delete<StorageManager>> {
        struct StorageManager *__value_;
    } __ptr_;
};

struct vector<_KDInterval, std::allocator<_KDInterval>> {
    struct _KDInterval *__begin_;
    struct _KDInterval *__end_;
    struct __compressed_pair<_KDInterval *, std::allocator<_KDInterval>> {
        struct _KDInterval *__value_;
    } __end_cap_;
};

struct vector<bool, std::allocator<bool>> {
    unsigned long long *__begin_;
    unsigned long long __size_;
    struct __compressed_pair<unsigned long, std::allocator<unsigned long>> {
        unsigned long long __value_;
    } __cap_alloc_;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
};

struct vector<long long, std::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::allocator<long long>> {
        long long *__value_;
    } __end_cap_;
};

struct vector<long, std::allocator<long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long *, std::allocator<long>> {
        long long *__value_;
    } __end_cap_;
};

struct vector<std::map<std::string, espresso_buffer_t *>, std::allocator<std::map<std::string, espresso_buffer_t *>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::map<std::string, espresso_buffer_t *>*, std::allocator<std::map<std::string, espresso_buffer_t *>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<unsigned long long, double>, std::allocator<std::pair<unsigned long long, double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<unsigned long long, double>*, std::allocator<std::pair<unsigned long long, double>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::pair<unsigned long, float>, std::allocator<std::pair<unsigned long, float>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<unsigned long, float>*, std::allocator<std::pair<unsigned long, float>>> {
        void *_field1;
    } _field3;
};

struct vector<std::pair<unsigned long, unsigned long>, std::allocator<std::pair<unsigned long, unsigned long>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<unsigned long, unsigned long>*, std::allocator<std::pair<unsigned long, unsigned long>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::string, std::allocator<std::string>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *__value_;
    } __end_cap_;
};

struct vector<std::vector<double>, std::allocator<std::vector<double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::vector<double>*, std::allocator<std::vector<double>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
};

struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    void *_field1;
    void *_field2;
    unsigned long long _field3[4];
    unsigned long long _field4[4];
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    unsigned long long _field9;
    unsigned long long _field10;
    unsigned long long _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    unsigned long long _field14;
    int _field15;
} CDStruct_cf098810;

typedef struct {
    void *plan;
    int network_index;
} CDStruct_2bc666a5;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct {
        unsigned int _field1;
        unsigned int _field2;
        unsigned char _field3[128];
        unsigned int _field4;
        unsigned char _field5[4096];
    } _field4;
    struct {
        unsigned char _field1[16];
        unsigned char _field2[16];
        unsigned char _field3[16];
    } _field5;
} CDStruct_c101b2aa;

typedef struct {
    vector_8ca568ff _field1;
    vector_8ca568ff _field2;
    unsigned long long _field3;
    unsigned long long _field4;
} CDStruct_71e2ef61;

// Template types
typedef struct __map_iterator<std::__tree_iterator<std::__value_type<std::string, unsigned long>, std::__tree_node<std::__value_type<std::string, unsigned long>, void *>*, long>> {
    struct __tree_iterator<std::__value_type<std::string, unsigned long>, std::__tree_node<std::__value_type<std::string, unsigned long>, void *>*, long> {
        void *__ptr_;
    } __i_;
} __map_iterator_722b6d83;

typedef struct __map_iterator<std::__tree_iterator<std::__value_type<unsigned long, unsigned long>, std::__tree_node<std::__value_type<unsigned long, unsigned long>, void *>*, long>> {
    struct __tree_iterator<std::__value_type<unsigned long, unsigned long>, std::__tree_node<std::__value_type<unsigned long, unsigned long>, void *>*, long> {
        void *__ptr_;
    } __i_;
} __map_iterator_b6d25428;

typedef struct map<std::string, MLOptionalNNInputType, std::less<std::string>, std::allocator<std::pair<const std::string, MLOptionalNNInputType>>> {
    struct __tree<std::__value_type<std::string, MLOptionalNNInputType>, std::__map_value_compare<std::string, std::__value_type<std::string, MLOptionalNNInputType>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, MLOptionalNNInputType>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, MLOptionalNNInputType>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, MLOptionalNNInputType>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_14517e23;

typedef struct map<std::string, unsigned long, std::less<std::string>, std::allocator<std::pair<const std::string, unsigned long>>> {
    struct __tree<std::__value_type<std::string, unsigned long>, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned long>, std::less<std::string>, true>, std::allocator<std::__value_type<std::string, unsigned long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<std::string, unsigned long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, unsigned long>, std::less<std::string>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_3cdfdc0a;

typedef struct map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned long>>> {
    struct __tree<std::__value_type<unsigned long, unsigned long>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, unsigned long>, std::less<unsigned long>, true>, std::allocator<std::__value_type<unsigned long, unsigned long>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, unsigned long>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, unsigned long>, std::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_e095e051;

typedef struct shared_ptr<Archiver::MMappedFile> {
    struct MMappedFile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0841df90;

typedef struct shared_ptr<CoreML::BayesianProbitRegression::BayesianProbitRegression> {
    struct BayesianProbitRegression *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7e6b0415;

typedef struct shared_ptr<CoreML::BayesianProbitRegression::FeatureValues> {
    struct FeatureValues *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_dc1b6fff;

typedef struct shared_ptr<CoreML::MultiArrayBuffer> {
    struct MultiArrayBuffer *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_4162d239;

typedef struct vector<float, std::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::allocator<float>> {
        float *__value_;
    } __end_cap_;
} vector_8ca568ff;

typedef struct vector<int, std::allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *__value_;
    } __end_cap_;
} vector_cd3186ef;

typedef struct vector<long long, std::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::allocator<long long>> {
        long long *__value_;
    } __end_cap_;
} vector_1ee95920;

typedef struct vector<std::pair<unsigned long, float>, std::allocator<std::pair<unsigned long, float>>> {
    void *_field1;
    void *_field2;
    struct __compressed_pair<std::pair<unsigned long, float>*, std::allocator<std::pair<unsigned long, float>>> {
        void *_field1;
    } _field3;
} vector_7105b4ee;

typedef struct vector<std::string, std::allocator<std::string>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::string *, std::allocator<std::string>> {
        void *__value_;
    } __end_cap_;
} vector_bfe5b09a;

typedef struct vector<unsigned char, std::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> {
        char *__value_;
    } __end_cap_;
} vector_ce5fcef0;

typedef struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
} vector_b42bd36b;

typedef struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
} vector_2056c7c2;

