//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <SceneKit/NSCopying-Protocol.h>
#import <SceneKit/NSSecureCoding-Protocol.h>
#import <SceneKit/SCNAnimatable-Protocol.h>
#import <SceneKit/SCNTechniqueSupport-Protocol.h>

@class MISSING_TYPE, NSArray, NSMutableDictionary, NSString, SCNMaterialProperty, SCNOrderedDictionary, SCNTechnique;
@protocol MTLTexture;

@interface SCNCamera : NSObject <SCNAnimatable, SCNTechniqueSupport, NSCopying, NSSecureCoding>
{
    struct __C3DCamera *_camera;	// 8 = 0x8
    unsigned int _isPresentationInstance:1;	// 16 = 0x10
    unsigned int _custom:1;	// 16 = 0x10
    unsigned int _legacyFov:1;	// 16 = 0x10
    unsigned int _usesOrthographicProjection:1;	// 16 = 0x10
    unsigned int _automaticallyAdjustsZRange:1;	// 16 = 0x10
    unsigned int _fillMode:1;	// 16 = 0x10
    unsigned int _projectionDirection:1;	// 16 = 0x10
    SCNOrderedDictionary *_animations;	// 24 = 0x18
    NSMutableDictionary *_bindings;	// 32 = 0x20
    NSString *_name;	// 40 = 0x28
    float _xFov;	// 48 = 0x30
    float _yFov;	// 52 = 0x34
    double _orthographicScale;	// 56 = 0x38
    double _zNear;	// 64 = 0x40
    double _zFar;	// 72 = 0x48
    float _fieldOfView;	// 80 = 0x50
    float _focalLength;	// 84 = 0x54
    float _sensorSize;	// 88 = 0x58
    MISSING_TYPE *_lensShift;	// 96 = 0x60
    MISSING_TYPE *_postProjectionTransformTranslation;	// 104 = 0x68
    MISSING_TYPE *_postProjectionTransformScale;	// 112 = 0x70
    float _fStop;	// 120 = 0x78
    float _focusDistance;	// 124 = 0x7c
    float _dofIntensity;	// 128 = 0x80
    long long _bladeCount;	// 136 = 0x88
    long long _focalBlurSampleCount;	// 144 = 0x90
    float _aspectRatio;	// 152 = 0x98
    unsigned long long _categoryBitMask;	// 160 = 0xa0
    struct SCNMatrix4 _projectionTransform;	// 168 = 0xa8
    SCNTechnique *_technique;	// 232 = 0xe8
    SCNMaterialProperty *_colorGrading;	// 240 = 0xf0
    _Bool _wantsHDR;	// 248 = 0xf8
    float _whitePoint;	// 252 = 0xfc
    float _averageGray;	// 256 = 0x100
    float _exposureOffset;	// 260 = 0x104
    float _minimumExposure;	// 264 = 0x108
    float _maximumExposure;	// 268 = 0x10c
    _Bool _wantsExposureAdaptation;	// 272 = 0x110
    float _exposureAdaptationDuration;	// 276 = 0x114
    float _exposureAdaptationBrighteningSpeedFactor;	// 280 = 0x118
    float _exposureAdaptationDarkeningSpeedFactor;	// 284 = 0x11c
    double _exposureAdaptationHistogramRangeHighProbability;	// 288 = 0x120
    double _exposureAdaptationHistogramRangeLowProbability;	// 296 = 0x128
    long long _exposureAdaptationMode;	// 304 = 0x130
    float _bloomIntensity;	// 312 = 0x138
    float _bloomThreshold;	// 316 = 0x13c
    int _bloomIteration;	// 320 = 0x140
    float _bloomIterationSpread;	// 324 = 0x144
    float _bloomBlurRadius;	// 328 = 0x148
    float _motionBlurIntensity;	// 332 = 0x14c
    float _vignettingPower;	// 336 = 0x150
    float _vignettingIntensity;	// 340 = 0x154
    float _colorFringeStrength;	// 344 = 0x158
    float _colorFringeIntensity;	// 348 = 0x15c
    float _saturation;	// 352 = 0x160
    float _contrast;	// 356 = 0x164
    float _grainIntensity;	// 360 = 0x168
    float _grainScale;	// 364 = 0x16c
    _Bool _grainIsColored;	// 368 = 0x170
    float _whiteBalanceTemperature;	// 372 = 0x174
    float _whiteBalanceTint;	// 376 = 0x178
    struct {
        float intensity;
        float radius;
        float bias;
        float depthThreshold;
        float normalThreshold;
        long long sampleCount;
        long long downSample;
    } _screenSpaceAmbientOcclusion;	// 384 = 0x180
    id <MTLTexture> _grainTexture;	// 424 = 0x1a8
    float _grainSlice;	// 432 = 0x1b0
}

+ (_Bool)supportsSecureCoding;	// IMP=0x00000000001cdaa7
+ (id)keyPathsForValuesAffectingFocalLength;	// IMP=0x00000000001caba5
+ (id)keyPathsForValuesAffectingFieldOfView;	// IMP=0x00000000001cab79
+ (id)camera;	// IMP=0x00000000001c419e
+ (id)cameraWithCameraRef:(struct __C3DCamera *)arg1;	// IMP=0x00000000001c4158
+ (id)cameraWithMDLCamera:(id)arg1;	// IMP=0x00000000000245d4
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000001ccfeb
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000001cc905
- (void)_didDecodeSCNCamera:(id)arg1;	// IMP=0x00000000001cc87a
- (void)setFocalSize:(double)arg1;	// IMP=0x00000000001cc874
- (double)focalSize;	// IMP=0x00000000001cc86b
- (void)setFocalDistance:(double)arg1;	// IMP=0x00000000001cc859
- (double)focalDistance;	// IMP=0x00000000001cc847
- (void)_customEncodingOfSCNCamera:(id)arg1;	// IMP=0x00000000001cc7cf
- (id)copy;	// IMP=0x00000000001cc7bb
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000001cc0c6
- (id)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;	// IMP=0x00000000001cc0b9
@property(readonly, nonatomic) SCNMaterialProperty *colorGrading;
- (struct SCNMatrix4)projectionTransformWithViewportSize:(struct CGSize)arg1;	// IMP=0x00000000001cbe22
@property(nonatomic) struct SCNMatrix4 projectionTransform;
- (struct __C3DCamera *)cameraRef;	// IMP=0x00000000001cba78
- (_Bool)useLegacyFov;	// IMP=0x00000000001cba6a
- (void)setYMag:(double)arg1;	// IMP=0x00000000001cba58
- (double)yMag;	// IMP=0x00000000001cba46
- (void)setXMag:(double)arg1;	// IMP=0x00000000001cba34
- (double)xMag;	// IMP=0x00000000001cba22
- (void)setAspectRatio:(double)arg1;	// IMP=0x00000000001cb95c
- (double)aspectRatio;	// IMP=0x00000000001cb8eb
@property(nonatomic) long long projectionDirection;
- (void)setFieldOfViewOrientation:(long long)arg1;	// IMP=0x00000000001cb78f
- (long long)fieldOfViewOrientation;	// IMP=0x00000000001cb77d
- (void)setFillMode:(long long)arg1;	// IMP=0x00000000001cb6b2
- (long long)fillMode;	// IMP=0x00000000001cb650
@property(nonatomic) double focusDistance;
@property(nonatomic) long long focalBlurSampleCount;
@property(nonatomic) long long apertureBladeCount;
@property(nonatomic) double fStop;
- (void)setAperture:(double)arg1;	// IMP=0x00000000001cb0c0
- (double)aperture;	// IMP=0x00000000001cb079
@property(nonatomic) double focalLength;
@property(nonatomic) double sensorHeight;
@property(nonatomic) double fieldOfView;
- (void)_checkSettingsConsistency;	// IMP=0x00000000001caa92
- (void)_updateFocalLength;	// IMP=0x00000000001caa31
- (void)_updateFieldOfView;	// IMP=0x00000000001ca9c4
- (void)setPostProjectionTransformScale: /* Error: Ran out of types for this method. */;	// IMP=0x00000000001ca8d0
- (void)setPostProjectionTransformTranslation: /* Error: Ran out of types for this method. */;	// IMP=0x00000000001ca7dc
- (void)setPostProjectionTransform:(struct CGAffineTransform)arg1;	// IMP=0x00000000001ca61a
- (struct CGAffineTransform)postProjectionTransform;	// IMP=0x00000000001ca533
- (void)setLensShift: /* Error: Ran out of types for this method. */;	// IMP=0x00000000001ca43f
- (MISSING_TYPE *)lensShift;	// IMP=0x00000000001ca3cf
@property(nonatomic) double zNear;
@property(nonatomic) double zFar;
- (void)setYFov:(double)arg1;	// IMP=0x00000000001c9f3f
- (double)yFov;	// IMP=0x00000000001c9ecf
- (void)setXFov:(double)arg1;	// IMP=0x00000000001c9d95
- (double)xFov;	// IMP=0x00000000001c9d25
@property(nonatomic) double whitePoint;
@property(nonatomic) _Bool wantsHDR;
@property(nonatomic) _Bool wantsExposureAdaptation;
@property(nonatomic) double vignettingPower;
@property(nonatomic) double vignettingIntensity;
@property(nonatomic) _Bool usesOrthographicProjection;
@property(nonatomic) double saturation;
@property(nonatomic) double orthographicScale;
@property(nonatomic) double motionBlurIntensity;
@property(nonatomic) double minimumExposure;
@property(nonatomic) double maximumExposure;
- (void)setFocalBlurRadius:(double)arg1;	// IMP=0x00000000001c8dde
- (double)focalBlurRadius;	// IMP=0x00000000001c8d6d
- (void)setDofIntensity:(float)arg1;	// IMP=0x00000000001c8c75
- (float)dofIntensity;	// IMP=0x00000000001c8c02
@property(nonatomic) _Bool wantsDepthOfField;
@property(nonatomic) double exposureOffset;
- (void)setExposureAdaptationMode:(long long)arg1;	// IMP=0x00000000001c8972
- (long long)exposureAdaptationMode;	// IMP=0x00000000001c8918
- (void)setExposureAdaptationHistogramRangeLowProbability:(double)arg1;	// IMP=0x00000000001c881f
- (double)exposureAdaptationHistogramRangeLowProbability;	// IMP=0x00000000001c87b4
- (void)setExposureAdaptationHistogramRangeHighProbability:(double)arg1;	// IMP=0x00000000001c86bb
- (double)exposureAdaptationHistogramRangeHighProbability;	// IMP=0x00000000001c8650
- (void)setExposureAdaptationDuration:(double)arg1;	// IMP=0x00000000001c8550
- (double)exposureAdaptationDuration;	// IMP=0x00000000001c84df
@property(nonatomic) double exposureAdaptationDarkeningSpeedFactor;
@property(nonatomic) double exposureAdaptationBrighteningSpeedFactor;
@property(nonatomic) double whiteBalanceTint;
@property(nonatomic) double whiteBalanceTemperature;
- (void)setGrainTexture:(id)arg1;	// IMP=0x00000000001c7e25
- (id)grainTexture;	// IMP=0x00000000001c7dc3
- (void)setGrainSlice:(double)arg1;	// IMP=0x00000000001c7cc7
- (double)grainSlice;	// IMP=0x00000000001c7c56
@property(nonatomic) _Bool grainIsColored;
@property(nonatomic) double grainScale;
@property(nonatomic) double grainIntensity;
@property(nonatomic) double contrast;
@property(nonatomic) double colorFringeIntensity;
@property(nonatomic) double colorFringeStrength;
@property(nonatomic) unsigned long long categoryBitMask;
@property(nonatomic) double bloomIterationSpread;
- (void)setBloomIteration:(long long)arg1;	// IMP=0x00000000001c7128
@property(nonatomic) long long bloomIterationCount;
- (long long)bloomIteration;	// IMP=0x00000000001c7029
@property(nonatomic) double bloomThreshold;
@property(nonatomic) double bloomIntensity;
@property(nonatomic) double bloomBlurRadius;
@property(nonatomic) double averageGray;
@property(nonatomic) _Bool automaticallyAdjustsZRange;
- (void)setScreenSpaceAmbientOcclusionDownSample:(long long)arg1;	// IMP=0x00000000001c67db
- (long long)screenSpaceAmbientOcclusionDownSample;	// IMP=0x00000000001c6781
- (void)setScreenSpaceAmbientOcclusionSampleCount:(long long)arg1;	// IMP=0x00000000001c66a2
- (long long)screenSpaceAmbientOcclusionSampleCount;	// IMP=0x00000000001c6648
@property(nonatomic) double screenSpaceAmbientOcclusionNormalThreshold;
@property(nonatomic) double screenSpaceAmbientOcclusionDepthThreshold;
@property(nonatomic) double screenSpaceAmbientOcclusionBias;
@property(nonatomic) double screenSpaceAmbientOcclusionRadius;
@property(nonatomic) double screenSpaceAmbientOcclusionIntensity;
- (_Bool)hasCustomProjectionTransform;	// IMP=0x00000000001c5f06
- (void)_registerAsObserver;	// IMP=0x00000000001c5f00
- (_Bool)isPausedOrPausedByInheritance;	// IMP=0x00000000001c5ef8
- (id)presentationInstance;	// IMP=0x00000000001c5ee6
- (id)presentationCamera;	// IMP=0x00000000001c5e9f
@property(copy, nonatomic) SCNTechnique *technique;
- (void)_syncObjCModel;	// IMP=0x00000000001c5828
- (void)removeAllBindings;	// IMP=0x00000000001c577e
- (void)unbindAnimatablePath:(id)arg1;	// IMP=0x00000000001c569a
- (void)bindAnimatablePath:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;	// IMP=0x00000000001c549e
- (id)_scnBindings;	// IMP=0x00000000001c5494
- (_Bool)isAnimationForKeyPaused:(id)arg1;	// IMP=0x00000000001c540d
- (void)setSpeed:(double)arg1 forAnimationKey:(id)arg2;	// IMP=0x00000000001c52fb
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;	// IMP=0x00000000001c52e9
- (void)resumeAnimationForKey:(id)arg1;	// IMP=0x00000000001c5245
- (void)pauseAnimationForKey:(id)arg1;	// IMP=0x00000000001c519e
- (void)_pauseAnimation:(_Bool)arg1 forKey:(id)arg2 pausedByNode:(_Bool)arg3;	// IMP=0x00000000001c511d
- (id)animationPlayerForKey:(id)arg1;	// IMP=0x00000000001c50a2
- (void)_copyAnimationsFrom:(id)arg1;	// IMP=0x00000000001c4ef8
- (id)_scnAnimationForKey:(id)arg1;	// IMP=0x00000000001c4e6d
- (id)animationForKey:(id)arg1;	// IMP=0x00000000001c4e3b
- (void)_syncObjCAnimations;	// IMP=0x00000000001c4d79
@property(readonly) NSArray *animationKeys;
- (void)removeAnimationForKey:(id)arg1 blendOutDuration:(double)arg2;	// IMP=0x00000000001c4c16
- (void)removeAnimationForKey:(id)arg1;	// IMP=0x00000000001c4b38
- (void)removeAllAnimationsWithBlendOutDuration:(double)arg1;	// IMP=0x00000000001c4a60
- (void)removeAllAnimations;	// IMP=0x00000000001c49a0
- (void)addAnimation:(id)arg1;	// IMP=0x00000000001c498c
- (void)addAnimation:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000001c4896
- (void)addAnimationPlayer:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000001c46d0
- (_Bool)__removeAnimation:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000001c45db
- (struct __C3DAnimationManager *)animationManager;	// IMP=0x00000000001c45b8
- (const void *)__CFObject;	// IMP=0x00000000001c45ae
- (id)scene;	// IMP=0x00000000001c458b
- (struct __C3DScene *)sceneRef;	// IMP=0x00000000001c4571
- (void)_syncEntityObjCModel;	// IMP=0x00000000001c4533
- (id)identifier;	// IMP=0x00000000001c4519
- (void)setIdentifier:(id)arg1;	// IMP=0x00000000001c44f2
@property(copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x00000000001c41b0
- (id)initPresentationCameraWithCameraRef:(struct __C3DCamera *)arg1;	// IMP=0x00000000001c40ef
- (id)initWithCameraRef:(struct __C3DCamera *)arg1;	// IMP=0x00000000001c406f
- (id)init;	// IMP=0x00000000001c400a
- (id)debugQuickLookData;	// IMP=0x00000000002acc57
- (id)debugQuickLookObject;	// IMP=0x00000000002acab3

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

