//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE, SCNNode, UIGestureRecognizer;

@interface SCNCameraControlEventHandler
{
    SCNNode *_freeViewCameraNode;	// 24 = 0x18
    struct CGPoint _initialPoint;	// 32 = 0x20
    union C3DMatrix4x4 _initialMatrix;	// 48 = 0x30
    float _initialZoom;	// 112 = 0x70
    float _originalFovX;	// 116 = 0x74
    float _originalFovY;	// 120 = 0x78
    float _originalOrthoScale;	// 124 = 0x7c
    float _zoomFactor;	// 128 = 0x80
    MISSING_TYPE *_clickOrigin;	// 144 = 0x90
    int _lastGestureFingerCount;	// 160 = 0xa0
    _Bool _isDraggingWithOneFinger;	// 164 = 0xa4
    float _roll;	// 168 = 0xa8
    union C3DMatrix4x4 _initialMatrixForRoll;	// 176 = 0xb0
    UIGestureRecognizer *_pressGesture;	// 240 = 0xf0
    UIGestureRecognizer *_tapGesture;	// 248 = 0xf8
    UIGestureRecognizer *_pinchGesture;	// 256 = 0x100
    UIGestureRecognizer *_panGesture;	// 264 = 0x108
    UIGestureRecognizer *_rotateGesture;	// 272 = 0x110
    unsigned long long _stickyAxis;	// 280 = 0x118
    struct C3DSphere _viewedObjectSphere;	// 288 = 0x120
    unsigned int _isViewedObjectSphereComputed:1;	// 304 = 0x130
    struct os_unfair_lock_s _stateLock;	// 308 = 0x134
    unsigned int _enabled:1;	// 312 = 0x138
    unsigned int _hasAutomaticCameraTarget:1;	// 312 = 0x138
    unsigned int _automaticCameraTargetUpToDate:1;	// 312 = 0x138
    unsigned int _inertia:1;	// 312 = 0x138
    unsigned int _didEverFocusNode:1;	// 312 = 0x138
    unsigned int _allowsTranslation:1;	// 312 = 0x138
    unsigned int _pinchShouldMoveCamera:1;	// 312 = 0x138
    unsigned int _alternateMode:1;	// 312 = 0x138
    unsigned int _upDirIsSet:1;	// 313 = 0x139
    unsigned int _gimbalLockMode:1;	// 313 = 0x139
    unsigned int _inertiaRunning:1;	// 313 = 0x139
    long long _browseMode;	// 320 = 0x140
    MISSING_TYPE *_upDir;	// 336 = 0x150
    struct SCNVector3 _cameraTarget;	// 352 = 0x160
    struct SCNVector3 _autoCameraTarget;	// 364 = 0x16c
    float _browseScaleFactor;	// 376 = 0x178
    double _friction;	// 384 = 0x180
    struct CGPoint _totalDragWithInertia;	// 392 = 0x188
    struct CGPoint _inertiaVelocity;	// 408 = 0x198
    double _lastSimulationTime;	// 424 = 0x1a8
}

+ (struct SCNMatrix4)matrixWithNoRoll:(struct SCNMatrix4)arg1;	// IMP=0x0000000000298855
+ (MISSING_TYPE *)frontVectorWithPointOfView:(id)arg1;	// IMP=0x00000000002984f6
- (void)panWithGestureRecognizer:(id)arg1;	// IMP=0x0000000000299e67
- (void)pinchWithGestureRecognizer:(id)arg1;	// IMP=0x0000000000299e10
- (void)rotateWithGestureRecognizer:(id)arg1;	// IMP=0x0000000000299cde
- (void)beginGesture:(id)arg1;	// IMP=0x0000000000299ac1
- (void)_handlePress:(id)arg1;	// IMP=0x0000000000299abb
- (void)_handleDoubleTap:(id)arg1;	// IMP=0x0000000000299a7c
- (void)_handleRotation:(id)arg1;	// IMP=0x0000000000299a5b
- (void)_handlePan:(id)arg1;	// IMP=0x0000000000299a3a
- (void)_handlePinch:(id)arg1;	// IMP=0x0000000000299a19
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x0000000000299a04
- (id)gestureRecognizers;	// IMP=0x00000000002996c7
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x0000000000299650
- (void)_translateTo:(struct CGPoint)arg1;	// IMP=0x0000000000299265
- (void)_rotateWithDrag:(struct CGPoint)arg1 mode:(long long)arg2 stickyAxis:(unsigned long long)arg3;	// IMP=0x0000000000298c50
- (void)clearRoll;	// IMP=0x0000000000298adb
- (void)_beginTranslateAtLocation:(struct CGPoint)arg1;	// IMP=0x000000000029861a
- (MISSING_TYPE *)frontVector;	// IMP=0x00000000002985bb
- (struct C3DSphere)viewedObjectSphere;	// IMP=0x000000000029833f
- (_Bool)computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode *)arg1 sphere:(struct C3DSphere *)arg2;	// IMP=0x000000000029824e
- (void)_startBrowsingIfNeeded:(struct CGPoint)arg1;	// IMP=0x0000000000298008
- (void)endDraggingWithVelocity:(struct CGPoint)arg1;	// IMP=0x0000000000297f18
- (_Bool)wantsRedraw;	// IMP=0x0000000000297edf
- (_Bool)_3DConnexionIsPressed;	// IMP=0x0000000000297ed7
- (_Bool)_isInertiaRunning;	// IMP=0x0000000000297e92
- (void)_setInertiaRunning:(_Bool)arg1;	// IMP=0x0000000000297e45
- (void)viewWillDrawAtTime:(double)arg1;	// IMP=0x0000000000297e0e
- (void)rotateWithVector:(long long)arg1 mode: /* Error: Ran out of types for this method. */;	// IMP=0x0000000000297cee
- (void)_onInertiaTimer;	// IMP=0x0000000000297b7b
- (void)cameraDidChange;	// IMP=0x0000000000297b4d
- (void)cameraWillChange;	// IMP=0x0000000000297b2e
- (void)sceneDidChange;	// IMP=0x0000000000297b00
- (void)sceneWillChange;	// IMP=0x0000000000297aba
- (void)translateByX:(float)arg1 Y:(float)arg2 Z:(float)arg3;	// IMP=0x0000000000297845
- (void)setZoomFactor:(double)arg1;	// IMP=0x0000000000297484
- (double)zoomFactor;	// IMP=0x0000000000297472
- (void)zoomBy:(float)arg1;	// IMP=0x000000000029745b
- (void)zoomBy:(float)arg1 animate:(_Bool)arg2;	// IMP=0x000000000029725b
- (void)rotateOf:(double)arg1;	// IMP=0x00000000002970ff
- (void)updateBrowseScaleFactor;	// IMP=0x0000000000296f74
- (void)_resetBrowseScaleFactor;	// IMP=0x0000000000296ea2
- (double)_browseScale;	// IMP=0x0000000000296e90
- (float)_translationCoef;	// IMP=0x0000000000296e71
- (void)computeAutomaticTargetPoint;	// IMP=0x0000000000296d17
- (struct SCNVector3)cameraAutomaticTargetPoint;	// IMP=0x0000000000296cd8
- (void)_switchToFreeViewCamera;	// IMP=0x0000000000296c45
- (void)_installFreeViewCameraIfNeeded;	// IMP=0x0000000000296b78
- (void)_prepareFreeViewCamera;	// IMP=0x0000000000296580
- (_Bool)_freeCameraActivated;	// IMP=0x000000000029652f
- (void)_resetFreeViewCamera;	// IMP=0x000000000029649f
- (void)activateFreeCamera;	// IMP=0x000000000029645e
- (void)setEnableFreeCamera:(_Bool)arg1;	// IMP=0x0000000000296443
@property unsigned long long stickyAxis;
- (void)focusNode:(id)arg1;	// IMP=0x0000000000296132
- (id)freeCamera;	// IMP=0x0000000000296121
@property struct SCNVector3 cameraTarget;
@property _Bool automaticCameraTarget;
- (void)invalidateCameraTarget;	// IMP=0x00000000002960af
@property struct SCNVector3 gimbalLockVector;
@property _Bool gimbalLockMode;
@property double friction;
@property _Bool enableInertia;
@property _Bool allowsTranslation;
- (void)setEnabled:(_Bool)arg1;	// IMP=0x0000000000295e87
- (_Bool)enabled;	// IMP=0x0000000000295e75
- (void)dealloc;	// IMP=0x0000000000295dd4
- (id)init;	// IMP=0x0000000000295d38

@end

