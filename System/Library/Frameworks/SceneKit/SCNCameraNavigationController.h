//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <SceneKit/SCNCameraControllerDelegate-Protocol.h>
#import <SceneKit/SCNEventHandler-Protocol.h>

@class MISSING_TYPE, NSDictionary, NSString, SCNCameraController, SCNNode, SCNView, UIGestureRecognizer;
@protocol SCNCameraNavigationControllerDelegate;

@interface SCNCameraNavigationController : NSObject <SCNEventHandler, SCNCameraControllerDelegate>
{
    UIGestureRecognizer *_pressGesture;	// 8 = 0x8
    UIGestureRecognizer *_tapGesture;	// 16 = 0x10
    UIGestureRecognizer *_pinchGesture;	// 24 = 0x18
    UIGestureRecognizer *_panGesture;	// 32 = 0x20
    UIGestureRecognizer *_rotateGesture;	// 40 = 0x28
    _Bool _isDraggingWithOneFinger;	// 48 = 0x30
    long long _lastGestureFingerCount;	// 56 = 0x38
    long long _browseMode;	// 64 = 0x40
    float _cameraOriginalFieldOfView;	// 72 = 0x48
    float _fieldOfViewZoomFactor;	// 76 = 0x4c
    float _originalOrthoScale;	// 80 = 0x50
    float _orthographicZoomFactor;	// 84 = 0x54
    _Bool _enabled;	// 88 = 0x58
    _Bool _translationAllowed;	// 89 = 0x59
    _Bool _didEverFocusNode;	// 90 = 0x5a
    _Bool _isSceneBoundingSphereComputed;	// 91 = 0x5b
    _Bool _cameraTargetComputed;	// 92 = 0x5c
    _Bool _pinchShouldMoveCamera;	// 93 = 0x5d
    _Bool _shouldUpdateTarget;	// 94 = 0x5e
    _Bool _shouldIgnoreMomentumEvents;	// 95 = 0x5f
    _Bool _isOrbiting;	// 96 = 0x60
    _Bool _recordingPointOfViewEvents;	// 97 = 0x61
    _Bool _mouseDown;	// 98 = 0x62
    CDUnion_915c2b1f _sceneBoundingSphere;	// 112 = 0x70
    MISSING_TYPE *_translationOrigin;	// 128 = 0x80
    float _initialZoom;	// 144 = 0x90
    MISSING_TYPE *_initialPointOfViewWorldPosition;	// 160 = 0xa0
    double _lastKeyInputTime;	// 176 = 0xb0
    double _flyModeVelocity;	// 184 = 0xb8
    double _panSensitivity;	// 192 = 0xc0
    double _truckSensitivity;	// 200 = 0xc8
    double _rotationSensitivity;	// 208 = 0xd0
    struct CGPoint _initialInputLocation;	// 216 = 0xd8
    struct CGPoint _lastInputLocation;	// 232 = 0xe8
    struct CGPoint _accumulatedDrag;	// 248 = 0xf8
    double _lastRotationAngle;	// 264 = 0x108
    struct os_unfair_lock_s _drawAtTimeLock;	// 272 = 0x110
    struct {
        _Bool stickyMoveEnabled;
        unsigned long long direction__pickedAxis;
        unsigned long long userStickyAxis;
    } _stickyAxis;	// 280 = 0x118
    struct {
        _Bool automaticLocationUpToDate;
        _Bool hasAutomatic;
    } _target;	// 312 = 0x138
    struct {
        struct CGPoint lastDragLocation;
        struct CGPoint velocity;
        double lastDragTime;
    } _inertia;	// 320 = 0x140
    struct {
        struct os_unfair_lock_s lock;
        NSDictionary *keyCodeConfiguration;
        struct set<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>> keyDown;
        struct vector<unsigned short, std::allocator<unsigned short>> forward;
        struct vector<unsigned short, std::allocator<unsigned short>> backward;
        struct vector<unsigned short, std::allocator<unsigned short>> left;
        struct vector<unsigned short, std::allocator<unsigned short>> right;
    } _keyboard;	// 360 = 0x168
    struct {
        _Bool hasShift;
        _Bool hasOption;
    } _scrollWheelModifiers;	// 496 = 0x1f0
    _Bool _enableFreeCamera;	// 498 = 0x1f2
    _Bool _autoSwitchToFreeCamera;	// 499 = 0x1f3
    SCNCameraController *_cameraController;	// 504 = 0x1f8
    id <SCNCameraNavigationControllerDelegate> _delegate;	// 512 = 0x200
    SCNView *_view;	// 520 = 0x208
    SCNNode *_freeViewCameraNode;	// 528 = 0x210
}

- (id).cxx_construct;	// IMP=0x00000000002a5dd6
- (void).cxx_destruct;	// IMP=0x00000000002a5d51
@property(nonatomic) double rotationSensitivity; // @synthesize rotationSensitivity=_rotationSensitivity;
@property(nonatomic) double truckSensitivity; // @synthesize truckSensitivity=_truckSensitivity;
@property(nonatomic) double panSensitivity; // @synthesize panSensitivity=_panSensitivity;
@property(nonatomic) double flyModeVelocity; // @synthesize flyModeVelocity=_flyModeVelocity;
@property(nonatomic) _Bool autoSwitchToFreeCamera; // @synthesize autoSwitchToFreeCamera=_autoSwitchToFreeCamera;
@property(nonatomic) _Bool enableFreeCamera; // @synthesize enableFreeCamera=_enableFreeCamera;
@property(readonly, nonatomic) SCNNode *freeCamera; // @synthesize freeCamera=_freeViewCameraNode;
@property(nonatomic) SCNView *view; // @synthesize view=_view;
@property(nonatomic) id <SCNCameraNavigationControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)__didChangePointOfView;	// IMP=0x00000000002a5c1c
- (void)__willChangePointOfView;	// IMP=0x00000000002a5bb2
- (void)_translateToViewPoint:(struct CGPoint)arg1;	// IMP=0x00000000002a5835
- (void)_computeTranslationOrigin3DFromPoint:(struct CGPoint)arg1;	// IMP=0x00000000002a55cd
- (_Bool)_pointOfViewUsesOrthographicProjection;	// IMP=0x00000000002a54fc
- (void)_setPointOfViewOrthographicScale:(float)arg1;	// IMP=0x00000000002a543f
- (float)_pointOfViewOrthographicScale;	// IMP=0x00000000002a5398
- (void)_computeStickyAxisIfNeeded:(struct CGPoint)arg1;	// IMP=0x00000000002a52e5
- (_Bool)_computeBoundingSphereOmittingFloorsForNode:(struct __C3DNode *)arg1 sphere:(struct C3DSphere *)arg2;	// IMP=0x00000000002a51fb
- (CDUnion_915c2b1f)_sceneBoundingSphere;	// IMP=0x00000000002a5115
- (void)_computeAutomaticTargetPointIfNeeded;	// IMP=0x00000000002a4fbf
- (struct SCNVector3)cameraAutomaticTargetPoint;	// IMP=0x00000000002a4f84
- (MISSING_TYPE *)_defaultTargetForScene:(id)arg1;	// IMP=0x00000000002a4d7f
- (void)_startBrowsingIfNeeded:(struct CGPoint)arg1;	// IMP=0x00000000002a4c68
- (MISSING_TYPE *)worldFront;	// IMP=0x00000000002a4c31
- (double)_modeSensitivity;	// IMP=0x00000000002a4bdb
- (void)panWithGestureRecognizer:(id)arg1;	// IMP=0x00000000002a470f
- (void)pinchWithGestureRecognizer:(id)arg1;	// IMP=0x00000000002a4613
- (void)rotateWithGestureRecognizer:(id)arg1;	// IMP=0x00000000002a44f9
- (void)beginGesture:(id)arg1;	// IMP=0x00000000002a4326
- (void)_handlePress:(id)arg1;	// IMP=0x00000000002a4320
- (void)_handleDoubleTap:(id)arg1;	// IMP=0x00000000002a42d9
- (void)_handleRotation:(id)arg1;	// IMP=0x00000000002a429f
- (void)_handlePan:(id)arg1;	// IMP=0x00000000002a4265
- (void)_handlePinch:(id)arg1;	// IMP=0x00000000002a422b
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x00000000002a41e8
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;	// IMP=0x00000000002a416e
- (id)gestureRecognizers;	// IMP=0x00000000002a3e66
- (void)_stopInertia;	// IMP=0x00000000002a3dc0
- (void)cameraDidChange;	// IMP=0x00000000002a3d4f
- (void)_willBeginInteraction;	// IMP=0x00000000002a3aed
- (void)_setupUpVector;	// IMP=0x00000000002a376d
- (void)cameraWillChange;	// IMP=0x00000000002a3767
- (void)viewDidDrawAtTime:(double)arg1;	// IMP=0x00000000002a3761
- (void)viewWillDrawAtTime:(double)arg1;	// IMP=0x00000000002a3632
- (void)sceneDidChange;	// IMP=0x00000000002a3587
- (void)sceneWillChange;	// IMP=0x00000000002a3543
- (void)cameraInertiaDidEndForController:(id)arg1;	// IMP=0x00000000002a3531
- (void)cameraInertiaWillStartForController:(id)arg1;	// IMP=0x00000000002a352b
- (void)translateByX:(float)arg1 Y:(float)arg2 Z:(float)arg3;	// IMP=0x00000000002a345e
- (void)setZoomFactor:(double)arg1;	// IMP=0x00000000002a32e9
- (float)_orthographicScaleForZoomFactor:(float)arg1;	// IMP=0x00000000002a32d7
- (float)_orthographicZoomFactorForProposedZoomFactor:(float)arg1;	// IMP=0x00000000002a316a
- (id)pointOfView;	// IMP=0x00000000002a313f
- (double)zoomFactor;	// IMP=0x00000000002a3119
- (void)zoomBy:(float)arg1;	// IMP=0x00000000002a3102
- (void)zoomBy:(float)arg1 animate:(_Bool)arg2;	// IMP=0x00000000002a2fe9
- (void)rotateOf:(double)arg1;	// IMP=0x00000000002a2ed2
- (float)_targetDistance;	// IMP=0x00000000002a2e40
- (float)_translationCoef;	// IMP=0x00000000002a2e06
- (float)_cappedTranslationDelta:(float)arg1;	// IMP=0x00000000002a2d02
- (void)_switchToFreeViewCamera;	// IMP=0x00000000002a2c06
- (void)_installFreeViewCameraIfNeeded;	// IMP=0x00000000002a2b21
- (void)_prepareFreeViewCamera;	// IMP=0x00000000002a25c0
- (_Bool)_freeCameraActivated;	// IMP=0x00000000002a2573
- (void)_resetFreeViewCamera;	// IMP=0x00000000002a24c5
- (void)activateFreeCamera;	// IMP=0x00000000002a24b3
- (unsigned long long)_effectiveStickyAxis;	// IMP=0x00000000002a246f
@property(nonatomic) unsigned long long stickyAxis;
- (void)focusNodes:(id)arg1;	// IMP=0x00000000002a2335
- (void)focusNode:(id)arg1;	// IMP=0x00000000002a22c4
- (_Bool)wantsRedraw;	// IMP=0x00000000002a2239
- (void)setGimbalLockVector:(struct SCNVector3)arg1;	// IMP=0x00000000002a2209
- (struct SCNVector3)gimbalLockVector;	// IMP=0x00000000002a21f9
@property(nonatomic) _Bool gimbalLockMode;
@property(nonatomic) struct SCNVector3 cameraTarget;
- (void)invalidateCameraTarget;	// IMP=0x00000000002a20ef
@property(nonatomic) _Bool automaticCameraTarget;
@property(nonatomic) double friction;
@property(nonatomic) _Bool enableInertia;
@property(nonatomic) _Bool allowsTranslation;
@property(nonatomic) _Bool enabled;
@property(readonly, nonatomic) SCNCameraController *cameraController; // @synthesize cameraController=_cameraController;
- (void)dealloc;	// IMP=0x00000000002a1e2b
- (id)initWithView:(id)arg1;	// IMP=0x00000000002a1cd6

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

