//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CallKit/CXCopying-Protocol.h>
#import <CallKit/NSCopying-Protocol.h>
#import <CallKit/NSSecureCoding-Protocol.h>

@class CXHandle, CXHandoffContext, CXScreenShareAttributes, NSDictionary, NSSet, NSString, NSUUID;

@interface CXCallUpdate : NSObject <CXCopying, NSSecureCoding, NSCopying>
{
    _Bool _emergency;	// 8 = 0x8
    _Bool _failureExpected;	// 9 = 0x9
    _Bool _usingBaseband;	// 10 = 0xa
    _Bool _blocked;	// 11 = 0xb
    _Bool _mayRequireBreakBeforeMake;	// 12 = 0xc
    _Bool _hasVideo;	// 13 = 0xd
    _Bool _requiresInCallSounds;	// 14 = 0xe
    _Bool _supportsHolding;	// 15 = 0xf
    _Bool _supportsGrouping;	// 16 = 0x10
    _Bool _supportsUngrouping;	// 17 = 0x11
    _Bool _supportsDTMF;	// 18 = 0x12
    _Bool _supportsUnambiguousMultiPartyState;	// 19 = 0x13
    _Bool _supportsAddCall;	// 20 = 0x14
    _Bool _supportsSendingToVoicemail;	// 21 = 0x15
    _Bool _prefersExclusiveAccessToCellularNetwork;	// 22 = 0x16
    _Bool _supportsTTYWithVoice;	// 23 = 0x17
    _Bool _remoteUplinkMuted;	// 24 = 0x18
    _Bool _shouldSuppressInCallUI;	// 25 = 0x19
    _Bool _requiresAuthentication;	// 26 = 0x1a
    _Bool _mutuallyExclusiveCall;	// 27 = 0x1b
    _Bool _conversation;	// 28 = 0x1c
    _Bool _mixesVoiceWithMedia;	// 29 = 0x1d
    _Bool _mediaPlaybackOnExternalDevice;	// 30 = 0x1e
    _Bool _oneToOneModeEnabled;	// 31 = 0x1f
    _Bool _sharingScreen;	// 32 = 0x20
    _Bool _ignoresBluetoothDeviceUID;	// 33 = 0x21
    struct os_unfair_lock_s _accessorLock;	// 36 = 0x24
    CXHandle *_remoteHandle;	// 40 = 0x28
    NSString *_localizedCallerName;	// 48 = 0x30
    long long _ttyType;	// 56 = 0x38
    long long _bluetoothAudioFormat;	// 64 = 0x40
    NSString *_audioCategory;	// 72 = 0x48
    NSString *_audioMode;	// 80 = 0x50
    long long _audioInterruptionProvider;	// 88 = 0x58
    long long _audioInterruptionOperationMode;	// 96 = 0x60
    long long _verificationStatus;	// 104 = 0x68
    long long _priority;	// 112 = 0x70
    long long _inCallSoundRegion;	// 120 = 0x78
    long long _videoStreamToken;	// 128 = 0x80
    NSString *_crossDeviceIdentifier;	// 136 = 0x88
    NSString *_ISOCountryCode;	// 144 = 0x90
    NSUUID *_localSenderIdentityUUID;	// 152 = 0x98
    NSUUID *_localSenderIdentityAccountUUID;	// 160 = 0xa0
    NSUUID *_participantGroupUUID;	// 168 = 0xa8
    NSSet *_remoteParticipantHandles;	// 176 = 0xb0
    NSSet *_otherInvitedHandles;	// 184 = 0xb8
    NSSet *_activeRemoteParticipantHandles;	// 192 = 0xc0
    CXHandoffContext *_handoffContext;	// 200 = 0xc8
    CXScreenShareAttributes *_screenShareAttributes;	// 208 = 0xd0
    NSDictionary *_context;	// 216 = 0xd8
    unsigned long long _originatingUIType;	// 224 = 0xe0
    long long _junkConfidence;	// 232 = 0xe8
    long long _identificationCategory;	// 240 = 0xf0
    struct CXCallUpdateHasSet _hasSet;	// 248 = 0xf8
    NSUUID *_UUID;	// 256 = 0x100
}

+ (_Bool)supportsSecureCoding;	// IMP=0x0000000000031113
+ (id)callUpdateWithDefaultValuesSet;	// IMP=0x000000000002cde2
- (void).cxx_destruct;	// IMP=0x0000000000032ee3
@property(retain, nonatomic) NSUUID *UUID; // @synthesize UUID=_UUID;
@property(nonatomic) struct CXCallUpdateHasSet hasSet; // @synthesize hasSet=_hasSet;
@property(readonly, nonatomic) struct os_unfair_lock_s accessorLock; // @synthesize accessorLock=_accessorLock;
@property(nonatomic, getter=isSharingScreen) _Bool sharingScreen; // @synthesize sharingScreen=_sharingScreen;
@property(nonatomic, getter=isOneToOneModeEnabled) _Bool oneToOneModeEnabled; // @synthesize oneToOneModeEnabled=_oneToOneModeEnabled;
@property(nonatomic, getter=isConversation) _Bool conversation; // @synthesize conversation=_conversation;
@property(nonatomic, getter=isMutuallyExclusiveCall) _Bool mutuallyExclusiveCall; // @synthesize mutuallyExclusiveCall=_mutuallyExclusiveCall;
@property(nonatomic, getter=isRemoteUplinkMuted) _Bool remoteUplinkMuted; // @synthesize remoteUplinkMuted=_remoteUplinkMuted;
@property(nonatomic, getter=isBlocked) _Bool blocked; // @synthesize blocked=_blocked;
@property(nonatomic, getter=isUsingBaseband) _Bool usingBaseband; // @synthesize usingBaseband=_usingBaseband;
@property(nonatomic, getter=isFailureExpected) _Bool failureExpected; // @synthesize failureExpected=_failureExpected;
@property(nonatomic, getter=isEmergency) _Bool emergency; // @synthesize emergency=_emergency;
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000032186
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000003111b
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000000310b7
- (void)updateCopy:(id)arg1 withZone:(struct _NSZone *)arg2;	// IMP=0x000000000003032b
- (id)sanitizedCopyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000000302cb
- (id)sanitizedCopy;	// IMP=0x00000000000302b7
- (void)updateSanitizedCopy:(id)arg1 withZone:(struct _NSZone *)arg2;	// IMP=0x000000000002ffe1
- (void)updateWithUpdate:(id)arg1;	// IMP=0x000000000002f381
@property(nonatomic) _Bool ignoresBluetoothDeviceUID; // @synthesize ignoresBluetoothDeviceUID=_ignoresBluetoothDeviceUID;
- (_Bool)sharingScreen;	// IMP=0x000000000002f2bf
- (_Bool)oneToOneModeEnabled;	// IMP=0x000000000002f25e
@property(nonatomic) _Bool mediaPlaybackOnExternalDevice; // @synthesize mediaPlaybackOnExternalDevice=_mediaPlaybackOnExternalDevice;
@property(nonatomic) _Bool mixesVoiceWithMedia; // @synthesize mixesVoiceWithMedia=_mixesVoiceWithMedia;
- (_Bool)conversation;	// IMP=0x000000000002f13b
@property(nonatomic) long long identificationCategory; // @synthesize identificationCategory=_identificationCategory;
@property(nonatomic) long long junkConfidence; // @synthesize junkConfidence=_junkConfidence;
@property(nonatomic) unsigned long long originatingUIType; // @synthesize originatingUIType=_originatingUIType;
- (_Bool)mutuallyExclusiveCall;	// IMP=0x000000000002ef9f
@property(nonatomic) _Bool requiresAuthentication; // @synthesize requiresAuthentication=_requiresAuthentication;
@property(nonatomic) _Bool shouldSuppressInCallUI; // @synthesize shouldSuppressInCallUI=_shouldSuppressInCallUI;
- (_Bool)remoteUplinkMuted;	// IMP=0x000000000002ee7c
@property(nonatomic) _Bool supportsTTYWithVoice; // @synthesize supportsTTYWithVoice=_supportsTTYWithVoice;
@property(nonatomic) _Bool prefersExclusiveAccessToCellularNetwork; // @synthesize prefersExclusiveAccessToCellularNetwork=_prefersExclusiveAccessToCellularNetwork;
@property(copy, nonatomic) NSDictionary *context; // @synthesize context=_context;
@property(retain, nonatomic) CXScreenShareAttributes *screenShareAttributes; // @synthesize screenShareAttributes=_screenShareAttributes;
@property(retain, nonatomic) CXHandoffContext *handoffContext; // @synthesize handoffContext=_handoffContext;
@property(copy, nonatomic) NSSet *activeRemoteParticipantHandles; // @synthesize activeRemoteParticipantHandles=_activeRemoteParticipantHandles;
@property(copy, nonatomic) NSSet *otherInvitedHandles; // @synthesize otherInvitedHandles=_otherInvitedHandles;
@property(copy, nonatomic) NSSet *remoteParticipantHandles; // @synthesize remoteParticipantHandles=_remoteParticipantHandles;
@property(retain, nonatomic) NSUUID *participantGroupUUID; // @synthesize participantGroupUUID=_participantGroupUUID;
@property(copy, nonatomic) NSUUID *localSenderIdentityAccountUUID; // @synthesize localSenderIdentityAccountUUID=_localSenderIdentityAccountUUID;
@property(copy, nonatomic) NSUUID *localSenderIdentityUUID; // @synthesize localSenderIdentityUUID=_localSenderIdentityUUID;
@property(copy, nonatomic) NSString *ISOCountryCode; // @synthesize ISOCountryCode=_ISOCountryCode;
@property(copy, nonatomic) NSString *crossDeviceIdentifier; // @synthesize crossDeviceIdentifier=_crossDeviceIdentifier;
@property(nonatomic) long long videoStreamToken; // @synthesize videoStreamToken=_videoStreamToken;
@property(nonatomic) _Bool supportsSendingToVoicemail; // @synthesize supportsSendingToVoicemail=_supportsSendingToVoicemail;
@property(nonatomic) _Bool supportsAddCall; // @synthesize supportsAddCall=_supportsAddCall;
@property(nonatomic) _Bool supportsUnambiguousMultiPartyState; // @synthesize supportsUnambiguousMultiPartyState=_supportsUnambiguousMultiPartyState;
@property(nonatomic) _Bool supportsDTMF; // @synthesize supportsDTMF=_supportsDTMF;
@property(nonatomic) _Bool supportsUngrouping; // @synthesize supportsUngrouping=_supportsUngrouping;
@property(nonatomic) _Bool supportsGrouping; // @synthesize supportsGrouping=_supportsGrouping;
@property(nonatomic) _Bool supportsHolding; // @synthesize supportsHolding=_supportsHolding;
@property(nonatomic) long long inCallSoundRegion; // @synthesize inCallSoundRegion=_inCallSoundRegion;
@property(nonatomic) _Bool requiresInCallSounds; // @synthesize requiresInCallSounds=_requiresInCallSounds;
@property(nonatomic) long long priority; // @synthesize priority=_priority;
@property(nonatomic) long long verificationStatus; // @synthesize verificationStatus=_verificationStatus;
@property(nonatomic) long long audioInterruptionOperationMode; // @synthesize audioInterruptionOperationMode=_audioInterruptionOperationMode;
@property(nonatomic) long long audioInterruptionProvider; // @synthesize audioInterruptionProvider=_audioInterruptionProvider;
@property(copy, nonatomic) NSString *audioMode; // @synthesize audioMode=_audioMode;
@property(copy, nonatomic) NSString *audioCategory; // @synthesize audioCategory=_audioCategory;
@property(nonatomic) _Bool hasVideo; // @synthesize hasVideo=_hasVideo;
@property(nonatomic) _Bool mayRequireBreakBeforeMake; // @synthesize mayRequireBreakBeforeMake=_mayRequireBreakBeforeMake;
@property(nonatomic) long long bluetoothAudioFormat; // @synthesize bluetoothAudioFormat=_bluetoothAudioFormat;
@property(nonatomic, setter=setTTYType:) long long ttyType; // @synthesize ttyType=_ttyType;
- (_Bool)blocked;	// IMP=0x000000000002ddd0
- (_Bool)usingBaseband;	// IMP=0x000000000002dd6f
- (_Bool)failureExpected;	// IMP=0x000000000002dd0e
- (_Bool)emergency;	// IMP=0x000000000002dcad
@property(copy, nonatomic) NSString *localizedCallerName; // @synthesize localizedCallerName=_localizedCallerName;
@property(copy, nonatomic) CXHandle *remoteHandle; // @synthesize remoteHandle=_remoteHandle;
@property(readonly, copy) NSString *description;
- (id)init;	// IMP=0x000000000002cd64

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

