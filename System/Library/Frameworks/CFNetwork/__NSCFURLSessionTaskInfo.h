//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CFNetwork/NSSecureCoding-Protocol.h>

@class AVAssetDownloadConfiguration, AVURLAsset, NSData, NSDate, NSDictionary, NSError, NSString, NSURL, NSURLRequest, NSURLResponse, NSUUID, __CFN_TaskMetrics;
@protocol SZExtractor;

@interface __NSCFURLSessionTaskInfo : NSObject <NSSecureCoding>
{
    _Bool _resumedAndWaitingForEarliestBeginDate;	// 8 = 0x8
    _Bool _respondedToWillBeginDelayedRequestCallback;	// 9 = 0x9
    _Bool _hasStarted;	// 10 = 0xa
    _Bool _expectingResumeCallback;	// 11 = 0xb
    _Bool _establishedConnection;	// 12 = 0xc
    _Bool _disablesRetry;	// 13 = 0xd
    _Bool _shouldCancelOnDisconnect;	// 14 = 0xe
    _Bool _basePrioritySetExplicitly;	// 15 = 0xf
    _Bool _discretionary;	// 16 = 0x10
    _Bool _mayBeDemotedToDiscretionary;	// 17 = 0x11
    _Bool __hasSZExtractor;	// 18 = 0x12
    _Bool __doesSZExtractorConsumeExtractedData;	// 19 = 0x13
    _Bool __updatedStreamingZipModificationDate;	// 20 = 0x14
    _Bool _startedUserInitiated;	// 21 = 0x15
    _Bool _initializedWithAVAsset;	// 22 = 0x16
    _Bool _enableSPIDelegateCallbacks;	// 23 = 0x17
    unsigned short __TLSMinimumSupportedProtocolVersion;	// 24 = 0x18
    unsigned short __TLSMaximumSupportedProtocolVersion;	// 26 = 0x1a
    unsigned int _qos;	// 28 = 0x1c
    unsigned long long _identifier;	// 32 = 0x20
    unsigned long long _taskKind;	// 40 = 0x28
    double _creationTime;	// 48 = 0x30
    long long _state;	// 56 = 0x38
    unsigned long long _suspendCount;	// 64 = 0x40
    NSString *_taskDescription;	// 72 = 0x48
    NSURLRequest *_originalRequest;	// 80 = 0x50
    NSURLRequest *_currentRequest;	// 88 = 0x58
    NSURLResponse *_response;	// 96 = 0x60
    NSDate *_earliestBeginDate;	// 104 = 0x68
    long long _countOfBytesClientExpectsToSend;	// 112 = 0x70
    long long _countOfBytesClientExpectsToReceive;	// 120 = 0x78
    NSError *_error;	// 128 = 0x80
    NSError *_retryError;	// 136 = 0x88
    NSURL *_fileURL;	// 144 = 0x90
    NSURL *_downloadFileURL;	// 152 = 0x98
    NSString *_bundleID;	// 160 = 0xa0
    NSString *_sessionID;	// 168 = 0xa8
    unsigned long long _retryCount;	// 176 = 0xb0
    unsigned long long _lowThroughputTimerRetryCount;	// 184 = 0xb8
    long long _basePriority;	// 192 = 0xc0
    long long _discretionaryOverride;	// 200 = 0xc8
    NSString *_personaUniqueString;	// 208 = 0xd0
    NSUUID *_uniqueIdentifier;	// 216 = 0xd8
    NSString *_storagePartitionIdentifier;	// 224 = 0xe0
    long long _bytesPerSecondLimit;	// 232 = 0xe8
    unsigned long long _expectedProgressTarget;	// 240 = 0xf0
    double _loadingPriority;	// 248 = 0xf8
    NSString *_pathToDownloadTaskFile;	// 256 = 0x100
    double _timeoutIntervalForResource;	// 264 = 0x108
    id <SZExtractor> __extractor;	// 272 = 0x110
    unsigned long long _AVAssetDownloadToken;	// 280 = 0x118
    NSURL *_URL;	// 288 = 0x120
    NSURL *_destinationURL;	// 296 = 0x128
    NSString *_assetTitle;	// 304 = 0x130
    NSData *_assetArtworkData;	// 312 = 0x138
    NSDictionary *_options;	// 320 = 0x140
    AVURLAsset *_AVURLAsset;	// 328 = 0x148
    NSURL *_AVAssetURL;	// 336 = 0x150
    NSURL *_temporaryDestinationURL;	// 344 = 0x158
    NSDictionary *_resolvedMediaSelectionPlist;	// 352 = 0x160
    AVAssetDownloadConfiguration *_downloadConfig;	// 360 = 0x168
    NSString *_avAssetDownloadChildDownloadSessionIdentifier;	// 368 = 0x170
    long long _countOfBytesReceived;	// 376 = 0x178
    long long _countOfBytesSent;	// 384 = 0x180
    long long _countOfBytesExpectedToSend;	// 392 = 0x188
    long long _countOfBytesExpectedToReceive;	// 400 = 0x190
    NSDictionary *__backgroundTrailers;	// 408 = 0x198
    NSDictionary *_additionalProperties;	// 416 = 0x1a0
    __CFN_TaskMetrics *_taskMetrics;	// 424 = 0x1a8
}

+ (_Bool)supportsSecureCoding;	// IMP=0x00000000001be919
- (void).cxx_destruct;	// IMP=0x00000000001bdfd4
@property(retain) __CFN_TaskMetrics *taskMetrics; // @synthesize taskMetrics=_taskMetrics;
@property(copy) NSDictionary *additionalProperties; // @synthesize additionalProperties=_additionalProperties;
@property(retain) NSDictionary *_backgroundTrailers; // @synthesize _backgroundTrailers=__backgroundTrailers;
@property long long countOfBytesExpectedToReceive; // @synthesize countOfBytesExpectedToReceive=_countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend; // @synthesize countOfBytesExpectedToSend=_countOfBytesExpectedToSend;
@property long long countOfBytesSent; // @synthesize countOfBytesSent=_countOfBytesSent;
@property long long countOfBytesReceived; // @synthesize countOfBytesReceived=_countOfBytesReceived;
@property(copy) NSString *avAssetDownloadChildDownloadSessionIdentifier; // @synthesize avAssetDownloadChildDownloadSessionIdentifier=_avAssetDownloadChildDownloadSessionIdentifier;
@property(retain) AVAssetDownloadConfiguration *downloadConfig; // @synthesize downloadConfig=_downloadConfig;
@property _Bool enableSPIDelegateCallbacks; // @synthesize enableSPIDelegateCallbacks=_enableSPIDelegateCallbacks;
@property(copy) NSDictionary *resolvedMediaSelectionPlist; // @synthesize resolvedMediaSelectionPlist=_resolvedMediaSelectionPlist;
@property(copy) NSURL *temporaryDestinationURL; // @synthesize temporaryDestinationURL=_temporaryDestinationURL;
@property _Bool initializedWithAVAsset; // @synthesize initializedWithAVAsset=_initializedWithAVAsset;
@property(copy) NSURL *AVAssetURL; // @synthesize AVAssetURL=_AVAssetURL;
@property(retain) AVURLAsset *AVURLAsset; // @synthesize AVURLAsset=_AVURLAsset;
@property(copy) NSDictionary *options; // @synthesize options=_options;
@property(copy) NSData *assetArtworkData; // @synthesize assetArtworkData=_assetArtworkData;
@property(copy) NSString *assetTitle; // @synthesize assetTitle=_assetTitle;
@property(copy) NSURL *destinationURL; // @synthesize destinationURL=_destinationURL;
@property(copy) NSURL *URL; // @synthesize URL=_URL;
@property unsigned long long AVAssetDownloadToken; // @synthesize AVAssetDownloadToken=_AVAssetDownloadToken;
@property _Bool startedUserInitiated; // @synthesize startedUserInitiated=_startedUserInitiated;
@property(nonatomic) _Bool _updatedStreamingZipModificationDate; // @synthesize _updatedStreamingZipModificationDate=__updatedStreamingZipModificationDate;
@property(nonatomic) _Bool _doesSZExtractorConsumeExtractedData; // @synthesize _doesSZExtractorConsumeExtractedData=__doesSZExtractorConsumeExtractedData;
@property(nonatomic) _Bool _hasSZExtractor; // @synthesize _hasSZExtractor=__hasSZExtractor;
@property(retain, nonatomic) id <SZExtractor> _extractor; // @synthesize _extractor=__extractor;
@property unsigned short _TLSMaximumSupportedProtocolVersion; // @synthesize _TLSMaximumSupportedProtocolVersion=__TLSMaximumSupportedProtocolVersion;
@property unsigned short _TLSMinimumSupportedProtocolVersion; // @synthesize _TLSMinimumSupportedProtocolVersion=__TLSMinimumSupportedProtocolVersion;
@property double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property(copy) NSString *pathToDownloadTaskFile; // @synthesize pathToDownloadTaskFile=_pathToDownloadTaskFile;
@property _Bool mayBeDemotedToDiscretionary; // @synthesize mayBeDemotedToDiscretionary=_mayBeDemotedToDiscretionary;
@property double loadingPriority; // @synthesize loadingPriority=_loadingPriority;
@property unsigned long long expectedProgressTarget; // @synthesize expectedProgressTarget=_expectedProgressTarget;
@property long long bytesPerSecondLimit; // @synthesize bytesPerSecondLimit=_bytesPerSecondLimit;
@property(copy) NSString *storagePartitionIdentifier; // @synthesize storagePartitionIdentifier=_storagePartitionIdentifier;
@property(copy) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(copy) NSString *personaUniqueString; // @synthesize personaUniqueString=_personaUniqueString;
@property unsigned int qos; // @synthesize qos=_qos;
@property long long discretionaryOverride; // @synthesize discretionaryOverride=_discretionaryOverride;
@property(getter=isDiscretionary) _Bool discretionary; // @synthesize discretionary=_discretionary;
@property _Bool basePrioritySetExplicitly; // @synthesize basePrioritySetExplicitly=_basePrioritySetExplicitly;
@property long long basePriority; // @synthesize basePriority=_basePriority;
@property _Bool shouldCancelOnDisconnect; // @synthesize shouldCancelOnDisconnect=_shouldCancelOnDisconnect;
@property _Bool disablesRetry; // @synthesize disablesRetry=_disablesRetry;
@property unsigned long long lowThroughputTimerRetryCount; // @synthesize lowThroughputTimerRetryCount=_lowThroughputTimerRetryCount;
@property unsigned long long retryCount; // @synthesize retryCount=_retryCount;
@property _Bool establishedConnection; // @synthesize establishedConnection=_establishedConnection;
@property _Bool expectingResumeCallback; // @synthesize expectingResumeCallback=_expectingResumeCallback;
@property _Bool hasStarted; // @synthesize hasStarted=_hasStarted;
@property(copy) NSString *sessionID; // @synthesize sessionID=_sessionID;
@property(copy) NSString *bundleID; // @synthesize bundleID=_bundleID;
@property(copy) NSURL *downloadFileURL; // @synthesize downloadFileURL=_downloadFileURL;
@property(copy) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property(copy) NSError *retryError; // @synthesize retryError=_retryError;
@property(copy) NSError *error; // @synthesize error=_error;
@property _Bool respondedToWillBeginDelayedRequestCallback; // @synthesize respondedToWillBeginDelayedRequestCallback=_respondedToWillBeginDelayedRequestCallback;
@property _Bool resumedAndWaitingForEarliestBeginDate; // @synthesize resumedAndWaitingForEarliestBeginDate=_resumedAndWaitingForEarliestBeginDate;
@property long long countOfBytesClientExpectsToReceive; // @synthesize countOfBytesClientExpectsToReceive=_countOfBytesClientExpectsToReceive;
@property long long countOfBytesClientExpectsToSend; // @synthesize countOfBytesClientExpectsToSend=_countOfBytesClientExpectsToSend;
@property(copy) NSDate *earliestBeginDate; // @synthesize earliestBeginDate=_earliestBeginDate;
@property(copy) NSURLResponse *response; // @synthesize response=_response;
@property(copy) NSURLRequest *currentRequest; // @synthesize currentRequest=_currentRequest;
@property(copy) NSURLRequest *originalRequest; // @synthesize originalRequest=_originalRequest;
@property(copy) NSString *taskDescription; // @synthesize taskDescription=_taskDescription;
@property unsigned long long suspendCount; // @synthesize suspendCount=_suspendCount;
@property long long state; // @synthesize state=_state;
@property double creationTime; // @synthesize creationTime=_creationTime;
@property unsigned long long taskKind; // @synthesize taskKind=_taskKind;
@property unsigned long long identifier; // @synthesize identifier=_identifier;
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000001bc637
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000001bb77a
- (id)initWithAVAggregateAssetDownloadChildDownloadSessionIdentifier:(id)arg1 assetTitle:(id)arg2 assetArtworkData:(id)arg3 options:(id)arg4 taskIdentifier:(unsigned long long)arg5 uniqueIdentifier:(id)arg6 bundleID:(id)arg7 sessionID:(id)arg8;	// IMP=0x00000000001bb5d6
- (id)initWithAVAggregateDownloadTaskNoChildTaskKindWithURL:(id)arg1 destinationURL:(id)arg2 assetTitle:(id)arg3 assetArtworkData:(id)arg4 options:(id)arg5 taskIdentifier:(unsigned long long)arg6 uniqueIdentifier:(id)arg7 bundleID:(id)arg8 sessionID:(id)arg9 enableSPIDelegateCallbacks:(_Bool)arg10;	// IMP=0x00000000001bb3fc
- (id)initWithAVAssetDownloadURL:(id)arg1 destinationURL:(id)arg2 assetTitle:(id)arg3 assetArtworkData:(id)arg4 options:(id)arg5 taskIdentifier:(unsigned long long)arg6 uniqueIdentifier:(id)arg7 bundleID:(id)arg8 sessionID:(id)arg9 downloadConfig:(id)arg10;	// IMP=0x00000000001bb208
- (id)initWithDownloadTask:(id)arg1 uniqueIdentifier:(id)arg2 bundleID:(id)arg3 sessionID:(id)arg4;	// IMP=0x00000000001bb11d
- (id)initWithUploadTask:(id)arg1 uniqueIdentifier:(id)arg2 bundleID:(id)arg3 sessionID:(id)arg4;	// IMP=0x00000000001bb02f
- (id)initWithDataTask:(id)arg1 uniqueIdentifier:(id)arg2 bundleID:(id)arg3 sessionID:(id)arg4;	// IMP=0x00000000001baf41
- (void)_logTaskUUIDMapping;	// IMP=0x00000000001badd5
- (id)_loggableDescription;	// IMP=0x00000000001bad40

@end

