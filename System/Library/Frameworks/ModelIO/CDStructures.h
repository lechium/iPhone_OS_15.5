//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MISSING_TYPE;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BSDFMaterialValues {
    struct CGColor *_field1;
    float _field2;
    struct CGColor *_field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
};

struct BidirectionalScatteringDistributionFunction {
    CDUnknownFunctionPointerType *_field1;
    struct BSDFMaterialValues _field2;
};

struct CGColor;

struct Detail;

struct MDLAABB {
    MISSING_TYPE *maxBounds__minBounds;
};

struct MDLAffineTransform {
    struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> _keyedTranslation;
    struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> _keyedRotation;
    struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> _keyedShear;
    struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> _keyedScale;
    double _startTime;
    double _greatestTime;
    _Bool _identity;
    _Bool _resetTransformStack;
    double _evaluationTime;
    struct float4x4 _transform;
    struct float4x4 _invTransform;
    struct float4x4 _jacobiRotation;
    struct float4x4 _invJacobiRotation;
};

struct MDLTextureData {
    char *topLeftBytesForMip[16];
    char *bottomLeftBytesForMip[16];
    int channelCount;
    unsigned long long dimensions__rowStride;
    _Bool isCube;
};

struct MortonCode {
    struct vector<unsigned long long, std::allocator<unsigned long long>> mortonkeyX;
    struct vector<unsigned long long, std::allocator<unsigned long long>> mortonkeyY;
    struct vector<unsigned long long, std::allocator<unsigned long long>> mortonkeyZ;
};

struct Octree;

struct PhysicallyPlausibleDistribution {
    CDUnknownFunctionPointerType *_field1;
    struct BSDFMaterialValues _field2;
};

struct RTCamera {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    float _field4;
    float _field5;
    int _field6;
    float *_field7;
    id **_field8;
    CDStruct_14d5dc5e _field9;
    CDStruct_14d5dc5e _field10;
    struct RTRaySegment *_field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
};

struct RTGeometry;

struct RTIntersectionResult {
    float _field1;
    struct RTGeometry *_field2;
    id _field3;
};

struct RTLight {
    CDUnknownFunctionPointerType *_field1;
    struct CGColor *_field2;
    id _field3;
    int _field4;
};

struct RTRaySegment;

struct RTRenderable;

struct SCNOctree;

struct SkyDescriptor {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    float _field18;
    struct Detail *_field19;
    unsigned int _field20;
    unsigned int _field21;
    float _field22;
    float _field23;
    float _field24;
    float _field25;
    void *_field26;
};

struct TfPointerAndBits<const VtValue::_TypeInfo> {
    struct _TypeInfo *_ptrAndBits;
};

struct TimeSampledVtValue;

struct VtValue {
    struct type _storage;
    struct TfPointerAndBits<const VtValue::_TypeInfo> _info;
};

struct _TypeInfo;

struct __IOSurface;

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct float4x4 {
    MISSING_TYPE *columns[4];
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } _field1;
};

struct type {
    unsigned char __lx[8];
};

struct unique_ptr<ModelIO::BidirectionalScatteringDistributionFunction, std::default_delete<ModelIO::BidirectionalScatteringDistributionFunction>> {
    struct __compressed_pair<ModelIO::BidirectionalScatteringDistributionFunction *, std::default_delete<ModelIO::BidirectionalScatteringDistributionFunction>> {
        struct BidirectionalScatteringDistributionFunction *__value_;
    } __ptr_;
};

struct unique_ptr<ModelIO::Octree, std::default_delete<ModelIO::Octree>> {
    struct __compressed_pair<ModelIO::Octree *, std::default_delete<ModelIO::Octree>> {
        struct Octree *__value_;
    } __ptr_;
};

struct unique_ptr<ModelIO::SCNOctree, std::default_delete<ModelIO::SCNOctree>> {
    struct __compressed_pair<ModelIO::SCNOctree *, std::default_delete<ModelIO::SCNOctree>> {
        struct SCNOctree *__value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<unsigned long long, int, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, int>>> {
    struct __hash_table<std::__hash_value_type<unsigned long long, int>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, int>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, int>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, int>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<(anonymous namespace)::TimeSampledVtValue, std::allocator<(anonymous namespace)::TimeSampledVtValue>> {
    struct TimeSampledVtValue *__begin_;
    struct TimeSampledVtValue *__end_;
    struct __compressed_pair<(anonymous namespace)::TimeSampledVtValue *, std::allocator<(anonymous namespace)::TimeSampledVtValue>> {
        struct TimeSampledVtValue *__value_;
    } __end_cap_;
};

struct vector<MDLLight *, std::allocator<MDLLight *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<MDLLight *__strong *, std::allocator<MDLLight *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<ModelIO::RTRenderable *, std::allocator<ModelIO::RTRenderable *>> {
    struct RTRenderable **__begin_;
    struct RTRenderable **__end_;
    struct __compressed_pair<ModelIO::RTRenderable **, std::allocator<ModelIO::RTRenderable *>> {
        struct RTRenderable **__value_;
    } __end_cap_;
};

struct vector<__IOSurface *, std::allocator<__IOSurface *>> {
    struct __IOSurface **__begin_;
    struct __IOSurface **__end_;
    struct __compressed_pair<__IOSurface **, std::allocator<__IOSurface *>> {
        struct __IOSurface **__value_;
    } __end_cap_;
};

struct vector<bool, std::allocator<bool>> {
    unsigned long long *__begin_;
    unsigned long long __size_;
    struct __compressed_pair<unsigned long, std::allocator<unsigned long>> {
        unsigned long long __value_;
    } __cap_alloc_;
};

struct vector<int, std::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<long, std::allocator<long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long *, std::allocator<long>> {
        long long *__value_;
    } __end_cap_;
};

struct vector<std::pair<double, float __attribute__((ext_vector_type(3)))>, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<double, float __attribute__((ext_vector_type(3)))>*, std::allocator<std::pair<double, float __attribute__((ext_vector_type(3)))>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned long long, std::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    MISSING_TYPE *columns[4];
} CDStruct_14d5dc5e;

// Template types
typedef struct vector<int, std::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::allocator<int>> {
        int *_field1;
    } _field3;
} vector_1d76f7fb;

