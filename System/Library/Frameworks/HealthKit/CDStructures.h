//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CC_SHA256state_st {
    unsigned int count[2];
    unsigned int hash[8];
    unsigned int wbuf[16];
};

struct Electrocardiogram {
    CDUnknownFunctionPointerType *_vptr$Base;
    double _frequency;
    struct PtrVector<binarysample::ElectrocardiogramLead> _leads;
    struct {
        unsigned int frequency:1;
    } _has;
};

struct HKObjectValidationConfiguration {
    unsigned long long _field1;
    unsigned int _field2;
};

struct PtrVector<binarysample::ElectrocardiogramLead> {
    struct vector<std::unique_ptr<binarysample::ElectrocardiogramLead>, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> _v;
};

struct _HKLazyLoader<bool> {
    _Bool _value;
    _Bool _hasLoaded;
    struct os_unfair_lock_s _loadLock;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __wrap_iter<const float *> {
    float *__i;
};

struct _xmlHashTable;

struct _xsltDocument;

struct _xsltStylesheet {
    struct _xsltStylesheet *_field1;
    struct _xsltStylesheet *_field2;
    struct _xsltStylesheet *_field3;
    struct _xsltDocument *_field4;
    struct _xmlDoc *_field5;
    struct _xmlHashTable *_field6;
    int _field7;
    struct _xmlHashTable *_field8;
    struct _xsltStackElem *_field9;
    struct _xsltTemplate *_field10;
    void *_field11;
    void *_field12;
    void *_field13;
    void *_field14;
    void *_field15;
    void *_field16;
    void *_field17;
    void *_field18;
    void *_field19;
    struct _xmlHashTable *_field20;
    struct _xmlHashTable *_field21;
    struct _xmlHashTable *_field22;
    void *_field23;
    void *_field24;
    char *_field25;
    char *_field26;
    char *_field27;
    char *_field28;
    int _field29;
    struct _xsltDecimalFormat *_field30;
    int _field31;
    char *_field32;
    char *_field33;
    int _field34;
    char *_field35;
    struct _xsltElemPreComp *_field36;
    int _field37;
    int _field38;
    char *_field39;
    char **_field40;
    int _field41;
    int _field42;
    void *_field43;
    struct _xmlHashTable *_field44;
    int _field45;
    struct _xsltDocument *_field46;
    struct _xmlDict *_field47;
    void *_field48;
    char *_field49;
    int _field50;
    int _field51;
    int _field52;
    struct _xsltStylesheet *_field53;
    int _field54;
    struct _xmlHashTable *_field55;
};

struct atomic_flag {
    _Atomic _Bool _Value;
};

struct map<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead, std::less<binarysample::ElectrocardiogramLead_Name>, std::allocator<std::pair<const binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>>> {
    struct __tree<std::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::less<binarysample::ElectrocardiogramLead_Name>, true>, std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> {
                void *__left_;
            } __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<binarysample::ElectrocardiogramLead_Name, std::__value_type<binarysample::ElectrocardiogramLead_Name, binarysample::ElectrocardiogramLead>, std::less<binarysample::ElectrocardiogramLead_Name>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct unique_ptr<HKIntervalTree<double>, std::default_delete<HKIntervalTree<double>>> {
    struct __compressed_pair<HKIntervalTree<double>*, std::default_delete<HKIntervalTree<double>>> {
        void *__value_;
    } __ptr_;
};

struct vector<std::unique_ptr<binarysample::ElectrocardiogramLead>, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::unique_ptr<binarysample::ElectrocardiogramLead>*, std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>> {
        void *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    short _field5;
    char _field6;
    unsigned char _field7;
} CDStruct_0970132e;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned int val[8];
} CDStruct_4c969caf;

typedef struct {
    char *_field1;
    _Bool _field2;
    char *_field3;
    double _field4;
    double _field5;
    _Bool _field6;
} CDStruct_bafa805a;

typedef struct {
    char *_field1;
    unsigned long long _field2;
    char *_field3;
    unsigned long long _field4;
    void *_field5;
} CDStruct_57889bad;

typedef struct {
    char *_field1;
    char *_field2;
    char *_field3;
    char *_field4;
    _Bool _field5;
    _Bool _field6;
} CDStruct_b04166ad;

typedef struct {
    long long majorVersion;
    long long minorVersion;
    long long patchVersion;
} CDStruct_f6aba300;

typedef struct {
    long long start;
    long long duration;
} CDStruct_ef5fcbe6;

// Template types
typedef struct __wrap_iter<const float *> {
    float *__i;
} __wrap_iter_9551a0eb;

