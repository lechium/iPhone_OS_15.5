//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@interface NSDecimalNumber
{
    unsigned int _exponent:8;	// 8 = 0x8
    unsigned int _length:4;	// 9 = 0x9
    unsigned int _isNegative:1;	// 9 = 0x9
    unsigned int _isCompact:1;	// 9 = 0x9
    unsigned int _reserved:1;	// 9 = 0x9
    unsigned int _hasExternalRefCount:1;	// 9 = 0x9
    unsigned int _refs:16;	// 10 = 0xa
    unsigned short _mantissa[0];	// 12 = 0xc
}

+ (id)defaultBehavior;	// IMP=0x000000000004cae8
+ (void)setDefaultBehavior:(id)arg1;	// IMP=0x000000000004ca9e
+ (id)notANumber;	// IMP=0x000000000004c02f
+ (id)one;	// IMP=0x000000000004c022
+ (id)zero;	// IMP=0x000000000004c015
+ (id)maximumDecimalNumber;	// IMP=0x000000000004c008
+ (id)minimumDecimalNumber;	// IMP=0x000000000004bffb
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000004bf6b
+ (id)decimalNumberWithString:(id)arg1 locale:(id)arg2;	// IMP=0x000000000004be62
+ (id)decimalNumberWithString:(id)arg1;	// IMP=0x000000000004be41
+ (id)decimalNumberWithDecimal:(CDStruct_5fe7aead)arg1;	// IMP=0x000000000004be09
+ (id)decimalNumberWithMantissa:(unsigned long long)arg1 exponent:(short)arg2 isNegative:(_Bool)arg3;	// IMP=0x000000000004bde8
+ (id)allocWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000004bcf6
+ (void)initialize;	// IMP=0x000000000004bcd8
+ (id)numberWithBool:(_Bool)arg1;	// IMP=0x000000000004e322
+ (id)numberWithDouble:(double)arg1;	// IMP=0x000000000004e2e7
+ (id)numberWithFloat:(float)arg1;	// IMP=0x000000000004e2ac
+ (id)numberWithUnsignedLongLong:(unsigned long long)arg1;	// IMP=0x000000000004e276
+ (id)numberWithLongLong:(long long)arg1;	// IMP=0x000000000004e240
+ (id)numberWithUnsignedLong:(unsigned long long)arg1;	// IMP=0x000000000004e20a
+ (id)numberWithLong:(long long)arg1;	// IMP=0x000000000004e1d4
+ (id)numberWithUnsignedInteger:(unsigned long long)arg1;	// IMP=0x000000000004e19e
+ (id)numberWithUnsignedInt:(unsigned int)arg1;	// IMP=0x000000000004e16a
+ (id)numberWithInteger:(long long)arg1;	// IMP=0x000000000004e134
+ (id)numberWithInt:(int)arg1;	// IMP=0x000000000004e100
+ (id)numberWithUnsignedShort:(unsigned short)arg1;	// IMP=0x000000000004e0cc
+ (id)numberWithShort:(short)arg1;	// IMP=0x000000000004e098
+ (id)numberWithUnsignedChar:(unsigned char)arg1;	// IMP=0x000000000004e064
+ (id)numberWithChar:(BOOL)arg1;	// IMP=0x000000000004e030
- (_Bool)_getCString:(char *)arg1 length:(int)arg2 multiplier:(double)arg3;	// IMP=0x000000000004d0f8
- (_Bool)boolValue;	// IMP=0x000000000004d0d4
- (float)floatValue;	// IMP=0x000000000004d0bd
- (unsigned long long)unsignedLongLongValue;	// IMP=0x000000000004d01e
- (long long)longLongValue;	// IMP=0x000000000004cf75
- (unsigned long long)unsignedLongValue;	// IMP=0x000000000004ced6
- (long long)longValue;	// IMP=0x000000000004ce2d
- (unsigned int)unsignedIntValue;	// IMP=0x000000000004ce15
- (int)intValue;	// IMP=0x000000000004cdfe
- (unsigned short)unsignedShortValue;	// IMP=0x000000000004cde4
- (short)shortValue;	// IMP=0x000000000004cdcc
- (unsigned char)unsignedCharValue;	// IMP=0x000000000004cdb2
- (BOOL)charValue;	// IMP=0x000000000004cd98
- (_Bool)_allowsDirectEncoding;	// IMP=0x000000000004cd90
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000004cb5b
- (Class)classForCoder;	// IMP=0x000000000004cb4a
- (id)decimalNumberByRoundingAccordingToBehavior:(id)arg1;	// IMP=0x000000000004c99a
- (id)decimalNumberByMultiplyingByPowerOf10:(short)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c8cf
- (id)decimalNumberByMultiplyingByPowerOf10:(short)arg1;	// IMP=0x000000000004c880
- (id)decimalNumberByRaisingToPower:(unsigned long long)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c7b3
- (id)decimalNumberByRaisingToPower:(unsigned long long)arg1;	// IMP=0x000000000004c764
- (id)decimalNumberByDividingBy:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c694
- (id)decimalNumberByDividingBy:(id)arg1;	// IMP=0x000000000004c645
- (id)decimalNumberByMultiplyingBy:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c575
- (id)decimalNumberByMultiplyingBy:(id)arg1;	// IMP=0x000000000004c526
- (id)decimalNumberBySubtracting:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c456
- (id)decimalNumberBySubtracting:(id)arg1;	// IMP=0x000000000004c407
- (id)decimalNumberBySubstracting:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c3f5
- (id)decimalNumberBySubstracting:(id)arg1;	// IMP=0x000000000004c3ae
- (id)decimalNumberByAdding:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004c238
- (id)decimalNumberByAdding:(id)arg1;	// IMP=0x000000000004c1e9
- (void)getValue:(void *)arg1;	// IMP=0x000000000004c1c8
@property(readonly) double doubleValue;
@property(readonly) const char *objCType;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000004c0c0
- (long long)compare:(id)arg1;	// IMP=0x000000000004c03c
@property(readonly) CDStruct_5fe7aead decimalValue;
- (id)descriptionWithLocale:(id)arg1;	// IMP=0x000000000004bfc1
- (id)description;	// IMP=0x000000000004bfad
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000004bf73
- (id)initWithString:(id)arg1 locale:(id)arg2;	// IMP=0x000000000004bf31
- (id)initWithString:(id)arg1;	// IMP=0x000000000004bef7
- (id)initWithDecimal:(CDStruct_5fe7aead)arg1;	// IMP=0x000000000004bebd
- (id)initWithMantissa:(unsigned long long)arg1 exponent:(short)arg2 isNegative:(_Bool)arg3;	// IMP=0x000000000004be83
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000004bd3c
- (id)copy;	// IMP=0x000000000004bd31

@end

