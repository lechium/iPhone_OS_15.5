//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MPSGraph, NSArray, NSDictionary, NSFileManager, NSString;

@interface MPSGraphExecutable : NSObject
{
    MPSGraph *_graph;	// 8 = 0x8
    struct shared_ptr<mlir::MLIRContext> _executableContext;	// 16 = 0x10
    void *_builder;	// 32 = 0x20
    struct OwningModuleRef _originalModule;	// 40 = 0x28
    void *_symbolTable;	// 48 = 0x30
    unsigned long long _compilerOptions;	// 56 = 0x38
    unsigned long long _aneCompilerSpatialSplitting;	// 64 = 0x40
    struct unordered_map<std::string, std::unique_ptr<GPURuntime>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unique_ptr<GPURuntime>>>> _runtimeCache;	// 72 = 0x48
    struct unordered_map<std::string, std::unique_ptr<BaseRuntime>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::unique_ptr<BaseRuntime>>>> _newRuntimeCache;	// 112 = 0x70
    struct unordered_map<std::string, mlir::OwningModuleRef, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, mlir::OwningModuleRef>>> _optimizedModuleCache;	// 152 = 0x98
    struct unordered_map<std::string, mlir::OwningModuleRef, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, mlir::OwningModuleRef>>> _optimizedNoDeviceModuleCache;	// 192 = 0xc0
    struct _opaque_pthread_mutex_t _executableMutex;	// 232 = 0xe8
    NSArray *_targetTensorArray;	// 296 = 0x128
    NSArray *_targetOperations;	// 304 = 0x130
    NSArray *_feedTensorArray;	// 312 = 0x138
    NSDictionary *_feeds;	// 320 = 0x140
    unsigned long long _modelUID;	// 328 = 0x148
    unsigned long long _compilationID;	// 336 = 0x150
    unsigned long long _evDumpModuleFlag;	// 344 = 0x158
    unsigned long long _sharedEventSignalValue;	// 352 = 0x160
    NSString *_evDumpModulePath;	// 360 = 0x168
    NSString *_modelFileArchivePath;	// 368 = 0x170
    NSFileManager *_fileManager;	// 376 = 0x178
    _Bool _useScratchPadContext;	// 384 = 0x180
    _Bool _useLegacyRuntime;	// 385 = 0x181
    _Bool _enableCommitAndContinue;	// 386 = 0x182
    _Bool _forceANERuntimeHack;	// 387 = 0x183
    _Bool _compileANEInMemory;	// 388 = 0x184
    _Bool _enableProfilingOpNames;	// 389 = 0x185
    _Bool _runPlacementPass;	// 390 = 0x186
    _Bool _useCostModel;	// 391 = 0x187
    unsigned long long _optimizationProfile;	// 392 = 0x188
    unsigned long long _options;	// 400 = 0x190
}

- (id).cxx_construct;	// IMP=0x00000000002090f0
- (void).cxx_destruct;	// IMP=0x0000000000209037
@property unsigned long long options; // @synthesize options=_options;
@property(readonly) NSArray *feedTensors; // @synthesize feedTensors=_feedTensorArray;
@property(readonly) NSArray *targetTensors; // @synthesize targetTensors=_targetTensorArray;
- (id)runInternalWithDevice:(id)arg1 commandBuffer:(id)arg2 feeds:(id)arg3 results:(id)arg4 executionDescriptor:(id)arg5 executableExecutionDescriptor:(id)arg6 mpsGraphOwnedCommandBuffer:(_Bool)arg7;	// IMP=0x0000000000207bd5
- (id)runInternalWithDevice:(id)arg1 commandBuffer:(id)arg2 feedsDictionary:(id)arg3 resultsDictionary:(id)arg4 executionDescriptor:(id)arg5 executableExecutionDescriptor:(id)arg6 mpsGraphOwnedCommandBuffer:(_Bool)arg7;	// IMP=0x0000000000206b9f
- (id)allocateTensorDataTargetsForDevice:(id)arg1 inputsArray:(id)arg2;	// IMP=0x0000000000206a9f
- (void *)getNewRuntimeForDevice:(id)arg1 module:(struct ModuleOp)arg2;	// IMP=0x0000000000206682
- (void)encodeInternalWithMPSCommandBuffer:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4 executableExecutionDescriptor:(id)arg5;	// IMP=0x0000000000205acb
- (id)encodeWithMPSCommandBuffer:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x000000000020522f
- (id)encodeToCommandBuffer:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x000000000020520d
- (id)runAsyncWithCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x00000000002051eb
- (id)runAsyncWithMTLCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x0000000000205008
- (id)runWithMTLCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x0000000000204ed7
- (id)runAsyncWithDevice:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x0000000000204db5
- (id)runWithDevice:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3 executionDescriptor:(id)arg4;	// IMP=0x0000000000204c87
- (id)runWithMTLCommandQueue:(id)arg1 inputsArray:(id)arg2 resultsArray:(id)arg3;	// IMP=0x0000000000204c62
- (id)getTensorDataArraysWithDevice:(id)arg1 feedsDictionary:(id)arg2 resultsDictionary:(id)arg3 inputsArray:(id)arg4 resultsArray:(id)arg5 newRuntime:(_Bool)arg6;	// IMP=0x00000000002045e7
- (id)getTargetShapesForDevice:(id)arg1 inputsArray:(id)arg2;	// IMP=0x000000000020444e
- (id)allocateTargetsForDevice:(id)arg1 inputsArray:(id)arg2;	// IMP=0x00000000002041c1
- (void *)getRuntimeForDevice:(id)arg1 module:(struct ModuleOp)arg2;	// IMP=0x0000000000203e00
- (id)getOutputShapes;	// IMP=0x0000000000203c91
- (id)getInputShapes;	// IMP=0x0000000000203aef
- (id)debugDescription;	// IMP=0x000000000020399d
- (id)getIR;	// IMP=0x00000000002038a9
- (void)dump;	// IMP=0x000000000020389b
- (void)dealloc;	// IMP=0x0000000000203784
- (struct OwningModuleRef)optimizationPassesWithDevice:(id)arg1 sourceModule:(void *)arg2 fileToStoreName:(id)arg3;	// IMP=0x0000000000201b22
- (struct ModuleOp)specializeWithDevice:(id)arg1 inputsArray:(id)arg2 compilationDescriptor:(id)arg3;	// IMP=0x00000000002018da
- (void)specializeWithDevice:(id)arg1 inputShapes:(id)arg2 compilationDescriptor:(id)arg3;	// IMP=0x00000000002018c7
- (void)specializeWithDevice:(id)arg1 inputTypes:(id)arg2 compilationDescriptor:(id)arg3;	// IMP=0x00000000002016e7
- (struct ModuleOp)specializedModuleWithDevice:(id)arg1 inputShapes:(id)arg2 compilationDescriptor:(id)arg3;	// IMP=0x00000000002005be
- (void)fileBackModule:(const void *)arg1 withPath:(id)arg2;	// IMP=0x00000000001ffead
- (struct OwningModuleRef)cloneForFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3;	// IMP=0x00000000001fea36
- (id)getOperationsToVisitForOperation:(id)arg1 visitedOperations:(id)arg2;	// IMP=0x00000000001fe5a1
- (void)recurseFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3;	// IMP=0x00000000001fddb0
- (void)recurseOperation:(id)arg1 operationsRecursed:(id)arg2 tensorToValueMap:(void *)arg3;	// IMP=0x00000000001fd576
- (_Bool)isExecutableForFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3 compilationDescriptor:(id)arg4;	// IMP=0x00000000001fd076
- (void)sanitizeExternalModuleWithVariableFetchHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000001fcfab
- (id)initWithMLIRSource:(id)arg1 executableDescriptor:(id)arg2;	// IMP=0x00000000001fcb94
- (id)initWithMLIRSourceFromURL:(id)arg1 executableDescriptor:(id)arg2;	// IMP=0x00000000001fc9ad
- (id)initWithMILProgram:(void *)arg1 executableDescriptor:(id)arg2;	// IMP=0x00000000001fc604
- (id)initializeWithMLIRModule:(struct ModuleOp)arg1 executableDescriptor:(id)arg2;	// IMP=0x00000000001fc398
- (id)initWithMLIRModule:(struct ModuleOp)arg1 executableDescriptor:(id)arg2;	// IMP=0x00000000001fc2e4
- (id)initWithGraph:(id)arg1 feeds:(id)arg2 targetTensors:(id)arg3 targetOperations:(id)arg4 executableDescriptor:(id)arg5;	// IMP=0x00000000001fbac5
- (void)commonPostInit:(void *)arg1;	// IMP=0x00000000001fb660
- (void)commonPreInit;	// IMP=0x00000000001faf7d
- (void)initializeMLIR;	// IMP=0x00000000001fadcc

@end

