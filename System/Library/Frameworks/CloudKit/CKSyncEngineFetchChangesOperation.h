//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <Foundation/NSOperation.h>

@class CKDatabase, CKOperationGroup, CKServerChangeToken, NSError, NSOperationQueue, NSSet;

@interface CKSyncEngineFetchChangesOperation : NSOperation
{
    int _executionState;	// 8 = 0x8
    _Bool _shouldFetchDatabaseChanges;	// 12 = 0xc
    CKDatabase *_database;	// 16 = 0x10
    CKServerChangeToken *_previousDatabaseServerChangeToken;	// 24 = 0x18
    CKOperationGroup *_group;	// 32 = 0x20
    NSSet *_zoneIDs;	// 40 = 0x28
    CDUnknownBlockType _recordZoneWithIDChangedBlock;	// 48 = 0x30
    CDUnknownBlockType _recordZoneWithIDWasDeletedBlock;	// 56 = 0x38
    CDUnknownBlockType _recordZoneWithIDWasPurgedBlock;	// 64 = 0x40
    CDUnknownBlockType _databaseChangeTokenUpdatedBlock;	// 72 = 0x48
    CDUnknownBlockType _fetchDatabaseChangesCompletionBlock;	// 80 = 0x50
    CDUnknownBlockType _recordZoneChangesConfigurationBlock;	// 88 = 0x58
    CDUnknownBlockType _recordWasChangedBlock;	// 96 = 0x60
    CDUnknownBlockType _recordWithIDWasDeletedBlock;	// 104 = 0x68
    CDUnknownBlockType _recordZoneChangeTokensUpdatedBlock;	// 112 = 0x70
    CDUnknownBlockType _recordZoneFetchCompletionBlock;	// 120 = 0x78
    CDUnknownBlockType _willEnqueueOperationBlock;	// 128 = 0x80
    CDUnknownBlockType _fetchChangesCompletionBlock;	// 136 = 0x88
    NSError *_error;	// 144 = 0x90
    NSOperationQueue *_operationQueue;	// 152 = 0x98
}

+ (unsigned long long)maxZonesPerOperation;	// IMP=0x000000000010a1dd
+ (void)setMaxZonesPerOperation:(unsigned long long)arg1;	// IMP=0x000000000010a1d0
- (void).cxx_destruct;	// IMP=0x000000000010a469
@property(retain, nonatomic) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(copy, nonatomic) CDUnknownBlockType fetchChangesCompletionBlock; // @synthesize fetchChangesCompletionBlock=_fetchChangesCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType willEnqueueOperationBlock; // @synthesize willEnqueueOperationBlock=_willEnqueueOperationBlock;
@property(copy, nonatomic) CDUnknownBlockType recordZoneFetchCompletionBlock; // @synthesize recordZoneFetchCompletionBlock=_recordZoneFetchCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType recordZoneChangeTokensUpdatedBlock; // @synthesize recordZoneChangeTokensUpdatedBlock=_recordZoneChangeTokensUpdatedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordWithIDWasDeletedBlock; // @synthesize recordWithIDWasDeletedBlock=_recordWithIDWasDeletedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordWasChangedBlock; // @synthesize recordWasChangedBlock=_recordWasChangedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordZoneChangesConfigurationBlock; // @synthesize recordZoneChangesConfigurationBlock=_recordZoneChangesConfigurationBlock;
@property(copy, nonatomic) CDUnknownBlockType fetchDatabaseChangesCompletionBlock; // @synthesize fetchDatabaseChangesCompletionBlock=_fetchDatabaseChangesCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType databaseChangeTokenUpdatedBlock; // @synthesize databaseChangeTokenUpdatedBlock=_databaseChangeTokenUpdatedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordZoneWithIDWasPurgedBlock; // @synthesize recordZoneWithIDWasPurgedBlock=_recordZoneWithIDWasPurgedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordZoneWithIDWasDeletedBlock; // @synthesize recordZoneWithIDWasDeletedBlock=_recordZoneWithIDWasDeletedBlock;
@property(copy, nonatomic) CDUnknownBlockType recordZoneWithIDChangedBlock; // @synthesize recordZoneWithIDChangedBlock=_recordZoneWithIDChangedBlock;
@property(retain, nonatomic) NSSet *zoneIDs; // @synthesize zoneIDs=_zoneIDs;
@property(nonatomic) _Bool shouldFetchDatabaseChanges; // @synthesize shouldFetchDatabaseChanges=_shouldFetchDatabaseChanges;
@property(retain, nonatomic) CKOperationGroup *group; // @synthesize group=_group;
@property(copy, nonatomic) CKServerChangeToken *previousDatabaseServerChangeToken; // @synthesize previousDatabaseServerChangeToken=_previousDatabaseServerChangeToken;
@property(readonly, nonatomic) CKDatabase *database; // @synthesize database=_database;
- (void)fetchRecordZoneChanges;	// IMP=0x00000000001093ad
- (void)fetchDatabaseChangesThenRecordZoneChanges;	// IMP=0x0000000000108eb6
- (void)start;	// IMP=0x0000000000108d12
- (id)cancelledError;	// IMP=0x0000000000108ceb
- (void)finishWithError:(id)arg1;	// IMP=0x0000000000108b7d
- (void)cancel;	// IMP=0x0000000000108893
- (void)transitionToFinished;	// IMP=0x000000000010887f
- (void)transitionToExecuting;	// IMP=0x000000000010886b
- (_Bool)isExecuting;	// IMP=0x000000000010882b
- (_Bool)isFinished;	// IMP=0x00000000001087eb
- (_Bool)isAsynchronous;	// IMP=0x00000000001087e3
- (id)init;	// IMP=0x0000000000108767
- (id)initWithDatabase:(id)arg1;	// IMP=0x000000000010862f

@end

