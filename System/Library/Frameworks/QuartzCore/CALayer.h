//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <QuartzCore/CAMediaTiming-Protocol.h>
#import <QuartzCore/CAPropertyInfo-Protocol.h>
#import <QuartzCore/NSSecureCoding-Protocol.h>

@class CAMeshTransform, NSArray, NSDictionary, NSString;
@protocol CALayerDelegate;

@interface CALayer : NSObject <CAPropertyInfo, NSSecureCoding, CAMediaTiming>
{
    struct _CALayerIvars _attr;	// 8 = 0x8
}

+ (double)cornerCurveExpansionFactor:(id)arg1;	// IMP=0x000000000019488e
+ (id)defaultActionForKey:(id)arg1;	// IMP=0x0000000000194886
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000019487e
+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;	// IMP=0x000000000019485c
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;	// IMP=0x000000000019483d
+ (_Bool)_hasRenderLayerSubclass;	// IMP=0x0000000000194835
+ (void)initialize;	// IMP=0x00000000001947c8
+ (id)allocWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000019476a
+ (id)layer;	// IMP=0x0000000000194758
+ (_Bool)needsDisplayForKey:(id)arg1;	// IMP=0x0000000000194750
+ (id)defaultValueForKey:(id)arg1;	// IMP=0x00000000001940f0
+ (void)CAMLParserEndElement:(id)arg1;	// IMP=0x00000000001ad64f
+ (void)CAMLParserStartElement:(id)arg1;	// IMP=0x00000000001ad61d
+ (_Bool)resolveInstanceMethod:(SEL)arg1;	// IMP=0x00000000001ad610
+ (CDUnknownFunctionPointerType)CA_getterForProperty:(const struct _CAPropertyInfo *)arg1;	// IMP=0x00000000001ad5f6
+ (CDUnknownFunctionPointerType)CA_setterForProperty:(const struct _CAPropertyInfo *)arg1;	// IMP=0x00000000001ad5df
+ (id)properties;	// IMP=0x00000000001ad5d5
+ (_Bool)needsLayoutForKey:(id)arg1;	// IMP=0x00000000001ad5cd
@property _Bool allowsGroupOpacity;
@property _Bool allowsEdgeAntialiasing;
@property _Bool drawsAsynchronously;
@property _Bool rasterizationPrefersDisplayCompositing;
@property _Bool shouldRasterize;
@property const struct CGPath *shadowPath;
@property double shadowRadius;
@property struct CGSize shadowOffset;
@property struct CGColor *shadowColor;
@property float shadowOpacity;
@property(copy) NSString *contentsSwizzle;
@property struct CGColor *contentsMultiplyColor;
@property double cornerRadius;
@property double borderWidth;
@property struct CGColor *borderColor;
@property(copy) NSDictionary *actions;
@property(copy) NSDictionary *style;
@property(copy) NSString *name;
@property(retain) id compositingFilter;
@property(copy) NSArray *backgroundFilters;
@property(copy) NSArray *filters;
@property _Bool masksToBounds;
@property struct CGColor *backgroundColor;
@property float gain;
@property float minificationFilterBias;
@property(copy) NSString *minificationFilter;
@property(copy) NSString *magnificationFilter;
@property _Bool contentsContainsSubtitles;
@property _Bool cornerContentsMasksEdges;
@property struct CGRect cornerContentsCenter;
@property struct CGRect contentsCenter;
@property struct CGRect contentsRect;
@property struct CATransform3D sublayerTransform;
@property _Bool needsDisplayOnBoundsChange;
@property(getter=isOpaque) _Bool opaque;
@property(getter=isDoubleSided) _Bool doubleSided;
@property(getter=isHidden) _Bool hidden;
@property(retain) id cornerContents;
@property double anchorPointZ;
@property(copy) NSString *fillMode;
@property _Bool autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property float speed;
@property double duration;
@property double timeOffset;
@property double beginTime;
@property _Bool continuousCorners;
- (_Bool)_continuousCorners;	// IMP=0x000000000019e1db
@property(copy) NSString *cornerCurve;
@property unsigned long long maskedCorners;
- (void)layoutSublayers;	// IMP=0x000000000019dfdc
- (void)layoutIfNeeded;	// IMP=0x000000000019dde8
- (struct CGSize)preferredFrameSize;	// IMP=0x000000000019dcf9
- (struct CGSize)_preferredSize;	// IMP=0x000000000019dce7
- (_Bool)needsLayout;	// IMP=0x000000000019dcaa
- (void)setNeedsLayout;	// IMP=0x000000000019daaf
- (void)_validateLayoutHashHasChangedWithLayoutTime:(double)arg1;	// IMP=0x000000000019d82b
- (void)_saveCurrentLayoutHash;	// IMP=0x000000000019d7a9
- (void)_setPreviousLayoutHash:(id)arg1;	// IMP=0x000000000019d793
- (id)_previousLayoutHash;	// IMP=0x000000000019d782
- (id)_layoutHash;	// IMP=0x000000000019d605
- (void)drawInContext:(struct CGContext *)arg1;	// IMP=0x000000000019d4a1
- (void)_contentsFormatDidChange:(id)arg1;	// IMP=0x000000000019d3df
- (struct CGColorSpace *)_retainColorSpace;	// IMP=0x000000000019d393
- (void)_colorSpaceDidChange;	// IMP=0x000000000019d220
- (void)_display;	// IMP=0x000000000019c161
- (void)display;	// IMP=0x000000000019c09e
- (int)_overrideImageFormat;	// IMP=0x000000000019c093
- (void)_renderBorderInContext:(struct CGContext *)arg1;	// IMP=0x000000000019be22
- (void)_renderSublayersInContext:(struct CGContext *)arg1;	// IMP=0x000000000019bba7
- (void)_renderForegroundInContext:(struct CGContext *)arg1;	// IMP=0x000000000019a728
- (void)_renderBackgroundInContext:(struct CGContext *)arg1;	// IMP=0x000000000019a298
- (void)renderInContext:(struct CGContext *)arg1;	// IMP=0x00000000001999c0
- (void)displayIfNeeded;	// IMP=0x0000000000199989
- (_Bool)needsDisplay;	// IMP=0x000000000019994c
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;	// IMP=0x0000000000199790
- (void)setNeedsDisplay;	// IMP=0x000000000019975e
- (id)modelLayer;	// IMP=0x0000000000199730
- (id)presentationLayer;	// IMP=0x0000000000199710
- (void)_cancelAnimationTimer;	// IMP=0x000000000019970a
- (_Bool)_scheduleAnimationTimer;	// IMP=0x0000000000199702
- (id)animationKeys;	// IMP=0x000000000019958e
- (id)animationForKey:(id)arg1;	// IMP=0x0000000000199465
- (void)removeAnimationForKey:(id)arg1;	// IMP=0x00000000001992e2
- (void)removeAllAnimations;	// IMP=0x00000000001991db
- (void)addAnimation:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000198f43
- (id)actionForKey:(id)arg1;	// IMP=0x0000000000198cfe
- (void)replaceSublayer:(id)arg1 with:(id)arg2;	// IMP=0x0000000000198923
- (void)insertSublayer:(id)arg1 above:(id)arg2;	// IMP=0x00000000001987d9
- (void)insertSublayer:(id)arg1 below:(id)arg2;	// IMP=0x000000000019869a
- (void)addSublayer:(id)arg1;	// IMP=0x00000000001985b0
- (void)insertSublayer:(id)arg1 atIndex:(unsigned int)arg2;	// IMP=0x00000000001984c9
- (void)removeFromSuperlayer;	// IMP=0x00000000001984bb
@property id <CALayerDelegate> unsafeUnretainedDelegate;
@property __weak id <CALayerDelegate> delegate;
@property(retain) CALayer *mask;
@property(readonly) CALayer *superlayer;
@property(copy) NSArray *sublayers;
@property float opacity;
@property(copy) NSString *contentsScaling;
@property(copy) NSString *contentsGravity;
@property(readonly) long long contentsGravityEnum;
@property(copy) NSString *contentsFormat;
@property(copy) NSString *securityMode;
@property unsigned int disableUpdateMask;
@property double rasterizationScale;
@property double contentsScale;
@property unsigned int edgeAntialiasingMask;
@property(retain) id contents;
- (_Bool)containsPoint:(struct CGPoint)arg1;	// IMP=0x0000000000197951
- (id)hitTest:(struct CGPoint)arg1;	// IMP=0x0000000000197571
- (double)convertTime:(double)arg1 toLayer:(id)arg2;	// IMP=0x0000000000197503
- (double)convertTime:(double)arg1 fromLayer:(id)arg2;	// IMP=0x0000000000197495
- (struct CGRect)convertRect:(struct CGRect)arg1 toLayer:(id)arg2;	// IMP=0x000000000019737f
- (struct CGRect)convertRect:(struct CGRect)arg1 fromLayer:(id)arg2;	// IMP=0x0000000000197269
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toLayer:(id)arg2;	// IMP=0x0000000000197204
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 fromLayer:(id)arg2;	// IMP=0x000000000019719c
- (_Bool)contentsAreFlipped;	// IMP=0x000000000019718a
@property(getter=isGeometryFlipped) _Bool geometryFlipped;
@property struct CGRect frame;
- (void)setAffineTransform:(struct CGAffineTransform)arg1;	// IMP=0x0000000000196c1d
- (struct CGAffineTransform)affineTransform;	// IMP=0x0000000000196af3
@property struct CATransform3D transform;
@property double zPosition;
@property struct CGPoint position;
@property struct CGPoint anchorPoint;
@property struct CGRect bounds;
- (_Bool)shouldArchiveValueForKey:(id)arg1;	// IMP=0x0000000000195d6a
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000195c11
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000000195aa8
- (void)setObservationInfo:(void *)arg1;	// IMP=0x0000000000195a9e
- (void *)observationInfo;	// IMP=0x0000000000195a94
- (_Bool)CA_validateValue:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000195884
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;	// IMP=0x00000000001955ca
- (id)valueForKeyPath:(id)arg1;	// IMP=0x00000000001955bd
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;	// IMP=0x0000000000195454
- (void)setValue:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000001953d3
- (id)valueForUndefinedKey:(id)arg1;	// IMP=0x00000000001952ef
- (id)CA_archivingValueForKey:(id)arg1;	// IMP=0x0000000000195279
- (id)valueForKey:(id)arg1;	// IMP=0x0000000000195246
- (id)debugDescription;	// IMP=0x0000000000194e04
- (void)dealloc;	// IMP=0x0000000000194d60
- (void)_dealloc;	// IMP=0x0000000000194d4e
- (id)_initWithReference:(id)arg1;	// IMP=0x0000000000194bb6
- (id)initWithLayer:(id)arg1;	// IMP=0x0000000000194a5f
- (id)init;	// IMP=0x0000000000194914
- (_Bool)allowsWeakReference;	// IMP=0x0000000000194907
- (unsigned long long)retainCount;	// IMP=0x00000000001948f4
- (oneway void)release;	// IMP=0x00000000001948ea
- (_Bool)retainWeakReference;	// IMP=0x00000000001948d9
- (id)retain;	// IMP=0x00000000001948c1
- (id)stateTransitionFrom:(id)arg1 to:(id)arg2;	// IMP=0x000000000008433a
- (id)dependentStatesOfState:(id)arg1;	// IMP=0x00000000000842ec
- (id)stateWithName:(id)arg1;	// IMP=0x000000000008417d
- (void)removeState:(id)arg1;	// IMP=0x00000000000840e1
- (void)insertState:(id)arg1 atIndex:(unsigned int)arg2;	// IMP=0x000000000008402f
- (void)addState:(id)arg1;	// IMP=0x0000000000084018
@property(readonly) struct CGRect visibleRect;
- (struct CGRect)_visibleRectOfLayer:(id)arg1;	// IMP=0x0000000000084df3
- (void)scrollRectToVisible:(struct CGRect)arg1;	// IMP=0x0000000000084dde
- (void)_scrollRect:(struct CGRect)arg1 fromLayer:(id)arg2;	// IMP=0x0000000000084dad
- (void)scrollPoint:(struct CGPoint)arg1;	// IMP=0x0000000000084d98
- (void)_scrollPoint:(struct CGPoint)arg1 fromLayer:(id)arg2;	// IMP=0x0000000000084d4b
@property double motionBlurAmount;
- (void)setSeparatedOptions:(id)arg1;	// IMP=0x00000000001ad07a
@property(readonly) NSDictionary *separatedOptions;
@property unsigned char separatedState;
@property _Bool definesDisplayRegionOfInterest;
@property _Bool acceleratesDrawing;
@property struct CGSize backgroundColorPhase;
@property struct CGSize sizeRequisition;
@property _Bool allowsGroupBlending;
@property _Bool toneMapToStandardDynamicRange;
@property _Bool wantsExtendedDynamicRangeContent;
@property _Bool allowsDisplayCompositing;
@property _Bool createsCompositingGroup;
@property _Bool preloadsCache;
@property _Bool inheritsTiming;
@property _Bool contentsOpaque;
@property _Bool contentsDither;
@property _Bool contentsAlignsToPixels;
@property struct CGAffineTransform contentsTransform;
@property _Bool shadowPathIsBounds;
@property _Bool invertsShadow;
@property _Bool flipsHorizontalAxis;
@property _Bool sortsSublayers;
@property _Bool needsLayoutOnGeometryChange;
@property(getter=isFrozen) _Bool frozen;
@property _Bool clearsContext;
@property _Bool canDrawConcurrently;
@property _Bool literalContentsCenter;
@property _Bool hitTestsAsOpaque;
@property _Bool hitTestsContentsAlphaChannel;
@property _Bool allowsHitTesting;
- (void)setFlipped:(_Bool)arg1;	// IMP=0x00000000001ac742
- (_Bool)isFlipped;	// IMP=0x00000000001ac730
- (_Bool)doubleSided;	// IMP=0x00000000001ac71e
- (_Bool)opaque;	// IMP=0x00000000001ac70c
- (_Bool)hidden;	// IMP=0x00000000001ac6fa
@property(getter=isSeparated) _Bool separated;
- (_Bool)CAMLTypeSupportedForKey:(id)arg1;	// IMP=0x00000000001ac603
- (id)CAMLTypeForKey:(id)arg1;	// IMP=0x00000000001ac5c0
- (void)encodeWithCAMLWriter:(id)arg1;	// IMP=0x00000000001ac471
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;	// IMP=0x00000000001ac407
- (id)recursiveDescription;	// IMP=0x00000000001ac3d1
@property(copy) NSArray *presentationModifiers;
- (void)removePresentationModifier:(id)arg1;	// IMP=0x00000000001ac1f8
- (void)addPresentationModifier:(id)arg1;	// IMP=0x00000000001ac111
- (_Bool)_defersDidBecomeVisiblePostCommit;	// IMP=0x00000000001ac109
- (void)layerDidBecomeVisible:(_Bool)arg1;	// IMP=0x00000000001ac103
- (unsigned int)_renderLayerPropertyAnimationFlags:(unsigned int)arg1;	// IMP=0x00000000001ac033
- (_Bool)_renderLayerDefinesProperty:(unsigned int)arg1;	// IMP=0x00000000001ac015
- (void)_didCommitLayer:(void *)arg1;	// IMP=0x00000000001ac00f
- (void *)_copyRenderLayer:(void *)arg1 layerFlags:(unsigned int)arg2 commitFlags:(unsigned int *)arg3;	// IMP=0x00000000001aa0cb
- (id)layerAtTime:(double)arg1;	// IMP=0x00000000001aa09d
- (id)layerBeingDrawn;	// IMP=0x00000000001aa069
- (struct CGSize)size;	// IMP=0x00000000001aa055
- (id)ancestorSharedWithLayer:(id)arg1;	// IMP=0x00000000001a9f9e
- (_Bool)isDescendantOf:(id)arg1;	// IMP=0x00000000001a9f40
- (_Bool)ignoresHitTesting;	// IMP=0x00000000001a9f02
- (void)layoutBelowIfNeeded;	// IMP=0x00000000001a9ee2
- (_Bool)layoutIsActive;	// IMP=0x00000000001a9e83
- (void)_prepareContext:(struct CGContext *)arg1;	// IMP=0x00000000001a9e7d
- (void *)regionBeingDrawn;	// IMP=0x00000000001a9e22
- (unsigned int)_renderImageCopyFlags;	// IMP=0x00000000001a9d20
- (void)setContentsChanged;	// IMP=0x00000000001a9cc5
- (void)invalidateContents;	// IMP=0x00000000001a9ba8
@property(copy) CAMeshTransform *meshTransform;
- (id)context;	// IMP=0x00000000001a9a95
- (void)clearHasBeenCommitted;	// IMP=0x00000000001a9a83
- (_Bool)hasBeenCommitted;	// IMP=0x00000000001a9a70
- (_Bool)drawsMipmapLevels;	// IMP=0x00000000001a9a68
- (_Bool)_canDisplayConcurrently;	// IMP=0x00000000001a9a56
- (id)implicitAnimationForKeyPath:(id)arg1;	// IMP=0x00000000001a990c
- (void)reloadValueForKeyPath:(id)arg1;	// IMP=0x00000000001a989f
- (_Bool)getRendererInfo:(struct _CARenderRendererInfo *)arg1 size:(unsigned long long)arg2;	// IMP=0x00000000001ad549
- (id)optimizationOpportunities:(_Bool)arg1;	// IMP=0x00000000001e7707

// Remaining properties
@property(copy) NSArray *stateTransitions; // @dynamic stateTransitions;
@property(copy) NSArray *states; // @dynamic states;

@end

