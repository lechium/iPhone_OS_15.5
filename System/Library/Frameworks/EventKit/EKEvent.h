//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <EventKit/CalDateRangeProtocol-Protocol.h>
#import <EventKit/EKJunkInvitationProtocol_Private-Protocol.h>

@class EKCalendarDate, EKEventStore, EKParticipant, EKReadWriteLock, EKRecurrenceIdentifier, EKStructuredLocation, EKSuggestedEventInfo, EKVirtualConference, NSArray, NSDate, NSNumber, NSSet, NSString, NSURL;

@interface EKEvent <EKJunkInvitationProtocol_Private, CalDateRangeProtocol>
{
    EKStructuredLocation *_cachedLocationPrediction;	// 8 = 0x8
    NSDate *_cachedLocationPredictionExpirationDate;	// 16 = 0x10
    _Bool _locationPredictionFrozen;	// 24 = 0x18
    _Bool _locationPredictionAllowed;	// 25 = 0x19
    EKReadWriteLock *_locationPredictionLock;	// 32 = 0x20
    _Bool _occurrenceIsAllDay;	// 40 = 0x28
    _Bool _requiresDetachDueToSnoozedAlarm;	// 41 = 0x29
    _Bool _preventConferenceURLDetection;	// 42 = 0x2a
    int _clearModifiedFlags;	// 44 = 0x2c
    NSString *_birthdayPersonUniqueID;	// 48 = 0x30
    EKCalendarDate *_occurrenceStartDate;	// 56 = 0x38
    EKCalendarDate *_occurrenceEndDate;	// 64 = 0x40
    EKCalendarDate *_originalOccurrenceStartDate;	// 72 = 0x48
    EKCalendarDate *_originalOccurrenceEndDate;	// 80 = 0x50
    NSNumber *_originalOccurrenceIsAllDay;	// 88 = 0x58
    NSDate *_proposedEndDate;	// 96 = 0x60
    NSString *_showEventURLString;	// 104 = 0x68
    NSString *_virtualConferenceTextRepresentation;	// 112 = 0x70
}

+ (id)eventFromICSEvent:(id)arg1 inStore:(id)arg2;	// IMP=0x00000000000acf59
+ (_Bool)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)arg1;	// IMP=0x00000000000ac2d7
+ (id)knownPerUserPropertyKeys;	// IMP=0x00000000000a8f84
+ (id)knownRequireRSVPKeys;	// IMP=0x00000000000a8eb3
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;	// IMP=0x00000000000a8789
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)arg1 supportedAvailabilities:(unsigned long long)arg2;	// IMP=0x000000000009cace
+ (_Bool)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(_Bool)arg3 inCalendar:(id)arg4;	// IMP=0x000000000009523a
+ (id)_relatedCachedTimeKeys;	// IMP=0x0000000000094a74
+ (id)_basicChangesRequiringSpanAll;	// IMP=0x0000000000094136
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000092773
+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(_Bool)arg3;	// IMP=0x000000000008de8d
+ (id)_modifiedNotificationUserInfoWithIdentifier:(id)arg1 forRevert:(_Bool)arg2;	// IMP=0x000000000008b10e
+ (id)externalUriScheme;	// IMP=0x000000000008abbc
+ (id)eventWithEventStore:(id)arg1;	// IMP=0x000000000008a310
+ (id)knownSingleValueKeysForComparison;	// IMP=0x000000000008a05b
+ (id)knownKeysToUseForFutureChanges;	// IMP=0x0000000000089f6e
+ (id)knownKeysToSkipForFutureChanges;	// IMP=0x0000000000089e49
+ (id)knownRelationshipMultiValueKeys;	// IMP=0x0000000000089ce1
+ (id)knownRelationshipSingleValueKeys;	// IMP=0x0000000000089b79
+ (Class)frozenClass;	// IMP=0x0000000000089b68
+ (id)_locationStringForLocations:(id)arg1;	// IMP=0x00000000000449fb
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;	// IMP=0x000000000007d580
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;	// IMP=0x000000000007d2f4
- (void).cxx_destruct;	// IMP=0x00000000000ad283
@property(retain, nonatomic) NSString *virtualConferenceTextRepresentation; // @synthesize virtualConferenceTextRepresentation=_virtualConferenceTextRepresentation;
@property(readonly, nonatomic) NSString *showEventURLString; // @synthesize showEventURLString=_showEventURLString;
@property(nonatomic) _Bool preventConferenceURLDetection; // @synthesize preventConferenceURLDetection=_preventConferenceURLDetection;
@property(retain, nonatomic) NSDate *proposedEndDate; // @synthesize proposedEndDate=_proposedEndDate;
@property(nonatomic) int clearModifiedFlags; // @synthesize clearModifiedFlags=_clearModifiedFlags;
@property(nonatomic) _Bool requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property(nonatomic) _Bool occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
@property(readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
- (_Bool)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000ace15
- (_Bool)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000acb1b
- (_Bool)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000ac8ed
- (_Bool)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000ac5aa
- (_Bool)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000ab936
- (_Bool)isAttendeeSameAsOrganizer:(id)arg1;	// IMP=0x00000000000ab88c
- (id)attendeesNotIncludingOrganizer;	// IMP=0x00000000000ab660
- (_Bool)isValidAttendee:(id)arg1 forCalendar:(id)arg2;	// IMP=0x00000000000ab198
- (id)suggestedStartDateForCurrentRecurrenceRule;	// IMP=0x00000000000aad32
- (_Bool)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2;	// IMP=0x00000000000aaa49
- (id)_nsCalendar;	// IMP=0x00000000000aa987
- (_Bool)_hasAbsoluteAlarms;	// IMP=0x00000000000aa80b
- (_Bool)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000aa5a8
- (_Bool)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;	// IMP=0x00000000000aa3d7
- (_Bool)seriesHasOutOfOrderEvents;	// IMP=0x00000000000a9c0a
- (_Bool)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;	// IMP=0x00000000000a98be
- (_Bool)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000a98a5
- (_Bool)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000a9881
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;	// IMP=0x00000000000a9866
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000a984b
- (long long)requirementsToMoveToCalendar:(id)arg1;	// IMP=0x00000000000a97da
- (long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x00000000000a96a4
@property(readonly, nonatomic, getter=isPrivacySet) _Bool privacySet;
- (_Bool)isDifferentFromCommittedEventAndHasUnscheduledAttendees;	// IMP=0x00000000000a9638
- (_Bool)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1;	// IMP=0x00000000000a95a4
- (_Bool)isDifferentFromCommittedEventAndRequiresRSVP;	// IMP=0x00000000000a9551
- (_Bool)isDifferentAndRequiresRSVPWithDiff:(id)arg1;	// IMP=0x00000000000a953d
- (_Bool)isDifferentFromCommittedEventAndRequiresReschedule;	// IMP=0x00000000000a94ea
- (_Bool)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1;	// IMP=0x00000000000a93c9
- (_Bool)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1;	// IMP=0x00000000000a9326
- (_Bool)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1;	// IMP=0x00000000000a92a7
- (_Bool)isDifferentAndModifiedAttendeesWithDiff:(id)arg1;	// IMP=0x00000000000a91e2
- (_Bool)isDifferentAndRequiresRescheduleWithDiff:(id)arg1;	// IMP=0x00000000000a91cb
- (_Bool)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(_Bool)arg2;	// IMP=0x00000000000a9044
- (_Bool)isDifferentWithDiff:(id)arg1;	// IMP=0x00000000000a8e98
- (_Bool)isEqual:(id)arg1 comparingKeys:(id)arg2;	// IMP=0x00000000000a8e80
- (id)diffFromCommitted;	// IMP=0x00000000000a8e03
- (void)declineProposedTimeNotificationFromAttendee:(id)arg1;	// IMP=0x00000000000a8def
- (void)acceptProposedTimeNotificationFromAttendee:(id)arg1;	// IMP=0x00000000000a8dd8
- (void)_respondToProposedTimeFromAttendee:(id)arg1 shouldAccept:(_Bool)arg2;	// IMP=0x00000000000a8c69
- (void)dismissAttendeeRepliedNotification;	// IMP=0x00000000000a8a99
- (void)_clearAttendeeChangedFlags;	// IMP=0x00000000000a8a49
- (void)dismissAcceptedProposeNewTimeNotification;	// IMP=0x00000000000a89f8
@property(readonly, nonatomic) NSURL *launchURL;
- (_Bool)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000a848a
- (id)scanForConflicts;	// IMP=0x00000000000a7876
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)arg1;	// IMP=0x00000000000a7591
- (_Bool)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;	// IMP=0x00000000000a7310
- (_Bool)updateEventToEvent:(id)arg1 commit:(_Bool)arg2;	// IMP=0x00000000000a6af0
- (_Bool)updateEventToEvent:(id)arg1;	// IMP=0x00000000000a6ad9
@property(retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
- (id)privacyLevelString;	// IMP=0x00000000000a6a00
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;	// IMP=0x00000000000a548f
- (_Bool)_shouldPreserveFutureWhenSlicingWithStartDate:(id)arg1 newStartDate:(id)arg2;	// IMP=0x00000000000a53fa
- (void)rebaseToEventStore:(id)arg1;	// IMP=0x00000000000a5372
- (_Bool)_noRemainingEarlierOccurrences;	// IMP=0x00000000000a5091
- (_Bool)_eventIsTheOnlyRemainingOccurrence;	// IMP=0x00000000000a4ab4
- (id)masterEvent;	// IMP=0x00000000000a49e7
- (_Bool)isOnlyOccurrence;	// IMP=0x00000000000a49d5
- (_Bool)isMainOccurrence;	// IMP=0x00000000000a499c
- (_Bool)isFirstOccurrence;	// IMP=0x00000000000a48a7
- (_Bool)removeWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000a438b
- (_Bool)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;	// IMP=0x00000000000a426b
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;	// IMP=0x00000000000a412f
- (_Bool)_cancelWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000a3ed8
- (void)_deleteThisOccurrence;	// IMP=0x00000000000a3387
- (void)_updateSelfFromDetachedEventIfNeededForDelete;	// IMP=0x00000000000a29a2
- (void)_deleteFromOccurrenceDateOnward:(id)arg1;	// IMP=0x00000000000a1e77
- (_Bool)_deleteWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000a1c8c
- (_Bool)_shouldDeclineInsteadOfDelete;	// IMP=0x00000000000a1b71
- (_Bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;	// IMP=0x00000000000a1a40
- (_Bool)_isSimpleRepeatingEvent;	// IMP=0x00000000000a198f
@property(readonly, nonatomic) _Bool allowsResponseCommentModifications;
- (_Bool)allowsSpansOtherThanThisEvent;	// IMP=0x00000000000a17cf
- (_Bool)conformsToRecurrenceRules:(id)arg1;	// IMP=0x00000000000a14ec
- (_Bool)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000a1395
- (_Bool)_occurrenceExistsOnDate:(id)arg1 timeZone:(id)arg2;	// IMP=0x00000000000a0fb5
- (_Bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;	// IMP=0x000000000009f9c6
- (_Bool)durationOverlapsRecurrenceInterval;	// IMP=0x000000000009f69a
- (_Bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x000000000009f154
- (_Bool)overlapsWithOrIsSameDayAsEventInSeries;	// IMP=0x000000000009ee80
- (_Bool)validateRecurrenceRule:(id)arg1 error:(id *)arg2;	// IMP=0x000000000009eb19
@property(copy, nonatomic) NSString *recurrenceSet;
- (unsigned long long)countOfAttendeeProposedTimes;	// IMP=0x000000000009e8fe
- (id)_keysToChangeForDuplicateWithOptions:(long long)arg1;	// IMP=0x000000000009e4e6
- (id)duplicateWithOptions:(long long)arg1;	// IMP=0x000000000009e2b1
- (_Bool)hasAttendeeProposedTimes;	// IMP=0x000000000009e0ef
- (id)nextOccurrenceOrDetachmentAfter:(id)arg1;	// IMP=0x000000000009d9e5
- (id)_dateForNextOccurrence;	// IMP=0x000000000009d88e
- (void)rollback;	// IMP=0x000000000009d521
- (_Bool)revert;	// IMP=0x000000000009d396
- (_Bool)_reset;	// IMP=0x000000000009d2d9
- (void)reset;	// IMP=0x000000000009d299
- (void)_addNewAttendeesToRecentsIfNeeded;	// IMP=0x000000000009cdbf
- (void)_addOrganizerToRecentsIfNeeded;	// IMP=0x000000000009ccb2
- (void)markAsUndeleted;	// IMP=0x000000000009cbdf
- (void)markAsCommitted;	// IMP=0x000000000009cb9c
- (void)markAsSaved;	// IMP=0x000000000009cb3c
- (void)_adjustAfterRebaseForMovingFromOldSource:(id)arg1 toNewSource:(id)arg2 savingItem:(id)arg3;	// IMP=0x000000000009c63f
- (void)_adjustForNewCalendarBeforeSave;	// IMP=0x000000000009bc48
- (id)_leftoversInDates:(id)arg1 withGeneratedDates:(id)arg2;	// IMP=0x000000000009bb85
- (void)_filterExceptionDatesAndDetachments;	// IMP=0x000000000009b2b3
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates;	// IMP=0x000000000009af7b
- (void)_applyTimeChangesToMaster;	// IMP=0x000000000009ad17
- (id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3;	// IMP=0x000000000009ac24
- (_Bool)_isSignificantlyDetachedComparedToMaster:(id)arg1 shouldIgnorePartStat:(_Bool)arg2;	// IMP=0x000000000009a402
@property(readonly, nonatomic) _Bool isSignificantlyDetachedIgnoringParticipation;
@property(readonly, nonatomic) _Bool isSignificantlyDetached;
- (void)_propagateChangesToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2 startDateOffset:(id)arg3 duration:(id)arg4 calendar:(id)arg5;	// IMP=0x0000000000099f8e
- (void)_propagateAlarmChangesToDetachedEvents:(id)arg1;	// IMP=0x00000000000996ae
- (void)_updateModifiedProperties;	// IMP=0x000000000009930c
- (void)_updateVideoConferenceOnlyModified;	// IMP=0x0000000000098fba
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;	// IMP=0x0000000000098dfe
- (void)_extendConferenceURLExpirationDateToDate:(id)arg1;	// IMP=0x0000000000098c09
- (_Bool)saveWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000972e7
- (void)_willSave;	// IMP=0x0000000000097288
- (id)_generateNewUniqueID;	// IMP=0x00000000000971ee
- (_Bool)validateWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000966c9
- (_Bool)validate:(id *)arg1;	// IMP=0x00000000000966b2
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;	// IMP=0x0000000000096332
- (_Bool)validateAndUpdateOccurrenceDateFieldsAfterRefresh;	// IMP=0x00000000000960e7
- (_Bool)refreshAndNotify:(_Bool)arg1;	// IMP=0x0000000000095f62
- (_Bool)refresh;	// IMP=0x0000000000095f33
- (id)privacyDescription;	// IMP=0x0000000000095e31
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) _Bool allowsParticipationStatusModifications;
- (_Bool)hasValidEventAction;	// IMP=0x0000000000095761
- (_Bool)_hasExternalIDOrDeliverySource;	// IMP=0x00000000000956be
@property(readonly, nonatomic) _Bool canBeRespondedTo;
- (_Bool)allowsAlarmModifications;	// IMP=0x0000000000095664
@property(readonly, nonatomic) _Bool allowsAvailabilityModifications;
- (id)uniqueId;	// IMP=0x000000000009558b
@property(readonly, nonatomic) long long pendingParticipationStatus;
- (void)_resetInternalState;	// IMP=0x000000000009540d
- (void)_clearOriginalDateFields;	// IMP=0x00000000000953cc
- (_Bool)isMultiDayTimedEventInCalendar:(id)arg1;	// IMP=0x000000000009500c
- (long long)daysSpannedInCalendar:(id)arg1;	// IMP=0x0000000000094e51
- (id)startOfDayForEndDateInCalendar:(id)arg1;	// IMP=0x0000000000094ce3
- (id)startOfDayForStartDateInCalendar:(id)arg1;	// IMP=0x0000000000094b8d
- (void)clearCachedTimeValues;	// IMP=0x0000000000094b39
- (_Bool)couldBeJunk;	// IMP=0x0000000000094a62
@property(readonly, nonatomic) _Bool supportsJunkReporting;
@property(readonly, nonatomic) NSString *sendersPhoneNumber;
@property(readonly, nonatomic) NSString *sendersEmail;
@property(nonatomic) unsigned long long junkStatus;
@property(readonly, nonatomic) _Bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property(nonatomic) long long travelAdvisoryBehavior;
- (_Bool)_eligibleForTravelAdvisoriesIncludePotential:(_Bool)arg1;	// IMP=0x00000000000945d5
@property(readonly, nonatomic) _Bool potentiallyEligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool eligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool automaticLocationGeocodingAllowed;
- (_Bool)_hasRecurrenceRuleChangeRequiringSpanAll;	// IMP=0x00000000000942eb
- (_Bool)_hasBasicChangesRequiringSpanAll;	// IMP=0x0000000000094278
- (_Bool)_hasOrHadRecurrenceRule;	// IMP=0x0000000000094235
- (_Bool)hasChangesRequiringSpanAll;	// IMP=0x00000000000941e8
- (_Bool)changingAllDayPropertyIsAllowed;	// IMP=0x0000000000094079
@property(readonly, nonatomic) _Bool hasAttachmentChanges;
@property(readonly, nonatomic) _Bool canDetachSingleOccurrence;
- (_Bool)requiresDetach;	// IMP=0x0000000000093dd1
@property(readonly, nonatomic) _Bool responseMustApplyToAll;
- (_Bool)allowsCalendarModifications;	// IMP=0x0000000000093c1d
- (_Bool)allowsRecurrenceModifications;	// IMP=0x0000000000093b33
@property(readonly, nonatomic) _Bool isPrivateEventSharedToMe;
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool isDetached;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;	// IMP=0x0000000000093931
- (long long)compareStartDateWithEvent:(id)arg1;	// IMP=0x00000000000938a0
- (_Bool)isTentative;	// IMP=0x000000000009379a
@property(retain, nonatomic) NSDate *participationStatusModifiedDate;
@property(retain, nonatomic) EKStructuredLocation *endLocation; // @dynamic endLocation;
- (void)setCalendar:(id)arg1;	// IMP=0x0000000000093696
@property(retain, nonatomic) NSURL *conferenceURL;
- (void)setConferenceURLString:(id)arg1;	// IMP=0x00000000000935c7
- (id)conferenceURLString;	// IMP=0x00000000000935ab
- (void)forceLocationPredictionUpdate;	// IMP=0x0000000000093599
- (void)setLocationPredictionAllowed:(_Bool)arg1;	// IMP=0x000000000009351d
- (void)setPredictedLocationFrozen:(_Bool)arg1;	// IMP=0x0000000000093445
@property(readonly, nonatomic) _Bool hasPredictedLocation;
- (void)rejectPredictedLocation;	// IMP=0x0000000000093392
- (void)confirmPredictedLocation:(id)arg1;	// IMP=0x0000000000093219
@property(readonly, nonatomic) NSString *locationWithoutPrediction;
@property(readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
- (void)_clearLocationPredictionCacheIfNotFrozen;	// IMP=0x0000000000093091
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;	// IMP=0x0000000000093032
- (id)_updatePredictedLocationCacheIfNeeded;	// IMP=0x0000000000092dca
- (id)_firstNonConferenceRoomLocationTitle;	// IMP=0x0000000000092a57
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;	// IMP=0x0000000000092517
- (_Bool)_needsPredictedLocationCacheUpdateHoldingLock;	// IMP=0x0000000000092489
- (id)_conferenceRoomDisplayStrings;	// IMP=0x00000000000922e2
- (void)removeConferenceRooms:(id)arg1;	// IMP=0x0000000000091ee9
- (void)addConferenceRooms:(id)arg1;	// IMP=0x0000000000091d81
- (id)roomAttendees;	// IMP=0x0000000000091ce4
- (void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(_Bool)arg2;	// IMP=0x000000000009196c
@property(copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;
- (void)setURL:(id)arg1;	// IMP=0x0000000000091845
- (void)setDisplayNotes:(id)arg1;	// IMP=0x0000000000091718
- (id)displayNotes;	// IMP=0x00000000000915fc
- (void)setNotes:(id)arg1;	// IMP=0x00000000000914f7
- (_Bool)supportsAddingAttachments;	// IMP=0x000000000009140e
@property(readonly, nonatomic) _Bool allowsProposedTimeModifications;
- (_Bool)disallowProposeNewTime;	// IMP=0x0000000000091162
- (_Bool)serverSupportedProposeNewTime;	// IMP=0x0000000000091049
@property(nonatomic) _Bool dontSendNotificationForChanges;
- (_Bool)canForward;	// IMP=0x0000000000090ebb
@property(nonatomic) _Bool attendeeReplyChanged; // @dynamic attendeeReplyChanged;
@property(nonatomic) _Bool attendeeDeclinedStartDate;
@property(nonatomic) _Bool attendeeProposedStartDate;
@property(nonatomic) _Bool attendeeStatus;
@property(nonatomic) _Bool attendeeComment;
@property(nonatomic) _Bool videoConferenceChanged;
@property(nonatomic) _Bool locationChanged;
@property(nonatomic) _Bool titleChanged;
@property(nonatomic) _Bool timeChanged;
@property(nonatomic) _Bool dateChanged;
- (void)_setInvitationChangedProperty:(_Bool)arg1 forFlag:(unsigned int)arg2;	// IMP=0x0000000000090c8b
- (void)setInvitationChangedProperties:(unsigned int)arg1;	// IMP=0x0000000000090c2e
- (unsigned int)invitationChangedProperties;	// IMP=0x0000000000090be0
- (_Bool)_invitationChangedPropertyForFlag:(unsigned int)arg1;	// IMP=0x0000000000090bbf
@property(readonly, nonatomic) _Bool locationIsAConferenceRoom;
@property(nonatomic) long long privacyLevel;
@property(readonly, nonatomic) _Bool allowsAllDayModifications;
@property(readonly, nonatomic) _Bool allowsPrivacyLevelModifications;
@property(readonly, nonatomic) _Bool allowsTravelTimeModifications;
- (_Bool)allowsAttendeesModifications;	// IMP=0x000000000009039b
@property(readonly, nonatomic) long long travelRoutingMode;
@property(retain, nonatomic) NSDate *proposedStartDate;
- (_Bool)isProposedTimeEvent;	// IMP=0x00000000000900a6
@property(nonatomic) double travelTime;
@property(readonly, nonatomic) NSDate *startDateIncludingTravel;
- (id)_travelTimeInternalDescription;	// IMP=0x000000000008fdf6
@property(nonatomic) int externalTrackingStatus;
- (_Bool)_shouldAlertInviteeDeclines;	// IMP=0x000000000008fd3b
- (void)_setInvitationStatusUnalertedIfNecessary;	// IMP=0x000000000008fce2
- (void)_setInvitationStatusAlertedIfNecessary;	// IMP=0x000000000008fca4
@property(nonatomic) _Bool isAlerted;
- (void)removeEventAction:(id)arg1;	// IMP=0x000000000008fc2b
- (void)addEventAction:(id)arg1;	// IMP=0x000000000008fc0f
@property(copy, nonatomic) NSSet *actions;
- (void)clearInvitationStatus;	// IMP=0x000000000008fb90
@property(nonatomic) unsigned long long invitationStatus;
- (void)setConferencesSet:(id)arg1;	// IMP=0x000000000008fac9
- (id)conferencesSet;	// IMP=0x000000000008faad
- (id)_buildConferenceStringFromNotesWithoutConference:(id)arg1 serializedConference:(id)arg2;	// IMP=0x000000000008f9ca
@property(retain, nonatomic) EKVirtualConference *virtualConference;
- (id)_originallyCommittedVirtualConference;	// IMP=0x000000000008f517
- (void)_removeDefaultAlarms;	// IMP=0x000000000008eef0
- (void)_addDefaultAlarms;	// IMP=0x000000000008edb6
- (void)_updateDefaultAlarms;	// IMP=0x000000000008ed6f
- (id)defaultAlarms;	// IMP=0x000000000008eb69
- (void)setResponseComment:(id)arg1;	// IMP=0x000000000008eb4d
- (id)responseComment;	// IMP=0x000000000008eb31
@property(nonatomic) long long availability;
- (_Bool)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)arg1;	// IMP=0x000000000008e8d8
@property(readonly, nonatomic) _Bool hasComplexRecurrence;
- (id)startDateForRecurrence;	// IMP=0x000000000008e457
- (void)makeRecurrenceEndCountBased;	// IMP=0x000000000008e309
- (void)makeRecurrenceEndDateBased;	// IMP=0x000000000008e1cb
- (void)setRecurrenceRule:(id)arg1;	// IMP=0x000000000008e14e
- (id)recurrenceRule;	// IMP=0x000000000008e0d8
- (id)lunarCalendarString;	// IMP=0x000000000008e0c6
- (void)setLunarCalendarString:(id)arg1;	// IMP=0x000000000008e0b4
- (_Bool)isBirthday;	// IMP=0x000000000008e081
- (void)setBirthdayContact:(id)arg1;	// IMP=0x000000000008dfd7
- (id)birthdayContactName;	// IMP=0x000000000008dfbb
- (void)setBirthdayContactIdentifier:(id)arg1;	// IMP=0x000000000008df9f
@property(readonly, nonatomic) NSString *birthdayContactIdentifier;
@property(readonly, nonatomic) long long birthdayPersonID;
- (id)birthdayID;	// IMP=0x000000000008df16
- (long long)_parentParticipationStatus;	// IMP=0x000000000008dec9
- (void)markEventAsAttendeeForward;	// IMP=0x000000000008de58
- (_Bool)currentUserMayActAsOrganizer;	// IMP=0x000000000008dd7d
@property(readonly, nonatomic, getter=isCurrentUserInvitedAttendee) _Bool currentUserInvitedAttendee;
@property(readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
- (_Bool)_userAddressesRepresentInvitedAttendee:(id)arg1 checkEmailAddresses:(_Bool)arg2;	// IMP=0x000000000008d708
@property(readonly, nonatomic) _Bool allowsParticipantStatusModifications;
@property(readonly, nonatomic) _Bool supportsParticipationStatusModificationsWithoutNotification;
@property(nonatomic) long long participationStatus;
- (_Bool)_isParticipationStatusDirty;	// IMP=0x000000000008d283
@property(nonatomic) _Bool firedTTL;
@property(nonatomic) long long locationPredictionState;
- (void)setNeedsOccurrenceCacheUpdate:(_Bool)arg1;	// IMP=0x000000000008d080
- (_Bool)needsOccurrenceCacheUpdate;	// IMP=0x000000000008d032
@property(nonatomic) long long status;
@property(readonly, copy, nonatomic) NSDate *initialEndDate;
@property(readonly, nonatomic) NSDate *occurrenceDate;
@property(readonly, nonatomic) _Bool isMasterOrDetachedOccurrence;
@property(readonly, nonatomic) _Bool isMaster;
@property(readonly, copy, nonatomic) NSDate *initialStartDate;
- (void)setOriginalStartDate:(id)arg1;	// IMP=0x000000000008cd6e
@property(readonly, nonatomic) NSDate *originalStartDate;
- (_Bool)isFloating;	// IMP=0x000000000008cd1f
- (id)effectiveTimeZone;	// IMP=0x000000000008cca6
- (_Bool)_settingTimeZoneChangesStartEndDates;	// IMP=0x000000000008cc9e
- (void)setTimeZone:(id)arg1;	// IMP=0x000000000008c92f
- (void)forceSetTimeZone:(id)arg1;	// IMP=0x000000000008c900
@property(copy, nonatomic) NSDate *endDate;
- (void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;	// IMP=0x000000000008c6d3
@property(readonly, nonatomic) EKCalendarDate *endCalendarDate;
- (void)setEndDateRaw:(id)arg1;	// IMP=0x000000000008c639
- (id)endDateRaw;	// IMP=0x000000000008c61d
@property(readonly, nonatomic) double durationIncludingTravel;
@property(readonly, nonatomic) double duration;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(_Bool)arg2;	// IMP=0x000000000008c27b
- (void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;	// IMP=0x000000000008c0e5
- (id)_adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 pinMode:(unsigned long long)arg3 clientCalendarDate:(id *)arg4;	// IMP=0x000000000008bf56
- (id)adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;	// IMP=0x000000000008bf3e
- (id)_pinDate:(id)arg1 withPinMode:(unsigned long long)arg2;	// IMP=0x000000000008be07
- (void)overrideStartDate:(id)arg1;	// IMP=0x000000000008bdf3
@property(copy, nonatomic) NSDate *startDate;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDate;
- (id)_committedEndDate;	// IMP=0x000000000008bd62
- (id)_committedStartDate;	// IMP=0x000000000008bd1a
- (void)setStartDateRaw:(id)arg1;	// IMP=0x000000000008bce2
- (id)startDateRaw;	// IMP=0x000000000008bcc6
@property(readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (_Bool)_isAllDay;	// IMP=0x000000000008b905
@property(nonatomic) _Bool isPhantom;
- (void)setPhantomMaster:(_Bool)arg1;	// IMP=0x000000000008b83f
- (_Bool)phantomMaster;	// IMP=0x000000000008b82d
- (id)title;	// IMP=0x000000000008b571
- (void)setTitle:(id)arg1;	// IMP=0x000000000008b50d
- (id)committedValueForKey:(id)arg1;	// IMP=0x000000000008b420
- (void)setNeedsGeocoding:(_Bool)arg1;	// IMP=0x000000000008b3cf
- (_Bool)needsGeocoding;	// IMP=0x000000000008b37c
- (void)postModifiedNotificationWithUserInfo:(id)arg1;	// IMP=0x000000000008b2f9
- (void)postModifiedNotification;	// IMP=0x000000000008b271
@property(readonly, nonatomic) _Bool isAllDayDirty;
@property(readonly, nonatomic) _Bool isEndDateDirty;
@property(readonly, nonatomic) _Bool isStartDateDirty;
@property(readonly, nonatomic) _Bool isStatusDirty;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000008ae7c
@property(readonly, nonatomic) NSURL *externalURL;
- (id)externalURI;	// IMP=0x000000000008abaa
@property(readonly, nonatomic) NSDate *recurrenceDate;
@property(readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property(readonly, nonatomic) NSString *eventOccurrenceID;
- (id)specificIdentifier;	// IMP=0x000000000008aa14
@property(readonly, nonatomic) NSString *eventIdentifier;
- (unsigned long long)entityType;	// IMP=0x000000000008a91e
- (id)_calculateDurationWithStart:(id)arg1 end:(id)arg2 allDay:(_Bool)arg3;	// IMP=0x000000000008a8d8
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;	// IMP=0x000000000008a5d0
- (id)initWithObjectForCopy:(id)arg1;	// IMP=0x000000000008a49c
- (id)initWithPersistentObject:(id)arg1;	// IMP=0x000000000008a488
- (id)initWithEventStore:(id)arg1;	// IMP=0x000000000008a39b
- (id)init;	// IMP=0x000000000008a359
- (id)_prioritizedConferencesSources;	// IMP=0x0000000000044f88
- (id)_detectConferenceURL;	// IMP=0x0000000000044f25
- (id)conferenceURLDetected;	// IMP=0x0000000000044e29
- (void)clearDetectedConferenceURL;	// IMP=0x0000000000044e10
- (id)conferenceURLForDisplay;	// IMP=0x0000000000044d2e
- (_Bool)conferenceURLForDisplayCached;	// IMP=0x0000000000044c24
- (void)clearParsedConference;	// IMP=0x0000000000044c0b
- (id)parsedConference;	// IMP=0x0000000000044a9f
- (void)setURLCommon:(id)arg1;	// IMP=0x0000000000044a8d
- (void)setNotesCommon:(id)arg1;	// IMP=0x0000000000044a5f
@property(readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property(retain, nonatomic) NSArray *locations;
- (_Bool)_couldBeJunkCommon;	// IMP=0x000000000004480a
@property(nonatomic) unsigned long long cachedJunkStatus; // @dynamic cachedJunkStatus;
- (void)setIsJunk:(_Bool)arg1 shouldSave:(_Bool)arg2;	// IMP=0x0000000000044386

// Remaining properties
@property(readonly, nonatomic) NSString *UUID; // @dynamic UUID;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic) EKEventStore *eventStore;
@property(readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property(readonly) Class superclass;
@property(retain, nonatomic) EKStructuredLocation *travelStartLocation; // @dynamic travelStartLocation;

@end

