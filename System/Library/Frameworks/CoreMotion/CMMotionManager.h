//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CMAccelerometerData, CMAmbientPressureData, CMDeviceMotion, CMGyroData, CMMagnetometerData;

@interface CMMotionManager : NSObject
{
    id _internal;	// 8 = 0x8
}

+ (_Bool)hasRunMiniCal;	// IMP=0x00000000000f6710
+ (CDStruct_8d89f794)gyroCalibrationDatabaseGetBiasFitAndEstimate:(CDStruct_31142d93 *)arg1 atTemperature:(float)arg2;	// IMP=0x00000000000f6621
+ (CDStruct_8d89f794)gyroCalibrationDatabaseGetBiasFit;	// IMP=0x00000000000f65ad
+ (_Bool)configureM7Activity:(_Bool)arg1 stepCounting:(_Bool)arg2 activityForceCodeTransition:(_Bool)arg3 stepCountingForceCodeTransition:(_Bool)arg4 threshold:(_Bool)arg5 onBodyDetection:(_Bool)arg6 ispMode:(unsigned char)arg7 predictionInterval:(float)arg8 logLevel:(BOOL)arg9 proactiveRevisitTime:(unsigned short)arg10;	// IMP=0x00000000000f65a5
+ (_Bool)setUrgentCalFlag;	// IMP=0x00000000000f62d4
+ (_Bool)startGyroMiniCalibration;	// IMP=0x00000000000f6003
+ (_Bool)supportsGyroMiniCalibration;	// IMP=0x00000000000f5fdc
+ (void)dummySelector:(id)arg1;	// IMP=0x00000000000f5fd6
+ (_Bool)northAlignedReferenceFrame:(unsigned long long)arg1;	// IMP=0x00000000000f53b1
+ (_Bool)deviceMotionInitialized:(struct Sample *)arg1;	// IMP=0x00000000000f5399
+ (void)dumpDb:(long long)arg1 toURL:(id)arg2 onCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f05bc
+ (void)setAllowInBackground:(_Bool)arg1;	// IMP=0x00000000000ee41d
+ (unsigned long long)availableAttitudeReferenceFrames;	// IMP=0x00000000000ee40f
+ (void)initialize;	// IMP=0x00000000000ee372
+ (id)virtualAlmondDevice;	// IMP=0x00000000000ee345
+ (void)setVirtualAlmondDevice:(id)arg1;	// IMP=0x00000000000ee30c
- (void)stopFactoryGyroUpdatesPrivate;	// IMP=0x00000000000f6d9f
- (void)startFactoryGyroUpdatesPrivateToQueue:(id)arg1 atUpdateInterval:(double)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f6bfe
- (void)stopFactoryGyroUpdates;	// IMP=0x00000000000f6b97
- (void)startFactoryGyroUpdatesToQueue:(id)arg1 atUpdateInterval:(double)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f6afb
- (void)startFactoryGyroUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f6a6b
- (void)stopDeviceMotionLiteUpdatesForDeviceID:(id)arg1;	// IMP=0x00000000000f6989
- (void)startDeviceMotionLiteFusedUpdatesForDeviceID:(id)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f68a7
- (void)startDeviceMotionLiteUpdatesForDeviceID:(id)arg1 usingConfiguration:(CDStruct_fcaf9308)arg2 toQueue:(id)arg3 withFusedHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000f673d
@property(readonly, nonatomic, getter=isDeviceMotionLiteAvailable) _Bool isDeviceMotionLiteAvailable;
- (void)didBecomeActivePrivate:(id)arg1;	// IMP=0x00000000000f5f59
- (void)willResignActivePrivate:(id)arg1;	// IMP=0x00000000000f5f05
- (void)didBecomeActive:(id)arg1;	// IMP=0x00000000000f5e8c
- (void)willResignActive:(id)arg1;	// IMP=0x00000000000f5e13
- (void)onCompensatedAmbientPressure:(const struct Sample *)arg1;	// IMP=0x00000000000f5b99
- (void)onAmbientPressure:(const struct Sample *)arg1;	// IMP=0x00000000000f5937
- (void)onDeviceMotion:(const struct Sample *)arg1;	// IMP=0x00000000000f5569
- (void)applyInitialReference:(struct Sample *)arg1;	// IMP=0x00000000000f549a
- (void)applyNorthReference:(struct Sample *)arg1;	// IMP=0x00000000000f53d9
- (_Bool)sendDeviceMotionError:(int)arg1;	// IMP=0x00000000000f514d
- (void)onMagnetometer:(const struct Sample *)arg1;	// IMP=0x00000000000f4ec2
- (void)onFactoryGyroTemperature:(const struct Temperature *)arg1;	// IMP=0x00000000000f4d3a
- (void)onFactoryGyro:(const struct Sample *)arg1;	// IMP=0x00000000000f44e0
- (void)onGyro:(const struct Sample *)arg1;	// IMP=0x00000000000f4255
- (void)onAccelerometer:(const struct Sample *)arg1;	// IMP=0x00000000000f3fe5
- (id)predictedDeviceMotionAtTimestamp:(double)arg1 error:(out id *)arg2;	// IMP=0x00000000000f378c
@property(readonly, nonatomic, getter=isPredictedDeviceMotionAvailable) _Bool predictedDeviceMotionAvailable;
- (void)_stopDeviceMotionErrorUpdates;	// IMP=0x00000000000f36da
- (void)_startDeviceMotionErrorUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f34d9
- (_Bool)setMotionThreadPriority:(int)arg1;	// IMP=0x00000000000f34bc
- (void)setNotificationCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;	// IMP=0x00000000000f31e4
- (void)setPowerConservationMode:(int)arg1;	// IMP=0x00000000000f30a2
- (void)setSidebandTimeSyncHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000f309c
- (_Bool)setSidebandSensorFusionEnable:(_Bool)arg1 measureLatency:(_Bool)arg2 withSnoopHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f2647
- (_Bool)setSidebandSensorFusionEnable:(_Bool)arg1 withSnoopHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f2630
- (_Bool)setSidebandSensorFusionEnable:(_Bool)arg1;	// IMP=0x00000000000f2619
@property(readonly, nonatomic, getter=isSidebandSensorFusionAvailable) _Bool sidebandSensorFusionAvailable;
- (void)connect;	// IMP=0x00000000000f2223
- (void)setDeviceMotionCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3 fsync:(_Bool)arg4;	// IMP=0x00000000000f165a
- (void)setMagnetometerDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;	// IMP=0x00000000000f150f
- (void)setGyroDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;	// IMP=0x00000000000f13c4
- (void)setAccelerometerDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;	// IMP=0x00000000000f1079
- (id)initUsingGyroOnlySensorFusion;	// IMP=0x00000000000f1054
- (id)initUsing6AxisSensorFusion;	// IMP=0x00000000000f102f
- (void)dismissDeviceMovementDisplay;	// IMP=0x00000000000f0f64
- (void)showDeviceMovementDisplay;	// IMP=0x00000000000f0e65
- (void)setShowsDeviceMovementDisplayPrivate:(_Bool)arg1;	// IMP=0x00000000000f0e43
@property(nonatomic) _Bool showsDeviceMovementDisplay;
- (void)stopMagnetometerUpdatesPrivate;	// IMP=0x00000000000f0e19
- (void)startMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f0e0f
- (void)setMagnetometerUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f0d72
- (void)stopMagnetometerUpdates;	// IMP=0x00000000000f0d0b
- (void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f0c83
- (void)startMagnetometerUpdates;	// IMP=0x00000000000f0c18
@property(readonly) CMMagnetometerData *magnetometerData;
@property(nonatomic) double magnetometerUpdateInterval;
@property(readonly, nonatomic, getter=isMagnetometerActive) _Bool magnetometerActive;
@property(readonly, nonatomic, getter=isMagnetometerAvailable) _Bool magnetometerAvailable;
- (int)gyttNumTemperatures;	// IMP=0x00000000000f0b90
- (void)rebuildGytt;	// IMP=0x00000000000f0982
- (void)stopDeviceMotionUpdatesPrivate;	// IMP=0x00000000000f0498
- (void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f0176
- (void)setDeviceMotionUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f00d4
- (void)stopDeviceMotionUpdates;	// IMP=0x00000000000f00ab
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f0058
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1;	// IMP=0x00000000000f001d
- (void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000effdf
- (void)startDeviceMotionUpdates;	// IMP=0x00000000000effb6
@property(readonly) CMDeviceMotion *deviceMotion; // @dynamic deviceMotion;
@property(readonly, nonatomic) unsigned long long attitudeReferenceFrame; // @dynamic attitudeReferenceFrame;
@property(nonatomic) double deviceMotionUpdateInterval; // @dynamic deviceMotionUpdateInterval;
@property(readonly, nonatomic, getter=isDeviceMotionActive) _Bool deviceMotionActive; // @dynamic deviceMotionActive;
@property(readonly, nonatomic, getter=isDeviceMotionAvailable) _Bool deviceMotionAvailable; // @dynamic deviceMotionAvailable;
- (void)stopGyroUpdatesPrivate;	// IMP=0x00000000000efeb9
- (void)startGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000efeaf
- (void)setGyroUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000efdfb
- (void)stopGyroUpdates;	// IMP=0x00000000000efdd2
- (void)startGyroUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000efd94
- (void)startGyroUpdates;	// IMP=0x00000000000efd6b
@property(readonly) CMGyroData *gyroData; // @dynamic gyroData;
@property(nonatomic) double gyroUpdateInterval; // @dynamic gyroUpdateInterval;
@property(readonly, nonatomic, getter=isGyroActive) _Bool gyroActive; // @dynamic gyroActive;
@property(readonly, nonatomic, getter=isGyroAvailable) _Bool gyroAvailable; // @dynamic gyroAvailable;
- (void)stopCompensatedAmbientPressureUpdatesPrivate;	// IMP=0x00000000000efb99
- (void)startCompensatedAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000efa7a
- (void)setCompensatedAmbientPressureUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000ef9dd
- (void)stopAmbientPressureUpdatesPrivate;	// IMP=0x00000000000ef90b
- (void)startAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ef80a
- (void)setAmbientPressureUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000ef779
@property(readonly) CMAmbientPressureData *compensatedAmbientPressureData;
- (void)stopCompensatedAmbientPressureUpdates;	// IMP=0x00000000000ef686
- (void)startCompensatedAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ef5fe
- (void)startCompensatedAmbientPressureUpdates;	// IMP=0x00000000000ef593
- (_Bool)isCompensatedAmbientPressureActive;	// IMP=0x00000000000ef57e
- (double)compensatedAmbientPressureUpdateInterval;	// IMP=0x00000000000ef56c
- (void)setCompensatedAmbientPressureUpdateInterval:(double)arg1;	// IMP=0x00000000000ef4ee
- (id)computeNonlinearPRTTFromDB:(id)arg1 where:(id)arg2;	// IMP=0x00000000000ef31f
- (_Bool)readRawAmbientPressureSamplesFromDB:(id)arg1 toQueue:(id)arg2 where:(id)arg3 withHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000eef54
@property(readonly) CMAmbientPressureData *ambientPressureData;
- (void)stopAmbientPressureUpdates;	// IMP=0x00000000000eee64
- (void)startAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000eeddc
- (void)startAmbientPressureUpdates;	// IMP=0x00000000000eed71
- (_Bool)isAmbientPressureActive;	// IMP=0x00000000000eed5f
- (double)ambientPressureUpdateInterval;	// IMP=0x00000000000eed50
- (void)setAmbientPressureUpdateInterval:(double)arg1;	// IMP=0x00000000000eecd2
- (_Bool)isAmbientPressureAvailable;	// IMP=0x00000000000eecc5
- (void)stopAccelerometerUpdatesPrivate;	// IMP=0x00000000000eebbb
- (void)startAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000eea7a
- (void)setAccelerometerUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000ee9d2
- (void)stopAccelerometerUpdates;	// IMP=0x00000000000ee9a9
- (void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ee96b
- (void)startAccelerometerUpdates;	// IMP=0x00000000000ee942
@property(readonly) CMAccelerometerData *accelerometerData; // @dynamic accelerometerData;
@property(nonatomic) double accelerometerUpdateInterval; // @dynamic accelerometerUpdateInterval;
@property(readonly, nonatomic, getter=isAccelerometerActive) _Bool accelerometerActive; // @dynamic accelerometerActive;
@property(readonly, nonatomic, getter=isAccelerometerAvailable) _Bool accelerometerAvailable; // @dynamic accelerometerAvailable;
- (void)deallocPrivate;	// IMP=0x00000000000ee740
- (void)dealloc;	// IMP=0x00000000000ee651
- (id)initPrivate;	// IMP=0x00000000000ee59d
- (id)init;	// IMP=0x00000000000ee423
- (_Bool)useAccelerometer;	// IMP=0x00000000000ee362
- (void)setUseAccelerometer:(_Bool)arg1;	// IMP=0x00000000000ee352

@end

