//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSMutableArray, NSMutableDictionary, NSString, NSURL;

@interface PDSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;	// 8 = 0x8
    _Bool _isInTransaction;	// 16 = 0x10
    _Bool _requiresRollback;	// 17 = 0x11
    long long _transactionType;	// 24 = 0x18
    struct __CFDictionary *_statementCache;	// 32 = 0x20
    NSMutableDictionary *_attachedDatabaseURLsByName;	// 40 = 0x28
    struct unordered_set<sqlite3_stmt *, std::hash<sqlite3_stmt *>, std::equal_to<sqlite3_stmt *>, std::allocator<sqlite3_stmt *>> _activeStatements;	// 48 = 0x30
    _Bool _isHandlingTransactionEnd;	// 88 = 0x58
    NSMutableArray *_onCommitBlocks;	// 96 = 0x60
    NSMutableArray *_onRollbackBlocks;	// 104 = 0x68
    CDUnknownBlockType _updateBlock;	// 112 = 0x70
    NSMutableDictionary *_tableColumnNameCache;	// 120 = 0x78
    NSURL *_fileURL;	// 128 = 0x80
}

+ (_Bool)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(_Bool *)arg2 resultCode:(int *)arg3 error:(id *)arg4;	// IMP=0x0040000000048e47
- (id).cxx_construct;	// IMP=0x0010000000049a20
- (void).cxx_destruct;	// IMP=0x001000000004999b
@property(readonly, nonatomic) NSURL *fileURL; // @synthesize fileURL=_fileURL;
- (void)_assertNoActiveStatements;	// IMP=0x0010000000049890
- (struct sqlite3_stmt *)_statementForSQL:(id)arg1 cache:(_Bool)arg2 error:(id *)arg3;	// IMP=0x0010000000049049
- (_Bool)tableWithName:(id)arg1 containsColumnWithName:(id)arg2;	// IMP=0x0010000000048c3f
- (_Bool)isDatabaseWithNameAttached:(id)arg1;	// IMP=0x0010000000048c08
- (_Bool)detachDatabaseWithName:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000048b2b
- (_Bool)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000048880
- (_Bool)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000048742
- (_Bool)enableIncrementalAutovacuumWithError:(id *)arg1;	// IMP=0x001000000004832f
- (_Bool)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id *)arg3;	// IMP=0x00100000000480d6
- (void)onRowUpdate:(CDUnknownBlockType)arg1;	// IMP=0x0010000000047ebe
- (void)performUpdateBlock:(id)arg1 changeType:(long long)arg2;	// IMP=0x0010000000047e69
- (void)requireRollback;	// IMP=0x0010000000047e59
- (void)onCommit:(CDUnknownBlockType)arg1 orRollback:(CDUnknownBlockType)arg2;	// IMP=0x0010000000047d16
- (_Bool)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long *)arg3 error:(id *)arg4;	// IMP=0x0010000000047b53
- (_Bool)_setPragma:(id)arg1 integerValue:(long long)arg2 withDatabaseName:(id)arg3 error:(id *)arg4;	// IMP=0x00100000000479ec
- (int)totalChangesCount;	// IMP=0x00100000000479de
- (id)lastInsertRowID;	// IMP=0x00100000000479af
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000047977
- (_Bool)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000047955
- (long long)userVersion:(id *)arg1;	// IMP=0x0010000000047939
- (_Bool)setUserVersion:(long long)arg1 error:(id *)arg2;	// IMP=0x001000000004791d
- (void)_resetStatement:(struct sqlite3_stmt *)arg1 finalize:(_Bool)arg2;	// IMP=0x0010000000047707
- (_Bool)_executeSQL:(id)arg1 cache:(_Bool)arg2 error:(id *)arg3 bindingHandler:(CDUnknownBlockType)arg4 enumerationHandler:(CDUnknownBlockType)arg5;	// IMP=0x001000000004735b
- (_Bool)executeUncachedSQL:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000047343
- (_Bool)executeUncachedSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;	// IMP=0x0010000000047319
- (_Bool)executeSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3 enumerationHandler:(CDUnknownBlockType)arg4;	// IMP=0x00100000000472ec
- (_Bool)executeSQL:(id)arg1 error:(id *)arg2 bindingHandler:(CDUnknownBlockType)arg3;	// IMP=0x00100000000472d7
- (_Bool)executeSQL:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000472bf
- (_Bool)_prepareStatementForSQL:(id)arg1 cache:(_Bool)arg2 error:(id *)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x0010000000046f02
- (_Bool)performTransactionWithType:(long long)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;	// IMP=0x00100000000467ec
- (_Bool)performTransaction:(id *)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000000467d2
- (id)getLastErrorWithResultCode:(int)arg1;	// IMP=0x00100000000465eb
- (_Bool)_executeSQL:(id)arg1 error:(id *)arg2 retryIfBusy:(_Bool)arg3;	// IMP=0x0010000000046432
- (_Bool)_executeSQL:(id)arg1 error:(id *)arg2;	// IMP=0x001000000004641d
- (_Bool)_verifyDatabaseOpenAndReturnError:(id *)arg1;	// IMP=0x00100000000463e1
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000004639b
@property(readonly, nonatomic, getter=isOpen) _Bool open;
- (void)truncate;	// IMP=0x00100000000462fd
- (void)clearStatementCache;	// IMP=0x00100000000462c8
- (void)close;	// IMP=0x001000000004622c
- (void)releaseMemory;	// IMP=0x0010000000046207
- (_Bool)_enableDisableForeignKeys:(_Bool)arg1 error:(id *)arg2;	// IMP=0x0010000000045fb0
- (_Bool)disableForeignKeys:(id *)arg1;	// IMP=0x0010000000045f99
- (_Bool)enableForeignKeys:(id *)arg1;	// IMP=0x0010000000045f7f
- (int)openForReadingWithError:(id *)arg1;	// IMP=0x0010000000045f68
- (int)openWithError:(id *)arg1;	// IMP=0x0010000000045f4e
- (int)_openForWriting:(_Bool)arg1 error:(id *)arg2;	// IMP=0x001000000004586b
- (void)dealloc;	// IMP=0x00100000000457e2
- (id)initMemoryDatabase;	// IMP=0x00100000000457ce
- (id)initWithDatabaseURL:(id)arg1;	// IMP=0x00100000000456c0
- (void)pd_close;	// IMP=0x001000000011649f

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

