//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString, NSURL;

@interface (null) : NSObject
{
    void *_db;	// 8 = 0x8
    _Bool _isExecutingStatement;	// 16 = 0x10
    double _startBusyRetryTime;	// 24 = 0x18
    NSMutableSet *_openResultSets;	// 32 = 0x20
    NSMutableSet *_openFunctions;	// 40 = 0x28
    NSDateFormatter *_dateFormat;	// 48 = 0x30
    _Bool _shouldCacheStatements;	// 56 = 0x38
    _Bool _traceExecution;	// 57 = 0x39
    _Bool _checkedOut;	// 58 = 0x3a
    _Bool _crashOnErrors;	// 59 = 0x3b
    _Bool _logsErrors;	// 60 = 0x3c
    _Bool _isOpen;	// 61 = 0x3d
    _Bool _isInTransaction;	// 62 = 0x3e
    double _maxBusyRetryTimeInterval;	// 64 = 0x40
    NSMutableDictionary *_cachedStatements;	// 72 = 0x48
    NSString *_databasePath;	// 80 = 0x50
}

+ (id)storeableDateFormat:(id)arg1;	// IMP=0x0040000000025eec
+ (_Bool)isSQLiteThreadSafe;	// IMP=0x0010000000025277
+ (id)sqliteLibVersion;	// IMP=0x0010000000025233
+ (int)FMDBVersion;	// IMP=0x0010000000025016
+ (id)FMDBUserVersion;	// IMP=0x0010000000025009
+ (id)databaseWithURL:(id)arg1;	// IMP=0x0010000000024e1d
+ (id)databaseWithPath:(id)arg1;	// IMP=0x0010000000024dd4
- (void).cxx_destruct;	// IMP=0x001000000002905a
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) _Bool isInTransaction; // @synthesize isInTransaction=_isInTransaction;
@property(nonatomic) _Bool isOpen; // @synthesize isOpen=_isOpen;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
- (void)resultErrorTooBigInContext:(void *)arg1;	// IMP=0x0010000000028fb5
- (void)resultErrorNoMemoryInContext:(void *)arg1;	// IMP=0x0010000000028fa8
- (void)resultErrorCode:(int)arg1 context:(void *)arg2;	// IMP=0x0010000000028f99
- (void)resultError:(id)arg1 context:(void *)arg2;	// IMP=0x0010000000028f62
- (void)resultString:(id)arg1 context:(void *)arg2;	// IMP=0x0010000000028f24
- (void)resultData:(id)arg1 context:(void *)arg2;	// IMP=0x0010000000028eba
- (void)resultDouble:(double)arg1 context:(void *)arg2;	// IMP=0x0010000000028ead
- (void)resultLong:(long long)arg1 context:(void *)arg2;	// IMP=0x0010000000028e9d
- (void)resultInt:(int)arg1 context:(void *)arg2;	// IMP=0x0010000000028e8e
- (void)resultNullInContext:(void *)arg1;	// IMP=0x0010000000028e81
- (id)valueString:(void *)arg1;	// IMP=0x0010000000028e43
- (id)valueData:(void *)arg1;	// IMP=0x0010000000028dee
- (double)valueDouble:(void *)arg1;	// IMP=0x0010000000028de1
- (long long)valueLong:(void *)arg1;	// IMP=0x0010000000028dd4
- (int)valueInt:(void *)arg1;	// IMP=0x0010000000028dc7
- (int)valueType:(void *)arg1;	// IMP=0x0010000000028dba
- (void)makeFunctionNamed:(id)arg1 arguments:(int)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000028cc4
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000028cb2
@property(nonatomic) _Bool shouldCacheStatements; // @synthesize shouldCacheStatements=_shouldCacheStatements;
- (_Bool)checkpoint:(int)arg1 name:(id)arg2 logFrameCount:(int *)arg3 checkpointCount:(int *)arg4 error:(id *)arg5;	// IMP=0x0010000000028aac
- (_Bool)checkpoint:(int)arg1 name:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000028a87
- (_Bool)checkpoint:(int)arg1 error:(id *)arg2;	// IMP=0x0010000000028a60
- (id)inSavePoint:(CDUnknownBlockType)arg1;	// IMP=0x00100000000288fa
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000287b7
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000028674
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000028531
- (_Bool)interrupt;	// IMP=0x0010000000028500
- (_Bool)inTransaction;	// IMP=0x00100000000284f7
- (_Bool)beginExclusiveTransaction;	// IMP=0x00100000000284c9
- (_Bool)beginImmediateTransaction;	// IMP=0x001000000002849b
- (_Bool)beginDeferredTransaction;	// IMP=0x001000000002846d
- (_Bool)beginTransaction;	// IMP=0x001000000002843f
- (_Bool)commit;	// IMP=0x0010000000028411
- (_Bool)rollback;	// IMP=0x00100000000283e3
- (id)prepare:(id)arg1;	// IMP=0x00100000000283b9
- (_Bool)update:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x001000000002830f
- (_Bool)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x0010000000028265
- (_Bool)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000002816d
- (_Bool)executeStatements:(id)arg1;	// IMP=0x0010000000028159
- (_Bool)executeUpdateWithFormat:(id)arg1;	// IMP=0x0010000000027e5b
- (_Bool)executeUpdate:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;	// IMP=0x0010000000027e34
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x0010000000027e09
- (_Bool)executeUpdate:(id)arg1 values:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000027dda
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x0010000000027daf
- (_Bool)executeUpdate:(id)arg1;	// IMP=0x0010000000027cff
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(struct __va_list_tag [1])arg5;	// IMP=0x0010000000027c60
- (id)executeQuery:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;	// IMP=0x0010000000027c36
- (id)executeQuery:(id)arg1 values:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000027bc2
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x0010000000027b9a
- (id)executeQueryWithFormat:(id)arg1;	// IMP=0x0010000000027a1e
- (id)executeQuery:(id)arg1;	// IMP=0x001000000002795e
- (_Bool)bindStatement:(struct sqlite3_stmt *)arg1 WithArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4;	// IMP=0x00100000000273ca
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4 shouldBind:(_Bool)arg5;	// IMP=0x001000000002704e
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x0010000000027024
- (void)extractSQL:(id)arg1 argumentsList:(struct __va_list_tag [1])arg2 intoString:(id)arg3 arguments:(id)arg4;	// IMP=0x001000000002680a
- (int)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;	// IMP=0x00100000000262a4
@property(readonly, nonatomic) int changes;
@property(readonly, nonatomic) long long lastInsertRowId;
- (id)lastError;	// IMP=0x00100000000261cf
- (id)errorWithMessage:(id)arg1;	// IMP=0x0010000000026148
- (int)lastExtendedErrorCode;	// IMP=0x001000000002613a
- (int)lastErrorCode;	// IMP=0x001000000002612c
- (_Bool)hadError;	// IMP=0x0010000000026111
- (id)lastErrorMessage;	// IMP=0x00100000000260e2
- (_Bool)databaseExists;	// IMP=0x0010000000026098
- (void)warnInUse;	// IMP=0x0010000000026061
@property(readonly, nonatomic) _Bool goodConnection;
- (id)stringFromDate:(id)arg1;	// IMP=0x0010000000025feb
- (id)dateFromString:(id)arg1;	// IMP=0x0010000000025fd5
- (void)setDateFormat:(id)arg1;	// IMP=0x0010000000025fc4
- (_Bool)hasDateFormatter;	// IMP=0x0010000000025fb6
- (_Bool)setKeyWithData:(id)arg1;	// IMP=0x0010000000025ee4
- (_Bool)setKey:(id)arg1;	// IMP=0x0010000000025e1f
- (_Bool)rekeyWithData:(id)arg1;	// IMP=0x0010000000025e17
- (_Bool)rekey:(id)arg1;	// IMP=0x0010000000025d52
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;	// IMP=0x0010000000025be4
- (id)cachedStatementForQuery:(id)arg1;	// IMP=0x0010000000025b3b
- (void)clearCachedStatements;	// IMP=0x00100000000258dc
- (void)resultSetDidClose:(id)arg1;	// IMP=0x0010000000025888
- (void)closeOpenResultSets;	// IMP=0x00100000000256aa
@property(readonly, nonatomic) _Bool hasOpenResultSets;
- (void)setBusyRetryTimeout:(int)arg1;	// IMP=0x001000000002565f
- (int)busyRetryTimeout;	// IMP=0x001000000002562c
@property(nonatomic) double maxBusyRetryTimeInterval; // @synthesize maxBusyRetryTimeInterval=_maxBusyRetryTimeInterval;
- (_Bool)close;	// IMP=0x001000000002547f
- (_Bool)openWithFlags:(int)arg1 vfs:(id)arg2;	// IMP=0x001000000002539f
- (_Bool)openWithFlags:(int)arg1;	// IMP=0x001000000002538b
- (_Bool)open;	// IMP=0x00100000000252f5
- (int)limitFor:(int)arg1 value:(int)arg2;	// IMP=0x00100000000252e3
- (const char *)sqlitePath;	// IMP=0x0010000000025291
@property(readonly, nonatomic) void *sqliteHandle;
@property(readonly, nonatomic) NSURL *databaseURL;
- (void)dealloc;	// IMP=0x0010000000024f94
- (id)initWithPath:(id)arg1;	// IMP=0x0010000000024ed0
- (id)initWithURL:(id)arg1;	// IMP=0x0010000000024e7a
- (id)init;	// IMP=0x0010000000024e66
- (_Bool)DELETE_FROM:(id)arg1 WHERE:(id)arg2;	// IMP=0x001000000001d59f
- (_Bool)INSERT_INTO:(id)arg1 VALUES:(id)arg2;	// IMP=0x001000000001d263
- (_Bool)UPDATE:(id)arg1 SET:(id)arg2 WHERE:(id)arg3;	// IMP=0x001000000001cf6f
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 JOIN:(id)arg3 WHERE:(id)arg4 GROUP_BY:(id)arg5 HAVING:(id)arg6 ORDER_BY:(id)arg7 LIMIT:(id)arg8;	// IMP=0x001000000001c863
- (id)_SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 JOIN:(id)arg3 WHERE:(id)arg4 GROUP_BY:(id)arg5 ORDER_BY:(id)arg6 LIMIT:(id)arg7;	// IMP=0x001000000001c345
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 WHERE:(id)arg3 GROUP_BY:(id)arg4;	// IMP=0x001000000001c315
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 JOIN:(id)arg3 WHERE:(id)arg4 ORDER_BY:(id)arg5 LIMIT:(id)arg6;	// IMP=0x001000000001c2e9
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 WHERE:(id)arg3 ORDER_BY:(id)arg4 LIMIT:(id)arg5;	// IMP=0x001000000001c2bf
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 WHERE:(id)arg3;	// IMP=0x001000000001c28e
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002a12f
- (_Bool)columnExists:(id)arg1 columnName:(id)arg2;	// IMP=0x001000000002a114
@property(nonatomic) unsigned int userVersion;
@property(nonatomic) unsigned int applicationID;
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;	// IMP=0x0010000000029db0
- (id)getTableSchema:(id)arg1;	// IMP=0x0010000000029d1b
- (id)getSchema;	// IMP=0x0010000000029d00
- (_Bool)tableExists:(id)arg1;	// IMP=0x0010000000029c73
- (id)dateForQuery:(id)arg1;	// IMP=0x0010000000029b49
- (id)dataForQuery:(id)arg1;	// IMP=0x0010000000029a1f
- (double)doubleForQuery:(id)arg1;	// IMP=0x00100000000298fc
- (_Bool)boolForQuery:(id)arg1;	// IMP=0x00100000000297de
- (long long)longForQuery:(id)arg1;	// IMP=0x00100000000296c0
- (int)intForQuery:(id)arg1;	// IMP=0x00100000000295a2
- (id)stringForQuery:(id)arg1;	// IMP=0x0010000000029478

@end

