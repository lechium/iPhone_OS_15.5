//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSDeviceConnectionInfo, IDSLinkManager, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface IDSUTunController : NSObject
{
    struct SimpleNSStringToObjectTable _deviceConnectionInfoTableByCbuuid;	// 8 = 0x8
    struct _opaque_pthread_mutex_t _deviceConnectionInfoTableByCbuuidLock;	// 32 = 0x20
    IDSLinkManager *_linkManager;	// 96 = 0x60
    _Bool _logPackets;	// 104 = 0x68
    _Bool _vifShouldReadMultiple;	// 105 = 0x69
    unsigned int _vifMaxPendingPackets;	// 108 = 0x6c
    _Bool _vifUseChannel;	// 112 = 0x70
    _Bool _hasFixedDestination;	// 113 = 0x71
    _Bool _encryptionEnabled;	// 114 = 0x72
    _Bool _controlChannelEncryptionDisabled;	// 115 = 0x73
    struct os_unfair_lock_s _controlChannelVersionCacheLock;	// 116 = 0x74
    NSMutableDictionary *_controlChannelVersionCache;	// 120 = 0x78
    _Bool _isSimulateResetLoopTest;	// 128 = 0x80
    NSObject<OS_dispatch_queue> *_ipsecQueue;	// 136 = 0x88
    _Bool _useBTDatagramPipe;	// 144 = 0x90
    _Bool _ignoreUTunChannelWriteSignal;	// 145 = 0x91
    IDSDeviceConnectionInfo *_testDeviceConnectionInfo;	// 152 = 0x98
}

+ (id)sharedInstance;	// IMP=0x002000000056c380
- (void).cxx_destruct;	// IMP=0x00200000005a8520
@property(readonly, nonatomic) IDSLinkManager *linkManager; // @synthesize linkManager=_linkManager;
- (void)onTransportThread_StopBTDatagramLinkForDefaultPairedDevice;	// IMP=0x00100000005a84c0
- (unsigned long long)onTransportThread_SendWithConnectionContext:(id)arg1 packetBuffer:(CDStruct_727fadec *)arg2;	// IMP=0x00100000005a82c0
- (void)clearStats;	// IMP=0x00100000005a8030
- (void)didUpdatePairedDevice:(id)arg1;	// IMP=0x00100000005a7920
- (void)didRemovePairedDevice:(id)arg1;	// IMP=0x00100000005a78e0
- (void)didAddPairedDevice:(id)arg1;	// IMP=0x00100000005a7880
- (void)link:(id)arg1 hasSpaceAvailable:(_Bool)arg2 deviceUniqueID:(id)arg3 cbuuid:(id)arg4;	// IMP=0x00100000005a77e0
- (void)link:(id)arg1 didDisconnectForDeviceUniqueID:(id)arg2 cbuuid:(id)arg3;	// IMP=0x00100000005a7420
- (void)link:(id)arg1 didConnectForDeviceUniqueID:(id)arg2 cbuuid:(id)arg3;	// IMP=0x00100000005a7390
- (_Bool)link:(id)arg1 didReceivePacket:(CDStruct_727fadec *)arg2 fromDeviceUniqueID:(id)arg3 cbuuid:(id)arg4;	// IMP=0x00100000005a6c60
- (void)sendSuspendOTRNegotiationMessage:(id)arg1;	// IMP=0x00100000005a6a00
- (void)sendOTRNegotiationMessage:(id)arg1 negotiationCount:(unsigned int)arg2 negotiationData:(id)arg3;	// IMP=0x00100000005a66e0
- (void)setLinkPreferences:(id)arg1;	// IMP=0x00100000005a6510
- (void)setPreferInfraWiFi:(_Bool)arg1;	// IMP=0x00100000005a6290
- (unsigned long long)totalPacketsReceivedForDevice:(id)arg1 services:(id)arg2;	// IMP=0x00100000005a5d70
- (unsigned long long)totalPacketsSentForDevice:(id)arg1 services:(id)arg2;	// IMP=0x00100000005a5850
- (id)perServiceDataReceivedForDevice:(id)arg1 services:(id)arg2;	// IMP=0x00100000005a4fd0
- (id)perServiceDataSentForDevice:(id)arg1 services:(id)arg2;	// IMP=0x00100000005a4750
- (id)perServiceDataTransferredForDevice:(id)arg1 services:(id)arg2;	// IMP=0x00100000005a4370
- (id)onTransportThread_PerServiceDataTransferredForDevice:(id)arg1 services:(id)arg2;	// IMP=0x00100000005a3890
- (id)copyLinkStatsDict;	// IMP=0x00100000005a3620
- (void)deletePairedDevice:(id)arg1;	// IMP=0x00100000005a3370
- (void)connectPairedDevice:(id)arg1;	// IMP=0x00100000005a30c0
- (void)addPairedDevice:(id)arg1 shouldPairDirectlyOverIPsec:(_Bool)arg2;	// IMP=0x00100000005a2de0
- (void)addPairedDevice:(id)arg1;	// IMP=0x00100000005a2d80
- (void)tearDownEncryptionForDeviceUniqueID:(id)arg1 cbuuid:(id)arg2;	// IMP=0x00100000005a2a80
- (void)obliterateConnectionInfoForCBUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 completionQueue:(id)arg3;	// IMP=0x00100000005a2360
- (void)obliterateConnectionInfoWithCompletionBlock:(CDUnknownBlockType)arg1 completionQueue:(id)arg2;	// IMP=0x00100000005a22d0
- (void)obliterateConnectionInfoForCBUUID:(id)arg1;	// IMP=0x00100000005a2150
- (void)startLocalSetup;	// IMP=0x00100000005a2090
- (unsigned long long)onTransportThread_createAliasForParticipantID:(unsigned long long)arg1 salt:(id)arg2 sessionID:(id)arg3 relayGroupID:(id)arg4 relaySessionID:(id)arg5;	// IMP=0x00100000005a1fa0
- (unsigned long long)onTransportThread_participantIDForAlias:(unsigned long long)arg1 salt:(id)arg2 sessionID:(id)arg3 relayGroupID:(id)arg4 relaySessionID:(id)arg5;	// IMP=0x00100000005a1eb0
- (void)onTransportThread_registerPluginForGroup:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 options:(id)arg4;	// IMP=0x00100000005a1dd0
- (void)onTransportThread_setUPlusOneModeForSessionID:(id)arg1 isUPlusOneEnabled:(_Bool)arg2;	// IMP=0x00100000005a1d60
- (void)onTransportThread_updateSessionURIToParticipantIDs:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 sessionInfo:(id)arg4;	// IMP=0x00100000005a1c80
- (void)onTransportThread_updateSessionParticipants:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 participants:(id)arg4;	// IMP=0x00100000005a1ba0
- (void)onTransportThread_getSessionInfo:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 options:(id)arg4;	// IMP=0x00100000005a1ac0
- (void)onTransportThread_setRemoteDeviceVersion:(id)arg1 version:(unsigned int)arg2;	// IMP=0x00100000005a1a50
- (void)onTransportThread_removeParticipantIDsWithSessionID:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 participantIDs:(id)arg4 sessionStateCounter:(unsigned int)arg5;	// IMP=0x00100000005a1970
- (void)onTransportThread_manageDesignatedDestinationsWithSessionID:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 destinations:(id)arg4 withType:(unsigned short)arg5 sessionStateCounter:(unsigned int)arg6;	// IMP=0x00100000005a1870
- (unsigned long long)onTransportThread_getLinkType:(id)arg1;	// IMP=0x00100000005a1810
- (void)onTransportThread_flushLinkProbingStatus:(id)arg1 options:(id)arg2;	// IMP=0x00100000005a1780
- (void)onTransportThread_queryLinkProbingStatus:(id)arg1 options:(id)arg2;	// IMP=0x00100000005a16f0
- (void)onTransportThread_stopLinkProbing:(id)arg1 options:(id)arg2;	// IMP=0x00100000005a1660
- (void)onTransportThread_startLinkProbing:(id)arg1 options:(id)arg2;	// IMP=0x00100000005a15d0
- (void)onTransportThread_CurrentCellularSignalStrength:(id)arg1 signalRaw:(int *)arg2 signalStrength:(int *)arg3 signalGrade:(int *)arg4;	// IMP=0x00100000005a14e0
- (void)onTransportThread_receiveJoinNotificationFromAParticipant:(id)arg1;	// IMP=0x00100000005a1480
- (void)onTransportThread_setWiFiAssistState:(id)arg1 isWiFiAssistEnabled:(_Bool)arg2;	// IMP=0x00100000005a1410
- (void)onTransportThread_StopKeepAlive:(id)arg1 linkIDs:(id)arg2;	// IMP=0x00100000005a1380
- (void)onTransportThread_UpdateProtocolQualityOfService:(id)arg1 linkID:(BOOL)arg2 isGood:(_Bool)arg3;	// IMP=0x00100000005a1300
- (void)onTransportThread_DropIPPackets:(id)arg1 linkID:(BOOL)arg2 payloadArray:(id)arg3;	// IMP=0x00100000005a1260
- (void)onTransportThread_SetPacketNotificationFilter:(id)arg1 linkID:(BOOL)arg2 uniqueTag:(unsigned int)arg3 isEnabled:(_Bool)arg4;	// IMP=0x00100000005a11d0
- (void)onTransportThread_SetDefaultUnderlyingLink:(id)arg1 linkID:(BOOL)arg2;	// IMP=0x00100000005a1160
- (void)onTransportThread_SendKeyMaterialMessage:(id)arg1 relayGroupID:(id)arg2 keyMaterialMessageData:(id)arg3 destinationURIs:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x00100000005a1050
- (void)onTransportThread_SendSKEData:(id)arg1 skeData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00100000005a0fa0
- (void)getLinkInformationForDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00100000005a0d50
- (void)handleAllocateRequestFailureForDevice:(id)arg1 requestID:(id)arg2 errorCode:(int)arg3;	// IMP=0x00100000005a0bc0
- (void)setTimeBase:(id)arg1 forIDSSession:(id)arg2;	// IMP=0x00100000005a0a50
- (void)setHasPendingAllocation:(_Bool)arg1 forIDSSession:(id)arg2;	// IMP=0x00100000005a0920
- (void)setAcceptedRelaySession:(id)arg1 relaySessionID:(id)arg2 options:(id)arg3;	// IMP=0x00100000005a0750
- (void)disconnectGlobalLinkForDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00100000005a04e0
- (void)connectGlobalLinkForDevice:(id)arg1 sessionInfo:(id)arg2 connectReadyHandler:(CDUnknownBlockType)arg3 withLocalInterfacePreference:(int)arg4;	// IMP=0x00100000005a0210
- (void)startGlobalLinkForDevice:(id)arg1;	// IMP=0x00100000005a00e0
- (unsigned long long)onTransportThread_SendToGlobalLinkWithSessionID:(id)arg1 packetBufferArray:(struct **)arg2 arraySize:(int)arg3;	// IMP=0x00100000005a0030
- (unsigned long long)onTransportThread_SendToGlobalLinkWithSessionID:(id)arg1 packetBuffer:(CDStruct_727fadec *)arg2;	// IMP=0x001000000059ff90
- (void)stopGlobalLinkForDevice:(id)arg1;	// IMP=0x001000000059fbf0
- (void)startConnectionForDevice:(id)arg1 isInitiator:(_Bool)arg2 remotePartyID:(id)arg3 useStunMICheck:(_Bool)arg4;	// IMP=0x001000000059fa20
- (void)processRemoteConnectionDataForDevice:(id)arg1 remoteConnectionData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000059f840
- (void)createConnectionDataForDevice:(id)arg1 localPartyID:(id)arg2 dataReadyHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000059f660
- (void)stopUDPGlobalLinkForDevice:(id)arg1;	// IMP=0x001000000059f2c0
- (void)startUDPGlobalLinkForDevice:(id)arg1;	// IMP=0x001000000059f190
- (void)releasePortIfNecessary:(struct IDSPortMap *)arg1 port:(unsigned short)arg2;	// IMP=0x001000000059f070
- (void)resumeSocketWithOptions:(id)arg1 shouldLogCall:(_Bool)arg2;	// IMP=0x001000000059e7c0
- (void)suspendSocketWithOptions:(id)arg1;	// IMP=0x001000000059e230
- (void)checkSuspendTrafficForDevice:(id)arg1 wait:(_Bool)arg2;	// IMP=0x001000000059de20
- (void)doCheckSuspendTrafficForDevice:(id)arg1;	// IMP=0x001000000059d730
- (void)closeSocketWithOptions:(id)arg1;	// IMP=0x001000000059d6d0
- (void)closeSocketWithOptions:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000059c8f0
- (void)cleanupSocketsForClient:(id)arg1;	// IMP=0x001000000059b740
- (void)openSocketWithOptions:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00100000005994d0
- (void)prepareDefaultPairedConnectionInfoWithDeviceUniqueID:(id)arg1 shouldUseIPsecLink:(_Bool)arg2;	// IMP=0x0010000000598cd0
- (id)_prepareConnectionInfoWithCBUUID:(id)arg1 deviceUniqueID:(id)arg2 shouldUseIPsecLink:(_Bool)arg3 identityPair:(id)arg4 remoteDeviceEncryptionInfo:(id)arg5;	// IMP=0x0010000000598a60
- (id)defaultPairedDeviceIdentityPair;	// IMP=0x0010000000598a00
- (void)closeDataConnectionWithDeviceConnectionInfo:(id)arg1 options:(id)arg2;	// IMP=0x00100000005981f0
- (void)setupDataConnectionWithDeviceConnectionInfo:(id)arg1 options:(id)arg2;	// IMP=0x0010000000594eb0
- (id)controlChannelVersionForCbuuid:(id)arg1;	// IMP=0x0010000000594df0
- (void)receiveControlChannelMessage:(id)arg1 fromCbuuid:(id)arg2 deviceUniqueID:(id)arg3;	// IMP=0x0010000000589850
- (id)stringComponentsForServiceConnectorService:(id)arg1;	// IMP=0x00100000005897d0
- (void)startCompressionForConnection:(id)arg1 deviceConnectionInfo:(id)arg2;	// IMP=0x00100000005886f0
- (int)processCompressionResponse:(id)arg1 fromDeviceConnectionInfo:(id)arg2;	// IMP=0x0010000000586c20
- (int)processCompressionRequest:(id)arg1 fromDeviceConnectionInfo:(id)arg2;	// IMP=0x0010000000584b30
- (void)internalOpenSocketWithDestination:(id)arg1 localSA:(id)arg2 remoteSA:(id)arg3 protocol:(int)arg4 trafficClass:(int)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x0010000000583e30
- (_Bool)handleIncomingPacket:(CDStruct_727fadec *)arg1 fromDeviceToken:(id)arg2;	// IMP=0x0010000000580130
- (void)resetAllConnectionsForDevice:(id)arg1;	// IMP=0x001000000057fd80
- (void)removeConnection:(id)arg1 fromDeviceConnectionInfo:(id)arg2 removeCode:(long long)arg3 removeReason:(id)arg4;	// IMP=0x001000000057f3e0
- (id)initWithName:(id)arg1 address:(id)arg2 andTestTransport:(id)arg3;	// IMP=0x001000000057f340
- (void)resetUTunTCPConnection:(id)arg1 forDeviceConnectionInfo:(id)arg2;	// IMP=0x001000000057ed30
- (void)resetIPsecTCPConnection:(id)arg1 forDeviceConnectionInfo:(id)arg2;	// IMP=0x001000000057eb40
- (void)resetTCPConnection:(id)arg1 forDeviceConnectionInfo:(id)arg2;	// IMP=0x001000000057ea80
- (void)startControlChannelWithDevice:(id)arg1 endpoint:(id)arg2;	// IMP=0x001000000057cfc0
- (void)didConnectControlChannelForDeviceConnectionInfo:(id)arg1 connection:(id)arg2 error:(id)arg3;	// IMP=0x001000000057b9c0
- (void)prepareControlChannelForDeviceConnectionInfo:(id)arg1 genericConnection:(id)arg2;	// IMP=0x001000000057b810
- (void)internalStartConnectionWithEndpoint:(id)arg1 service:(const char *)arg2 parameters:(id)arg3 serviceConnector:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x001000000057ae10
- (id)init;	// IMP=0x001000000057a7e0
- (id)setupNewDeviceConnectionInfoForCbuuid:(id)arg1 deviceUniqueID:(id)arg2 identityPair:(id)arg3 remoteDeviceEncryptionInfo:(id)arg4 shouldUseIPsecLink:(_Bool)arg5;	// IMP=0x0010000000578c80
- (_Bool)setupIPsecLinkForDeviceConnectionInfo:(id)arg1;	// IMP=0x0010000000578960
- (void)startDataChannelWithDevice:(id)arg1 genericConnection:(id)arg2 serviceConnectorService:(id)arg3 endpoint:(id)arg4;	// IMP=0x0010000000570150
- (_Bool)setupUTunForDeviceConnectionInfo:(id)arg1;	// IMP=0x001000000056f880
- (unsigned char)handleUtunChannelWrite:(id)arg1 source:(struct sockaddr *)arg2 destination:(struct sockaddr *)arg3 upperProtocol:(unsigned char)arg4 bytes:(const void *)arg5 bytesLen:(unsigned long long)arg6;	// IMP=0x001000000056f810
- (void)handleUtunChannelRead:(id)arg1 limit:(unsigned int)arg2;	// IMP=0x001000000056f7c0
- (void)handleIPPayload:(const void *)arg1 bytesLength:(unsigned long long)arg2 source:(struct sockaddr *)arg3 destination:(struct sockaddr *)arg4 upperProtocol:(unsigned char)arg5 forDeviceConnectionInfo:(id)arg6 flush:(_Bool)arg7 callerShouldStop:(_Bool *)arg8;	// IMP=0x001000000056f750
- (void)_getStallDetectorForConnection:(id)arg1 deviceConnecionInfo:(id)arg2;	// IMP=0x001000000056f020
- (void)_reloadSettings;	// IMP=0x001000000056f010
- (void)reloadSettings;	// IMP=0x001000000056ca10

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

